                      ORG $028000                               ;;  J |  U + SS / E0 \ E1 ;
                                                                ;;                        ;
DATA_028000:          db $80,$40,$20,$10,$08,$04,$02,$01        ;;8000|8000+8000/8000\8000;
                                                                ;;                        ;
CODE_028008:          PHX                                       ;;8008|8008+8008/8008\8008;
                      LDA.W !PlayerItembox                      ;;8009|8009+8009/8009\8009;
                      BEQ CODE_028070                           ;;800C|800C+800C/800C\800C;
                      STZ.W !PlayerItembox                      ;;800E|800E+800E/800E\800E;
                      PHA                                       ;;8011|8011+8011/8011\8011;
                      LDA.B #!SFX_ITEMDEPLOYED                  ;;8012|8012+8012/8012\8012; \ Play sound effect
                      STA.W !SPCIO3                             ;;8014|8014+8014/8014\8014; /
                      LDX.B #$0B                                ;;8017|8017+8017/8017\8017;
CODE_028019:          LDA.W !SpriteStatus,X                     ;;8019|8019+8019/8019\8019;
                      BEQ CODE_028042                           ;;801C|801C+801C/801C\801C;
                      DEX                                       ;;801E|801E+801E/801E\801E;
                      BPL CODE_028019                           ;;801F|801F+801F/801F\801F;
                      DEC.W !SpriteToOverwrite                  ;;8021|8021+8021/8021\8021;
                      BPL +                                     ;;8024|8024+8024/8024\8024;
                      LDA.B #$01                                ;;8026|8026+8026/8026\8026;
                      STA.W !SpriteToOverwrite                  ;;8028|8028+8028/8028\8028;
                    + LDA.W !SpriteToOverwrite                  ;;802B|802B+802B/802B\802B;
                      CLC                                       ;;802E|802E+802E/802E\802E;
                      ADC.B #$0A                                ;;802F|802F+802F/802F\802F;
                      TAX                                       ;;8031|8031+8031/8031\8031;
                      LDA.B !SpriteNumber,X                     ;;8032|8032+8032/8032\8032;
                      CMP.B #$7D                                ;;8034|8034+8034/8034\8034;
                      BNE CODE_028042                           ;;8036|8036+8036/8036\8036;
                      LDA.W !SpriteStatus,X                     ;;8038|8038+8038/8038\8038;
                      CMP.B #$0B                                ;;803B|803B+803B/803B\803B;
                      BNE CODE_028042                           ;;803D|803D+803D/803D\803D;
                      STZ.W !PBalloonInflating                  ;;803F|803F+803F/803F\803F;
CODE_028042:          LDA.B #$08                                ;;8042|8042+8042/8042\8042; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;8044|8044+8044/8044\8044; /
                      PLA                                       ;;8047|8047+8047/8047\8047;
                      CLC                                       ;;8048|8048+8048/8048\8048;
                      ADC.B #$73                                ;;8049|8049+8049/8049\8049;
                      STA.B !SpriteNumber,X                     ;;804B|804B+804B/804B\804B;
                      JSL InitSpriteTables                      ;;804D|804D+804D/804D\804D;
                      LDA.B #$78                                ;;8051|8051+8051/8051\8051;
                      CLC                                       ;;8053|8053+8053/8053\8053;
                      ADC.B !Layer1XPos                         ;;8054|8054+8054/8054\8054;
                      STA.B !SpriteXPosLow,X                    ;;8056|8056+8056/8056\8056;
                      LDA.B !Layer1XPos+1                       ;;8058|8058+8058/8058\8058;
                      ADC.B #$00                                ;;805A|805A+805A/805A\805A;
                      STA.W !SpriteXPosHigh,X                   ;;805C|805C+805C/805C\805C;
                      LDA.B #$20                                ;;805F|805F+805F/805F\805F;
                      CLC                                       ;;8061|8061+8061/8061\8061;
                      ADC.B !Layer1YPos                         ;;8062|8062+8062/8062\8062;
                      STA.B !SpriteYPosLow,X                    ;;8064|8064+8064/8064\8064;
                      LDA.B !Layer1YPos+1                       ;;8066|8066+8066/8066\8066;
                      ADC.B #$00                                ;;8068|8068+8068/8068\8068;
                      STA.W !SpriteYPosHigh,X                   ;;806A|806A+806A/806A\806A;
                      INC.W !SpriteMisc1534,X                   ;;806D|806D+806D/806D\806D;
CODE_028070:          PLX                                       ;;8070|8070+8070/8070\8070;
                      RTL                                       ;;8071|8071+8071/8071\8071; Return
                                                                ;;                        ;
                                                                ;;                        ;
BombExplosionX:       db $00,$08,$06,$FA,$F8,$06,$08,$00        ;;8072|8072+8072/8072\8072;
                      db $F8,$FA                                ;;807A|807A+807A/807A\807A;
                                                                ;;                        ;
BombExplosionY:       db $F8,$FE,$06,$06,$FE,$FA,$02,$08        ;;807C|807C+807C/807C\807C;
                      db $02,$FA                                ;;8084|8084+8084/8084\8084;
                                                                ;;                        ;
ExplodeBombRt:        JSR ExplodeBombSubRt                      ;;8086|8086+8086/8086\8086;BOMB
                      RTL                                       ;;8089|8089+8089/8089\8089; Return
                                                                ;;                        ;
ExplodeBombSubRt:     STZ.W !SpriteTweaker1656,X                ;;808A|808A+808A/808A\808A; Make sprite unstompable
                      LDA.B #$11                                ;;808D|808D+808D/808D\808D; \ Set new clipping area for explosion
                      STA.W !SpriteTweaker1662,X                ;;808F|808F+808F/808F\808F; /
                      JSR GetDrawInfo2                          ;;8092|8092+8092/8092\8092;
                      LDA.B !SpriteLock                         ;;8095|8095+8095/8095\8095; \ Increase frame count if sprites not locked
                      BNE +                                     ;;8097|8097+8097/8097\8097;  |
                      INC.W !SpriteMisc1570,X                   ;;8099|8099+8099/8099\8099; /
                    + LDA.W !SpriteMisc1540,X                   ;;809C|809C+809C/809C\809C; \ When timer is up free up sprite slot
                      BNE +                                     ;;809F|809F+809F/809F\809F;  |
                      STZ.W !SpriteStatus,X                     ;;80A1|80A1+80A1/80A1\80A1; /
                      RTS                                       ;;80A4|80A4+80A4/80A4\80A4; Return
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,X                   ;;80A5|80A5+80A5/80A5\80A5;
                      LSR A                                     ;;80A8|80A8+80A8/80A8\80A8;
                      AND.B #$03                                ;;80A9|80A9+80A9/80A9\80A9;
                      CMP.B #$03                                ;;80AB|80AB+80AB/80AB\80AB;
                      BNE +                                     ;;80AD|80AD+80AD/80AD\80AD;
                      JSR ExplodeSprites                        ;;80AF|80AF+80AF/80AF\80AF;
                      LDA.W !SpriteMisc1540,X                   ;;80B2|80B2+80B2/80B2\80B2;
                      SEC                                       ;;80B5|80B5+80B5/80B5\80B5;
                      SBC.B #$10                                ;;80B6|80B6+80B6/80B6\80B6;
                      CMP.B #$20                                ;;80B8|80B8+80B8/80B8\80B8;
                      BCS +                                     ;;80BA|80BA+80BA/80BA\80BA;
                      JSL MarioSprInteract                      ;;80BC|80BC+80BC/80BC\80BC;
                    + LDY.B #$04                                ;;80C0|80C0+80C0/80C0\80C0;
                      STY.B !_F                                 ;;80C2|80C2+80C2/80C2\80C2;
CODE_0280C4:          LDA.W !SpriteMisc1540,X                   ;;80C4|80C4+80C4/80C4\80C4;
                      LSR A                                     ;;80C7|80C7+80C7/80C7\80C7;
                      PHA                                       ;;80C8|80C8+80C8/80C8\80C8;
                      AND.B #$03                                ;;80C9|80C9+80C9/80C9\80C9;
                      STA.B !_2                                 ;;80CB|80CB+80CB/80CB\80CB;
                      LDA.B !SpriteXPosLow,X                    ;;80CD|80CD+80CD/80CD\80CD;
                      SEC                                       ;;80CF|80CF+80CF/80CF\80CF;
                      SBC.B !Layer1XPos                         ;;80D0|80D0+80D0/80D0\80D0;
                      CLC                                       ;;80D2|80D2+80D2/80D2\80D2;
                      ADC.B #$04                                ;;80D3|80D3+80D3/80D3\80D3;
                      STA.B !_0                                 ;;80D5|80D5+80D5/80D5\80D5;
                      LDA.B !SpriteYPosLow,X                    ;;80D7|80D7+80D7/80D7\80D7;
                      SEC                                       ;;80D9|80D9+80D9/80D9\80D9;
                      SBC.B !Layer1YPos                         ;;80DA|80DA+80DA/80DA\80DA;
                      CLC                                       ;;80DC|80DC+80DC/80DC\80DC;
                      ADC.B #$04                                ;;80DD|80DD+80DD/80DD\80DD;
                      STA.B !_1                                 ;;80DF|80DF+80DF/80DF\80DF;
                      LDY.B !_F                                 ;;80E1|80E1+80E1/80E1\80E1;
                      PLA                                       ;;80E3|80E3+80E3/80E3\80E3;
                      AND.B #$04                                ;;80E4|80E4+80E4/80E4\80E4;
                      BEQ CODE_0280ED                           ;;80E6|80E6+80E6/80E6\80E6;
                      TYA                                       ;;80E8|80E8+80E8/80E8\80E8;
                      CLC                                       ;;80E9|80E9+80E9/80E9\80E9;
                      ADC.B #$05                                ;;80EA|80EA+80EA/80EA\80EA;
                      TAY                                       ;;80EC|80EC+80EC/80EC\80EC;
CODE_0280ED:          LDA.B !_0                                 ;;80ED|80ED+80ED/80ED\80ED;
                      CLC                                       ;;80EF|80EF+80EF/80EF\80EF;
                      ADC.W BombExplosionX,Y                    ;;80F0|80F0+80F0/80F0\80F0;
                      STA.B !_0                                 ;;80F3|80F3+80F3/80F3\80F3;
                      LDA.B !_1                                 ;;80F5|80F5+80F5/80F5\80F5;
                      CLC                                       ;;80F7|80F7+80F7/80F7\80F7;
                      ADC.W BombExplosionY,Y                    ;;80F8|80F8+80F8/80F8\80F8;
                      STA.B !_1                                 ;;80FB|80FB+80FB/80FB\80FB;
                      DEC.B !_2                                 ;;80FD|80FD+80FD/80FD\80FD;
                      BPL CODE_0280ED                           ;;80FF|80FF+80FF/80FF\80FF;
                      LDA.B !_F                                 ;;8101|8101+8101/8101\8101;
                      ASL A                                     ;;8103|8103+8103/8103\8103;
                      ASL A                                     ;;8104|8104+8104/8104\8104;
                      ADC.W !SpriteOAMIndex,X                   ;;8105|8105+8105/8105\8105;
                      TAY                                       ;;8108|8108+8108/8108\8108;
                      LDA.B !_0                                 ;;8109|8109+8109/8109\8109;
                      STA.W !OAMTileXPos+$100,Y                 ;;810B|810B+810B/810B\810B;
                      LDA.B !_1                                 ;;810E|810E+810E/810E\810E;
                      STA.W !OAMTileYPos+$100,Y                 ;;8110|8110+8110/8110\8110;
                      LDA.B #$BC                                ;;8113|8113+8113/8113\8113;
                      STA.W !OAMTileNo+$100,Y                   ;;8115|8115+8115/8115\8115;
                      LDA.B !TrueFrame                          ;;8118|8118+8118/8118\8118;
                      LSR A                                     ;;811A|811A+811A/811A\811A;
                      LSR A                                     ;;811B|811B+811B/811B\811B;
                      AND.B #$03                                ;;811C|811C+811C/811C\811C;
                      SEC                                       ;;811E|811E+811E/811E\811E;
                      ROL A                                     ;;811F|811F+811F/811F\811F;
                      ORA.B !SpriteProperties                   ;;8120|8120+8120/8120\8120;
                      STA.W !OAMTileAttr+$100,Y                 ;;8122|8122+8122/8122\8122;
                      TYA                                       ;;8125|8125+8125/8125\8125;
                      LSR A                                     ;;8126|8126+8126/8126\8126;
                      LSR A                                     ;;8127|8127+8127/8127\8127;
                      TAY                                       ;;8128|8128+8128/8128\8128;
                      LDA.B #$00                                ;;8129|8129+8129/8129\8129;
                      STA.W !OAMTileSize+$40,Y                  ;;812B|812B+812B/812B\812B;
                      DEC.B !_F                                 ;;812E|812E+812E/812E\812E;
                      BPL CODE_0280C4                           ;;8130|8130+8130/8130\8130;
                      LDY.B #$00                                ;;8132|8132+8132/8132\8132;
                      LDA.B #$04                                ;;8134|8134+8134/8134\8134;
                      JMP CallFinOAMWriteBank2                  ;;8136|8136+8136/8136\8136;
                                                                ;;                        ;
ExplodeSprites:       LDY.B #$09                                ;;8139|8139+8139/8139\8139; \ Loop over sprites:
ExplodeLoopStart:     CPY.W !CurSpriteProcess                   ;;813B|813B+813B/813B\813B;  | Don't attempt to kill self
                      BEQ CODE_02814C                           ;;813E|813E+813E/813E\813E;  |
                      PHY                                       ;;8140|8140+8140/8140\8140;  |
                      LDA.W !SpriteStatus,Y                     ;;8141|8141+8141/8141\8141;  | Skip sprite if it's already dying/dead
                      CMP.B #$08                                ;;8144|8144+8144/8144\8144;  |
                      BCC +                                     ;;8146|8146+8146/8146\8146;  |
                      JSR ExplodeKillSpr                        ;;8148|8148+8148/8148\8148;  | Check for contact
                    + PLY                                       ;;814B|814B+814B/814B\814B;  |
CODE_02814C:          DEY                                       ;;814C|814C+814C/814C\814C;  | Next
                      BPL ExplodeLoopStart                      ;;814D|814D+814D/814D\814D; /
                      RTS                                       ;;814F|814F+814F/814F\814F; Return
                                                                ;;                        ;
ExplodeKillSpr:       PHX                                       ;;8150|8150+8150/8150\8150;
                      TYX                                       ;;8151|8151+8151/8151\8151; \ Return if no sprite contact
                      JSL GetSpriteClippingB                    ;;8152|8152+8152/8152\8152;  |
                      PLX                                       ;;8156|8156+8156/8156\8156;  |
                      JSL GetSpriteClippingA                    ;;8157|8157+8157/8157\8157;  |
                      JSL CheckForContact                       ;;815B|815B+815B/815B\815B;  |
                      BCC +                                     ;;815F|815F+815F/815F\815F; /
                      LDA.W !SpriteTweaker167A,Y                   ;;8161|8161+8161/8161\8161; \ Return if sprite is invincible
                      AND.B #$02                                ;;8164|8164+8164/8164\8164;  | to explosions
                      BNE +                                     ;;8166|8166+8166/8166\8166; /
                      LDA.B #$02                                ;;8168|8168+8168/8168\8168; \ Sprite status = Killed
                      STA.W !SpriteStatus,Y                     ;;816A|816A+816A/816A\816A; /
                      LDA.B #$C0                                ;;816D|816D+816D/816D\816D; \ Sprite Y speed = #$C0
                      STA.W !SpriteYSpeed,Y                     ;;816F|816F+816F/816F\816F; /
                      LDA.B #$00                                ;;8172|8172+8172/8172\8172; \ Sprite X speed = #$00
                      STA.W !SpriteXSpeed,Y                     ;;8174|8174+8174/8174\8174; /
                    + RTS                                       ;;8177|8177+8177/8177\8177; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028178:          db $F8,$38,$78,$B8,$00,$10,$20,$D0        ;;8178|8178+8178/8178\8178;
                      db $E0,$10,$40,$80,$C0,$10,$10,$20        ;;8180|8180+8180/8180\8180;
                      db $B0,$20,$50,$60,$C0,$F0,$80,$B0        ;;8188|8188+8188/8188\8188;
                      db $20,$60,$A0,$E0,$70,$F0,$70,$B0        ;;8190|8190+8190/8190\8190;
                      db $F0,$10,$20,$50,$60,$90,$A0,$D0        ;;8198|8198+8198/8198\8198;
                      db $E0,$10,$20,$50,$60,$90,$A0,$D0        ;;81A0|81A0+81A0/81A0\81A0;
                      db $E0,$10,$20,$50,$60,$90,$A0,$D0        ;;81A8|81A8+81A8/81A8\81A8;
                      db $E0,$50,$60,$C0,$D0,$30,$40,$70        ;;81B0|81B0+81B0/81B0\81B0;
                      db $80,$B0,$C0,$30,$40,$70,$80,$B0        ;;81B8|81B8+81B8/81B8\81B8;
                      db $C0,$40,$50,$80,$90,$C8,$D8,$30        ;;81C0|81C0+81C0/81C0\81C0;
                      db $40,$A0,$B0,$58,$68,$B0,$C0            ;;81C8|81C8+81C8/81C8\81C8;
                                                                ;;                        ;
DATA_0281CF:          db $70,$70,$70,$70,$20,$20,$20,$20        ;;81CF|81CF+81CF/81CF\81CF;
                      db $20,$30,$30,$30,$30,$70,$80,$80        ;;81D7|81D7+81D7/81D7\81D7;
                      db $80,$90,$90,$90,$A0,$50,$60,$60        ;;81DF|81DF+81DF/81DF\81DF;
                      db $70,$70,$70,$70,$60,$60,$70,$70        ;;81E7|81E7+81E7/81E7\81E7;
                      db $70,$40,$40,$40,$40,$40,$40,$40        ;;81EF|81EF+81EF/81EF\81EF;
                      db $40,$50,$50,$50,$50,$50,$50,$50        ;;81F7|81F7+81F7/81F7\81F7;
                      db $50,$60,$60,$60,$60,$60,$60,$60        ;;81FF|81FF+81FF/81FF\81FF;
                      db $60,$30,$30,$30,$30,$48,$48,$48        ;;8207|8207+8207/8207\8207;
                      db $48,$48,$48,$58,$58,$58,$58,$58        ;;820F|820F+820F/820F\820F;
                      db $58,$70,$70,$78,$78,$70,$70,$80        ;;8217|8217+8217/8217\8217;
                      db $80,$88,$88,$A0,$A0,$A0,$A0            ;;821F|821F+821F/821F\821F;
                                                                ;;                        ;
DATA_028226:          db $E8,$E8,$E8,$E8,$E4,$E4,$E4,$E4        ;;8226|8226+8226/8226\8226;
                      db $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4        ;;822E|822E+822E/822E\822E;
                      db $E4,$E4,$E4,$E4,$E4,$E4,$E4,$E4        ;;8236|8236+8236/8236\8236;
                      db $E4,$E4,$E4,$E4,$EE,$EE,$EE,$EE        ;;823E|823E+823E/823E\823E;
                      db $EE,$C0,$C2,$C0,$C2,$C0,$C2,$C0        ;;8246|8246+8246/8246\8246;
                      db $C2,$E0,$E2,$E0,$E2,$E0,$E2,$E0        ;;824E|824E+824E/824E\824E;
                      db $E2,$C4,$A4,$C4,$A4,$C4,$A4,$C4        ;;8256|8256+8256/8256\8256;
                      db $A4,$CC,$CE,$CC,$CE,$C8,$CA,$C8        ;;825E|825E+825E/825E\825E;
                      db $CA,$C8,$CA,$CA,$C8,$CA,$C8,$CA        ;;8266|8266+8266/8266\8266;
                      db $C8,$CC,$CE,$CC,$CE,$CC,$CE,$CC        ;;826E|826E+826E/826E\826E;
                      db $CE,$CC,$CE,$CC,$CE,$CC,$CE            ;;8276|8276+8276/8276\8276;
                                                                ;;                        ;
CODE_02827D:          LDA.B !Layer1XPos                         ;;827D|827D+827D/827D\827D;
                      STA.W !BossBGSpriteXCalc                  ;;827F|827F+827F/827F\827F;
                      EOR.B #$FF                                ;;8282|8282+8282/8282\8282;
                      INC A                                     ;;8284|8284+8284/8284\8284;
                      STA.B !_5                                 ;;8285|8285+8285/8285\8285;
                      LDA.B !Layer1XPos+1                       ;;8287|8287+8287/8287\8287;
                      LSR A                                     ;;8289|8289+8289/8289\8289;
                      ROR.W !BossBGSpriteXCalc                  ;;828A|828A+828A/828A\828A;
                      PHA                                       ;;828D|828D+828D/828D\828D;
                      LDA.W !BossBGSpriteXCalc                  ;;828E|828E+828E/828E\828E;
                      EOR.B #$FF                                ;;8291|8291+8291/8291\8291;
                      INC A                                     ;;8293|8293+8293/8293\8293;
                      STA.B !_6                                 ;;8294|8294+8294/8294\8294;
                      PLA                                       ;;8296|8296+8296/8296\8296;
                      LSR A                                     ;;8297|8297+8297/8297\8297;
                      ROR.W !BossBGSpriteXCalc                  ;;8298|8298+8298/8298\8298;
                      LDA.W !BossBGSpriteXCalc                  ;;829B|829B+829B/829B\829B;
                      EOR.B #$FF                                ;;829E|829E+829E/829E\829E;
                      INC A                                     ;;82A0|82A0+82A0/82A0\82A0;
                      STA.W !BossBGSpriteXCalc                  ;;82A1|82A1+82A1/82A1\82A1;
                      REP #$10                                  ;;82A4|82A4+82A4/82A4\82A4; Index (16 bit)
                      LDY.W #$0164                              ;;82A6|82A6+82A6/82A6\82A6;
                      LDA.B #$66                                ;;82A9|82A9+82A9/82A9\82A9;
                      STY.B !_3                                 ;;82AB|82AB+82AB/82AB\82AB;
                      LDA.B #$F0                                ;;82AD|82AD+82AD/82AD\82AD;
                    - STA.W !OAMTileYPos+$0C,Y                  ;;82AF|82AF+82AF/82AF\82AF;
                      INY                                       ;;82B2|82B2+82B2/82B2\82B2;
                      INY                                       ;;82B3|82B3+82B3/82B3\82B3;
                      INY                                       ;;82B4|82B4+82B4/82B4\82B4;
                      INY                                       ;;82B5|82B5+82B5/82B5\82B5;
                      CPY.W #$018C                              ;;82B6|82B6+82B6/82B6\82B6;
                      BCC -                                     ;;82B9|82B9+82B9/82B9\82B9;
                      LDX.W #$0000                              ;;82BB|82BB+82BB/82BB\82BB;
                      STX.B !_C                                 ;;82BE|82BE+82BE/82BE\82BE;
                      LDX.W #$0038                              ;;82C0|82C0+82C0/82C0\82C0;
                      LDY.W #$00E0                              ;;82C3|82C3+82C3/82C3\82C3;
                      LDA.W !SpriteMisc187B+9                   ;;82C6|82C6+82C6/82C6\82C6;
                      CMP.B #$01                                ;;82C9|82C9+82C9/82C9\82C9;
                      BNE CODE_0282D8                           ;;82CB|82CB+82CB/82CB\82CB;
                      LDX.W #$0039                              ;;82CD|82CD+82CD/82CD\82CD;
                      STX.B !_C                                 ;;82D0|82D0+82D0/82D0\82D0;
                      LDX.W #$001D                              ;;82D2|82D2+82D2/82D2\82D2;
                      LDY.W #$00FC                              ;;82D5|82D5+82D5/82D5\82D5;
CODE_0282D8:          STX.B !_0                                 ;;82D8|82D8+82D8/82D8\82D8;
                      REP #$20                                  ;;82DA|82DA+82DA/82DA\82DA; Accum (16 bit)
                      TXA                                       ;;82DC|82DC+82DC/82DC\82DC;
                      CLC                                       ;;82DD|82DD+82DD/82DD\82DD;
                      ADC.B !_C                                 ;;82DE|82DE+82DE/82DE\82DE;
                      STA.B !_A                                 ;;82E0|82E0+82E0/82E0\82E0;
                      SEP #$20                                  ;;82E2|82E2+82E2/82E2\82E2; Accum (8 bit)
                      LDA.B !_6                                 ;;82E4|82E4+82E4/82E4\82E4;
                      CLC                                       ;;82E6|82E6+82E6/82E6\82E6;
                      LDX.B !_A                                 ;;82E7|82E7+82E7/82E7\82E7;
                      ADC.L DATA_028178,X                       ;;82E9|82E9+82E9/82E9\82E9;
                      STA.W !OAMTileXPos+$0C,Y                  ;;82ED|82ED+82ED/82ED\82ED;
                      STA.B !_2                                 ;;82F0|82F0+82F0/82F0\82F0;
                      LDA.W !ScreenShakeYOffset                 ;;82F2|82F2+82F2/82F2\82F2;
                      STA.B !_7                                 ;;82F5|82F5+82F5/82F5\82F5;
                      ASL A                                     ;;82F7|82F7+82F7/82F7\82F7;
                      ROR.B !_7                                 ;;82F8|82F8+82F8/82F8\82F8;
                      LDA.L DATA_0281CF,X                       ;;82FA|82FA+82FA/82FA\82FA;
                      DEC A                                     ;;82FE|82FE+82FE/82FE\82FE;
                      SEC                                       ;;82FF|82FF+82FF/82FF\82FF;
                      SBC.B !_7                                 ;;8300|8300+8300/8300\8300;
                      STA.W !OAMTileYPos+$0C,Y                  ;;8302|8302+8302/8302\8302;
                      LDX.B !_A                                 ;;8305|8305+8305/8305\8305;
                      LDA.W !BossBGSpriteUpdate                 ;;8307|8307+8307/8307\8307;
                      BNE +                                     ;;830A|830A+830A/830A\830A;
                      LDA.L DATA_028226,X                       ;;830C|830C+830C/830C\830C;
                      STA.W !OAMTileNo+$0C,Y                    ;;8310|8310+8310/8310\8310;
                      LDA.B #$0D                                ;;8313|8313+8313/8313\8313;
                      STA.W !OAMTileAttr+$0C,Y                  ;;8315|8315+8315/8315\8315;
                    + REP #$20                                  ;;8318|8318+8318/8318\8318; Accum (16 bit)
                      PHY                                       ;;831A|831A+831A/831A\831A;
                      TYA                                       ;;831B|831B+831B/831B\831B;
                      LSR A                                     ;;831C|831C+831C/831C\831C;
                      LSR A                                     ;;831D|831D+831D/831D\831D;
                      TAY                                       ;;831E|831E+831E/831E\831E;
                      SEP #$20                                  ;;831F|831F+831F/831F\831F; Accum (8 bit)
                      LDA.B #$02                                ;;8321|8321+8321/8321\8321;
                      STA.W !OAMTileSize+3,Y                    ;;8323|8323+8323/8323\8323;
                      LDA.B !_2                                 ;;8326|8326+8326/8326\8326;
                      CMP.B #$F0                                ;;8328|8328+8328/8328\8328;
                      BCC +                                     ;;832A|832A+832A/832A\832A;
                      LDA.W !SpriteMisc187B+9                   ;;832C|832C+832C/832C\832C;
                      CMP.B #$01                                ;;832F|832F+832F/832F\832F;
                      BEQ +                                     ;;8331|8331+8331/8331\8331;
                      PLY                                       ;;8333|8333+8333/8333\8333;
                      PHY                                       ;;8334|8334+8334/8334\8334;
                      LDX.B !_3                                 ;;8335|8335+8335/8335\8335;
                      LDA.W !OAMTileXPos+$0C,Y                  ;;8337|8337+8337/8337\8337;
                      STA.W !OAMTileXPos+$0C,X                  ;;833A|833A+833A/833A\833A;
                      LDA.W !OAMTileYPos+$0C,Y                  ;;833D|833D+833D/833D\833D;
                      STA.W !OAMTileYPos+$0C,X                  ;;8340|8340+8340/8340\8340;
                      LDA.W !OAMTileNo+$0C,Y                    ;;8343|8343+8343/8343\8343;
                      STA.W !OAMTileNo+$0C,X                    ;;8346|8346+8346/8346\8346;
                      LDA.W !OAMTileAttr+$0C,Y                  ;;8349|8349+8349/8349\8349;
                      STA.W !OAMTileAttr+$0C,X                  ;;834C|834C+834C/834C\834C;
                      REP #$20                                  ;;834F|834F+834F/834F\834F; Accum (16 bit)
                      TXA                                       ;;8351|8351+8351/8351\8351;
                      LSR A                                     ;;8352|8352+8352/8352\8352;
                      LSR A                                     ;;8353|8353+8353/8353\8353;
                      TAY                                       ;;8354|8354+8354/8354\8354;
                      SEP #$20                                  ;;8355|8355+8355/8355\8355; Accum (8 bit)
                      LDA.B #$03                                ;;8357|8357+8357/8357\8357;
                      STA.W !OAMTileSize+3,Y                    ;;8359|8359+8359/8359\8359;
                      LDA.B !_3                                 ;;835C|835C+835C/835C\835C;
                      CLC                                       ;;835E|835E+835E/835E\835E;
                      ADC.B #$04                                ;;835F|835F+835F/835F\835F;
                      STA.B !_3                                 ;;8361|8361+8361/8361\8361;
                      BCC +                                     ;;8363|8363+8363/8363\8363;
                      INC.B !_4                                 ;;8365|8365+8365/8365\8365;
                    + PLY                                       ;;8367|8367+8367/8367\8367;
                      LDX.B !_0                                 ;;8368|8368+8368/8368\8368;
                      DEY                                       ;;836A|836A+836A/836A\836A;
                      DEY                                       ;;836B|836B+836B/836B\836B;
                      DEY                                       ;;836C|836C+836C/836C\836C;
                      DEY                                       ;;836D|836D+836D/836D\836D;
                      DEX                                       ;;836E|836E+836E/836E\836E;
                      BMI +                                     ;;836F|836F+836F/836F\836F;
                      JMP CODE_0282D8                           ;;8371|8371+8371/8371\8371;
                                                                ;;                        ;
                    + SEP #$10                                  ;;8374|8374+8374/8374\8374; Index (8 bit)
                      LDA.B #$01                                ;;8376|8376+8376/8376\8376;
                      STA.W !BossBGSpriteUpdate                 ;;8378|8378+8378/8378\8378;
                      LDA.W !SpriteMisc187B+9                   ;;837B|837B+837B/837B\837B;
                      CMP.B #$01                                ;;837E|837E+837E/837E\837E;
                      BNE CODE_028398                           ;;8380|8380+8380/8380\8380;
                      LDA.B #$CD                                ;;8382|8382+8382/8382\8382;
                      STA.W !OAMTileAttr+$BC                    ;;8384|8384+8384/8384\8384;
                      STA.W !OAMTileAttr+$C0                    ;;8387|8387+8387/8387\8387;
                      STA.W !OAMTileAttr+$C4                    ;;838A|838A+838A/838A\838A;
                      STA.W !OAMTileAttr+$C8                    ;;838D|838D+838D/838D\838D;
                      STA.W !OAMTileAttr+$CC                    ;;8390|8390+8390/8390\8390;
                      STA.W !OAMTileAttr+$D0                    ;;8393|8393+8393/8393\8393;
                      BRA CODE_0283C4                           ;;8396|8396+8396/8396\8396;
                                                                ;;                        ;
CODE_028398:          LDA.B !EffFrame                           ;;8398|8398+8398/8398\8398;
                      AND.B #$03                                ;;839A|839A+839A/839A\839A;
                      BNE CODE_0283C4                           ;;839C|839C+839C/839C\839C;
                      STZ.B !_0                                 ;;839E|839E+839E/839E\839E;
CODE_0283A0:          LDX.B !_0                                 ;;83A0|83A0+83A0/83A0\83A0;
                      LDA.L DATA_0283C8,X                       ;;83A2|83A2+83A2/83A2\83A2;
                      TAY                                       ;;83A6|83A6+83A6/83A6\83A6;
                      JSL GetRand                               ;;83A7|83A7+83A7/83A7\83A7;
                      AND.B #$01                                ;;83AB|83AB+83AB/83AB\83AB;
                      BNE +                                     ;;83AD|83AD+83AD/83AD\83AD;
                      LDA.W !OAMTileNo+$0C,Y                    ;;83AF|83AF+83AF/83AF\83AF;
                      EOR.B #$02                                ;;83B2|83B2+83B2/83B2\83B2;
                      STA.W !OAMTileNo+$0C,Y                    ;;83B4|83B4+83B4/83B4\83B4;
                    + LDA.B #$09                                ;;83B7|83B7+83B7/83B7\83B7;
                      STA.W !OAMTileAttr+$0C,Y                  ;;83B9|83B9+83B9/83B9\83B9;
                      INC.B !_0                                 ;;83BC|83BC+83BC/83BC\83BC;
                      LDA.B !_0                                 ;;83BE|83BE+83BE/83BE\83BE;
                      CMP.B #$04                                ;;83C0|83C0+83C0/83C0\83C0;
                      BNE CODE_0283A0                           ;;83C2|83C2+83C2/83C2\83C2;
CODE_0283C4:          JSR CODE_0283CE                           ;;83C4|83C4+83C4/83C4\83C4;
                      RTL                                       ;;83C7|83C7+83C7/83C7\83C7; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0283C8:          db $00,$04,$08,$0C                        ;;83C8|83C8+83C8/83C8\83C8;
                                                                ;;                        ;
DATA_0283CC:          db $0C,$30                                ;;83CC|83CC+83CC/83CC\83CC;
                                                                ;;                        ;
CODE_0283CE:          LDA.W !SpriteMisc1534+9                   ;;83CE|83CE+83CE/83CE\83CE;
                      SEC                                       ;;83D1|83D1+83D1/83D1\83D1;
                      SBC.B #$1E                                ;;83D2|83D2+83D2/83D2\83D2;
                      STA.B !_C                                 ;;83D4|83D4+83D4/83D4\83D4;
                      LDA.W !SpriteMisc160E+9                   ;;83D6|83D6+83D6/83D6\83D6;
                      CLC                                       ;;83D9|83D9+83D9/83D9\83D9;
                      ADC.B #$10                                ;;83DA|83DA+83DA/83DA\83DA;
                      STA.B !_D                                 ;;83DC|83DC+83DC/83DC\83DC;
                      LDX.B #$01                                ;;83DE|83DE+83DE/83DE\83DE;
CODE_0283E0:          STX.B !_F                                 ;;83E0|83E0+83E0/83E0\83E0;
                      LDA.W !BossPillarFalling,X                ;;83E2|83E2+83E2/83E2\83E2;
                      BEQ CODE_0283F4                           ;;83E5|83E5+83E5/83E5\83E5;
                      BMI +                                     ;;83E7|83E7+83E7/83E7\83E7;
                      STA.W !PlayerIsFrozen                     ;;83E9|83E9+83E9/83E9\83E9;
                      STA.B !SpriteLock                         ;;83EC|83EC+83EC/83EC\83EC;
                      JSR CODE_0283F8                           ;;83EE|83EE+83EE/83EE\83EE;
                    + JSR CODE_028439                           ;;83F1|83F1+83F1/83F1\83F1;
CODE_0283F4:          DEX                                       ;;83F4|83F4+83F4/83F4\83F4;
                      BPL CODE_0283E0                           ;;83F5|83F5+83F5/83F5\83F5;
                      RTS                                       ;;83F7|83F7+83F7/83F7\83F7; Return
                                                                ;;                        ;
CODE_0283F8:          LDA.W !BossPillarYPos,X                   ;;83F8|83F8+83F8/83F8\83F8;
                      LSR A                                     ;;83FB|83FB+83FB/83FB\83FB;
                      LSR A                                     ;;83FC|83FC+83FC/83FC\83FC;
                      LSR A                                     ;;83FD|83FD+83FD/83FD\83FD;
                      LSR A                                     ;;83FE|83FE+83FE/83FE\83FE;
                      LSR A                                     ;;83FF|83FF+83FF/83FF\83FF;
                      SEC                                       ;;8400|8400+8400/8400\8400;
                      ADC.W !BossPillarYPos,X                   ;;8401|8401+8401/8401\8401;
                      CMP.B #$B0                                ;;8404|8404+8404/8404\8404;
                      BCC CODE_028435                           ;;8406|8406+8406/8406\8406;
                      ASL.W !BossPillarFalling,X                ;;8408|8408+8408/8408\8408;
                      SEC                                       ;;840B|840B+840B/840B\840B;
                      ROR.W !BossPillarFalling,X                ;;840C|840C+840C/840C\840C;
                      LDA.B #$30                                ;;840F|840F+840F/840F\840F; \ Set ground shake timer
                      STA.W !ScreenShakeTimer                   ;;8411|8411+8411/8411\8411; /
                      LDA.B #!SFX_KAPOW                         ;;8414|8414+8414/8414\8414; \ Play sound effect
                      STA.W !SPCIO3                             ;;8416|8416+8416/8416\8416; /
                      CPX.B #$00                                ;;8419|8419+8419/8419\8419;
                      BNE CODE_02842A                           ;;841B|841B+841B/841B\841B;
                      LDA.W !BossPillarFalling+1                ;;841D|841D+841D/841D\841D;
                      BNE CODE_02842A                           ;;8420|8420+8420/8420\8420;
                      INC.W !BossPillarFalling+1                ;;8422|8422+8422/8422\8422;
                      STZ.W !BossPillarYPos+1                   ;;8425|8425+8425/8425\8425;
                      BRA +                                     ;;8428|8428+8428/8428\8428;
                                                                ;;                        ;
CODE_02842A:          CPX.B #$01                                ;;842A|842A+842A/842A\842A;
                      BNE +                                     ;;842C|842C+842C/842C\842C;
                      STZ.B !SpriteLock                         ;;842E|842E+842E/842E\842E;
                      STZ.W !PlayerIsFrozen                     ;;8430|8430+8430/8430\8430;
                    + LDA.B #$B0                                ;;8433|8433+8433/8433\8433;
CODE_028435:          STA.W !BossPillarYPos,X                   ;;8435|8435+8435/8435\8435;
                      RTS                                       ;;8438|8438+8438/8438\8438; Return
                                                                ;;                        ;
CODE_028439:          LDA.L DATA_0283CC,X                       ;;8439|8439+8439/8439\8439;
                      TAY                                       ;;843D|843D+843D/843D\843D;
                      STZ.B !_0                                 ;;843E|843E+843E/843E\843E;
CODE_028440:          LDA.B #$F0                                ;;8440|8440+8440/8440\8440;
                      STA.W !OAMTileYPos,Y                      ;;8442|8442+8442/8442\8442;
                      LDA.W !BossPillarYPos,X                   ;;8445|8445+8445/8445\8445;
                      SEC                                       ;;8448|8448+8448/8448\8448;
                      SBC.B !Layer1YPos                         ;;8449|8449+8449/8449\8449;
                      SEC                                       ;;844B|844B+844B/844B\844B;
                      SBC.W !ScreenShakeYOffset                 ;;844C|844C+844C/844C\844C;
                      SEC                                       ;;844F|844F+844F/844F\844F;
                      SBC.B !_0                                 ;;8450|8450+8450/8450\8450;
                      CMP.B #$20                                ;;8452|8452+8452/8452\8452;
                      BCC Return02848C                          ;;8454|8454+8454/8454\8454;
                      CMP.B #$A4                                ;;8456|8456+8456/8456\8456;
                      BCS +                                     ;;8458|8458+8458/8458\8458;
                      STA.W !OAMTileYPos,Y                      ;;845A|845A+845A/845A\845A;
                    + LDA.B !_C,X                               ;;845D|845D+845D/845D\845D;
                      STA.W !OAMTileXPos,Y                      ;;845F|845F+845F/845F\845F;
                      LDA.B #$E6                                ;;8462|8462+8462/8462\8462;
                      LDX.B !_0                                 ;;8464|8464+8464/8464\8464;
                      BEQ +                                     ;;8466|8466+8466/8466\8466;
                      LDA.B #$08                                ;;8468|8468+8468/8468\8468;
                    + STA.W !OAMTileNo,Y                        ;;846A|846A+846A/846A\846A;
                      LDA.B #$0D                                ;;846D|846D+846D/846D\846D;
                      STA.W !OAMTileAttr,Y                      ;;846F|846F+846F/846F\846F;
                      TYA                                       ;;8472|8472+8472/8472\8472;
                      LSR A                                     ;;8473|8473+8473/8473\8473;
                      LSR A                                     ;;8474|8474+8474/8474\8474;
                      TAX                                       ;;8475|8475+8475/8475\8475;
                      LDA.B #$02                                ;;8476|8476+8476/8476\8476;
                      STA.W !OAMTileSize,X                      ;;8478|8478+8478/8478\8478;
                      LDX.B !_F                                 ;;847B|847B+847B/847B\847B;
                      INY                                       ;;847D|847D+847D/847D\847D;
                      INY                                       ;;847E|847E+847E/847E\847E;
                      INY                                       ;;847F|847F+847F/847F\847F;
                      INY                                       ;;8480|8480+8480/8480\8480;
                      LDA.B !_0                                 ;;8481|8481+8481/8481\8481;
                      CLC                                       ;;8483|8483+8483/8483\8483;
                      ADC.B #$10                                ;;8484|8484+8484/8484\8484;
                      STA.B !_0                                 ;;8486|8486+8486/8486\8486;
                      CMP.B #$90                                ;;8488|8488+8488/8488\8488;
                      BCC CODE_028440                           ;;848A|848A+848A/848A\848A;
Return02848C:         RTS                                       ;;848C|848C+848C/848C\848C; Return
                                                                ;;                        ;
SubHorzPosBnk2:       LDY.B #$00                                ;;848D|848D+848D/848D\848D;
                      LDA.B !PlayerXPosNext                     ;;848F|848F+848F/848F\848F;
                      SEC                                       ;;8491|8491+8491/8491\8491;
                      SBC.B !SpriteXPosLow,X                    ;;8492|8492+8492/8492\8492;
                      STA.B !_F                                 ;;8494|8494+8494/8494\8494;
                      LDA.B !PlayerXPosNext+1                   ;;8496|8496+8496/8496\8496;
                      SBC.W !SpriteXPosHigh,X                   ;;8498|8498+8498/8498\8498;
                      BPL +                                     ;;849B|849B+849B/849B\849B;
                      INY                                       ;;849D|849D+849D/849D\849D;
                    + RTS                                       ;;849E|849E+849E/849E\849E; Return
                                                                ;;                        ;
IsOffScreenBnk2:      LDA.W !SpriteOffscreenX,X                 ;;849F|849F+849F/849F\849F;
                      ORA.W !SpriteOffscreenVert,X              ;;84A2|84A2+84A2/84A2\84A2;
                      RTS                                       ;;84A5|84A5+84A5/84A5\84A5; Return
                                                                ;;                        ;
CODE_0284A6:          STA.B !_3                                 ;;84A6|84A6+84A6/84A6\84A6;
                      LDA.B #$02                                ;;84A8|84A8+84A8/84A8\84A8;
                      STA.B !_1                                 ;;84AA|84AA+84AA/84AA\84AA;
                    - JSL CODE_0284D8                           ;;84AC|84AC+84AC/84AC\84AC;
                      LDA.B !_2                                 ;;84B0|84B0+84B0/84B0\84B0;
                      CLC                                       ;;84B2|84B2+84B2/84B2\84B2;
                      ADC.B !_3                                 ;;84B3|84B3+84B3/84B3\84B3;
                      STA.B !_2                                 ;;84B5|84B5+84B5/84B5\84B5;
                      DEC.B !_1                                 ;;84B7|84B7+84B7/84B7\84B7;
                      BPL -                                     ;;84B9|84B9+84B9/84B9\84B9;
                      RTL                                       ;;84BB|84BB+84BB/84BB\84BB; Return
                                                                ;;                        ;
CODE_0284BC:          LDA.B #$12                                ;;84BC|84BC+84BC/84BC\84BC;
                      BRA +                                     ;;84BE|84BE+84BE/84BE\84BE;
                                                                ;;                        ;
CODE_0284C0:          LDA.B #$00                                ;;84C0|84C0+84C0/84C0\84C0;
                    + STA.B !_0                                 ;;84C2|84C2+84C2/84C2\84C2;
                      STZ.B !_2                                 ;;84C4|84C4+84C4/84C4\84C4;
                      LDA.B !SpriteNumber,X                     ;;84C6|84C6+84C6/84C6\84C6;
                      CMP.B #$41                                ;;84C8|84C8+84C8/84C8\84C8;
                      BEQ CODE_0284D0                           ;;84CA|84CA+84CA/84CA\84CA;
                      CMP.B #$42                                ;;84CC|84CC+84CC/84CC\84CC;
                      BNE CODE_0284D8                           ;;84CE|84CE+84CE/84CE\84CE;
CODE_0284D0:          LDA.B !SpriteYSpeed,X                     ;;84D0|84D0+84D0/84D0\84D0;
                      BPL Return0284E7                          ;;84D2|84D2+84D2/84D2\84D2;
                      LDA.B #$0A                                ;;84D4|84D4+84D4/84D4\84D4;
                      BRA CODE_0284A6                           ;;84D6|84D6+84D6/84D6\84D6;
                                                                ;;                        ;
CODE_0284D8:          JSR IsOffScreenBnk2                       ;;84D8|84D8+84D8/84D8\84D8;
                      BNE Return0284E7                          ;;84DB|84DB+84DB/84DB\84DB;
                      LDY.B #$0B                                ;;84DD|84DD+84DD/84DD\84DD;
CODE_0284DF:          LDA.W !MinExtSpriteNumber,Y               ;;84DF|84DF+84DF/84DF\84DF;
                      BEQ CODE_0284E8                           ;;84E2|84E2+84E2/84E2\84E2;
                      DEY                                       ;;84E4|84E4+84E4/84E4\84E4;
                      BPL CODE_0284DF                           ;;84E5|84E5+84E5/84E5\84E5;
Return0284E7:         RTL                                       ;;84E7|84E7+84E7/84E7\84E7; Return
                                                                ;;                        ;
CODE_0284E8:          LDA.B !SpriteYPosLow,X                    ;;84E8|84E8+84E8/84E8\84E8;
                      CLC                                       ;;84EA|84EA+84EA/84EA\84EA;
                      ADC.B #$00                                ;;84EB|84EB+84EB/84EB\84EB;
                      AND.B #$F0                                ;;84ED|84ED+84ED/84ED\84ED;
                      CLC                                       ;;84EF|84EF+84EF/84EF\84EF;
                      ADC.B #$03                                ;;84F0|84F0+84F0/84F0\84F0;
                      STA.W !MinExtSpriteYPosLow,Y              ;;84F2|84F2+84F2/84F2\84F2;
                      LDA.B !SpriteXPosLow,X                    ;;84F5|84F5+84F5/84F5\84F5;
                      CLC                                       ;;84F7|84F7+84F7/84F7\84F7;
                      ADC.B !_2                                 ;;84F8|84F8+84F8/84F8\84F8;
                      STA.W !MinExtSpriteXPosLow,Y              ;;84FA|84FA+84FA/84FA\84FA;
                      LDA.W !SpriteXPosHigh,X                   ;;84FD|84FD+84FD/84FD\84FD;
                      ADC.B #$00                                ;;8500|8500+8500/8500\8500;
                      STA.W !MinExtSpriteXPosHigh,Y             ;;8502|8502+8502/8502\8502;
                      LDA.B #$07                                ;;8505|8505+8505/8505\8505;
                      STA.W !MinExtSpriteNumber,Y               ;;8507|8507+8507/8507\8507;
                      LDA.B !_0                                 ;;850A|850A+850A/850A\850A;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;850C|850C+850C/850C\850C;
                      RTL                                       ;;850F|850F+850F/850F\850F; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028510:          db $04,$FC,$06,$FA,$08,$F8,$0A,$F6        ;;8510|8510+8510/8510\8510;
DATA_028518:          db $E0,$E1,$E2,$E3,$E4,$E6,$E8,$EA        ;;8518|8518+8518/8518\8518;
DATA_028520:          db $1F,$13,$10,$1C,$17,$1A,$0F,$1E        ;;8520|8520+8520/8520\8520;
                                                                ;;                        ;
CODE_028528:          JSR IsOffScreenBnk2                       ;;8528|8528+8528/8528\8528;
                      LDA.W !SpriteOffscreenVert,X              ;;852B|852B+852B/852B\852B;
                      BNE Return0284E7                          ;;852E|852E+852E/852E\852E;
                      LDA.B #$04                                ;;8530|8530+8530/8530\8530;
                      STA.B !_0                                 ;;8532|8532+8532/8532\8532;
                      LDY.B #$07                                ;;8534|8534+8534/8534\8534; \ Find a free extended sprite slot
CODE_028536:          LDA.W !ExtSpriteNumber,Y                  ;;8536|8536+8536/8536\8536;  |
                      BEQ CODE_02853F                           ;;8539|8539+8539/8539\8539;  |
                      DEY                                       ;;853B|853B+853B/853B\853B;  |
                      BPL CODE_028536                           ;;853C|853C+853C/853C\853C;  |
                      RTL                                       ;;853E|853E+853E/853E\853E; / Return if no free slots
                                                                ;;                        ;
CODE_02853F:          LDA.B #$07                                ;;853F|853F+853F/853F\853F; \ Extended sprite = Lava splash
                      STA.W !ExtSpriteNumber,Y                  ;;8541|8541+8541/8541\8541; /
                      LDA.B !SpriteYPosLow,X                    ;;8544|8544+8544/8544\8544;
                      STA.W !ExtSpriteYPosLow,Y                 ;;8546|8546+8546/8546\8546;
                      LDA.W !SpriteYPosHigh,X                   ;;8549|8549+8549/8549\8549;
                      STA.W !ExtSpriteYPosHigh,Y                ;;854C|854C+854C/854C\854C;
                      LDA.B !SpriteXPosLow,X                    ;;854F|854F+854F/854F\854F;
                      CLC                                       ;;8551|8551+8551/8551\8551;
                      ADC.B #$04                                ;;8552|8552+8552/8552\8552;
                      STA.W !ExtSpriteXPosLow,Y                 ;;8554|8554+8554/8554\8554;
                      LDA.W !SpriteXPosHigh,X                   ;;8557|8557+8557/8557\8557;
                      ADC.B #$00                                ;;855A|855A+855A/855A\855A;
                      STA.W !ExtSpriteXPosHigh,Y                ;;855C|855C+855C/855C\855C;
                      JSL GetRand                               ;;855F|855F+855F/855F\855F;
                      PHX                                       ;;8563|8563+8563/8563\8563;
                      AND.B #$07                                ;;8564|8564+8564/8564\8564;
                      TAX                                       ;;8566|8566+8566/8566\8566;
                      LDA.L DATA_028510,X                       ;;8567|8567+8567/8567\8567;
                      STA.W !ExtSpriteXSpeed,Y                  ;;856B|856B+856B/856B\856B;
                      LDA.W !RandomNumber+1                     ;;856E|856E+856E/856E\856E;
                      AND.B #$07                                ;;8571|8571+8571/8571\8571;
                      TAX                                       ;;8573|8573+8573/8573\8573;
                      LDA.L DATA_028518,X                       ;;8574|8574+8574/8574\8574;
                      STA.W !ExtSpriteYSpeed,Y                  ;;8578|8578+8578/8578\8578;
                      JSL GetRand                               ;;857B|857B+857B/857B\857B;
                      AND.B #$07                                ;;857F|857F+857F/857F\857F;
                      TAX                                       ;;8581|8581+8581/8581\8581;
                      LDA.L DATA_028520,X                       ;;8582|8582+8582/8582\8582;
                      STA.W !ExtSpriteMisc176F,Y                ;;8586|8586+8586/8586\8586;
                      PLX                                       ;;8589|8589+8589/8589\8589;
                      DEC.B !_0                                 ;;858A|858A+858A/858A\858A;
                      BPL CODE_028536                           ;;858C|858C+858C/858C\858C;
                      RTL                                       ;;858E|858E+858E/858E\858E; Return
                                                                ;;                        ;
CODE_02858F:          LDY.B #$1F                                ;;858F|858F+858F/858F\858F; \ If Big Mario:
                      LDX.B #$00                                ;;8591|8591+8591/8591\8591;  | Y = #$1F
                      LDA.B !Powerup                            ;;8593|8593+8593/8593\8593;  | X = #$00
                      BNE +                                     ;;8595|8595+8595/8595\8595;  | Small Mario:
                      LDY.B #$0F                                ;;8597|8597+8597/8597\8597;  | Y = #$0F
                      LDX.B #$10                                ;;8599|8599+8599/8599\8599; / X = #$10
                    + STX.B !_1                                 ;;859B|859B+859B/859B\859B;
                      JSL GetRand                               ;;859D|859D+859D/859D\859D;
                      TYA                                       ;;85A1|85A1+85A1/85A1\85A1;
                      AND.W !RandomNumber                       ;;85A2|85A2+85A2/85A2\85A2;
                      CLC                                       ;;85A5|85A5+85A5/85A5\85A5;
                      ADC.B !_1                                 ;;85A6|85A6+85A6/85A6\85A6;
                      CLC                                       ;;85A8|85A8+85A8/85A8\85A8;
                      ADC.B !PlayerYPosNext                     ;;85A9|85A9+85A9/85A9\85A9;
                      STA.B !_0                                 ;;85AB|85AB+85AB/85AB\85AB;
                      LDA.W !RandomNumber+1                     ;;85AD|85AD+85AD/85AD\85AD;
                      AND.B #$0F                                ;;85B0|85B0+85B0/85B0\85B0;
                      CLC                                       ;;85B2|85B2+85B2/85B2\85B2;
                      ADC.B #$FE                                ;;85B3|85B3+85B3/85B3\85B3;
                      CLC                                       ;;85B5|85B5+85B5/85B5\85B5;
                      ADC.B !PlayerXPosNext                     ;;85B6|85B6+85B6/85B6\85B6;
                      STA.B !_2                                 ;;85B8|85B8+85B8/85B8\85B8;
CODE_0285BA:          LDY.B #$0B                                ;;85BA|85BA+85BA/85BA\85BA;
CODE_0285BC:          LDA.W !MinExtSpriteNumber,Y               ;;85BC|85BC+85BC/85BC\85BC;
                      BEQ CODE_0285C5                           ;;85BF|85BF+85BF/85BF\85BF;
                      DEY                                       ;;85C1|85C1+85C1/85C1\85C1;
                      BPL CODE_0285BC                           ;;85C2|85C2+85C2/85C2\85C2;
                      RTL                                       ;;85C4|85C4+85C4/85C4\85C4; Return
                                                                ;;                        ;
CODE_0285C5:          LDA.B #$05                                ;;85C5|85C5+85C5/85C5\85C5;
                      STA.W !MinExtSpriteNumber,Y               ;;85C7|85C7+85C7/85C7\85C7;
                      LDA.B #$00                                ;;85CA|85CA+85CA/85CA\85CA;
                      STA.W !MinExtSpriteYSpeed,Y               ;;85CC|85CC+85CC/85CC\85CC;
                      LDA.B !_0                                 ;;85CF|85CF+85CF/85CF\85CF;
                      STA.W !MinExtSpriteYPosLow,Y              ;;85D1|85D1+85D1/85D1\85D1;
                      LDA.B !_2                                 ;;85D4|85D4+85D4/85D4\85D4;
                      STA.W !MinExtSpriteXPosLow,Y              ;;85D6|85D6+85D6/85D6\85D6;
                      LDA.B #$17                                ;;85D9|85D9+85D9/85D9\85D9;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;85DB|85DB+85DB/85DB\85DB;
                      RTL                                       ;;85DE|85DE+85DE/85DE\85DE; Return
                                                                ;;                        ;
CODE_0285DF:          JSR IsOffScreenBnk2                       ;;85DF|85DF+85DF/85DF\85DF;
                      BNE Return0285EE                          ;;85E2|85E2+85E2/85E2\85E2;
                      LDY.B #$0B                                ;;85E4|85E4+85E4/85E4\85E4;
CODE_0285E6:          LDA.W !MinExtSpriteNumber,Y               ;;85E6|85E6+85E6/85E6\85E6;
                      BEQ CODE_0285EF                           ;;85E9|85E9+85E9/85E9\85E9;
                      DEY                                       ;;85EB|85EB+85EB/85EB\85EB;
                      BPL CODE_0285E6                           ;;85EC|85EC+85EC/85EC\85EC;
Return0285EE:         RTL                                       ;;85EE|85EE+85EE/85EE\85EE; Return
                                                                ;;                        ;
CODE_0285EF:          JSL GetRand                               ;;85EF|85EF+85EF/85EF\85EF;
                      LDA.B #$04                                ;;85F3|85F3+85F3/85F3\85F3;
                      STA.W !MinExtSpriteNumber,Y               ;;85F5|85F5+85F5/85F5\85F5;
                      LDA.B #$00                                ;;85F8|85F8+85F8/85F8\85F8;
                      STA.W !MinExtSpriteYSpeed,Y               ;;85FA|85FA+85FA/85FA\85FA;
                      LDA.W !RandomNumber                       ;;85FD|85FD+85FD/85FD\85FD;
                      AND.B #$0F                                ;;8600|8600+8600/8600\8600;
                      SEC                                       ;;8602|8602+8602/8602\8602;
                      SBC.B #$03                                ;;8603|8603+8603/8603\8603;
                      CLC                                       ;;8605|8605+8605/8605\8605;
                      ADC.B !SpriteXPosLow,X                    ;;8606|8606+8606/8606\8606;
                      STA.W !MinExtSpriteXPosLow,Y              ;;8608|8608+8608/8608\8608;
                      LDA.W !SpriteXPosHigh,X                   ;;860B|860B+860B/860B\860B;
                      ADC.B #$00                                ;;860E|860E+860E/860E\860E;
                      STA.W !MinExtSpriteXPosHigh,Y             ;;8610|8610+8610/8610\8610;
                      LDA.W !RandomNumber+1                     ;;8613|8613+8613/8613\8613;
                      AND.B #$07                                ;;8616|8616+8616/8616\8616;
                      CLC                                       ;;8618|8618+8618/8618\8618;
                      ADC.B #$07                                ;;8619|8619+8619/8619\8619;
                      CLC                                       ;;861B|861B+861B/861B\861B;
                      ADC.B !SpriteYPosLow,X                    ;;861C|861C+861C/861C\861C;
                      STA.W !MinExtSpriteYPosLow,Y              ;;861E|861E+861E/861E\861E;
                      LDA.W !SpriteYPosHigh,X                   ;;8621|8621+8621/8621\8621;
                      ADC.B #$00                                ;;8624|8624+8624/8624\8624;
                      STA.W !MinExtSpriteYPosHigh,Y             ;;8626|8626+8626/8626\8626;
                      LDA.B #$17                                ;;8629|8629+8629/8629\8629;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;862B|862B+862B/862B\862B;
                      RTL                                       ;;862E|862E+862E/862E\862E; Return
                                                                ;;                        ;
CODE_02862F:          JSL FindFreeSprSlot                       ;;862F|862F+862F/862F\862F; \ Return if no free slots
                      BMI +                                     ;;8633|8633+8633/8633\8633; /
                      TYX                                       ;;8635|8635+8635/8635\8635;
                      LDA.B #$0B                                ;;8636|8636+8636/8636\8636; \ Sprite status = Being carried
                      STA.W !SpriteStatus,X                     ;;8638|8638+8638/8638\8638; /
                      LDA.B !PlayerYPosNext                     ;;863B|863B+863B/863B\863B;
                      STA.B !SpriteYPosLow,X                    ;;863D|863D+863D/863D\863D;
                      LDA.B !PlayerYPosNext+1                   ;;863F|863F+863F/863F\863F;
                      STA.W !SpriteYPosHigh,X                   ;;8641|8641+8641/8641\8641;
                      LDA.B !PlayerXPosNext                     ;;8644|8644+8644/8644\8644;
                      STA.B !SpriteXPosLow,X                    ;;8646|8646+8646/8646\8646;
                      LDA.B !PlayerXPosNext+1,X                 ;;8648|8648+8648/8648\8648;
                      STA.W !SpriteXPosHigh,X                   ;;864A|864A+864A/864A\864A;
                      LDA.B #$53                                ;;864D|864D+864D/864D\864D; \ Sprite = Throw Block
                      STA.B !SpriteNumber,X                     ;;864F|864F+864F/864F\864F; /
                      JSL InitSpriteTables                      ;;8651|8651+8651/8651\8651;
                      LDA.B #$FF                                ;;8655|8655+8655/8655\8655;
                      STA.W !SpriteMisc1540,X                   ;;8657|8657+8657/8657\8657;
                      LDA.B #$08                                ;;865A|865A+865A/865A\865A;
                      STA.W !PickUpItemTimer                    ;;865C|865C+865C/865C\865C;
                      STA.W !IsCarryingItem                     ;;865F|865F+865F/865F\865F;
                    + RTL                                       ;;8662|8662+8662/8662\8662; Return
                                                                ;;                        ;
ShatterBlock:         PHX                                       ;;8663|8663+8663/8663\8663;
                      STA.B !_0                                 ;;8664|8664+8664/8664\8664;
                      LDY.B #$03                                ;;8666|8666+8666/8666\8666;
                      LDX.B #$0B                                ;;8668|8668+8668/8668\8668;
CODE_02866A:          LDA.W !MinExtSpriteNumber,X               ;;866A|866A+866A/866A\866A;
                      BEQ CODE_02867F                           ;;866D|866D+866D/866D\866D;
CODE_02866F:          DEX                                       ;;866F|866F+866F/866F\866F;
                      BPL CODE_02866A                           ;;8670|8670+8670/8670\8670;
                      DEC.W !MinExtSpriteSlotIdx                ;;8672|8672+8672/8672\8672;
                      BPL +                                     ;;8675|8675+8675/8675\8675;
                      LDA.B #$0B                                ;;8677|8677+8677/8677\8677;
                      STA.W !MinExtSpriteSlotIdx                ;;8679|8679+8679/8679\8679;
                    + LDX.W !MinExtSpriteSlotIdx                ;;867C|867C+867C/867C\867C;
CODE_02867F:          LDA.B #!SFX_SHATTER                       ;;867F|867F+867F/867F\867F; \
                      STA.W !SPCIO3                             ;;8681|8681+8681/8681\8681; / Play sound effect
                      LDA.B #$01                                ;;8684|8684+8684/8684\8684;
                      STA.W !MinExtSpriteNumber,X               ;;8686|8686+8686/8686\8686;
                      LDA.B !TouchBlockXPos                     ;;8689|8689+8689/8689\8689;
                      CLC                                       ;;868B|868B+868B/868B\868B;
                      ADC.W DATA_028746,Y                       ;;868C|868C+868C/868C\868C;
                      STA.W !MinExtSpriteXPosLow,X              ;;868F|868F+868F/868F\868F;
                      LDA.B !TouchBlockXPos+1                   ;;8692|8692+8692/8692\8692;
                      ADC.B #$00                                ;;8694|8694+8694/8694\8694;
                      STA.W !MinExtSpriteXPosHigh,X             ;;8696|8696+8696/8696\8696;
                      LDA.B !TouchBlockYPos                     ;;8699|8699+8699/8699\8699;
                      CLC                                       ;;869B|869B+869B/869B\869B;
                      ADC.W DATA_028742,Y                       ;;869C|869C+869C/869C\869C;
                      STA.W !MinExtSpriteYPosLow,X              ;;869F|869F+869F/869F\869F;
                      LDA.B !TouchBlockYPos+1                   ;;86A2|86A2+86A2/86A2\86A2;
                      ADC.B #$00                                ;;86A4|86A4+86A4/86A4\86A4;
                      STA.W !MinExtSpriteYPosHigh,X             ;;86A6|86A6+86A6/86A6\86A6;
                      LDA.W DATA_02874A,Y                       ;;86A9|86A9+86A9/86A9\86A9;
                      STA.W !MinExtSpriteYSpeed,X               ;;86AC|86AC+86AC/86AC\86AC;
                      LDA.W DATA_02874E,Y                       ;;86AF|86AF+86AF/86AF\86AF;
                      STA.W !MinExtSpriteXSpeed,X               ;;86B2|86B2+86B2/86B2\86B2;
                      LDA.B !_0                                 ;;86B5|86B5+86B5/86B5\86B5;
                      STA.W !MinExtSpriteXPosSpx,X              ;;86B7|86B7+86B7/86B7\86B7;
                      DEY                                       ;;86BA|86BA+86BA/86BA\86BA;
                      BPL CODE_02866F                           ;;86BB|86BB+86BB/86BB\86BB;
                      PLX                                       ;;86BD|86BD+86BD/86BD\86BD;
                      RTL                                       ;;86BE|86BE+86BE/86BE\86BE; Return
                                                                ;;                        ;
YoshiStompRoutine:    LDA.W !SpriteStompCounter                 ;;86BF|86BF+86BF/86BF\86BF;
                      BNE +                                     ;;86C2|86C2+86C2/86C2\86C2;
                      PHB                                       ;;86C4|86C4+86C4/86C4\86C4;
                      PHK                                       ;;86C5|86C5+86C5/86C5\86C5;
                      PLB                                       ;;86C6|86C6+86C6/86C6\86C6;
                      JSR SprBlkInteract                        ;;86C7|86C7+86C7/86C7\86C7;
                      LDA.B #$02                                ;;86CA|86CA+86CA/86CA\86CA;
                      STA.W !QuakeSpriteNumber,Y                ;;86CC|86CC+86CC/86CC\86CC;
                      LDA.B !PlayerXPosNext                     ;;86CF|86CF+86CF/86CF\86CF;
                      STA.W !QuakeSpriteXPosLow,Y               ;;86D1|86D1+86D1/86D1\86D1;
                      LDA.B !PlayerXPosNext+1                   ;;86D4|86D4+86D4/86D4\86D4;
                      STA.W !QuakeSpriteYPosHigh,Y              ;;86D6|86D6+86D6/86D6\86D6;
                      LDA.B !PlayerYPosNext                     ;;86D9|86D9+86D9/86D9\86D9;
                      CLC                                       ;;86DB|86DB+86DB/86DB\86DB;
                      ADC.B #$20                                ;;86DC|86DC+86DC/86DC\86DC;
                      STA.W !QuakeSpriteYPosLow,Y               ;;86DE|86DE+86DE/86DE\86DE;
                      LDA.B !PlayerYPosNext+1                   ;;86E1|86E1+86E1/86E1\86E1;
                      ADC.B #$00                                ;;86E3|86E3+86E3/86E3\86E3;
                      STA.W !QuakeSpriteYPosHigh,Y              ;;86E5|86E5+86E5/86E5\86E5;
                      JSR CODE_029BE4                           ;;86E8|86E8+86E8/86E8\86E8;
                      PLB                                       ;;86EB|86EB+86EB/86EB\86EB;
                    + RTL                                       ;;86EC|86EC+86EC/86EC\86EC; Return
                                                                ;;                        ;
SprBlkInteract:       LDY.B #$03                                ;;86ED|86ED+86ED/86ED\86ED;
CODE_0286EF:          LDA.W !QuakeSpriteNumber,Y                ;;86EF|86EF+86EF/86EF\86EF;
                      BEQ CODE_0286F8                           ;;86F2|86F2+86F2/86F2\86F2;
                      DEY                                       ;;86F4|86F4+86F4/86F4\86F4;
                      BPL CODE_0286EF                           ;;86F5|86F5+86F5/86F5\86F5;
                      INY                                       ;;86F7|86F7+86F7/86F7\86F7;
CODE_0286F8:          LDA.B !TouchBlockXPos                     ;;86F8|86F8+86F8/86F8\86F8;
                      STA.W !QuakeSpriteXPosLow,Y               ;;86FA|86FA+86FA/86FA\86FA;
                      LDA.B !TouchBlockXPos+1                   ;;86FD|86FD+86FD/86FD\86FD;
                      STA.W !QuakeSpriteXPosHigh,Y              ;;86FF|86FF+86FF/86FF\86FF;
                      LDA.B !TouchBlockYPos                     ;;8702|8702+8702/8702\8702;
                      STA.W !QuakeSpriteYPosLow,Y               ;;8704|8704+8704/8704\8704;
                      LDA.B !TouchBlockYPos+1                   ;;8707|8707+8707/8707\8707;
                      STA.W !QuakeSpriteYPosHigh,Y              ;;8709|8709+8709/8709\8709;
                      LDA.W !LayerProcessing                    ;;870C|870C+870C/870C\870C;
                      BEQ +                                     ;;870F|870F+870F/870F\870F;
                      LDA.B !TouchBlockXPos                     ;;8711|8711+8711/8711\8711;
                      SEC                                       ;;8713|8713+8713/8713\8713;
                      SBC.B !Layer23XRelPos                     ;;8714|8714+8714/8714\8714;
                      STA.W !QuakeSpriteXPosLow,Y               ;;8716|8716+8716/8716\8716;
                      LDA.B !TouchBlockXPos+1                   ;;8719|8719+8719/8719\8719;
                      SBC.B !Layer23XRelPos+1                   ;;871B|871B+871B/871B\871B;
                      STA.W !QuakeSpriteXPosHigh,Y              ;;871D|871D+871D/871D\871D;
                      LDA.B !TouchBlockYPos                     ;;8720|8720+8720/8720\8720;
                      SEC                                       ;;8722|8722+8722/8722\8722;
                      SBC.B !Layer23YRelPos                     ;;8723|8723+8723/8723\8723;
                      STA.W !QuakeSpriteYPosLow,Y               ;;8725|8725+8725/8725\8725;
                      LDA.B !TouchBlockYPos+1                   ;;8728|8728+8728/8728\8728;
                      SBC.B !Layer23YRelPos+1                   ;;872A|872A+872A/872A\872A;
                      STA.W !QuakeSpriteYPosHigh,Y              ;;872C|872C+872C/872C\872C;
                    + LDA.B #$01                                ;;872F|872F+872F/872F\872F;
                      STA.W !QuakeSpriteNumber,Y                ;;8731|8731+8731/8731\8731;
                      LDA.B #$06                                ;;8734|8734+8734/8734\8734;
                      STA.W !BounceSpriteIntTimer,Y             ;;8736|8736+8736/8736\8736;
                      RTS                                       ;;8739|8739+8739/8739\8739; Return
                                                                ;;                        ;
                                                                ;;                        ;
BlockBounceSpeedY:    db $C0,$00,$00,$40                        ;;873A|873A+873A/873A\873A;
                                                                ;;                        ;
BlockBounceSpeedX:    db $00,$40,$C0,$00                        ;;873E|873E+873E/873E\873E;
                                                                ;;                        ;
DATA_028742:          db $00,$00,$08,$08                        ;;8742|8742+8742/8742\8742;
                                                                ;;                        ;
DATA_028746:          db $00,$08,$00,$08                        ;;8746|8746+8746/8746\8746;
                                                                ;;                        ;
DATA_02874A:          db $FB,$FB,$FD,$FD                        ;;874A|874A+874A/874A\874A;
                                                                ;;                        ;
DATA_02874E:          db $FF,$01,$FF,$01                        ;;874E|874E+874E/874E\874E;
                                                                ;;                        ;
CODE_028752:          LDA.B !_4                                 ;;8752|8752+8752/8752\8752;
                      CMP.B #$07                                ;;8754|8754+8754/8754\8754;
                      BNE NotBreakable                          ;;8756|8756+8756/8756\8756;
                      LDA.W !PlayerTurnLvl                      ;;8758|8758+8758/8758\8758; \ Increase points
                      ASL A                                     ;;875B|875B+875B/875B\875B;  |
                      ADC.W !PlayerTurnLvl                      ;;875C|875C+875C/875C\875C;  |
                      TAX                                       ;;875F|875F+875F/875F\875F;  |
                      LDA.W !PlayerScore,X                      ;;8760|8760+8760/8760\8760;  |
                      CLC                                       ;;8763|8763+8763/8763\8763;  |
                      ADC.B #$05                                ;;8764|8764+8764/8764\8764;  |
                      STA.W !PlayerScore,X                      ;;8766|8766+8766/8766\8766;  |
                      BCC +                                     ;;8769|8769+8769/8769\8769;  |
                      INC.W !PlayerScore+1,X                    ;;876B|876B+876B/876B\876B;  |
                      BNE +                                     ;;876E|876E+876E/876E\876E;  |
                      INC.W !PlayerScore+2,X                    ;;8770|8770+8770/8770\8770; /
                    + LDA.B #$D0                                ;;8773|8773+8773/8773\8773; Deflect Mario downward
                      STA.B !PlayerYSpeed                       ;;8775|8775+8775/8775\8775; /
                      LDA.B #$00                                ;;8777|8777+8777/8777\8777; for shatter routine?
                      JSL ShatterBlock                          ;;8779|8779+8779/8779\8779; Actually break the block
                      JSR SprBlkInteract                        ;;877D|877D+877D/877D\877D; Handle sprite/block interaction
CODE_028780:          LDA.B #$02                                ;;8780|8780+8780/8780\8780; \ Replace block with "nothing" tile
                      STA.B !Map16TileGenerate                  ;;8782|8782+8782/8782\8782;  |
                      JSL GenerateTile                          ;;8784|8784+8784/8784\8784; /
                      RTL                                       ;;8788|8788+8788/8788\8788; Return
                                                                ;;                        ;
                                                                ;;                        ;
BlockBounce:          db $00,$03,$00,$00,$01,$07,$00,$04        ;;8789|8789+8789/8789\8789;
                      db $0A                                    ;;8791|8791+8791/8791\8791;
                                                                ;;                        ;
NotBreakable:         LDY.B #$03                                ;;8792|8792+8792/8792\8792; \ Reset turning block
FindTurningBlkSlot:   LDA.W !BounceSpriteNumber,Y               ;;8794|8794+8794/8794\8794;  |
                      BEQ CODE_028807                           ;;8797|8797+8797/8797\8797;  |
                      DEY                                       ;;8799|8799+8799/8799\8799;  |
                      BPL FindTurningBlkSlot                    ;;879A|879A+879A/879A\879A; /
                      DEC.W !BounceSpriteSlotIdx                ;;879C|879C+879C/879C\879C;
                      BPL +                                     ;;879F|879F+879F/879F\879F;
                      LDA.B #$03                                ;;87A1|87A1+87A1/87A1\87A1;
                      STA.W !BounceSpriteSlotIdx                ;;87A3|87A3+87A3/87A3\87A3;
                    + LDY.W !BounceSpriteSlotIdx                ;;87A6|87A6+87A6/87A6\87A6;
                      LDA.W !BounceSpriteNumber,Y               ;;87A9|87A9+87A9/87A9\87A9; \ Branch if not a turn block
                      CMP.B #$07                                ;;87AC|87AC+87AC/87AC\87AC;  |
                      BNE +                                     ;;87AE|87AE+87AE/87AE\87AE; /
                      LDA.B !TouchBlockXPos                     ;;87B0|87B0+87B0/87B0\87B0; \ Save [$98-$9A]
                      PHA                                       ;;87B2|87B2+87B2/87B2\87B2;  |
                      LDA.B !TouchBlockXPos+1                   ;;87B3|87B3+87B3/87B3\87B3;  |
                      PHA                                       ;;87B5|87B5+87B5/87B5\87B5;  |
                      LDA.B !TouchBlockYPos                     ;;87B6|87B6+87B6/87B6\87B6;  |
                      PHA                                       ;;87B8|87B8+87B8/87B8\87B8;  |
                      LDA.B !TouchBlockYPos+1                   ;;87B9|87B9+87B9/87B9\87B9;  |
                      PHA                                       ;;87BB|87BB+87BB/87BB\87BB; /
                      LDA.W !BounceSpriteXPosLow,Y              ;;87BC|87BC+87BC/87BC\87BC; \ Block Y position = Bounce Y sprite position
                      STA.B !TouchBlockXPos                     ;;87BF|87BF+87BF/87BF\87BF;  |
                      LDA.W !BounceSpriteXPosHigh,Y             ;;87C1|87C1+87C1/87C1\87C1;  |
                      STA.B !TouchBlockXPos+1                   ;;87C4|87C4+87C4/87C4\87C4; /
                      LDA.W !BounceSpriteYPosLow,Y              ;;87C6|87C6+87C6/87C6\87C6; \ Block X position = Bounce X sprite position
                      CLC                                       ;;87C9|87C9+87C9/87C9\87C9;  |
                      ADC.B #$0C                                ;;87CA|87CA+87CA/87CA\87CA;  | (Round to nearest #$10)
                      AND.B #$F0                                ;;87CC|87CC+87CC/87CC\87CC;  |
                      STA.B !TouchBlockYPos                     ;;87CE|87CE+87CE/87CE\87CE;  |
                      LDA.W !BounceSpriteYPosHigh,Y             ;;87D0|87D0+87D0/87D0\87D0;  |
                      ADC.B #$00                                ;;87D3|87D3+87D3/87D3\87D3;  |
                      STA.B !TouchBlockYPos+1                   ;;87D5|87D5+87D5/87D5\87D5; /
                      LDA.W !BounceSpriteTile,Y                 ;;87D7|87D7+87D7/87D7\87D7; \ Block to generate = Bounce sprite block
                      STA.B !Map16TileGenerate                  ;;87DA|87DA+87DA/87DA\87DA; /
                      LDA.B !_4                                 ;;87DC|87DC+87DC/87DC\87DC; \ Save [$04-$07]
                      PHA                                       ;;87DE|87DE+87DE/87DE\87DE;  |
                      LDA.B !_5                                 ;;87DF|87DF+87DF/87DF\87DF;  |
                      PHA                                       ;;87E1|87E1+87E1/87E1\87E1;  |
                      LDA.B !_6                                 ;;87E2|87E2+87E2/87E2\87E2;  |
                      PHA                                       ;;87E4|87E4+87E4/87E4\87E4;  |
                      LDA.B !_7                                 ;;87E5|87E5+87E5/87E5\87E5;  |
                      PHA                                       ;;87E7|87E7+87E7/87E7\87E7; /
                      JSL GenerateTile                          ;;87E8|87E8+87E8/87E8\87E8;
                      PLA                                       ;;87EC|87EC+87EC/87EC\87EC; \ Restore [$04-$07]
                      STA.B !_7                                 ;;87ED|87ED+87ED/87ED\87ED;  |
                      PLA                                       ;;87EF|87EF+87EF/87EF\87EF;  |
                      STA.B !_6                                 ;;87F0|87F0+87F0/87F0\87F0;  |
                      PLA                                       ;;87F2|87F2+87F2/87F2\87F2;  |
                      STA.B !_5                                 ;;87F3|87F3+87F3/87F3\87F3;  |
                      PLA                                       ;;87F5|87F5+87F5/87F5\87F5;  |
                      STA.B !_4                                 ;;87F6|87F6+87F6/87F6\87F6; /
                      PLA                                       ;;87F8|87F8+87F8/87F8\87F8; \ Restore [$98-$9A]
                      STA.B !TouchBlockYPos+1                   ;;87F9|87F9+87F9/87F9\87F9;  |
                      PLA                                       ;;87FB|87FB+87FB/87FB\87FB;  |
                      STA.B !TouchBlockYPos                     ;;87FC|87FC+87FC/87FC\87FC;  |
                      PLA                                       ;;87FE|87FE+87FE/87FE\87FE;  |
                      STA.B !TouchBlockXPos+1                   ;;87FF|87FF+87FF/87FF\87FF;  |
                      PLA                                       ;;8801|8801+8801/8801\8801;  |
                      STA.B !TouchBlockXPos                     ;;8802|8802+8802/8802\8802; /
                    + LDY.W !BounceSpriteSlotIdx                ;;8804|8804+8804/8804\8804;
CODE_028807:          LDA.B !_4                                 ;;8807|8807+8807/8807\8807;
                      CMP.B #$10                                ;;8809|8809+8809/8809\8809;
                      BCC CODE_028818                           ;;880B|880B+880B/880B\880B;
                      STZ.B !_4                                 ;;880D|880D+880D/880D\880D;
                      TAX                                       ;;880F|880F+880F/880F\880F;
                      LDA.W CODE_028780,X                       ;;8810|8810+8810/8810\8810;
                      STA.W !BounceSpriteYXPPCCCT,Y             ;;8813|8813+8813/8813\8813;
                      BRA CODE_02882A                           ;;8816|8816+8816/8816\8816;
                                                                ;;                        ;
CODE_028818:          LDA.B !_4                                 ;;8818|8818+8818/8818\8818; \ Play on/off sound if appropriate
                      CMP.B #$05                                ;;881A|881A+881A/881A\881A;  |
                      BNE +                                     ;;881C|881C+881C/881C\881C;  |
                      LDX.B #!SFX_SWITCH                        ;;881E|881E+881E/881E\881E;  |
                      STX.W !SPCIO0                             ;;8820|8820+8820/8820\8820; /
                    + TAX                                       ;;8823|8823+8823/8823\8823;
                      LDA.W BlockBounce,X                       ;;8824|8824+8824/8824\8824;
                      STA.W !BounceSpriteYXPPCCCT,Y             ;;8827|8827+8827/8827\8827;
CODE_02882A:          LDA.B !_4                                 ;;882A|882A+882A/882A\882A; \ Set block bounce sprite type
                      INC A                                     ;;882C|882C+882C/882C\882C;  |
                      STA.W !BounceSpriteNumber,Y               ;;882D|882D+882D/882D\882D; /
                      LDA.B #$00                                ;;8830|8830+8830/8830\8830; \ set (times can be hit?)
                      STA.W !BounceSpriteInit,Y                 ;;8832|8832+8832/8832\8832; /
                      LDA.B !TouchBlockXPos                     ;;8835|8835+8835/8835\8835; \ Set bounce block y position
                      STA.W !BounceSpriteXPosLow,Y              ;;8837|8837+8837/8837\8837;  |
                      LDA.B !TouchBlockXPos+1                   ;;883A|883A+883A/883A\883A;  |
                      STA.W !BounceSpriteXPosHigh,Y             ;;883C|883C+883C/883C\883C; /
                      LDA.B !TouchBlockYPos                     ;;883F|883F+883F/883F\883F; \ Set bounce block x position
                      STA.W !BounceSpriteYPosLow,Y              ;;8841|8841+8841/8841\8841;  |
                      LDA.B !TouchBlockYPos+1                   ;;8844|8844+8844/8844\8844;  |
                      STA.W !BounceSpriteYPosHigh,Y             ;;8846|8846+8846/8846\8846; /
                      LDA.W !LayerProcessing                    ;;8849|8849+8849/8849\8849;
                      LSR A                                     ;;884C|884C+884C/884C\884C;
                      ROR A                                     ;;884D|884D+884D/884D\884D;
                      STA.B !_8                                 ;;884E|884E+884E/884E\884E;
                      LDX.B !_6                                 ;;8850|8850+8850/8850\8850;
                      %LorW_X(LDA,BlockBounceSpeedY)            ;;8852|8852+8852/8852\8852; \ Set bounce y speed
                      STA.W !BounceSpriteYSpeed,Y               ;;8856|8855+8855/8855\8855; /
                      %LorW_X(LDA,BlockBounceSpeedX)            ;;8859|8858+8858/8858\8858; \ Set bounce x speed
                      STA.W !BounceSpriteXSpeed,Y               ;;885D|885B+885B/885B\885B; /
                      TXA                                       ;;8860|885E+885E/885E\885E;
                      ORA.B !_8                                 ;;8861|885F+885F/885F\885F;
                      STA.W !BounceSpriteFlags,Y                ;;8863|8861+8861/8861\8861;
                      LDA.B !_7                                 ;;8866|8864+8864/8864\8864; \ Set tile to turn block into
                      STA.W !BounceSpriteTile,Y                 ;;8868|8866+8866/8866\8866; /
                      LDA.B #$08                                ;;886B|8869+8869/8869\8869; \ Time to show bouncing block
                      STA.W !BounceSpriteTimer,Y                ;;886D|886B+886B/886B\886B;
                      LDA.W !BounceSpriteNumber,Y               ;;8870|886E+886E/886E\886E;
                      CMP.B #$07                                ;;8873|8871+8871/8871\8871;
                      BNE +                                     ;;8875|8873+8873/8873\8873;
                      LDA.B #$FF                                ;;8877|8875+8875/8875\8875;
                      STA.W !TurnBlockSpinTimer,Y               ;;8879|8877+8877/8877\8877;
                    + JSR SprBlkInteract                        ;;887C|887A+887A/887A\887A;
CODE_02887D:          LDA.B !_5                                 ;;887F|887D+887D/887D\887D;
                      BEQ Return0288A0                          ;;8881|887F+887F/887F\887F;
                      CMP.B #$0A                                ;;8883|8881+8881/8881\8881;
                      BNE +                                     ;;8885|8883+8883/8883\8883;
                    + LDA.B !_5                                 ;;8887|8885+8885/8885\8885;
                      CMP.B #$08                                ;;8889|8887+8887/8887\8887;
                      BCS CODE_0288DC                           ;;888B|8889+8889/8889\8889;
                      CMP.B #$06                                ;;888D|888B+888B/888B\888B;
                      BCC CODE_0288DC                           ;;888F|888D+888D/888D\888D;
                      CMP.B #$07                                ;;8891|888F+888F/888F\888F;
                      BNE CODE_02889D                           ;;8893|8891+8891/8891\8891;
                      LDA.W !MulticoinTimer                     ;;8895|8893+8893/8893\8893;
                      BNE CODE_02889D                           ;;8898|8896+8896/8896\8896;
                      LDA.B #$FF                                ;;889A|8898+8898/8898\8898;
                      STA.W !MulticoinTimer                     ;;889C|889A+889A/889A\889A;
CODE_02889D:          JSR CODE_028A66                           ;;889F|889D+889D/889D\889D;
Return0288A0:         RTL                                       ;;88A2|88A0+88A0/88A0\88A0; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0288A1:          db $35,$78                                ;;88A3|88A1+88A1/88A1\88A1;
                                                                ;;                        ;
SpriteInBlock:        db $00,$74,$75,$76,$77,$78,$00,$00        ;;88A5|88A3+88A3/88A3\88A3;
                      db $79,$00,$3E,$7D,$2C,$04,$81,$45        ;;88AD|88AB+88AB/88AB\88AB;
                      db $80                                    ;;88B5|88B3+88B3/88B3\88B3;
                                                                ;;                        ;
                      db $00,$74,$75,$76,$77,$78,$00,$00        ;;88B6|88B4+88B4/88B4\88B4;
                      db $79,$00,$3E,$7D,$2C,$04,$81,$45        ;;88BE|88BC+88BC/88BC\88BC;
                      db $80                                    ;;88C6|88C4+88C4/88C4\88C4;
                                                                ;;                        ;
StatusOfSprInBlk:     db $00,$08,$08,$08,$08,$08,$00,$00        ;;88C7|88C5+88C5/88C5\88C5;
                      db $08,$00,$09,$08,$09,$09,$08,$08        ;;88CF|88CD+88CD/88CD\88CD;
                      db $09                                    ;;88D7|88D5+88D5/88D5\88D5;
                                                                ;;                        ;
DATA_0288D6:          db $80,$7E,$7D                            ;;88D8|88D6+88D6/88D6\88D6;
                                                                ;;                        ;
DATA_0288D9:          db $09,$08,$08                            ;;88DB|88D9+88D9/88D9\88D9;
                                                                ;;                        ;
CODE_0288DC:          LDY.B !_5                                 ;;88DE|88DC+88DC/88DC\88DC;
                      CPY.B #$0B                                ;;88E0|88DE+88DE/88DE\88DE;
                      BNE CODE_0288EA                           ;;88E2|88E0+88E0/88E0\88E0;
                      LDA.B !TouchBlockXPos                     ;;88E4|88E2+88E2/88E2\88E2;
                      AND.B #$30                                ;;88E6|88E4+88E4/88E4\88E4;
                      CMP.B #$20                                ;;88E8|88E6+88E6/88E6\88E6;
                      BEQ GenSpriteFromBlk                      ;;88EA|88E8+88E8/88E8\88E8;
CODE_0288EA:          CPY.B #$10                                ;;88EC|88EA+88EA/88EA\88EA;
                      BEQ CODE_0288FD                           ;;88EE|88EC+88EC/88EC\88EC;
                      CPY.B #$08                                ;;88F0|88EE+88EE/88EE\88EE;
                      BNE CODE_0288F9                           ;;88F2|88F0+88F0/88F0\88F0;
                      LDA.W !SpriteMemorySetting                ;;88F4|88F2+88F2/88F2\88F2;
                      BEQ GenSpriteFromBlk                      ;;88F7|88F5+88F5/88F5\88F5;
                      BNE CODE_0288FD                           ;;88F9|88F7+88F7/88F7\88F7;
CODE_0288F9:          CPY.B #$0C                                ;;88FB|88F9+88F9/88F9\88F9;
                      BNE GenSpriteFromBlk                      ;;88FD|88FB+88FB/88FB\88FB;
CODE_0288FD:          JSL FindFreeSprSlot                       ;;88FF|88FD+88FD/88FD\88FD;
                      TYX                                       ;;8903|8901+8901/8901\8901;
                      BPL CODE_028922                           ;;8904|8902+8902/8902\8902;
                      RTL                                       ;;8906|8904+8904/8904\8904; Return
                                                                ;;                        ;
GenSpriteFromBlk:     LDX.B #$0B                                ;;8907|8905+8905/8905\8905; \ Find a last free sprite slot from 00-0B
CODE_028907:          LDA.W !SpriteStatus,X                     ;;8909|8907+8907/8907\8907;  |
                      BEQ CODE_028922                           ;;890C|890A+890A/890A\890A;  |
                      DEX                                       ;;890E|890C+890C/890C\890C;  |
                      CPX.B #$FF                                ;;890F|890D+890D/890D\890D;  |
                      BNE CODE_028907                           ;;8911|890F+890F/890F\890F; /
                      DEC.W !SpriteToOverwrite                  ;;8913|8911+8911/8911\8911;
                      BPL +                                     ;;8916|8914+8914/8914\8914;
                      LDA.B #$01                                ;;8918|8916+8916/8916\8916;
                      STA.W !SpriteToOverwrite                  ;;891A|8918+8918/8918\8918;
                    + LDA.W !SpriteToOverwrite                  ;;891D|891B+891B/891B\891B;
                      CLC                                       ;;8920|891E+891E/891E\891E;
                      ADC.B #$0A                                ;;8921|891F+891F/891F\891F;
                      TAX                                       ;;8923|8921+8921/8921\8921;
CODE_028922:          STX.W !TileGenerateTrackA                 ;;8924|8922+8922/8922\8922;
                      LDY.B !_5                                 ;;8927|8925+8925/8925\8925;
                      LDA.W StatusOfSprInBlk,Y                  ;;8929|8927+8927/8927\8927; \ Set sprite status
                      STA.W !SpriteStatus,X                     ;;892C|892A+892A/892A\892A; /
                      LDA.W !YoshiIsLoose                       ;;892F|892D+892D/892D\892D;
                      BEQ +                                     ;;8932|8930+8930/8930\8930;
                      TYA                                       ;;8934|8932+8932/8932\8932;
                      CLC                                       ;;8935|8933+8933/8933\8933;
                      ADC.B #$11                                ;;8936|8934+8934/8934\8934;
                      TAY                                       ;;8938|8936+8936/8936\8936;
                    + STY.W !SpriteInterIndex                   ;;8939|8937+8937/8937\8937;
                      LDA.W SpriteInBlock,Y                     ;;893C|893A+893A/893A\893A; \ Set sprite number
                      STA.B !SpriteNumber,X                     ;;893F|893D+893D/893D\893D; /
                      STA.B !_E                                 ;;8941|893F+893F/893F\893F;
                      LDY.B #!SFX_ITEMBLOCK                     ;;8943|8941+8941/8941\8941;
                      CMP.B #$81                                ;;8945|8943+8943/8943\8943;
                      BCS +                                     ;;8947|8945+8945/8945\8945;
                      CMP.B #$79                                ;;8949|8947+8947/8947\8947;
                      BCC +                                     ;;894B|8949+8949/8949\8949;
                      INY                                       ;;894D|894B+894B/894B\894B;
                    + STY.W !SPCIO3                             ;;894E|894C+894C/894C\894C; / Play sound effect
                      JSL InitSpriteTables                      ;;8951|894F+894F/894F\894F;
                      INC.W !SpriteOffscreenX,X                 ;;8955|8953+8953/8953\8953;
                      LDA.B !SpriteNumber,X                     ;;8958|8956+8956/8956\8956;
                      CMP.B #$45                                ;;895A|8958+8958/8958\8958;
                      BNE CODE_028972                           ;;895C|895A+895A/895A\895A;
                      LDA.W !DirectCoinInit                     ;;895E|895C+895C/895C\895C;
                      BEQ +                                     ;;8961|895F+895F/895F\895F;
                      STZ.W !SpriteStatus,X                     ;;8963|8961+8961/8961\8961;
                      JMP CODE_02889D                           ;;8966|8964+8964/8964\8964;
                                                                ;;                        ;
                    + LDA.B #!BGM_PSWITCH                       ;;8969|8967+8967/8967\8967;
                      STA.W !SPCIO2                             ;;896B|8969+8969/8969\8969; / Change music
                      INC.W !DirectCoinInit                     ;;896E|896C+896C/896C\896C;
                      STZ.W !DirectCoinTimer                    ;;8971|896F+896F/896F\896F;
CODE_028972:          LDA.B !TouchBlockXPos                     ;;8974|8972+8972/8972\8972;
                      STA.B !SpriteXPosLow,X                    ;;8976|8974+8974/8974\8974;
                      LDA.B !TouchBlockXPos+1                   ;;8978|8976+8976/8976\8976;
                      STA.W !SpriteXPosHigh,X                   ;;897A|8978+8978/8978\8978;
                      LDA.B !TouchBlockYPos                     ;;897D|897B+897B/897B\897B;
                      STA.B !SpriteYPosLow,X                    ;;897F|897D+897D/897D\897D;
                      LDA.B !TouchBlockYPos+1                   ;;8981|897F+897F/897F\897F;
                      STA.W !SpriteYPosHigh,X                   ;;8983|8981+8981/8981\8981;
                      LDA.W !LayerProcessing                    ;;8986|8984+8984/8984\8984;
                      BEQ +                                     ;;8989|8987+8987/8987\8987;
                      LDA.B !TouchBlockXPos                     ;;898B|8989+8989/8989\8989;
                      SEC                                       ;;898D|898B+898B/898B\898B;
                      SBC.B !Layer23XRelPos                     ;;898E|898C+898C/898C\898C;
                      STA.B !SpriteXPosLow,X                    ;;8990|898E+898E/898E\898E;
                      LDA.B !TouchBlockXPos+1                   ;;8992|8990+8990/8990\8990;
                      SBC.B !Layer23XRelPos+1                   ;;8994|8992+8992/8992\8992;
                      STA.W !SpriteXPosHigh,X                   ;;8996|8994+8994/8994\8994;
                      LDA.B !TouchBlockYPos                     ;;8999|8997+8997/8997\8997;
                      SEC                                       ;;899B|8999+8999/8999\8999;
                      SBC.B !Layer23YRelPos                     ;;899C|899A+899A/899A\899A;
                      STA.B !SpriteYPosLow,X                    ;;899E|899C+899C/899C\899C;
                      LDA.B !TouchBlockYPos+1                   ;;89A0|899E+899E/899E\899E;
                      SBC.B !Layer23YRelPos+1                   ;;89A2|89A0+89A0/89A0\89A0;
                      STA.W !SpriteYPosHigh,X                   ;;89A4|89A2+89A2/89A2\89A2;
                    + LDA.B !SpriteNumber,X                     ;;89A7|89A5+89A5/89A5\89A5;
                      CMP.B #$7D                                ;;89A9|89A7+89A7/89A7\89A7;
                      BNE CODE_0289D3                           ;;89AB|89A9+89A9/89A9\89A9;
                      LDA.B !SpriteXPosLow,X                    ;;89AD|89AB+89AB/89AB\89AB;
                      AND.B #$30                                ;;89AF|89AD+89AD/89AD\89AD;
                      LSR A                                     ;;89B1|89AF+89AF/89AF\89AF;
                      LSR A                                     ;;89B2|89B0+89B0/89B0\89B0;
                      LSR A                                     ;;89B3|89B1+89B1/89B1\89B1;
                      LSR A                                     ;;89B4|89B2+89B2/89B2\89B2;
                      TAY                                       ;;89B5|89B3+89B3/89B3\89B3;
                      LDA.W DATA_0288D9,Y                       ;;89B6|89B4+89B4/89B4\89B4;
                      STA.W !SpriteStatus,X                     ;;89B9|89B7+89B7/89B7\89B7;
                      LDA.W DATA_0288D6,Y                       ;;89BC|89BA+89BA/89BA\89BA;
                      STA.B !SpriteNumber,X                     ;;89BF|89BD+89BD/89BD\89BD;
                      PHA                                       ;;89C1|89BF+89BF/89BF\89BF;
                      JSL InitSpriteTables                      ;;89C2|89C0+89C0/89C0\89C0;
                      PLA                                       ;;89C6|89C4+89C4/89C4\89C4;
                      CMP.B #$7D                                ;;89C7|89C5+89C5/89C5\89C5;
                      BNE +                                     ;;89C9|89C7+89C7/89C7\89C7;
                      INC.W !SpriteMisc157C,X                   ;;89CB|89C9+89C9/89C9\89C9;
                      RTL                                       ;;89CE|89CC+89CC/89CC\89CC; Return
                                                                ;;                        ;
                    + CMP.B #$7E                                ;;89CF|89CD+89CD/89CD\89CD;
                      BEQ CODE_028A03                           ;;89D1|89CF+89CF/89CF\89CF;
                      BRA CODE_028A01                           ;;89D3|89D1+89D1/89D1\89D1;
                                                                ;;                        ;
CODE_0289D3:          CMP.B #$04                                ;;89D5|89D3+89D3/89D3\89D3;
                      BEQ ADDR_028A08                           ;;89D7|89D5+89D5/89D5\89D5;
                      CMP.B #$3E                                ;;89D9|89D7+89D7/89D7\89D7;
                      BEQ CODE_028A2A                           ;;89DB|89D9+89D9/89D9\89D9;
                      CMP.B #$2C                                ;;89DD|89DB+89DB/89DB\89DB;
                      BNE CODE_028A11                           ;;89DF|89DD+89DD/89DD\89DD;
                      LDY.B #$0B                                ;;89E1|89DF+89DF/89DF\89DF;
CODE_0289E1:          LDA.W !SpriteStatus,Y                     ;;89E3|89E1+89E1/89E1\89E1;
                      CMP.B #$08                                ;;89E6|89E4+89E4/89E4\89E4;
                      BCC CODE_0289F3                           ;;89E8|89E6+89E6/89E6\89E6;
                      LDA.W !SpriteNumber,Y                     ;;89EA|89E8+89E8/89E8\89E8;
                      CMP.B #$2D                                ;;89ED|89EB+89EB/89EB\89EB;
                      BNE CODE_0289F3                           ;;89EF|89ED+89ED/89ED\89ED;
CODE_0289EF:          LDY.B #$01                                ;;89F1|89EF+89EF/89EF\89EF;
                      BRA CODE_0289FB                           ;;89F3|89F1+89F1/89F1\89F1;
                                                                ;;                        ;
CODE_0289F3:          DEY                                       ;;89F5|89F3+89F3/89F3\89F3;
                      BPL CODE_0289E1                           ;;89F6|89F4+89F4/89F4\89F4;
                      LDY.W !YoshiIsLoose                       ;;89F8|89F6+89F6/89F6\89F6;
                      BNE CODE_0289EF                           ;;89FB|89F9+89F9/89F9\89F9;
CODE_0289FB:          LDA.W DATA_0288A1,Y                       ;;89FD|89FB+89FB/89FB\89FB;
                      STA.W !SpriteMisc151C,X                   ;;8A00|89FE+89FE/89FE\89FE;
CODE_028A01:          BRA CODE_028A0D                           ;;8A03|8A01+8A01/8A01\8A01;
                                                                ;;                        ;
CODE_028A03:          INC.B !SpriteTableC2,X                    ;;8A05|8A03+8A03/8A03\8A03;
                      INC.B !SpriteTableC2,X                    ;;8A07|8A05+8A05/8A05\8A05;
                      RTL                                       ;;8A09|8A07+8A07/8A07\8A07; Return
                                                                ;;                        ;
ADDR_028A08:          LDA.B #$FF                                ;;8A0A|8A08+8A08/8A08\8A08;
                      STA.W !SpriteMisc1540,X                   ;;8A0C|8A0A+8A0A/8A0A\8A0A;
CODE_028A0D:          LDA.B #$D0                                ;;8A0F|8A0D+8A0D/8A0D\8A0D;
                      BRA +                                     ;;8A11|8A0F+8A0F/8A0F\8A0F;
                                                                ;;                        ;
CODE_028A11:          LDA.B #$3E                                ;;8A13|8A11+8A11/8A11\8A11;
                      STA.W !SpriteMisc1540,X                   ;;8A15|8A13+8A13/8A13\8A13;
                      LDA.B #$D0                                ;;8A18|8A16+8A16/8A16\8A16;
                    + STA.B !SpriteYSpeed,X                     ;;8A1A|8A18+8A18/8A18\8A18;
                      LDA.B #$2C                                ;;8A1C|8A1A+8A1A/8A1A\8A1A;
                      STA.W !SpriteMisc154C,X                   ;;8A1E|8A1C+8A1C/8A1C\8A1C;
                      LDA.W !SpriteTweaker190F,X                ;;8A21|8A1F+8A1F/8A1F\8A1F;
                      BPL +                                     ;;8A24|8A22+8A22/8A22\8A22;
                      LDA.B #$10                                ;;8A26|8A24+8A24/8A24\8A24;
                      STA.W !SpriteMisc15AC,X                   ;;8A28|8A26+8A26/8A26\8A26;
                    + RTL                                       ;;8A2B|8A29+8A29/8A29\8A29; Return
                                                                ;;                        ;
CODE_028A2A:          LDA.B !SpriteXPosLow,X                    ;;8A2C|8A2A+8A2A/8A2A\8A2A;
                      LSR A                                     ;;8A2E|8A2C+8A2C/8A2C\8A2C;
                      LSR A                                     ;;8A2F|8A2D+8A2D/8A2D\8A2D;
                      LSR A                                     ;;8A30|8A2E+8A2E/8A2E\8A2E;
                      LSR A                                     ;;8A31|8A2F+8A2F/8A2F\8A2F;
                      AND.B #$01                                ;;8A32|8A30+8A30/8A30\8A30;
                      STA.W !SpriteMisc151C,X                   ;;8A34|8A32+8A32/8A32\8A32;
                      TAY                                       ;;8A37|8A35+8A35/8A35\8A35;
                      LDA.W DATA_028A42,Y                       ;;8A38|8A36+8A36/8A36\8A36;
                      STA.W !SpriteOBJAttribute,X               ;;8A3B|8A39+8A39/8A39\8A39;
                      JSL CODE_028A44                           ;;8A3E|8A3C+8A3C/8A3C\8A3C;
                      BRA CODE_028A0D                           ;;8A42|8A40+8A40/8A40\8A40;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028A42:          db $06,$02                                ;;8A44|8A42+8A42/8A42\8A42;
                                                                ;;                        ;
CODE_028A44:          PHX                                       ;;8A46|8A44+8A44/8A44\8A44;
                      LDX.B #$03                                ;;8A47|8A45+8A45/8A45\8A45;
CODE_028A47:          LDA.W !SmokeSpriteNumber,X                ;;8A49|8A47+8A47/8A47\8A47;
                      BEQ CODE_028A50                           ;;8A4C|8A4A+8A4A/8A4A\8A4A;
                      DEX                                       ;;8A4E|8A4C+8A4C/8A4C\8A4C;
                      BPL CODE_028A47                           ;;8A4F|8A4D+8A4D/8A4D\8A4D;
                      INX                                       ;;8A51|8A4F+8A4F/8A4F\8A4F;
CODE_028A50:          LDA.B #$01                                ;;8A52|8A50+8A50/8A50\8A50;
                      STA.W !SmokeSpriteNumber,X                ;;8A54|8A52+8A52/8A52\8A52;
                      LDA.B !TouchBlockYPos                     ;;8A57|8A55+8A55/8A55\8A55;
                      STA.W !SmokeSpriteYPos,X                  ;;8A59|8A57+8A57/8A57\8A57;
                      LDA.B !TouchBlockXPos                     ;;8A5C|8A5A+8A5A/8A5A\8A5A;
                      STA.W !SmokeSpriteXPos,X                  ;;8A5E|8A5C+8A5C/8A5C\8A5C;
                      LDA.B #$1B                                ;;8A61|8A5F+8A5F/8A5F\8A5F;
                      STA.W !SmokeSpriteTimer,X                 ;;8A63|8A61+8A61/8A61\8A61;
                      PLX                                       ;;8A66|8A64+8A64/8A64\8A64;
                      RTL                                       ;;8A67|8A65+8A65/8A65\8A65; Return
                                                                ;;                        ;
CODE_028A66:          LDX.B #$03                                ;;8A68|8A66+8A66/8A66\8A66;
CODE_028A68:          LDA.W !CoinSpriteExists,X                 ;;8A6A|8A68+8A68/8A68\8A68;
                      BEQ CODE_028A7D                           ;;8A6D|8A6B+8A6B/8A6B\8A6B;
                      DEX                                       ;;8A6F|8A6D+8A6D/8A6D\8A6D;
                      BPL CODE_028A68                           ;;8A70|8A6E+8A6E/8A6E\8A6E;
                      DEC.W !CoinSpriteSlotIdx                  ;;8A72|8A70+8A70/8A70\8A70;
                      BPL +                                     ;;8A75|8A73+8A73/8A73\8A73;
                      LDA.B #$03                                ;;8A77|8A75+8A75/8A75\8A75;
                      STA.W !CoinSpriteSlotIdx                  ;;8A79|8A77+8A77/8A77\8A77;
                    + LDX.W !CoinSpriteSlotIdx                  ;;8A7C|8A7A+8A7A/8A7A\8A7A;
CODE_028A7D:          JSL CODE_05B34A                           ;;8A7F|8A7D+8A7D/8A7D\8A7D;
                      INC.W !CoinSpriteExists,X                 ;;8A83|8A81+8A81/8A81\8A81;
                      LDA.B !TouchBlockXPos                     ;;8A86|8A84+8A84/8A84\8A84;
                      STA.W !CoinSpriteXPosLow,X                ;;8A88|8A86+8A86/8A86\8A86;
                      LDA.B !TouchBlockXPos+1                   ;;8A8B|8A89+8A89/8A89\8A89;
                      STA.W !CoinsPriteXPosHigh,X               ;;8A8D|8A8B+8A8B/8A8B\8A8B;
                      LDA.B !TouchBlockYPos                     ;;8A90|8A8E+8A8E/8A8E\8A8E;
                      SEC                                       ;;8A92|8A90+8A90/8A90\8A90;
                      SBC.B #$10                                ;;8A93|8A91+8A91/8A91\8A91;
                      STA.W !CoinSpriteYPosLow,X                ;;8A95|8A93+8A93/8A93\8A93;
                      LDA.B !TouchBlockYPos+1                   ;;8A98|8A96+8A96/8A96\8A96;
                      SBC.B #$00                                ;;8A9A|8A98+8A98/8A98\8A98;
                      STA.W !CoinSpriteYPosHigh,X               ;;8A9C|8A9A+8A9A/8A9A\8A9A;
                      LDA.W !LayerProcessing                    ;;8A9F|8A9D+8A9D/8A9D\8A9D;
                      STA.W !CoinSpriteLayer,X                  ;;8AA2|8AA0+8AA0/8AA0\8AA0;
                      LDA.B #$D0                                ;;8AA5|8AA3+8AA3/8AA3\8AA3;
                      STA.W !CoinSpriteYSpeed,X                 ;;8AA7|8AA5+8AA5/8AA5\8AA5;
                      RTS                                       ;;8AAA|8AA8+8AA8/8AA8\8AA8; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028AA9:          db $07,$03,$03,$01,$01,$01,$01,$01        ;;8AAB|8AA9+8AA9/8AA9\8AA9;
                                                                ;;                        ;
CODE_028AB1:          PHB                                       ;;8AB3|8AB1+8AB1/8AB1\8AB1;
                      PHK                                       ;;8AB4|8AB2+8AB2/8AB2\8AB2;
                      PLB                                       ;;8AB5|8AB3+8AB3/8AB3\8AB3;
                      LDA.W !GivePlayerLives                    ;;8AB6|8AB4+8AB4/8AB4\8AB4;
                      BEQ CODE_028AD5                           ;;8AB9|8AB7+8AB7/8AB7\8AB7;
                      LDA.W !GiveLivesTimer                     ;;8ABB|8AB9+8AB9/8AB9\8AB9;
                      BEQ CODE_028AC3                           ;;8ABE|8ABC+8ABC/8ABC\8ABC;
                      DEC.W !GiveLivesTimer                     ;;8AC0|8ABE+8ABE/8ABE\8ABE;
                      BRA CODE_028AD5                           ;;8AC3|8AC1+8AC1/8AC1\8AC1;
                                                                ;;                        ;
CODE_028AC3:          DEC.W !GivePlayerLives                    ;;8AC5|8AC3+8AC3/8AC3\8AC3;
                      BEQ +                                     ;;8AC8|8AC6+8AC6/8AC6\8AC6;
                      LDA.B #$23                                ;;8ACA|8AC8+8AC8/8AC8\8AC8;
                      STA.W !GiveLivesTimer                     ;;8ACC|8ACA+8ACA/8ACA\8ACA;
                    + LDA.B #!SFX_1UP                           ;;8ACF|8ACD+8ACD/8ACD\8ACD; \ Play sound effect
                      STA.W !SPCIO3                             ;;8AD1|8ACF+8ACF/8ACF\8ACF; /
                      INC.W !PlayerLives                        ;;8AD4|8AD2+8AD2/8AD2\8AD2;
CODE_028AD5:          LDA.W !InvinsibilityTimer                 ;;8AD7|8AD5+8AD5/8AD5\8AD5; \ Branch if Mario doesn't have star
                      BEQ CODE_028AEB                           ;;8ADA|8AD8+8AD8/8AD8\8AD8; /
                      CMP.B #$08                                ;;8ADC|8ADA+8ADA/8ADA\8ADA;
                      BCC CODE_028AEB                           ;;8ADE|8ADC+8ADC/8ADC\8ADC;
                      LSR A                                     ;;8AE0|8ADE+8ADE/8ADE\8ADE;
                      LSR A                                     ;;8AE1|8ADF+8ADF/8ADF\8ADF;
                      LSR A                                     ;;8AE2|8AE0+8AE0/8AE0\8AE0;
                      LSR A                                     ;;8AE3|8AE1+8AE1/8AE1\8AE1;
                      LSR A                                     ;;8AE4|8AE2+8AE2/8AE2\8AE2;
                      TAY                                       ;;8AE5|8AE3+8AE3/8AE3\8AE3;
                      LDA.B !TrueFrame                          ;;8AE6|8AE4+8AE4/8AE4\8AE4;
                      AND.W DATA_028AA9,Y                       ;;8AE8|8AE6+8AE6/8AE6\8AE6;
                      BRA CODE_028AF5                           ;;8AEB|8AE9+8AE9/8AE9\8AE9;
                                                                ;;                        ;
CODE_028AEB:          LDA.W !PlayerSparkleTimer                 ;;8AED|8AEB+8AEB/8AEB\8AEB;
                      BEQ +                                     ;;8AF0|8AEE+8AEE/8AEE\8AEE;
                      DEC.W !PlayerSparkleTimer                 ;;8AF2|8AF0+8AF0/8AF0\8AF0;
                      AND.B #$01                                ;;8AF5|8AF3+8AF3/8AF3\8AF3;
CODE_028AF5:          ORA.B !PlayerXPosScrRel+1                 ;;8AF7|8AF5+8AF5/8AF5\8AF5;
                      ORA.B !PlayerYPosScrRel+1                 ;;8AF9|8AF7+8AF7/8AF7\8AF7;
                      BNE +                                     ;;8AFB|8AF9+8AF9/8AF9\8AF9;
                      LDA.B !PlayerYPosScrRel                   ;;8AFD|8AFB+8AFB/8AFB\8AFB;
                      CMP.B #$D0                                ;;8AFF|8AFD+8AFD/8AFD\8AFD;
                      BCS +                                     ;;8B01|8AFF+8AFF/8AFF\8AFF;
                      JSL CODE_02858F                           ;;8B03|8B01+8B01/8B01\8B01;
                    + JSR RunMinorExtendedSprs                  ;;8B07|8B05+8B05/8B05\8B05;
                      JSR MCoinTmrAnd4SlotSprs                  ;;8B0A|8B08+8B08/8B08\8B08;
                      JSR ScoreSprGfx                           ;;8B0D|8B0B+8B0B/8B0B\8B0B;
                      JSR RunExtendedSprites                    ;;8B10|8B0E+8B0E/8B0E\8B0E;
                      JSR RunSpinningCoinSprs                   ;;8B13|8B11+8B11/8B11\8B11;
                      JSR RunShooters                           ;;8B16|8B14+8B14/8B14\8B14;
                      JSR CallGenerator                         ;;8B19|8B17+8B17/8B17\8B17;
                      JSR CODE_0294F5                           ;;8B1C|8B1A+8B1A/8B1A\8B1A;
                      JSR LoadSprFromLevel                      ;;8B1F|8B1D+8B1D/8B1D\8B1D;
                      LDA.W !SpriteRespawnTimer                 ;;8B22|8B20+8B20/8B20\8B20; \ Return if timer not set
                      BEQ +                                     ;;8B25|8B23+8B23/8B23\8B23; /
                      LDA.B !TrueFrame                          ;;8B27|8B25+8B25/8B25\8B25; \ Decrement every other frame...
                      AND.B #$01                                ;;8B29|8B27+8B27/8B27\8B27;  |
                      ORA.B !SpriteLock                         ;;8B2B|8B29+8B29/8B29\8B29;  | ...as long as sprites not locked...
                      ORA.W !SpriteWillAppear                   ;;8B2D|8B2B+8B2B/8B2B\8B2B;
                      BNE +                                     ;;8B30|8B2E+8B2E/8B2E\8B2E;  |
                      DEC.W !SpriteRespawnTimer                 ;;8B32|8B30+8B30/8B30\8B30; /
                      BNE +                                     ;;8B35|8B33+8B33/8B33\8B33; Return if the timer hasn't just run out
                      JSL FindFreeSprSlot                       ;;8B37|8B35+8B35/8B35\8B35; \ Return if no free slots
                      BMI +                                     ;;8B3B|8B39+8B39/8B39\8B39; /
                      TYX                                       ;;8B3D|8B3B+8B3B/8B3B\8B3B;
                      LDA.B #$01                                ;;8B3E|8B3C+8B3C/8B3C\8B3C; \ Sprite status = Initialization
                      STA.W !SpriteStatus,X                     ;;8B40|8B3E+8B3E/8B3E\8B3E; /
                      LDA.W !SpriteRespawnNumber                ;;8B43|8B41+8B41/8B41\8B41; \ Sprite = Sprite to respwan
                      STA.B !SpriteNumber,X                     ;;8B46|8B44+8B44/8B44\8B44; /
                      LDA.B !Layer1XPos                         ;;8B48|8B46+8B46/8B46\8B46;
                      SEC                                       ;;8B4A|8B48+8B48/8B48\8B48;
                      SBC.B #$20                                ;;8B4B|8B49+8B49/8B49\8B49;
                      AND.B #$EF                                ;;8B4D|8B4B+8B4B/8B4B\8B4B;
                      STA.B !SpriteXPosLow,X                    ;;8B4F|8B4D+8B4D/8B4D\8B4D;
                      LDA.B !Layer1XPos+1                       ;;8B51|8B4F+8B4F/8B4F\8B4F;
                      SBC.B #$00                                ;;8B53|8B51+8B51/8B51\8B51;
                      STA.W !SpriteXPosHigh,X                   ;;8B55|8B53+8B53/8B53\8B53;
                      LDA.W !SpriteRespawnYPos                  ;;8B58|8B56+8B56/8B56\8B56;
                      STA.B !SpriteYPosLow,X                    ;;8B5B|8B59+8B59/8B59\8B59;
                      LDA.W !SpriteRespawnYPos+1                ;;8B5D|8B5B+8B5B/8B5B\8B5B;
                      STA.W !SpriteYPosHigh,X                   ;;8B60|8B5E+8B5E/8B5E\8B5E;
                      JSL InitSpriteTables                      ;;8B63|8B61+8B61/8B61\8B61; Reset sprite tables
                    + PLB                                       ;;8B67|8B65+8B65/8B65\8B65;
                      RTL                                       ;;8B68|8B66+8B66/8B66\8B66; Return
                                                                ;;                        ;
RunMinorExtendedSprs: LDX.B #$0B                                ;;8B69|8B67+8B67/8B67\8B67;
.loop:                LDA.W !MinExtSpriteNumber,X               ;;8B6B|8B69+8B69/8B69\8B69;
                      BEQ +                                     ;;8B6E|8B6C+8B6C/8B6C\8B6C;
                      STX.W !MinorSpriteProcIndex               ;;8B70|8B6E+8B6E/8B6E\8B6E;
                      JSR CallMinorExtendedPtr                  ;;8B73|8B71+8B71/8B71\8B71;
                    + DEX                                       ;;8B76|8B74+8B74/8B74\8B74;
                      BPL .loop                                 ;;8B77|8B75+8B75/8B75\8B75;
Return028B77:         RTS                                       ;;8B79|8B77+8B77/8B77\8B77; Return
                                                                ;;                        ;
                                                                ;;                        ;
BrokenBlock:          db $50,$54,$58,$5C,$60,$64,$68,$6C        ;;8B7A|8B78+8B78/8B78\8B78;
                      db $70,$74,$78,$7C                        ;;8B82|8B80+8B80/8B80\8B80;
                                                                ;;                        ;
BrokenBlock2:         db $3C,$3D,$3D,$3C,$3C,$3D,$3D,$3C        ;;8B86|8B84+8B84/8B84\8B84;
DATA_028B8C:          db $00,$00,$80,$80,$80,$C0,$40,$00        ;;8B8E|8B8C+8B8C/8B8C\8B8C;
                                                                ;;                        ;
CallMinorExtendedPtr: JSL ExecutePtr                            ;;8B96|8B94+8B94/8B94\8B94;
                                                                ;;                        ;
                      dw Return028B77                           ;;8B9A|8B98+8B98/8B98\8B98;
                      dw CODE_028F8B                            ;;8B9C|8B9A+8B9A/8B9A\8B9A;
                      dw CODE_028ED2                            ;;8B9E|8B9C+8B9C/8B9C\8B9C;
                      dw CODE_028E7E                            ;;8BA0|8B9E+8B9E/8B9E\8B9E;
                      dw CODE_028F2F                            ;;8BA2|8BA0+8BA0/8BA0\8BA0;
                      dw CODE_028ED2                            ;;8BA4|8BA2+8BA2/8BA2\8BA2;
                      dw CODE_028DDB                            ;;8BA6|8BA4+8BA4/8BA4\8BA4;
                      dw CODE_028D4F                            ;;8BA8|8BA6+8BA6/8BA6\8BA6;
                      dw CODE_028DDB                            ;;8BAA|8BA8+8BA8/8BA8\8BA8;
                      dw CODE_028DDB                            ;;8BAC|8BAA+8BAA/8BAA\8BAA;
                      dw BooStreamAfterimage                    ;;8BAE|8BAC+8BAC/8BAC\8BAC;
                      dw ADDR_028C0F                            ;;8BB0|8BAE+8BAE/8BAE\8BAE;
                                                                ;;                        ;
DisabledAddSmokeRt:   PHB                                       ;;8BB2|8BB0+8BB0/8BB0\8BB0; \ This routine does nothing at all
                      PHK                                       ;;8BB3|8BB1+8BB1/8BB1\8BB1;  | I believe it used to call the below
                      PLB                                       ;;8BB4|8BB2+8BB2/8BB2\8BB2;  | routine to add smoke when boarding
                      JSR Return028BB8                          ;;8BB5|8BB3+8BB3/8BB3\8BB3;  | Yoshi
                      PLB                                       ;;8BB8|8BB6+8BB6/8BB6\8BB6;  |
                      RTL                                       ;;8BB9|8BB7+8BB7/8BB7\8BB7; / Return
                                                                ;;                        ;
Return028BB8:         RTS                                       ;;8BBA|8BB8+8BB8/8BB8\8BB8; Return
                                                                ;;                        ;
                      STZ.B !_0                                 ;;8BBB|8BB9+8BB9/8BB9\8BB9; \ Display smoke when getting on Yoshi
                      JSR ADDR_028BC0                           ;;8BBD|8BBB+8BBB/8BBB\8BBB;  |
                      INC.B !_0                                 ;;8BC0|8BBE+8BBE/8BBE\8BBE;  |
ADDR_028BC0:          LDY.B #$0B                                ;;8BC2|8BC0+8BC0/8BC0\8BC0;  |
ADDR_028BC2:          LDA.W !MinExtSpriteNumber,Y               ;;8BC4|8BC2+8BC2/8BC2\8BC2;  |
                      BEQ ADDR_028BCB                           ;;8BC7|8BC5+8BC5/8BC5\8BC5;  |
                      DEY                                       ;;8BC9|8BC7+8BC7/8BC7\8BC7;  |
                      BPL ADDR_028BC2                           ;;8BCA|8BC8+8BC8/8BC8\8BC8;  |
                      RTS                                       ;;8BCC|8BCA+8BCA/8BCA\8BCA; / Return
                                                                ;;                        ;
ADDR_028BCB:          LDA.B #$0B                                ;;8BCD|8BCB+8BCB/8BCB\8BCB;
                      STA.W !MinExtSpriteNumber,Y               ;;8BCF|8BCD+8BCD/8BCD\8BCD;
                      LDA.B #$00                                ;;8BD2|8BD0+8BD0/8BD0\8BD0;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;8BD4|8BD2+8BD2/8BD2\8BD2;
                      LDA.B !SpriteYPosLow,X                    ;;8BD7|8BD5+8BD5/8BD5\8BD5;
                      CLC                                       ;;8BD9|8BD7+8BD7/8BD7\8BD7;
                      ADC.B #$1C                                ;;8BDA|8BD8+8BD8/8BD8\8BD8;
                      STA.W !MinExtSpriteYPosLow,Y              ;;8BDC|8BDA+8BDA/8BDA\8BDA;
                      LDA.W !SpriteYPosHigh,X                   ;;8BDF|8BDD+8BDD/8BDD\8BDD;
                      ADC.B #$00                                ;;8BE2|8BE0+8BE0/8BE0\8BE0;
                      STA.W !MinExtSpriteYPosHigh,Y             ;;8BE4|8BE2+8BE2/8BE2\8BE2;
                      LDA.B !PlayerXPosNext                     ;;8BE7|8BE5+8BE5/8BE5\8BE5;
                      STA.B !_2                                 ;;8BE9|8BE7+8BE7/8BE7\8BE7;
                      LDA.B !PlayerXPosNext+1                   ;;8BEB|8BE9+8BE9/8BE9\8BE9;
                      STA.B !_3                                 ;;8BED|8BEB+8BEB/8BEB\8BEB;
                      PHX                                       ;;8BEF|8BED+8BED/8BED\8BED;
                      LDX.B !_0                                 ;;8BF0|8BEE+8BEE/8BEE\8BEE;
                      LDA.W DATA_028C09,X                       ;;8BF2|8BF0+8BF0/8BF0\8BF0;
                      STA.W !MinExtSpriteXSpeed,Y               ;;8BF5|8BF3+8BF3/8BF3\8BF3;
                      LDA.B !_2                                 ;;8BF8|8BF6+8BF6/8BF6\8BF6;
                      CLC                                       ;;8BFA|8BF8+8BF8/8BF8\8BF8;
                      ADC.W DATA_028C0B,X                       ;;8BFB|8BF9+8BF9/8BF9\8BF9;
                      STA.W !MinExtSpriteXPosLow,Y              ;;8BFE|8BFC+8BFC/8BFC\8BFC;
                      LDA.B !_3                                 ;;8C01|8BFF+8BFF/8BFF\8BFF;
                      ADC.W DATA_028C0D,X                       ;;8C03|8C01+8C01/8C01\8C01;
                      STA.W !MinExtSpriteXPosHigh,Y             ;;8C06|8C04+8C04/8C04\8C04;
                      PLX                                       ;;8C09|8C07+8C07/8C07\8C07;
                      RTS                                       ;;8C0A|8C08+8C08/8C08\8C08; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028C09:          db $40,$C0                                ;;8C0B|8C09+8C09/8C09\8C09;
                                                                ;;                        ;
DATA_028C0B:          db $0C,$FC                                ;;8C0D|8C0B+8C0B/8C0B\8C0B;
                                                                ;;                        ;
DATA_028C0D:          db $00,$FF                                ;;8C0F|8C0D+8C0D/8C0D\8C0D;
                                                                ;;                        ;
ADDR_028C0F:          LDA.W !MinExtSpriteXPosSpx,X              ;;8C11|8C0F+8C0F/8C0F\8C0F;
                      BNE ADDR_028C61                           ;;8C14|8C12+8C12/8C12\8C12;
                      LDA.W !MinExtSpriteXSpeed,X               ;;8C16|8C14+8C14/8C14\8C14;
                      BEQ ADDR_028C66                           ;;8C19|8C17+8C17/8C17\8C17;
                      BPL ADDR_028C20                           ;;8C1B|8C19+8C19/8C19\8C19;
                      CLC                                       ;;8C1D|8C1B+8C1B/8C1B\8C1B;
                      ADC.B #$08                                ;;8C1E|8C1C+8C1C/8C1C\8C1C;
                      BRA +                                     ;;8C20|8C1E+8C1E/8C1E\8C1E;
                                                                ;;                        ;
ADDR_028C20:          SEC                                       ;;8C22|8C20+8C20/8C20\8C20;
                      SBC.B #$08                                ;;8C23|8C21+8C21/8C21\8C21;
                    + STA.W !MinExtSpriteXSpeed,X               ;;8C25|8C23+8C23/8C23\8C23;
                      JSR CODE_02B5BC                           ;;8C28|8C26+8C26/8C26\8C26;
                      TXA                                       ;;8C2B|8C29+8C29/8C29\8C29;
                      EOR.B !TrueFrame                          ;;8C2C|8C2A+8C2A/8C2A\8C2A;
                      AND.B #$03                                ;;8C2E|8C2C+8C2C/8C2C\8C2C;
                      BNE Return028C60                          ;;8C30|8C2E+8C2E/8C2E\8C2E;
                      LDY.B #$0B                                ;;8C32|8C30+8C30/8C30\8C30;
ADDR_028C32:          LDA.W !MinExtSpriteNumber,Y               ;;8C34|8C32+8C32/8C32\8C32;
                      BEQ ADDR_028C3B                           ;;8C37|8C35+8C35/8C35\8C35;
                      DEY                                       ;;8C39|8C37+8C37/8C37\8C37;
                      BPL ADDR_028C32                           ;;8C3A|8C38+8C38/8C38\8C38;
                      RTS                                       ;;8C3C|8C3A+8C3A/8C3A\8C3A; Return
                                                                ;;                        ;
ADDR_028C3B:          LDA.B #$0B                                ;;8C3D|8C3B+8C3B/8C3B\8C3B;
                      STA.W !MinExtSpriteNumber,Y               ;;8C3F|8C3D+8C3D/8C3D\8C3D;
                      STA.W !MinExtSpriteYSpeed,Y               ;;8C42|8C40+8C40/8C40\8C40;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8C45|8C43+8C43/8C43\8C43;
                      STA.W !MinExtSpriteXPosLow,Y              ;;8C48|8C46+8C46/8C46\8C46;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8C4B|8C49+8C49/8C49\8C49;
                      STA.W !MinExtSpriteXPosHigh,Y             ;;8C4E|8C4C+8C4C/8C4C\8C4C;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8C51|8C4F+8C4F/8C4F\8C4F;
                      STA.W !MinExtSpriteYPosLow,Y              ;;8C54|8C52+8C52/8C52\8C52;
                      LDA.W !MinExtSpriteYPosHigh,X             ;;8C57|8C55+8C55/8C55\8C55;
                      STA.W !MinExtSpriteYPosHigh,Y             ;;8C5A|8C58+8C58/8C58\8C58;
                      LDA.B #$10                                ;;8C5D|8C5B+8C5B/8C5B\8C5B;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;8C5F|8C5D+8C5D/8C5D\8C5D;
Return028C60:         RTS                                       ;;8C62|8C60+8C60/8C60\8C60; Return
                                                                ;;                        ;
ADDR_028C61:          DEC.W !MinExtSpriteXPosSpx,X              ;;8C63|8C61+8C61/8C61\8C61;
                      BNE +                                     ;;8C66|8C64+8C64/8C64\8C64;
ADDR_028C66:          STZ.W !MinExtSpriteNumber,X               ;;8C68|8C66+8C66/8C66\8C66;
                      RTS                                       ;;8C6B|8C69+8C69/8C69\8C69; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_028C6A:          db $66,$66,$64,$62                        ;;8C6C|8C6A+8C6A/8C6A\8C6A;
                                                                ;;                        ;
                    + LDY.W BrokenBlock,X                       ;;8C70|8C6E+8C6E/8C6E\8C6E;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8C73|8C71+8C71/8C71\8C71;
                      SEC                                       ;;8C76|8C74+8C74/8C74\8C74;
                      SBC.B !Layer1XPos                         ;;8C77|8C75+8C75/8C75\8C75;
                      STA.B !_0                                 ;;8C79|8C77+8C77/8C77\8C77;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8C7B|8C79+8C79/8C79\8C79;
                      SBC.B !Layer1XPos+1                       ;;8C7E|8C7C+8C7C/8C7C\8C7C;
                      BNE ADDR_028C66                           ;;8C80|8C7E+8C7E/8C7E\8C7E;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8C82|8C80+8C80/8C80\8C80;
                      SEC                                       ;;8C85|8C83+8C83/8C83\8C83;
                      SBC.B !Layer1YPos                         ;;8C86|8C84+8C84/8C84\8C84;
                      STA.B !_1                                 ;;8C88|8C86+8C86/8C86\8C86;
                      LDA.W !MinExtSpriteYPosHigh,X             ;;8C8A|8C88+8C88/8C88\8C88;
                      SBC.B !Layer1YPos+1                       ;;8C8D|8C8B+8C8B/8C8B\8C8B;
                      BNE ADDR_028C66                           ;;8C8F|8C8D+8C8D/8C8D\8C8D;
                      LDA.B !_0                                 ;;8C91|8C8F+8C8F/8C8F\8C8F;
                      STA.W !OAMTileXPos,Y                      ;;8C93|8C91+8C91/8C91\8C91;
                      LDA.B !_1                                 ;;8C96|8C94+8C94/8C94\8C94;
                      STA.W !OAMTileYPos,Y                      ;;8C98|8C96+8C96/8C96\8C96;
                      PHX                                       ;;8C9B|8C99+8C99/8C99\8C99;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8C9C|8C9A+8C9A/8C9A\8C9A;
                      LSR A                                     ;;8C9F|8C9D+8C9D/8C9D\8C9D;
                      LSR A                                     ;;8CA0|8C9E+8C9E/8C9E\8C9E;
                      TAX                                       ;;8CA1|8C9F+8C9F/8C9F\8C9F;
                      LDA.W DATA_028C6A,X                       ;;8CA2|8CA0+8CA0/8CA0\8CA0;
                      STA.W !OAMTileNo,Y                        ;;8CA5|8CA3+8CA3/8CA3\8CA3;
                      PLX                                       ;;8CA8|8CA6+8CA6/8CA6\8CA6;
                      LDA.B !SpriteProperties                   ;;8CA9|8CA7+8CA7/8CA7\8CA7;
                      ORA.B #$08                                ;;8CAB|8CA9+8CA9/8CA9\8CA9;
                      STA.W !OAMTileAttr,Y                      ;;8CAD|8CAB+8CAB/8CAB\8CAB;
                      TYA                                       ;;8CB0|8CAE+8CAE/8CAE\8CAE;
                      LSR A                                     ;;8CB1|8CAF+8CAF/8CAF\8CAF;
                      LSR A                                     ;;8CB2|8CB0+8CB0/8CB0\8CB0;
                      TAY                                       ;;8CB3|8CB1+8CB1/8CB1\8CB1;
                      LDA.B #$00                                ;;8CB4|8CB2+8CB2/8CB2\8CB2;
                      STA.W !OAMTileSize,Y                      ;;8CB6|8CB4+8CB4/8CB4\8CB4;
                      RTS                                       ;;8CB9|8CB7+8CB7/8CB7\8CB7; Return
                                                                ;;                        ;
                                                                ;;                        ;
BooStreamTiles:       db $88,$A8,$AA,$8C,$8E,$AE,$88,$A8        ;;8CBA|8CB8+8CB8/8CB8\8CB8;
                      db $AA,$8C,$8E,$AE                        ;;8CC2|8CC0+8CC0/8CC0\8CC0;
                                                                ;;                        ;
BooStreamAfterimage:  LDA.B !SpriteLock                         ;;8CC6|8CC4+8CC4/8CC4\8CC4; \ Branch if sprites locked
                      BNE CODE_028CFF                           ;;8CC8|8CC6+8CC6/8CC6\8CC6; /
                      LDA.W !MinExtSpriteXPosLow,X              ;;8CCA|8CC8+8CC8/8CC8\8CC8;
                      CLC                                       ;;8CCD|8CCB+8CCB/8CCB\8CCB;
                      ADC.B #$04                                ;;8CCE|8CCC+8CCC/8CCC\8CCC;
                      STA.B !_4                                 ;;8CD0|8CCE+8CCE/8CCE\8CCE;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8CD2|8CD0+8CD0/8CD0\8CD0;
                      ADC.B #$00                                ;;8CD5|8CD3+8CD3/8CD3\8CD3;
                      STA.B !_A                                 ;;8CD7|8CD5+8CD5/8CD5\8CD5;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8CD9|8CD7+8CD7/8CD7\8CD7;
                      CLC                                       ;;8CDC|8CDA+8CDA/8CDA\8CDA;
                      ADC.B #$04                                ;;8CDD|8CDB+8CDB/8CDB\8CDB;
                      STA.B !_5                                 ;;8CDF|8CDD+8CDD/8CDD\8CDD;
                      LDA.W !MinExtSpriteYPosHigh,X             ;;8CE1|8CDF+8CDF/8CDF\8CDF;
                      ADC.B #$00                                ;;8CE4|8CE2+8CE2/8CE2\8CE2;
                      STA.B !_B                                 ;;8CE6|8CE4+8CE4/8CE4\8CE4;
                      LDA.B #$08                                ;;8CE8|8CE6+8CE6/8CE6\8CE6;
                      STA.B !_6                                 ;;8CEA|8CE8+8CE8/8CE8\8CE8;
                      STA.B !_7                                 ;;8CEC|8CEA+8CEA/8CEA\8CEA;
                      JSL GetMarioClipping                      ;;8CEE|8CEC+8CEC/8CEC\8CEC;
                      JSL CheckForContact                       ;;8CF2|8CF0+8CF0/8CF0\8CF0;
                      BCC +                                     ;;8CF6|8CF4+8CF4/8CF4\8CF4;
                      JSL HurtMario                             ;;8CF8|8CF6+8CF6/8CF6\8CF6;
                    + DEC.W !MinExtSpriteXPosSpx,X              ;;8CFC|8CFA+8CFA/8CFA\8CFA;
                      BEQ CODE_028D62                           ;;8CFF|8CFD+8CFD/8CFD\8CFD;
CODE_028CFF:          LDY.W BrokenBlock,X                       ;;8D01|8CFF+8CFF/8CFF\8CFF;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8D04|8D02+8D02/8D02\8D02;
                      SEC                                       ;;8D07|8D05+8D05/8D05\8D05;
                      SBC.B !Layer1XPos                         ;;8D08|8D06+8D06/8D06\8D06;
                      STA.B !_0                                 ;;8D0A|8D08+8D08/8D08\8D08;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8D0C|8D0A+8D0A/8D0A\8D0A;
                      SBC.B !Layer1XPos+1                       ;;8D0F|8D0D+8D0D/8D0D\8D0D;
                      BNE Return028D41                          ;;8D11|8D0F+8D0F/8D0F\8D0F;
                      LDA.B !_0                                 ;;8D13|8D11+8D11/8D11\8D11;
                      STA.W !OAMTileXPos,Y                      ;;8D15|8D13+8D13/8D13\8D13;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8D18|8D16+8D16/8D16\8D16;
                      SEC                                       ;;8D1B|8D19+8D19/8D19\8D19;
                      SBC.B !Layer1YPos                         ;;8D1C|8D1A+8D1A/8D1A\8D1A;
                      CMP.B #$F0                                ;;8D1E|8D1C+8D1C/8D1C\8D1C;
                      BCS CODE_028D62                           ;;8D20|8D1E+8D1E/8D1E\8D1E;
                      STA.W !OAMTileYPos,Y                      ;;8D22|8D20+8D20/8D20\8D20;
                      LDA.W BooStreamTiles,X                    ;;8D25|8D23+8D23/8D23\8D23;
                      STA.W !OAMTileNo,Y                        ;;8D28|8D26+8D26/8D26\8D26;
                      LDA.W !MinExtSpriteXSpeed,X               ;;8D2B|8D29+8D29/8D29\8D29;
                      LSR A                                     ;;8D2E|8D2C+8D2C/8D2C\8D2C;
                      AND.B #$40                                ;;8D2F|8D2D+8D2D/8D2D\8D2D;
                      EOR.B #$40                                ;;8D31|8D2F+8D2F/8D2F\8D2F;
                      ORA.B !SpriteProperties                   ;;8D33|8D31+8D31/8D31\8D31;
                      ORA.B #$0F                                ;;8D35|8D33+8D33/8D33\8D33;
                      STA.W !OAMTileAttr,Y                      ;;8D37|8D35+8D35/8D35\8D35;
                      TYA                                       ;;8D3A|8D38+8D38/8D38\8D38;
                      LSR A                                     ;;8D3B|8D39+8D39/8D39\8D39;
                      LSR A                                     ;;8D3C|8D3A+8D3A/8D3A\8D3A;
                      TAY                                       ;;8D3D|8D3B+8D3B/8D3B\8D3B;
                      LDA.B #$02                                ;;8D3E|8D3C+8D3C/8D3C\8D3C;
                      STA.W !OAMTileSize,Y                      ;;8D40|8D3E+8D3E/8D3E\8D3E;
Return028D41:         RTS                                       ;;8D43|8D41+8D41/8D41\8D41; Return
                                                                ;;                        ;
                                                                ;;                        ;
WaterSplashTiles:     db $68,$68,$6A,$6A,$6A,$62,$62,$62        ;;8D44|8D42+8D42/8D42\8D42;
                      db $64,$64,$64,$64,$66                    ;;8D4C|8D4A+8D4A/8D4A\8D4A;
                                                                ;;                        ;
CODE_028D4F:          LDA.W !MinExtSpriteXPosLow,X              ;;8D51|8D4F+8D4F/8D4F\8D4F;
                      CMP.B !Layer1XPos                         ;;8D54|8D52+8D52/8D52\8D52;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8D56|8D54+8D54/8D54\8D54;
                      SBC.B !Layer1XPos+1                       ;;8D59|8D57+8D57/8D57\8D57;
                      BNE CODE_028D62                           ;;8D5B|8D59+8D59/8D59\8D59;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8D5D|8D5B+8D5B/8D5B\8D5B;
                      CMP.B #$20                                ;;8D60|8D5E+8D5E/8D5E\8D5E;
                      BNE +                                     ;;8D62|8D60+8D60/8D60\8D60;
CODE_028D62:          STZ.W !MinExtSpriteNumber,X               ;;8D64|8D62+8D62/8D62\8D62;
                      RTS                                       ;;8D67|8D65+8D65/8D65\8D65; Return
                                                                ;;                        ;
                    + STZ.B !_0                                 ;;8D68|8D66+8D66/8D66\8D66;
                      CMP.B #$10                                ;;8D6A|8D68+8D68/8D68\8D68;
                      BCC CODE_028D8B                           ;;8D6C|8D6A+8D6A/8D6A\8D6A;
                      AND.B #$01                                ;;8D6E|8D6C+8D6C/8D6C\8D6C;
                      ORA.B !SpriteLock                         ;;8D70|8D6E+8D6E/8D6E\8D6E;
                      BNE +                                     ;;8D72|8D70+8D70/8D70\8D70;
                      INC.W !MinExtSpriteYPosLow,X              ;;8D74|8D72+8D72/8D72\8D72;
                    + LDA.W !MinExtSpriteXPosSpx,X              ;;8D77|8D75+8D75/8D75\8D75;
                      SEC                                       ;;8D7A|8D78+8D78/8D78\8D78;
                      SBC.B #$10                                ;;8D7B|8D79+8D79/8D79\8D79;
                      LSR A                                     ;;8D7D|8D7B+8D7B/8D7B\8D7B;
                      LSR A                                     ;;8D7E|8D7C+8D7C/8D7C\8D7C;
                      STA.B !_2                                 ;;8D7F|8D7D+8D7D/8D7D\8D7D;
                      LDA.B !TrueFrame                          ;;8D81|8D7F+8D7F/8D7F\8D7F;
                      LSR A                                     ;;8D83|8D81+8D81/8D81\8D81;
                      LDA.B !_2                                 ;;8D84|8D82+8D82/8D82\8D82;
                      BCC +                                     ;;8D86|8D84+8D84/8D84\8D84;
                      EOR.B #$FF                                ;;8D88|8D86+8D86/8D86\8D86;
                      INC A                                     ;;8D8A|8D88+8D88/8D88\8D88;
                    + STA.B !_0                                 ;;8D8B|8D89+8D89/8D89\8D89;
CODE_028D8B:          LDY.W BrokenBlock,X                       ;;8D8D|8D8B+8D8B/8D8B\8D8B;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8D90|8D8E+8D8E/8D8E\8D8E;
                      CLC                                       ;;8D93|8D91+8D91/8D91\8D91;
                      ADC.B !_0                                 ;;8D94|8D92+8D92/8D92\8D92;
                      SEC                                       ;;8D96|8D94+8D94/8D94\8D94;
                      SBC.B !Layer1XPos                         ;;8D97|8D95+8D95/8D95\8D95;
                      CMP.B #$F0                                ;;8D99|8D97+8D97/8D97\8D97;
                      BCS CODE_028D62                           ;;8D9B|8D99+8D99/8D99\8D99;
                      STA.W !OAMTileXPos,Y                      ;;8D9D|8D9B+8D9B/8D9B\8D9B;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8DA0|8D9E+8D9E/8D9E\8D9E;
                      SEC                                       ;;8DA3|8DA1+8DA1/8DA1\8DA1;
                      SBC.B !Layer1YPos                         ;;8DA4|8DA2+8DA2/8DA2\8DA2;
                      CMP.B #$E8                                ;;8DA6|8DA4+8DA4/8DA4\8DA4;
                      BCS CODE_028D62                           ;;8DA8|8DA6+8DA6/8DA6\8DA6;
                      STA.W !OAMTileYPos,Y                      ;;8DAA|8DA8+8DA8/8DA8\8DA8;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8DAD|8DAB+8DAB/8DAB\8DAB;
                      LSR A                                     ;;8DB0|8DAE+8DAE/8DAE\8DAE;
                      TAX                                       ;;8DB1|8DAF+8DAF/8DAF\8DAF;
                      CPX.B #$0C                                ;;8DB2|8DB0+8DB0/8DB0\8DB0;
                      BCC +                                     ;;8DB4|8DB2+8DB2/8DB2\8DB2;
                      LDX.B #$0C                                ;;8DB6|8DB4+8DB4/8DB4\8DB4;
                    + %LorW_X(LDA,WaterSplashTiles)             ;;8DB8|8DB6+8DB6/8DB6\8DB6;
                      LDX.W !MinorSpriteProcIndex               ;;8DBC|8DB9+8DB9/8DB9\8DB9;
                      STA.W !OAMTileNo,Y                        ;;8DBF|8DBC+8DBC/8DBC\8DBC;
                      LDA.B !SpriteProperties                   ;;8DC2|8DBF+8DBF/8DBF\8DBF;
                      ORA.B #$02                                ;;8DC4|8DC1+8DC1/8DC1\8DC1;
                      STA.W !OAMTileAttr,Y                      ;;8DC6|8DC3+8DC3/8DC3\8DC3;
                      TYA                                       ;;8DC9|8DC6+8DC6/8DC6\8DC6;
                      LSR A                                     ;;8DCA|8DC7+8DC7/8DC7\8DC7;
                      LSR A                                     ;;8DCB|8DC8+8DC8/8DC8\8DC8;
                      TAY                                       ;;8DCC|8DC9+8DC9/8DC9\8DC9;
                      LDA.B #$02                                ;;8DCD|8DCA+8DCA/8DCA\8DCA;
                      STA.W !OAMTileSize,Y                      ;;8DCF|8DCC+8DCC/8DCC\8DCC;
                      LDA.B !SpriteLock                         ;;8DD2|8DCF+8DCF/8DCF\8DCF; \ Branch if sprites locked
                      BNE +                                     ;;8DD4|8DD1+8DD1/8DD1\8DD1; /
                      INC.W !MinExtSpriteXPosSpx,X              ;;8DD6|8DD3+8DD3/8DD3\8DD3;
                    + RTS                                       ;;8DD9|8DD6+8DD6/8DD6\8DD6; Return
                                                                ;;                        ;
                                                                ;;                        ;
RipVanFishZsTiles:    db $F1,$F0,$E1,$E0                        ;;8DDA|8DD7+8DD7/8DD7\8DD7;
                                                                ;;                        ;
CODE_028DDB:          LDA.B !SpriteLock                         ;;8DDE|8DDB+8DDB/8DDB\8DDB; \ Branch if sprites locked
                      BNE CODE_028E20                           ;;8DE0|8DDD+8DDD/8DDD\8DDD; /
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8DE2|8DDF+8DDF/8DDF\8DDF;
                      BEQ +                                     ;;8DE5|8DE2+8DE2/8DE2\8DE2;
                      DEC.W !MinExtSpriteXPosSpx,X              ;;8DE7|8DE4+8DE4/8DE4\8DE4;
                    + LDA.W !MinExtSpriteXPosSpx,X              ;;8DEA|8DE7+8DE7/8DE7\8DE7;
                      AND.B #$00                                ;;8DED|8DEA+8DEA/8DEA\8DEA;
                      BNE +                                     ;;8DEF|8DEC+8DEC/8DEC\8DEC;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8DF1|8DEE+8DEE/8DEE\8DEE;
                      INC.W !MinExtSpriteXSpeed,X               ;;8DF4|8DF1+8DF1/8DF1\8DF1;
                      AND.B #$10                                ;;8DF7|8DF4+8DF4/8DF4\8DF4;
                      BNE +                                     ;;8DF9|8DF6+8DF6/8DF6\8DF6;
                      DEC.W !MinExtSpriteXSpeed,X               ;;8DFB|8DF8+8DF8/8DF8\8DF8;
                      DEC.W !MinExtSpriteXSpeed,X               ;;8DFE|8DFB+8DFB/8DFB\8DFB;
                    + LDA.W !MinExtSpriteXSpeed,X               ;;8E01|8DFE+8DFE/8DFE\8DFE;
                      PHA                                       ;;8E04|8E01+8E01/8E01\8E01;
                      LDY.W !MinExtSpriteNumber,X               ;;8E05|8E02+8E02/8E02\8E02;
                      CPY.B #$09                                ;;8E08|8E05+8E05/8E05\8E05;
                      BNE +                                     ;;8E0A|8E07+8E07/8E07\8E07;
                      EOR.B #$FF                                ;;8E0C|8E09+8E09/8E09\8E09;
                      INC A                                     ;;8E0E|8E0B+8E0B/8E0B\8E0B;
                      STA.W !MinExtSpriteXSpeed,X               ;;8E0F|8E0C+8E0C/8E0C\8E0C;
                    + JSR CODE_02B5BC                           ;;8E12|8E0F+8E0F/8E0F\8E0F;
                      PLA                                       ;;8E15|8E12+8E12/8E12\8E12;
                      STA.W !MinExtSpriteXSpeed,X               ;;8E16|8E13+8E13/8E13\8E13;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8E19|8E16+8E16/8E16\8E16;
                      AND.B #$03                                ;;8E1C|8E19+8E19/8E19\8E19;
                      BNE CODE_028E20                           ;;8E1E|8E1B+8E1B/8E1B\8E1B;
                      DEC.W !MinExtSpriteYPosLow,X              ;;8E20|8E1D+8E1D/8E1D\8E1D;
CODE_028E20:          LDY.W BrokenBlock,X                       ;;8E23|8E20+8E20/8E20\8E20;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8E26|8E23+8E23/8E23\8E23;
                      SEC                                       ;;8E29|8E26+8E26/8E26\8E26;
                      SBC.B !Layer1XPos                         ;;8E2A|8E27+8E27/8E27\8E27;
                      CMP.B #$08                                ;;8E2C|8E29+8E29/8E29\8E29;
                      BCC CODE_028E76                           ;;8E2E|8E2B+8E2B/8E2B\8E2B;
                      CMP.B #$FC                                ;;8E30|8E2D+8E2D/8E2D\8E2D;
                      BCS CODE_028E76                           ;;8E32|8E2F+8E2F/8E2F\8E2F;
                      STA.W !OAMTileXPos,Y                      ;;8E34|8E31+8E31/8E31\8E31;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8E37|8E34+8E34/8E34\8E34;
                      SEC                                       ;;8E3A|8E37+8E37/8E37\8E37;
                      SBC.B !Layer1YPos                         ;;8E3B|8E38+8E38/8E38\8E38;
                      CMP.B #$F0                                ;;8E3D|8E3A+8E3A/8E3A\8E3A;
                      BCS CODE_028E76                           ;;8E3F|8E3C+8E3C/8E3C\8E3C;
                      STA.W !OAMTileYPos,Y                      ;;8E41|8E3E+8E3E/8E3E\8E3E;
                      LDA.B !SpriteProperties                   ;;8E44|8E41+8E41/8E41\8E41;
                      ORA.B #$03                                ;;8E46|8E43+8E43/8E43\8E43;
                      STA.W !OAMTileAttr,Y                      ;;8E48|8E45+8E45/8E45\8E45;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8E4B|8E48+8E48/8E48\8E48;
                      CMP.B #$14                                ;;8E4E|8E4B+8E4B/8E4B\8E4B;
                      BEQ CODE_028E76                           ;;8E50|8E4D+8E4D/8E4D\8E4D;
                      LDA.W !MinExtSpriteNumber,X               ;;8E52|8E4F+8E4F/8E4F\8E4F;
                      CMP.B #$08                                ;;8E55|8E52+8E52/8E52\8E52;
                      LDA.B #$7F                                ;;8E57|8E54+8E54/8E54\8E54;
                      BCS +                                     ;;8E59|8E56+8E56/8E56\8E56;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8E5B|8E58+8E58/8E58\8E58;
                      LSR A                                     ;;8E5E|8E5B+8E5B/8E5B\8E5B;
                      LSR A                                     ;;8E5F|8E5C+8E5C/8E5C\8E5C;
                      LSR A                                     ;;8E60|8E5D+8E5D/8E5D\8E5D;
                      LSR A                                     ;;8E61|8E5E+8E5E/8E5E\8E5E;
                      LSR A                                     ;;8E62|8E5F+8E5F/8E5F\8E5F;
                      AND.B #$03                                ;;8E63|8E60+8E60/8E60\8E60;
                      TAX                                       ;;8E65|8E62+8E62/8E62\8E62;
                      %LorW_X(LDA,RipVanFishZsTiles)            ;;8E66|8E63+8E63/8E63\8E63;
                    + STA.W !OAMTileNo,Y                        ;;8E6A|8E66+8E66/8E66\8E66;
                      TYA                                       ;;8E6D|8E69+8E69/8E69\8E69;
                      LSR A                                     ;;8E6E|8E6A+8E6A/8E6A\8E6A;
                      LSR A                                     ;;8E6F|8E6B+8E6B/8E6B\8E6B;
                      TAY                                       ;;8E70|8E6C+8E6C/8E6C\8E6C;
                      LDA.B #$00                                ;;8E71|8E6D+8E6D/8E6D\8E6D;
                      STA.W !OAMTileSize,Y                      ;;8E73|8E6F+8E6F/8E6F\8E6F;
                      LDX.W !MinorSpriteProcIndex               ;;8E76|8E72+8E72/8E72\8E72;
                      RTS                                       ;;8E79|8E75+8E75/8E75\8E75; Return
                                                                ;;                        ;
CODE_028E76:          STZ.W !MinExtSpriteNumber,X               ;;8E7A|8E76+8E76/8E76\8E76;
                      RTS                                       ;;8E7D|8E79+8E79/8E79\8E79; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $03,$43,$83,$C3                        ;;8E7E|8E7A+8E7A/8E7A\8E7A;
                                                                ;;                        ;
CODE_028E7E:          DEC.W !MinExtSpriteXPosSpx,X              ;;8E82|8E7E+8E7E/8E7E\8E7E;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8E85|8E81+8E81/8E81\8E81;
                      AND.B #$3F                                ;;8E88|8E84+8E84/8E84\8E84;
                      BEQ CODE_028ED7                           ;;8E8A|8E86+8E86/8E86\8E86;
                      JSR CODE_02B5BC                           ;;8E8C|8E88+8E88/8E88\8E88;
                      JSR CODE_02B5C8                           ;;8E8F|8E8B+8E8B/8E8B\8E8B;
                      INC.W !MinExtSpriteYSpeed,X               ;;8E92|8E8E+8E8E/8E8E\8E8E;
                      INC.W !MinExtSpriteYSpeed,X               ;;8E95|8E91+8E91/8E91\8E91;
                      LDY.W BrokenBlock,X                       ;;8E98|8E94+8E94/8E94\8E94;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8E9B|8E97+8E97/8E97\8E97;
                      SEC                                       ;;8E9E|8E9A+8E9A/8E9A\8E9A;
                      SBC.B !Layer1YPos                         ;;8E9F|8E9B+8E9B/8E9B\8E9B;
                      CMP.B #$F0                                ;;8EA1|8E9D+8E9D/8E9D\8E9D;
                      BCS CODE_028ED7                           ;;8EA3|8E9F+8E9F/8E9F\8E9F;
                      STA.W !OAMTileYPos,Y                      ;;8EA5|8EA1+8EA1/8EA1\8EA1;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8EA8|8EA4+8EA4/8EA4\8EA4;
                      SEC                                       ;;8EAB|8EA7+8EA7/8EA7\8EA7;
                      SBC.B !Layer1XPos                         ;;8EAC|8EA8+8EA8/8EA8\8EA8;
                      CMP.B #$F8                                ;;8EAE|8EAA+8EAA/8EAA\8EAA;
                      BCS CODE_028ED7                           ;;8EB0|8EAC+8EAC/8EAC\8EAC;
                      STA.W !OAMTileXPos,Y                      ;;8EB2|8EAE+8EAE/8EAE\8EAE;
                      LDA.B #$6F                                ;;8EB5|8EB1+8EB1/8EB1\8EB1;
                      STA.W !OAMTileNo,Y                        ;;8EB7|8EB3+8EB3/8EB3\8EB3;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8EBA|8EB6+8EB6/8EB6\8EB6;
                      AND.B #$C0                                ;;8EBD|8EB9+8EB9/8EB9\8EB9;
                      ORA.B #$03                                ;;8EBF|8EBB+8EBB/8EBB\8EBB;
                      ORA.B !SpriteProperties                   ;;8EC1|8EBD+8EBD/8EBD\8EBD;
                      STA.W !OAMTileAttr,Y                      ;;8EC3|8EBF+8EBF/8EBF\8EBF;
                      TYA                                       ;;8EC6|8EC2+8EC2/8EC2\8EC2;
                      LSR A                                     ;;8EC7|8EC3+8EC3/8EC3\8EC3;
                      LSR A                                     ;;8EC8|8EC4+8EC4/8EC4\8EC4;
                      TAY                                       ;;8EC9|8EC5+8EC5/8EC5\8EC5;
                      LDA.B #$00                                ;;8ECA|8EC6+8EC6/8EC6\8EC6;
                      STA.W !OAMTileSize,Y                      ;;8ECC|8EC8+8EC8/8EC8\8EC8;
                      RTS                                       ;;8ECF|8ECB+8ECB/8ECB\8ECB; Return
                                                                ;;                        ;
                                                                ;;                        ;
StarSparkleTiles:     db $66,$6E,$FF,$6D,$6C,$5C                ;;8ED0|8ECC+8ECC/8ECC\8ECC;
                                                                ;;                        ;
CODE_028ED2:          LDA.W !MinExtSpriteXPosSpx,X              ;;8ED6|8ED2+8ED2/8ED2\8ED2;
                      BNE +                                     ;;8ED9|8ED5+8ED5/8ED5\8ED5;
CODE_028ED7:          JMP CODE_028F87                           ;;8EDB|8ED7+8ED7/8ED7\8ED7;
                                                                ;;                        ;
                    + LDY.B !SpriteLock                         ;;8EDE|8EDA+8EDA/8EDA\8EDA;
                      BNE +                                     ;;8EE0|8EDC+8EDC/8EDC\8EDC;
                      DEC.W !MinExtSpriteXPosSpx,X              ;;8EE2|8EDE+8EDE/8EDE\8EDE;
                    + LDY.W BrokenBlock,X                       ;;8EE5|8EE1+8EE1/8EE1\8EE1;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8EE8|8EE4+8EE4/8EE4\8EE4;
                      SEC                                       ;;8EEB|8EE7+8EE7/8EE7\8EE7;
                      SBC.B !Layer1XPos                         ;;8EEC|8EE8+8EE8/8EE8\8EE8;
                      CMP.B #$F0                                ;;8EEE|8EEA+8EEA/8EEA\8EEA;
                      BCS CODE_028ED7                           ;;8EF0|8EEC+8EEC/8EEC\8EEC;
                      STA.W !OAMTileXPos,Y                      ;;8EF2|8EEE+8EEE/8EEE\8EEE;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8EF5|8EF1+8EF1/8EF1\8EF1;
                      SEC                                       ;;8EF8|8EF4+8EF4/8EF4\8EF4;
                      SBC.B !Layer1YPos                         ;;8EF9|8EF5+8EF5/8EF5\8EF5;
                      CMP.B #$F0                                ;;8EFB|8EF7+8EF7/8EF7\8EF7;
                      BCS CODE_028ED7                           ;;8EFD|8EF9+8EF9/8EF9\8EF9;
                      STA.W !OAMTileYPos,Y                      ;;8EFF|8EFB+8EFB/8EFB\8EFB;
                      LDA.W !MinExtSpriteNumber,X               ;;8F02|8EFE+8EFE/8EFE\8EFE;
                      PHA                                       ;;8F05|8F01+8F01/8F01\8F01;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8F06|8F02+8F02/8F02\8F02;
                      LSR A                                     ;;8F09|8F05+8F05/8F05\8F05;
                      LSR A                                     ;;8F0A|8F06+8F06/8F06\8F06;
                      LSR A                                     ;;8F0B|8F07+8F07/8F07\8F07;
                      TAX                                       ;;8F0C|8F08+8F08/8F08\8F08;
                      PLA                                       ;;8F0D|8F09+8F09/8F09\8F09;
                      CMP.B #$05                                ;;8F0E|8F0A+8F0A/8F0A\8F0A;
                      BNE +                                     ;;8F10|8F0C+8F0C/8F0C\8F0C;
                      INX                                       ;;8F12|8F0E+8F0E/8F0E\8F0E;
                      INX                                       ;;8F13|8F0F+8F0F/8F0F\8F0F;
                      INX                                       ;;8F14|8F10+8F10/8F10\8F10;
                    + %LorW_X(LDA,StarSparkleTiles)             ;;8F15|8F11+8F11/8F11\8F11;
                      STA.W !OAMTileNo,Y                        ;;8F19|8F14+8F14/8F14\8F14;
                      LDA.B !SpriteProperties                   ;;8F1C|8F17+8F17/8F17\8F17;
                      ORA.B #$06                                ;;8F1E|8F19+8F19/8F19\8F19;
                      STA.W !OAMTileAttr,Y                      ;;8F20|8F1B+8F1B/8F1B\8F1B;
                      LDX.W !MinorSpriteProcIndex               ;;8F23|8F1E+8F1E/8F1E\8F1E;
                      TYA                                       ;;8F26|8F21+8F21/8F21\8F21;
                      LSR A                                     ;;8F27|8F22+8F22/8F22\8F22;
                      LSR A                                     ;;8F28|8F23+8F23/8F23\8F23;
                      TAY                                       ;;8F29|8F24+8F24/8F24\8F24;
                      LDA.B #$00                                ;;8F2A|8F25+8F25/8F25\8F25;
                      STA.W !OAMTileSize,Y                      ;;8F2C|8F27+8F27/8F27\8F27;
                      RTS                                       ;;8F2F|8F2A+8F2A/8F2A\8F2A; Return
                                                                ;;                        ;
                                                                ;;                        ;
LavaSplashTiles:      db $D7,$C7,$D6,$C6                        ;;8F30|8F2B+8F2B/8F2B\8F2B;
                                                                ;;                        ;
CODE_028F2F:          LDA.W !MinExtSpriteXPosLow,X              ;;8F34|8F2F+8F2F/8F2F\8F2F;
                      CMP.B !Layer1XPos                         ;;8F37|8F32+8F32/8F32\8F32;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8F39|8F34+8F34/8F34\8F34;
                      SBC.B !Layer1XPos+1                       ;;8F3C|8F37+8F37/8F37\8F37;
                      BNE CODE_028F87                           ;;8F3E|8F39+8F39/8F39\8F39;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8F40|8F3B+8F3B/8F3B\8F3B;
                      BEQ CODE_028F87                           ;;8F43|8F3E+8F3E/8F3E\8F3E;
                      LDY.B !SpriteLock                         ;;8F45|8F40+8F40/8F40\8F40;
                      BNE +                                     ;;8F47|8F42+8F42/8F42\8F42;
                      DEC.W !MinExtSpriteXPosSpx,X              ;;8F49|8F44+8F44/8F44\8F44;
                      JSR CODE_02B5C8                           ;;8F4C|8F47+8F47/8F47\8F47;
                      INC.W !MinExtSpriteYSpeed,X               ;;8F4F|8F4A+8F4A/8F4A\8F4A;
                    + LDY.W BrokenBlock,X                       ;;8F52|8F4D+8F4D/8F4D\8F4D;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8F55|8F50+8F50/8F50\8F50;
                      SEC                                       ;;8F58|8F53+8F53/8F53\8F53;
                      SBC.B !Layer1XPos                         ;;8F59|8F54+8F54/8F54\8F54;
                      STA.W !OAMTileXPos,Y                      ;;8F5B|8F56+8F56/8F56\8F56;
                      LDA.W !MinExtSpriteYPosLow,X              ;;8F5E|8F59+8F59/8F59\8F59;
                      CMP.B #$F0                                ;;8F61|8F5C+8F5C/8F5C\8F5C;
                      BCS CODE_028F87                           ;;8F63|8F5E+8F5E/8F5E\8F5E;
                      SEC                                       ;;8F65|8F60+8F60/8F60\8F60;
                      SBC.B !Layer1YPos                         ;;8F66|8F61+8F61/8F61\8F61;
                      STA.W !OAMTileYPos,Y                      ;;8F68|8F63+8F63/8F63\8F63;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;8F6B|8F66+8F66/8F66\8F66;
                      LSR A                                     ;;8F6E|8F69+8F69/8F69\8F69;
                      LSR A                                     ;;8F6F|8F6A+8F6A/8F6A\8F6A;
                      LSR A                                     ;;8F70|8F6B+8F6B/8F6B\8F6B;
                      TAX                                       ;;8F71|8F6C+8F6C/8F6C\8F6C;
                      %LorW_X(LDA,LavaSplashTiles)              ;;8F72|8F6D+8F6D/8F6D\8F6D;
                      STA.W !OAMTileNo,Y                        ;;8F76|8F70+8F70/8F70\8F70;
                      LDA.B !SpriteProperties                   ;;8F79|8F73+8F73/8F73\8F73;
                      ORA.B #$05                                ;;8F7B|8F75+8F75/8F75\8F75;
                      STA.W !OAMTileAttr,Y                      ;;8F7D|8F77+8F77/8F77\8F77;
                      LDX.W !MinorSpriteProcIndex               ;;8F80|8F7A+8F7A/8F7A\8F7A;
                      TYA                                       ;;8F83|8F7D+8F7D/8F7D\8F7D;
                      LSR A                                     ;;8F84|8F7E+8F7E/8F7E\8F7E;
                      LSR A                                     ;;8F85|8F7F+8F7F/8F7F\8F7F;
                      TAY                                       ;;8F86|8F80+8F80/8F80\8F80;
                      LDA.B #$00                                ;;8F87|8F81+8F81/8F81\8F81;
                      STA.W !OAMTileSize,Y                      ;;8F89|8F83+8F83/8F83\8F83;
                      RTS                                       ;;8F8C|8F86+8F86/8F86\8F86; Return
                                                                ;;                        ;
CODE_028F87:          STZ.W !MinExtSpriteNumber,X               ;;8F8D|8F87+8F87/8F87\8F87;
                      RTS                                       ;;8F90|8F8A+8F8A/8F8A\8F8A; Return
                                                                ;;                        ;
CODE_028F8B:          LDA.B !SpriteLock                         ;;8F91|8F8B+8F8B/8F8B\8F8B; \ Branch if sprites locked
                      BNE CODE_028FCA                           ;;8F93|8F8D+8F8D/8F8D\8F8D; /
                      LDA.B !TrueFrame                          ;;8F95|8F8F+8F8F/8F8F\8F8F;
                      AND.B #$03                                ;;8F97|8F91+8F91/8F91\8F91;
                      BEQ CODE_028FAB                           ;;8F99|8F93+8F93/8F93\8F93;
                      LDY.B #$00                                ;;8F9B|8F95+8F95/8F95\8F95;
                      LDA.W !MinExtSpriteXSpeed,X               ;;8F9D|8F97+8F97/8F97\8F97;
                      BPL +                                     ;;8FA0|8F9A+8F9A/8F9A\8F9A;
                      DEY                                       ;;8FA2|8F9C+8F9C/8F9C\8F9C;
                    + CLC                                       ;;8FA3|8F9D+8F9D/8F9D\8F9D;
                      ADC.W !MinExtSpriteXPosLow,X              ;;8FA4|8F9E+8F9E/8F9E\8F9E;
                      STA.W !MinExtSpriteXPosLow,X              ;;8FA7|8FA1+8FA1/8FA1\8FA1;
                      TYA                                       ;;8FAA|8FA4+8FA4/8FA4\8FA4;
                      ADC.W !MinExtSpriteXPosHigh,X             ;;8FAB|8FA5+8FA5/8FA5\8FA5;
                      STA.W !MinExtSpriteXPosHigh,X             ;;8FAE|8FA8+8FA8/8FA8\8FA8;
CODE_028FAB:          LDY.B #$00                                ;;8FB1|8FAB+8FAB/8FAB\8FAB;
                      LDA.W !MinExtSpriteYSpeed,X               ;;8FB3|8FAD+8FAD/8FAD\8FAD;
                      BPL +                                     ;;8FB6|8FB0+8FB0/8FB0\8FB0;
                      DEY                                       ;;8FB8|8FB2+8FB2/8FB2\8FB2;
                    + CLC                                       ;;8FB9|8FB3+8FB3/8FB3\8FB3;
                      ADC.W !MinExtSpriteYPosLow,X              ;;8FBA|8FB4+8FB4/8FB4\8FB4;
                      STA.W !MinExtSpriteYPosLow,X              ;;8FBD|8FB7+8FB7/8FB7\8FB7;
                      TYA                                       ;;8FC0|8FBA+8FBA/8FBA\8FBA;
                      ADC.W !MinExtSpriteYPosHigh,X             ;;8FC1|8FBB+8FBB/8FBB\8FBB;
                      STA.W !MinExtSpriteYPosHigh,X             ;;8FC4|8FBE+8FBE/8FBE\8FBE;
                      LDA.B !TrueFrame                          ;;8FC7|8FC1+8FC1/8FC1\8FC1;
                      AND.B #$03                                ;;8FC9|8FC3+8FC3/8FC3\8FC3;
                      BNE CODE_028FCA                           ;;8FCB|8FC5+8FC5/8FC5\8FC5;
                      INC.W !MinExtSpriteYSpeed,X               ;;8FCD|8FC7+8FC7/8FC7\8FC7;
CODE_028FCA:          LDA.W !MinExtSpriteYPosLow,X              ;;8FD0|8FCA+8FCA/8FCA\8FCA;
                      SEC                                       ;;8FD3|8FCD+8FCD/8FCD\8FCD;
                      SBC.B !Layer1YPos                         ;;8FD4|8FCE+8FCE/8FCE\8FCE;
                      STA.B !_0                                 ;;8FD6|8FD0+8FD0/8FD0\8FD0;
                      LDA.W !MinExtSpriteYPosHigh,X             ;;8FD8|8FD2+8FD2/8FD2\8FD2;
                      SBC.B !Layer1YPos+1                       ;;8FDB|8FD5+8FD5/8FD5\8FD5;
                      BEQ CODE_028FDD                           ;;8FDD|8FD7+8FD7/8FD7\8FD7;
                      BPL CODE_028F87                           ;;8FDF|8FD9+8FD9/8FD9\8FD9;
                      BMI Return02902C                          ;;8FE1|8FDB+8FDB/8FDB\8FDB;
CODE_028FDD:          LDY.W BrokenBlock,X                       ;;8FE3|8FDD+8FDD/8FDD\8FDD;
                      LDA.W !MinExtSpriteXPosLow,X              ;;8FE6|8FE0+8FE0/8FE0\8FE0;
                      SEC                                       ;;8FE9|8FE3+8FE3/8FE3\8FE3;
                      SBC.B !Layer1XPos                         ;;8FEA|8FE4+8FE4/8FE4\8FE4;
                      STA.B !_1                                 ;;8FEC|8FE6+8FE6/8FE6\8FE6;
                      LDA.W !MinExtSpriteXPosHigh,X             ;;8FEE|8FE8+8FE8/8FE8\8FE8;
                      SBC.B !Layer1XPos+1                       ;;8FF1|8FEB+8FEB/8FEB\8FEB;
                      BNE CODE_028F87                           ;;8FF3|8FED+8FED/8FED\8FED;
                      LDA.B !_1                                 ;;8FF5|8FEF+8FEF/8FEF\8FEF;
                      STA.W !OAMTileXPos,Y                      ;;8FF7|8FF1+8FF1/8FF1\8FF1;
                      LDA.B !_0                                 ;;8FFA|8FF4+8FF4/8FF4\8FF4;
                      CMP.B #$F0                                ;;8FFC|8FF6+8FF6/8FF6\8FF6;
                      BCS CODE_028F87                           ;;8FFE|8FF8+8FF8/8FF8\8FF8;
                      STA.W !OAMTileYPos,Y                      ;;9000|8FFA+8FFA/8FFA\8FFA;
                      LDA.W !MinExtSpriteXPosSpx,X              ;;9003|8FFD+8FFD/8FFD\8FFD;
                      PHA                                       ;;9006|9000+9000/9000\9000;
                      LDA.B !EffFrame                           ;;9007|9001+9001/9001\9001;
                      LSR A                                     ;;9009|9003+9003/9003\9003;
                      CLC                                       ;;900A|9004+9004/9004\9004;
                      ADC.W !MinorSpriteProcIndex               ;;900B|9005+9005/9005\9005;
                      AND.B #$07                                ;;900E|9008+9008/9008\9008;
                      TAX                                       ;;9010|900A+900A/900A\900A;
                      %LorW_X(LDA,BrokenBlock2)                 ;;9011|900B+900B/900B\900B;
                      STA.W !OAMTileNo,Y                        ;;9015|900E+900E/900E\900E;
                      PLA                                       ;;9018|9011+9011/9011\9011;
                      BEQ +                                     ;;9019|9012+9012/9012\9012;
                      LDA.B !TrueFrame                          ;;901B|9014+9014/9014\9014;
                      AND.B #$0E                                ;;901D|9016+9016/9016\9016;
                    + %LorW_X(EOR,DATA_028B8C)                  ;;901F|9018+9018/9018\9018;
                      ORA.B !SpriteProperties                   ;;9023|901B+901B/901B\901B;
                      STA.W !OAMTileAttr,Y                      ;;9025|901D+901D/901D\901D;
                      LDX.W !MinorSpriteProcIndex               ;;9028|9020+9020/9020\9020;
                      TYA                                       ;;902B|9023+9023/9023\9023;
                      LSR A                                     ;;902C|9024+9024/9024\9024;
                      LSR A                                     ;;902D|9025+9025/9025\9025;
                      TAY                                       ;;902E|9026+9026/9026\9026;
                      LDA.B #$00                                ;;902F|9027+9027/9027\9027;
                      STA.W !OAMTileSize,Y                      ;;9031|9029+9029/9029\9029;
Return02902C:         RTS                                       ;;9034|902C+902C/902C\902C; Return
                                                                ;;                        ;
MCoinTmrAnd4SlotSprs: LDA.W !MulticoinTimer                     ;;9035|902D+902D/902D\902D;
                      CMP.B #$02                                ;;9038|9030+9030/9030\9030;
                      BCC +                                     ;;903A|9032+9032/9032\9032;
                      LDA.B !SpriteLock                         ;;903C|9034+9034/9034\9034;
                      BNE +                                     ;;903E|9036+9036/9036\9036;
                      DEC.W !MulticoinTimer                     ;;9040|9038+9038/9038\9038;
                    + LDX.B #$03                                ;;9043|903B+903B/903B\903B;
                    - STX.W !MinorSpriteProcIndex               ;;9045|903D+903D/903D\903D;
                      JSR RunBounceSprites                      ;;9048|9040+9040/9040\9040; \ Each of these sprites types
                      JSR RunQuakeSprites                       ;;904B|9043+9043/9043\9043; | has four slots
                      JSR RunSmokeSprites                       ;;904E|9046+9046/9046\9046; /
                      DEX                                       ;;9051|9049+9049/9049\9049;
                      BPL -                                     ;;9052|904A+904A/904A\904A;
Return02904C:         RTS                                       ;;9054|904C+904C/904C\904C; Return
                                                                ;;                        ;
RunBounceSprites:     LDA.W !BounceSpriteNumber,X               ;;9055|904D+904D/904D\904D;
                      BEQ Return02904C                          ;;9058|9050+9050/9050\9050;
                      LDY.B !SpriteLock                         ;;905A|9052+9052/9052\9052;
                      BNE +                                     ;;905C|9054+9054/9054\9054;
                      LDY.W !BounceSpriteTimer,X                ;;905E|9056+9056/9056\9056; \ Decrement bounce sprite timer if > 0
                      BEQ +                                     ;;9061|9059+9059/9059\9059;
                      DEC.W !BounceSpriteTimer,X                ;;9063|905B+905B/905B\905B;
                    + JSL ExecutePtr                            ;;9066|905E+905E/905E\905E;
                                                                ;;                        ;
                      dw Return02904C                           ;;906A|9062+9062/9062\9062; 00 - Nothing (Bypassed above)
                      dw BounceBlockSpr                         ;;906C|9064+9064/9064\9064; 01 - Turn Block without turn
                      dw BounceBlockSpr                         ;;906E|9066+9066/9066\9066; 02 - Music Block
                      dw BounceBlockSpr                         ;;9070|9068+9068/9068\9068; 03 - Question Block
                      dw BounceBlockSpr                         ;;9072|906A+906A/906A\906A; 04 - Sideways Bounce Block
                      dw BounceBlockSpr                         ;;9074|906C+906C/906C\906C; 05 - Translucent Block
                      dw BounceBlockSpr                         ;;9076|906E+906E/906E\906E; 06 - On/Off Block
                      dw TurnBlockSpr                           ;;9078|9070+9070/9070\9070; 07 - Turn Block
                                                                ;;                        ;
DATA_029072:          db $13,$00,$00,$ED                        ;;907A|9072+9072/9072\9072;
                                                                ;;                        ;
TurnBlockSpr:         LDA.B !SpriteLock                         ;;907E|9076+9076/9076\9076; \ Return if sprites locked
                      BNE Return0290CD                          ;;9080|9078+9078/9078\9078; /
                      LDA.W !BounceSpriteInit,X                 ;;9082|907A+907A/907A\907A; \ Initialize only once
                      BNE +                                     ;;9085|907D+907D/907D\907D;  | (Generate invisible tile sprite)
                      INC.W !BounceSpriteInit,X                 ;;9087|907F+907F/907F\907F;  |
                      JSR InvisSldFromBncSpr                    ;;908A|9082+9082/9082\9082; /
                    + LDA.W !BounceSpriteTimer,X                ;;908D|9085+9085/9085\9085;
                      BEQ CODE_0290BB                           ;;9090|9088+9088/9088\9088;
                      CMP.B #$01                                ;;9092|908A+908A/908A\908A;
                      BNE CODE_0290A8                           ;;9094|908C+908C/908C\908C;
                      LDA.W !BounceSpriteYPosLow,X              ;;9096|908E+908E/908E\908E;
                      CLC                                       ;;9099|9091+9091/9091\9091;
                      ADC.B #$08                                ;;909A|9092+9092/9092\9092;
                      AND.B #$F0                                ;;909C|9094+9094/9094\9094;
                      STA.W !BounceSpriteYPosLow,X              ;;909E|9096+9096/9096\9096;
                      LDA.W !BounceSpriteYPosHigh,X             ;;90A1|9099+9099/9099\9099;
                      ADC.B #$00                                ;;90A4|909C+909C/909C\909C;
                      STA.W !BounceSpriteYPosHigh,X             ;;90A6|909E+909E/909E\909E;
                      LDA.B #$05                                ;;90A9|90A1+90A1/90A1\90A1;
                      JSR TileFromBounceSpr1                    ;;90AB|90A3+90A3/90A3\90A3;
                      BRA CODE_0290BB                           ;;90AE|90A6+90A6/90A6\90A6;
                                                                ;;                        ;
CODE_0290A8:          JSR CODE_02B526                           ;;90B0|90A8+90A8/90A8\90A8;
                      LDY.W !BounceSpriteFlags,X                ;;90B3|90AB+90AB/90AB\90AB;
                      LDA.W !BounceSpriteYSpeed,X               ;;90B6|90AE+90AE/90AE\90AE;
                      CLC                                       ;;90B9|90B1+90B1/90B1\90B1;
                      ADC.W DATA_029072,Y                       ;;90BA|90B2+90B2/90B2\90B2;
                      STA.W !BounceSpriteYSpeed,X               ;;90BD|90B5+90B5/90B5\90B5;
                      JSR BounceSprGfx                          ;;90C0|90B8+90B8/90B8\90B8;
CODE_0290BB:          LDA.W !TurnBlockSpinTimer,X               ;;90C3|90BB+90BB/90BB\90BB;
                      BEQ +                                     ;;90C6|90BE+90BE/90BE\90BE;
                      DEC.W !TurnBlockSpinTimer,X               ;;90C8|90C0+90C0/90C0\90C0;
                      RTS                                       ;;90CB|90C3+90C3/90C3\90C3; Return
                                                                ;;                        ;
                    + LDA.W !BounceSpriteTile,X                 ;;90CC|90C4+90C4/90C4\90C4;
                      JSR TileFromBounceSpr1                    ;;90CF|90C7+90C7/90C7\90C7;
                      STZ.W !BounceSpriteNumber,X               ;;90D2|90CA+90CA/90CA\90CA;
Return0290CD:         RTS                                       ;;90D5|90CD+90CD/90CD\90CD; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0290CE:          db $10,$00,$00,$F0                        ;;90D6|90CE+90CE/90CE\90CE;
                                                                ;;                        ;
DATA_0290D2:          db $00,$F0,$10,$00                        ;;90DA|90D2+90D2/90D2\90D2;
                                                                ;;                        ;
DATA_0290D6:          db $80,$80,$80,$00                        ;;90DE|90D6+90D6/90D6\90D6;
                                                                ;;                        ;
DATA_0290DA:          db $80,$E0,$20,$80                        ;;90E2|90DA+90DA/90DA\90DA;
                                                                ;;                        ;
BounceBlockSpr:       JSR BounceSprGfx                          ;;90E6|90DE+90DE/90DE\90DE;
                      LDA.B !SpriteLock                         ;;90E9|90E1+90E1/90E1\90E1;
                      BNE Return0290CD                          ;;90EB|90E3+90E3/90E3\90E3;
                      LDA.W !BounceSpriteInit,X                 ;;90ED|90E5+90E5/90E5\90E5;
                      BNE CODE_02910B                           ;;90F0|90E8+90E8/90E8\90E8;
                      INC.W !BounceSpriteInit,X                 ;;90F2|90EA+90EA/90EA\90EA;
                      JSR CODE_029265                           ;;90F5|90ED+90ED/90ED\90ED;
                      JSR InvisSldFromBncSpr                    ;;90F8|90F0+90F0/90F0\90F0;
                      LDA.W !BounceSpriteFlags,X                ;;90FB|90F3+90F3/90F3\90F3;
                      AND.B #$03                                ;;90FE|90F6+90F6/90F6\90F6;
                      TAY                                       ;;9100|90F8+90F8/90F8\90F8;
                      LDA.W DATA_0290D6,Y                       ;;9101|90F9+90F9/90F9\90F9;
                      CMP.B #$80                                ;;9104|90FC+90FC/90FC\90FC;
                      BEQ +                                     ;;9106|90FE+90FE/90FE\90FE;
                      STA.B !PlayerYSpeed                       ;;9108|9100+9100/9100\9100;
                    + LDA.W DATA_0290DA,Y                       ;;910A|9102+9102/9102\9102;
                      CMP.B #$80                                ;;910D|9105+9105/9105\9105;
                      BEQ CODE_02910B                           ;;910F|9107+9107/9107\9107;
                      STA.B !PlayerXSpeed                       ;;9111|9109+9109/9109\9109;
CODE_02910B:          JSR CODE_02B526                           ;;9113|910B+910B/910B\910B;
                      JSR CODE_02B51A                           ;;9116|910E+910E/910E\910E;
                      LDA.W !BounceSpriteFlags,X                ;;9119|9111+9111/9111\9111;
                      AND.B #$03                                ;;911C|9114+9114/9114\9114;
                      TAY                                       ;;911E|9116+9116/9116\9116;
                      LDA.W !BounceSpriteYSpeed,X               ;;911F|9117+9117/9117\9117;
                      CLC                                       ;;9122|911A+911A/911A\911A;
                      ADC.W DATA_0290CE,Y                       ;;9123|911B+911B/911B\911B;
                      STA.W !BounceSpriteYSpeed,X               ;;9126|911E+911E/911E\911E;
                      LDA.W !BounceSpriteXSpeed,X               ;;9129|9121+9121/9121\9121;
                      CLC                                       ;;912C|9124+9124/9124\9124;
                      ADC.W DATA_0290D2,Y                       ;;912D|9125+9125/9125\9125;
                      STA.W !BounceSpriteXSpeed,X               ;;9130|9128+9128/9128\9128;
                      LDA.W !BounceSpriteFlags,X                ;;9133|912B+912B/912B\912B;
                      AND.B #$03                                ;;9136|912E+912E/912E\912E;
                      CMP.B #$03                                ;;9138|9130+9130/9130\9130;
                      BNE CODE_02915E                           ;;913A|9132+9132/9132\9132;
                      LDA.B !PlayerAnimation                    ;;913C|9134+9134/9134\9134;
                      CMP.B #$01                                ;;913E|9136+9136/9136\9136;
                      BCS CODE_02915E                           ;;9140|9138+9138/9138\9138;
                      LDA.B #$20                                ;;9142|913A+913A/913A\913A;
                      LDY.W !PlayerRidingYoshi                  ;;9144|913C+913C/913C\913C;
                      BEQ +                                     ;;9147|913F+913F/913F\913F;
                      LDA.B #$30                                ;;9149|9141+9141/9141\9141;
                    + STA.B !_0                                 ;;914B|9143+9143/9143\9143;
                      LDA.W !BounceSpriteYPosLow,X              ;;914D|9145+9145/9145\9145;
                      SEC                                       ;;9150|9148+9148/9148\9148;
                      SBC.B !_0                                 ;;9151|9149+9149/9149\9149;
                      STA.B !PlayerYPosNext                     ;;9153|914B+914B/914B\914B;
                      LDA.W !BounceSpriteYPosHigh,X             ;;9155|914D+914D/914D\914D;
                      SBC.B #$00                                ;;9158|9150+9150/9150\9150;
                      STA.B !PlayerYPosNext+1                   ;;915A|9152+9152/9152\9152;
                      LDA.B #$01                                ;;915C|9154+9154/9154\9154;
                      STA.W !StandOnSolidSprite                 ;;915E|9156+9156/9156\9156;
                      STA.W !NoteBlockActive                    ;;9161|9159+9159/9159\9159;
                      STZ.B !PlayerYSpeed                       ;;9164|915C+915C/915C\915C;
CODE_02915E:          LDA.W !BounceSpriteTimer,X                ;;9166|915E+915E/915E\915E;
                      BNE Return02919C                          ;;9169|9161+9161/9161\9161;
                      LDA.W !BounceSpriteFlags,X                ;;916B|9163+9163/9163\9163;
                      AND.B #$03                                ;;916E|9166+9166/9166\9166;
                      CMP.B #$03                                ;;9170|9168+9168/9168\9168;
                      BNE +                                     ;;9172|916A+916A/916A\916A;
                      LDA.B #$A0                                ;;9174|916C+916C/916C\916C;
                      STA.B !PlayerYSpeed                       ;;9176|916E+916E/916E\916E;
                      LDA.B !PlayerYPosNext                     ;;9178|9170+9170/9170\9170;
                      SEC                                       ;;917A|9172+9172/9172\9172;
                      SBC.B #$02                                ;;917B|9173+9173/9173\9173;
                      STA.B !PlayerYPosNext                     ;;917D|9175+9175/9175\9175;
                      LDA.B !PlayerYPosNext+1                   ;;917F|9177+9177/9177\9177;
                      SBC.B #$00                                ;;9181|9179+9179/9179\9179;
                      STA.B !PlayerYPosNext+1                   ;;9183|917B+917B/917B\917B;
                      LDA.B #!SFX_SPRING                        ;;9185|917D+917D/917D\917D; \ Play sound effect
                      STA.W !SPCIO3                             ;;9187|917F+917F/917F\917F; /
                    + JSR TileFromBounceSpr0                    ;;918A|9182+9182/9182\9182;
                      LDY.W !BounceSpriteNumber,X               ;;918D|9185+9185/9185\9185;
                      CPY.B #$06                                ;;9190|9188+9188/9188\9188;
                      BCC +                                     ;;9192|918A+918A/918A\918A;
                      LDA.B #!SFX_SWITCH                        ;;9194|918C+918C/918C\918C; \ Play sound effect
                      STA.W !SPCIO0                             ;;9196|918E+918E/918E\918E; /
                      LDA.W !OnOffSwitch                        ;;9199|9191+9191/9191\9191; \ Toggle On/Off
                      EOR.B #$01                                ;;919C|9194+9194/9194\9194;  |
                      STA.W !OnOffSwitch                        ;;919E|9196+9196/9196\9196; /
                    + STZ.W !BounceSpriteNumber,X               ;;91A1|9199+9199/9199\9199;
Return02919C:         RTS                                       ;;91A4|919C+919C/919C\919C; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $01,$00                                ;;91A5|919D+919D/919D\919D;
                                                                ;;                        ;
TileFromBounceSpr0:   LDA.W !BounceSpriteTile,X                 ;;91A7|919F+919F/919F\919F; \ If doesn't turn into multiple coin block,
                      CMP.B #$0A                                ;;91AA|91A2+91A2/91A2\91A2;  |
                      BEQ CODE_0291AA                           ;;91AC|91A4+91A4/91A4\91A4;  |
                      CMP.B #$0B                                ;;91AE|91A6+91A6/91A6\91A6;  |
                      BNE +                                     ;;91B0|91A8+91A8/91A8\91A8; / Block to generate = Bounce sprite block to turn into
CODE_0291AA:          LDY.W !MulticoinTimer                     ;;91B2|91AA+91AA/91AA\91AA;
                      CPY.B #$01                                ;;91B5|91AD+91AD/91AD\91AD;
                      BNE +                                     ;;91B7|91AF+91AF/91AF\91AF;
                      STZ.W !MulticoinTimer                     ;;91B9|91B1+91B1/91B1\91B1;
                      LDA.B #$0D                                ;;91BC|91B4+91B4/91B4\91B4; Block to generate = Used block
                    + BRA TileFromBounceSpr1                    ;;91BE|91B6+91B6/91B6\91B6;
                                                                ;;                        ;
InvisSldFromBncSpr:   LDA.B #$09                                ;;91C0|91B8+91B8/91B8\91B8; Block to generate = Invisible solid
TileFromBounceSpr1:   STA.B !Map16TileGenerate                  ;;91C2|91BA+91BA/91BA\91BA; Set block to generate
                      LDA.W !BounceSpriteXPosLow,X              ;;91C4|91BC+91BC/91BC\91BC; \ Block Y position = Bounce sprite Y position
                      CLC                                       ;;91C7|91BF+91BF/91BF\91BF;  |
                      ADC.B #$08                                ;;91C8|91C0+91C0/91C0\91C0;  | (Rounded to nearest #$10)
                      AND.B #$F0                                ;;91CA|91C2+91C2/91C2\91C2;  |
                      STA.B !TouchBlockXPos                     ;;91CC|91C4+91C4/91C4\91C4;  |
                      LDA.W !BounceSpriteXPosHigh,X             ;;91CE|91C6+91C6/91C6\91C6;  |
                      ADC.B #$00                                ;;91D1|91C9+91C9/91C9\91C9;  |
                      STA.B !TouchBlockXPos+1                   ;;91D3|91CB+91CB/91CB\91CB; /
                      LDA.W !BounceSpriteYPosLow,X              ;;91D5|91CD+91CD/91CD\91CD; \ Block X position = Bounce sprite X position
                      CLC                                       ;;91D8|91D0+91D0/91D0\91D0;  |
                      ADC.B #$08                                ;;91D9|91D1+91D1/91D1\91D1;  | (Rounded to nearest #$10)
                      AND.B #$F0                                ;;91DB|91D3+91D3/91D3\91D3;  |
                      STA.B !TouchBlockYPos                     ;;91DD|91D5+91D5/91D5\91D5;  |
                      LDA.W !BounceSpriteYPosHigh,X             ;;91DF|91D7+91D7/91D7\91D7;  |
                      ADC.B #$00                                ;;91E2|91DA+91DA/91DA\91DA;  |
                      STA.B !TouchBlockYPos+1                   ;;91E4|91DC+91DC/91DC\91DC; /
                      LDA.W !BounceSpriteFlags,X                ;;91E6|91DE+91DE/91DE\91DE;
                      ASL A                                     ;;91E9|91E1+91E1/91E1\91E1;
                      ROL A                                     ;;91EA|91E2+91E2/91E2\91E2;
                      AND.B #$01                                ;;91EB|91E3+91E3/91E3\91E3;
                      STA.W !LayerProcessing                    ;;91ED|91E5+91E5/91E5\91E5;
                      JSL GenerateTile                          ;;91F0|91E8+91E8/91E8\91E8;
Return0291EC:         RTS                                       ;;91F4|91EC+91EC/91EC\91EC; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0291ED:          db $10,$14,$18                            ;;91F5|91ED+91ED/91ED\91ED;
                                                                ;;                        ;
BounceSpriteTiles:    db $1C,$40,$6B,$2A,$42,$EA,$8A,$40        ;;91F8|91F0+91F0/91F0\91F0;
                                                                ;;                        ;
BounceSprGfx:         LDY.B #$00                                ;;9200|91F8+91F8/91F8\91F8;
                      LDA.W !BounceSpriteFlags,X                ;;9202|91FA+91FA/91FA\91FA;
                      BPL +                                     ;;9205|91FD+91FD/91FD\91FD;
                      LDY.B #$04                                ;;9207|91FF+91FF/91FF\91FF;
                    + LDA.W !Layer1YPos,Y                       ;;9209|9201+9201/9201\9201;
                      STA.B !_2                                 ;;920C|9204+9204/9204\9204;
                      LDA.W !Layer1XPos,Y                       ;;920E|9206+9206/9206\9206;
                      STA.B !_3                                 ;;9211|9209+9209/9209\9209;
                      LDA.W !Layer1YPos+1,Y                     ;;9213|920B+920B/920B\920B;
                      STA.B !_4                                 ;;9216|920E+920E/920E\920E;
                      LDA.W !Layer1XPos+1,Y                     ;;9218|9210+9210/9210\9210;
                      STA.B !_5                                 ;;921B|9213+9213/9213\9213;
                      LDA.W !BounceSpriteYPosLow,X              ;;921D|9215+9215/9215\9215;
                      CMP.B !_2                                 ;;9220|9218+9218/9218\9218;
                      LDA.W !BounceSpriteYPosHigh,X             ;;9222|921A+921A/921A\921A;
                      SBC.B !_4                                 ;;9225|921D+921D/921D\921D;
                      BNE Return0291EC                          ;;9227|921F+921F/921F\921F;
                      LDA.W !BounceSpriteXPosLow,X              ;;9229|9221+9221/9221\9221;
                      CMP.B !_3                                 ;;922C|9224+9224/9224\9224;
                      LDA.W !BounceSpriteXPosHigh,X             ;;922E|9226+9226/9226\9226;
                      SBC.B !_5                                 ;;9231|9229+9229/9229\9229;
                      BNE Return0291EC                          ;;9233|922B+922B/922B\922B;
                      LDY.W DATA_0291ED,X                       ;;9235|922D+922D/922D\922D;
                      LDA.W !BounceSpriteYPosLow,X              ;;9238|9230+9230/9230\9230;
                      SEC                                       ;;923B|9233+9233/9233\9233;
                      SBC.B !_2                                 ;;923C|9234+9234/9234\9234;
                      STA.B !_1                                 ;;923E|9236+9236/9236\9236;
                      STA.W !OAMTileYPos,Y                      ;;9240|9238+9238/9238\9238;
                      LDA.W !BounceSpriteXPosLow,X              ;;9243|923B+923B/923B\923B;
                      SEC                                       ;;9246|923E+923E/923E\923E;
                      SBC.B !_3                                 ;;9247|923F+923F/923F\923F;
                      STA.B !_0                                 ;;9249|9241+9241/9241\9241;
                      STA.W !OAMTileXPos,Y                      ;;924B|9243+9243/9243\9243;
                      LDA.W !BounceSpriteYXPPCCCT,X             ;;924E|9246+9246/9246\9246;
                      ORA.B !SpriteProperties                   ;;9251|9249+9249/9249\9249;
                      STA.W !OAMTileAttr,Y                      ;;9253|924B+924B/924B\924B;
                      LDA.W !BounceSpriteNumber,X               ;;9256|924E+924E/924E\924E;
                      TAX                                       ;;9259|9251+9251/9251\9251;
                      %LorW_X(LDA,BounceSpriteTiles)            ;;925A|9252+9252/9252\9252;
                      STA.W !OAMTileNo,Y                        ;;925E|9255+9255/9255\9255;
                      TYA                                       ;;9261|9258+9258/9258\9258;
                      LSR A                                     ;;9262|9259+9259/9259\9259;
                      LSR A                                     ;;9263|925A+925A/925A\925A;
                      TAY                                       ;;9264|925B+925B/925B\925B;
                      LDA.B #$02                                ;;9265|925C+925C/925C\925C;
                      STA.W !OAMTileSize,Y                      ;;9267|925E+925E/925E\925E;
                      LDX.W !MinorSpriteProcIndex               ;;926A|9261+9261/9261\9261;
                      RTS                                       ;;926D|9264+9264/9264\9264; Return
                                                                ;;                        ;
CODE_029265:          LDA.B #$01                                ;;926E|9265+9265/9265\9265;
                      LDY.W !BounceSpriteFlags,X                ;;9270|9267+9267/9267\9267;
                      STY.B !_F                                 ;;9273|926A+926A/926A\926A;
                      BPL +                                     ;;9275|926C+926C/926C\926C;
                      ASL A                                     ;;9277|926E+926E/926E\926E;
                    + AND.B !ScreenMode                         ;;9278|926F+926F/926F\926F;
                      BEQ CODE_0292CA                           ;;927A|9271+9271/9271\9271;
                      LDA.W !BounceSpriteYPosLow,X              ;;927C|9273+9273/9273\9273;
                      SEC                                       ;;927F|9276+9276/9276\9276;
                      SBC.B #$03                                ;;9280|9277+9277/9277\9277;
                      AND.B #$F0                                ;;9282|9279+9279/9279\9279;
                      STA.B !_0                                 ;;9284|927B+927B/927B\927B;
                      LDA.W !BounceSpriteYPosHigh,X             ;;9286|927D+927D/927D\927D;
                      SBC.B #$00                                ;;9289|9280+9280/9280\9280;
                      CMP.B !LevelScrLength                     ;;928B|9282+9282/9282\9282;
                      BCS Return0292C9                          ;;928D|9284+9284/9284\9284;
                      STA.B !_3                                 ;;928F|9286+9286/9286\9286;
                      AND.B #$10                                ;;9291|9288+9288/9288\9288;
                      STA.B !_8                                 ;;9293|928A+928A/928A\928A;
                      LDA.W !BounceSpriteXPosLow,X              ;;9295|928C+928C/928C\928C;
                      STA.B !_1                                 ;;9298|928F+928F/928F\928F;
                      LDA.W !BounceSpriteXPosHigh,X             ;;929A|9291+9291/9291\9291;
                      CMP.B #$02                                ;;929D|9294+9294/9294\9294;
                      BCS Return0292C9                          ;;929F|9296+9296/9296\9296;
                      STA.B !_2                                 ;;92A1|9298+9298/9298\9298;
                      LDA.B !_1                                 ;;92A3|929A+929A/929A\929A;
                      LSR A                                     ;;92A5|929C+929C/929C\929C;
                      LSR A                                     ;;92A6|929D+929D/929D\929D;
                      LSR A                                     ;;92A7|929E+929E/929E\929E;
                      LSR A                                     ;;92A8|929F+929F/929F\929F;
                      ORA.B !_0                                 ;;92A9|92A0+92A0/92A0\92A0;
                      STA.B !_0                                 ;;92AB|92A2+92A2/92A2\92A2;
                      LDX.B !_3                                 ;;92AD|92A4+92A4/92A4\92A4;
                      LDA.L DATA_00BA80,X                       ;;92AF|92A6+92A6/92A6\92A6;
                      LDY.B !_F                                 ;;92B3|92AA+92AA/92AA\92AA;
                      BEQ +                                     ;;92B5|92AC+92AC/92AC\92AC;
                      LDA.L DATA_00BA8E,X                       ;;92B7|92AE+92AE/92AE\92AE;
                    + CLC                                       ;;92BB|92B2+92B2/92B2\92B2;
                      ADC.B !_0                                 ;;92BC|92B3+92B3/92B3\92B3;
                      STA.B !_5                                 ;;92BE|92B5+92B5/92B5\92B5;
                      LDA.L DATA_00BABC,X                       ;;92C0|92B7+92B7/92B7\92B7;
                      LDY.B !_F                                 ;;92C4|92BB+92BB/92BB\92BB;
                      BEQ +                                     ;;92C6|92BD+92BD/92BD\92BD;
                      LDA.L DATA_00BACA,X                       ;;92C8|92BF+92BF/92BF\92BF;
                    + ADC.B !_2                                 ;;92CC|92C3+92C3/92C3\92C3;
                      STA.B !_6                                 ;;92CE|92C5+92C5/92C5\92C5;
                      BRA CODE_02931A                           ;;92D0|92C7+92C7/92C7\92C7;
                                                                ;;                        ;
Return0292C9:         RTS                                       ;;92D2|92C9+92C9/92C9\92C9; Return
                                                                ;;                        ;
CODE_0292CA:          LDA.W !BounceSpriteYPosLow,X              ;;92D3|92CA+92CA/92CA\92CA;
                      SEC                                       ;;92D6|92CD+92CD/92CD\92CD;
                      SBC.B #$03                                ;;92D7|92CE+92CE/92CE\92CE;
                      AND.B #$F0                                ;;92D9|92D0+92D0/92D0\92D0;
                      STA.B !_0                                 ;;92DB|92D2+92D2/92D2\92D2;
                      LDA.W !BounceSpriteYPosHigh,X             ;;92DD|92D4+92D4/92D4\92D4;
                      SBC.B #$00                                ;;92E0|92D7+92D7/92D7\92D7;
                      CMP.B #$02                                ;;92E2|92D9+92D9/92D9\92D9;
                      BCS Return0292C9                          ;;92E4|92DB+92DB/92DB\92DB;
                      STA.B !_2                                 ;;92E6|92DD+92DD/92DD\92DD;
                      LDA.W !BounceSpriteXPosLow,X              ;;92E8|92DF+92DF/92DF\92DF;
                      STA.B !_1                                 ;;92EB|92E2+92E2/92E2\92E2;
                      LDA.W !BounceSpriteXPosHigh,X             ;;92ED|92E4+92E4/92E4\92E4;
                      CMP.B !LevelScrLength                     ;;92F0|92E7+92E7/92E7\92E7;
                      BCS Return0292C9                          ;;92F2|92E9+92E9/92E9\92E9;
                      STA.B !_3                                 ;;92F4|92EB+92EB/92EB\92EB;
                      LDA.B !_1                                 ;;92F6|92ED+92ED/92ED\92ED;
                      LSR A                                     ;;92F8|92EF+92EF/92EF\92EF;
                      LSR A                                     ;;92F9|92F0+92F0/92F0\92F0;
                      LSR A                                     ;;92FA|92F1+92F1/92F1\92F1;
                      LSR A                                     ;;92FB|92F2+92F2/92F2\92F2;
                      ORA.B !_0                                 ;;92FC|92F3+92F3/92F3\92F3;
                      STA.B !_0                                 ;;92FE|92F5+92F5/92F5\92F5;
                      LDX.B !_3                                 ;;9300|92F7+92F7/92F7\92F7;
                      LDA.L DATA_00BA60,X                       ;;9302|92F9+92F9/92F9\92F9;
                      LDY.B !_F                                 ;;9306|92FD+92FD/92FD\92FD;
                      BEQ +                                     ;;9308|92FF+92FF/92FF\92FF;
                      LDA.L DATA_00BA70,X                       ;;930A|9301+9301/9301\9301;
                    + CLC                                       ;;930E|9305+9305/9305\9305;
                      ADC.B !_0                                 ;;930F|9306+9306/9306\9306;
                      STA.B !_5                                 ;;9311|9308+9308/9308\9308;
                      LDA.L DATA_00BA9C,X                       ;;9313|930A+930A/930A\930A;
                      LDY.B !_F                                 ;;9317|930E+930E/930E\930E;
                      BEQ +                                     ;;9319|9310+9310/9310\9310;
                      LDA.L DATA_00BAAC,X                       ;;931B|9312+9312/9312\9312;
                    + ADC.B !_2                                 ;;931F|9316+9316/9316\9316;
                      STA.B !_6                                 ;;9321|9318+9318/9318\9318;
CODE_02931A:          LDA.B #$7E                                ;;9323|931A+931A/931A\931A;
                      STA.B !_7                                 ;;9325|931C+931C/931C\931C;
                      LDX.W !MinorSpriteProcIndex               ;;9327|931E+931E/931E\931E;
                      LDA.B [!_5]                               ;;932A|9321+9321/9321\9321;
                      STA.W !Map16TileNumber                    ;;932C|9323+9323/9323\9323;
                      INC.B !_7                                 ;;932F|9326+9326/9326\9326;
                      LDA.B [!_5]                               ;;9331|9328+9328/9328\9328;
                      BNE +                                     ;;9333|932A+932A/932A\932A;
                      LDA.W !Map16TileNumber                    ;;9335|932C+932C/932C\932C;
                      CMP.B #$2B                                ;;9338|932F+932F/932F\932F;
                      BNE +                                     ;;933A|9331+9331/9331\9331;
                      LDA.W !BounceSpriteYPosLow,X              ;;933C|9333+9333/9333\9333;
                      PHA                                       ;;933F|9336+9336/9336\9336;
                      SBC.B #$03                                ;;9340|9337+9337/9337\9337;
                      AND.B #$F0                                ;;9342|9339+9339/9339\9339;
                      STA.W !BounceSpriteYPosLow,X              ;;9344|933B+933B/933B\933B;
                      LDA.W !BounceSpriteYPosHigh,X             ;;9347|933E+933E/933E\933E;
                      PHA                                       ;;934A|9341+9341/9341\9341;
                      SBC.B #$00                                ;;934B|9342+9342/9342\9342;
                      STA.W !BounceSpriteYPosHigh,X             ;;934D|9344+9344/9344\9344;
                      JSR InvisSldFromBncSpr                    ;;9350|9347+9347/9347\9347;
                      JSR ADDR_029356                           ;;9353|934A+934A/934A\934A;
                      PLA                                       ;;9356|934D+934D/934D\934D;
                      STA.W !BounceSpriteYPosHigh,X             ;;9357|934E+934E/934E\934E;
                      PLA                                       ;;935A|9351+9351/9351\9351;
                      STA.W !BounceSpriteYPosLow,X              ;;935B|9352+9352/9352\9352;
                    + RTS                                       ;;935E|9355+9355/9355\9355; Return
                                                                ;;                        ;
ADDR_029356:          LDY.B #$03                                ;;935F|9356+9356/9356\9356;
ADDR_029358:          LDA.W !CoinSpriteExists,Y                 ;;9361|9358+9358/9358\9358;
                      BEQ ADDR_029361                           ;;9364|935B+935B/935B\935B;
                      DEY                                       ;;9366|935D+935D/935D\935D;
                      BPL ADDR_029358                           ;;9367|935E+935E/935E\935E;
                      INY                                       ;;9369|9360+9360/9360\9360;
ADDR_029361:          LDA.B #$01                                ;;936A|9361+9361/9361\9361;
                      STA.W !CoinSpriteExists,Y                 ;;936C|9363+9363/9363\9363;
                      JSL CODE_05B34A                           ;;936F|9366+9366/9366\9366;
                      LDA.W !BounceSpriteXPosLow,X              ;;9373|936A+936A/936A\936A;
                      STA.W !CoinSpriteXPosLow,Y                ;;9376|936D+936D/936D\936D;
                      LDA.W !BounceSpriteXPosHigh,X             ;;9379|9370+9370/9370\9370;
                      STA.W !CoinsPriteXPosHigh,Y               ;;937C|9373+9373/9373\9373;
                      LDA.W !BounceSpriteYPosLow,X              ;;937F|9376+9376/9376\9376;
                      STA.W !CoinSpriteYPosLow,Y                ;;9382|9379+9379/9379\9379;
                      LDA.W !BounceSpriteYPosHigh,X             ;;9385|937C+937C/937C\937C;
                      STA.W !CoinSpriteYPosHigh,Y               ;;9388|937F+937F/937F\937F;
                      LDA.W !BounceSpriteFlags,X                ;;938B|9382+9382/9382\9382;
                      ASL A                                     ;;938E|9385+9385/9385\9385;
                      ROL A                                     ;;938F|9386+9386/9386\9386;
                      AND.B #$01                                ;;9390|9387+9387/9387\9387;
                      STA.W !CoinSpriteLayer,Y                  ;;9392|9389+9389/9389\9389;
                      LDA.B #$D0                                ;;9395|938C+938C/938C\938C;
                      STA.W !CoinSpriteYSpeed,Y                 ;;9397|938E+938E/938E\938E;
Return029391:         RTS                                       ;;939A|9391+9391/9391\9391; Return
                                                                ;;                        ;
                                                                ;;                        ;
SpriteCapeHitXSpdTbl: db $F8,$08                                ;;939B|9392+9392/9392\9392;
                                                                ;;                        ;
CODE_029394:          STZ.W !QuakeSpriteNumber,X                ;;939D|9394+9394/9394\9394;
                    - RTS                                       ;;93A0|9397+9397/9397\9397; Return
                                                                ;;                        ;
RunQuakeSprites:      LDA.W !QuakeSpriteNumber,X                ;;93A1|9398+9398/9398\9398;
                      BEQ -                                     ;;93A4|939B+939B/939B\939B;
                      DEC.W !BounceSpriteIntTimer,X             ;;93A6|939D+939D/939D\939D;
                      BEQ CODE_029394                           ;;93A9|93A0+93A0/93A0\93A0;
                      LDA.W !BounceSpriteIntTimer,X             ;;93AB|93A2+93A2/93A2\93A2;
                      CMP.B #$03                                ;;93AE|93A5+93A5/93A5\93A5;
                      BCS Return029391                          ;;93B0|93A7+93A7/93A7\93A7;
                      LDY.W !MinorSpriteProcIndex               ;;93B2|93A9+93A9/93A9\93A9;
                      STZ.B !_E                                 ;;93B5|93AC+93AC/93AC\93AC;
CODE_0293AE:          LDX.B #$0B                                ;;93B7|93AE+93AE/93AE\93AE;
CODE_0293B0:          STX.W !CurSpriteProcess                   ;;93B9|93B0+93B0/93B0\93B0;
                      LDA.W !SpriteStatus,X                     ;;93BC|93B3+93B3/93B3\93B3;
                      CMP.B #$0B                                ;;93BF|93B6+93B6/93B6\93B6;
                      BEQ NoQuakeCapeHit                        ;;93C1|93B8+93B8/93B8\93B8;
                      CMP.B #$08                                ;;93C3|93BA+93BA/93BA\93BA;
                      BCC NoQuakeCapeHit                        ;;93C5|93BC+93BC/93BC\93BC;
                      LDA.W !SpriteTweaker166E,X                ;;93C7|93BE+93BE/93BE\93BE;
                      AND.B #$20                                ;;93CA|93C1+93C1/93C1\93C1;
                      ORA.W !SpriteOnYoshiTongue,X              ;;93CC|93C3+93C3/93C3\93C3;
                      ORA.W !SpriteMisc154C,X                   ;;93CF|93C6+93C6/93C6\93C6;
                      ORA.W !SpriteMisc1FE2,X                   ;;93D2|93C9+93C9/93C9\93C9;
                      BNE NoQuakeCapeHit                        ;;93D5|93CC+93CC/93CC\93CC;
                      LDA.W !SpriteBehindScene,X                ;;93D7|93CE+93CE/93CE\93CE;
                      PHY                                       ;;93DA|93D1+93D1/93D1\93D1;
                      LDY.B !PlayerIsClimbing                   ;;93DB|93D2+93D2/93D2\93D2;
                      BEQ +                                     ;;93DD|93D4+93D4/93D4\93D4;
                      EOR.B #$01                                ;;93DF|93D6+93D6/93D6\93D6;
                    + PLY                                       ;;93E1|93D8+93D8/93D8\93D8;
                      EOR.W !PlayerBehindNet                    ;;93E2|93D9+93D9/93D9\93D9;
                      BNE NoQuakeCapeHit                        ;;93E5|93DC+93DC/93DC\93DC;
                      JSL GetSpriteClippingA                    ;;93E7|93DE+93DE/93DE\93DE;
                      LDA.B !_E                                 ;;93EB|93E2+93E2/93E2\93E2; If nonzero, we're checking Mario cape interaction
                      BEQ CheckQuakeSprContact                  ;;93ED|93E4+93E4/93E4\93E4;
                      JSR SetCapeIntrCntctPrms                  ;;93EF|93E6+93E6/93E6\93E6;
                      BRA +                                     ;;93F2|93E9+93E9/93E9\93E9;
                                                                ;;                        ;
CheckQuakeSprContact: JSR QuakeSprSetCntctPrms                  ;;93F4|93EB+93EB/93EB\93EB;
                    + JSL CheckForContact                       ;;93F7|93EE+93EE/93EE\93EE;
                      BCC NoQuakeCapeHit                        ;;93FB|93F2+93F2/93F2\93F2;
                      JSR CapeSprHit                            ;;93FD|93F4+93F4/93F4\93F4;
NoQuakeCapeHit:       LDY.W !MinorSpriteProcIndex               ;;9400|93F7+93F7/93F7\93F7;
                      DEX                                       ;;9403|93FA+93FA/93FA\93FA;
                      BMI +                                     ;;9404|93FB+93FB/93FB\93FB;
                      JMP CODE_0293B0                           ;;9406|93FD+93FD/93FD\93FD;
                                                                ;;                        ;
                    + LDX.W !MinorSpriteProcIndex               ;;9409|9400+9400/9400\9400;
                      RTS                                       ;;940C|9403+9403/9403\9403; Return
                                                                ;;                        ;
CapeSprHit:           LDA.B #$08                                ;;940D|9404+9404/9404\9404; \ The table at 154C is typically used to
                      STA.W !SpriteMisc154C,X                   ;;940F|9406+9406/9406\9406; / disable player contact.
                      LDA.B !SpriteNumber,X                     ;;9412|9409+9409/9409\9409; \ If sprite number is not
                      CMP.B #$81                                ;;9414|940B+940B/940B\940B; | #$81 (the powerup roulete sprite)
                      BNE CapeHitNotRoulette                    ;;9416|940D+940D/940D\940D; / branch
                      LDA.B !SpriteTableC2,X                    ;;9418|940F+940F/940F\940F; > Roulete sprite uses this as a 'stationary in block' flag when non-zero
                      BEQ +                                     ;;941A|9411+9411/9411\9411; > Branch to return if not stationary
                      STZ.B !SpriteTableC2,X                    ;;941C|9413+9413/9413\9413; > Unset 'stationary' flag
                      LDA.B #$C0                                ;;941E|9415+9415/9415\9415;
                      STA.B !SpriteYSpeed,X                     ;;9420|9417+9417/9417\9417;
                      LDA.B #$10                                ;;9422|9419+9419/9419\9419;
                      STA.W !SpriteMisc1540,X                   ;;9424|941B+941B/941B\941B; > Roulette sprite uses this as a 'rise out of block' timer
                      STZ.W !SpriteMisc157C,X                   ;;9427|941E+941E/941E\941E;
                      LDA.B #$20                                ;;942A|9421+9421/9421\9421;
                      STA.W !SpriteMisc1558,X                   ;;942C|9423+9423/9423\9423; > Roulette sprite uses this to disable block interaction
                    + RTS                                       ;;942F|9426+9426/9426\9426; Return
                                                                ;;                        ;
CapeHitNotRoulette:   CMP.B #$2D                                ;;9430|9427+9427/9427\9427; \ A contains sprite number...
                      BEQ CapeSprHitCont                        ;;9432|9429+9429/9429\9429; / Branch if baby yoshi (#$2D): notably has below tweaker bit set
                      LDA.W !SpriteTweaker167A,X                ;;9434|942B+942B/942B\942B; \ Branch if sprite is
                      AND.B #$02                                ;;9437|942E+942E/942E\942E; | immune to star power, cape spin, fire,
                      BNE CapeSprHitSetXYSpeed                  ;;9439|9430+9430/9430\9430; / or being hit from below by a block
                      LDA.W !SpriteStatus,X                     ;;943B|9432+9432/9432\9432; \ Load sprite status
                      CMP.B #$08                                ;;943E|9435+9435/9435\9435; | If in 'main' state (#$08)...
                      BEQ SetSprStunTimer                       ;;9440|9437+9437/9437\9437; / branch
                      LDA.B !SpriteNumber,X                     ;;9442|9439+9439/9439\9439; \ If sprite is bob-omb (#$0D)...
                      CMP.B #$0D                                ;;9444|943B+943B/943B\943B; | (and not in 'main' state, per above)
                      BEQ CapeSprHitCont                        ;;9446|943D+943D/943D\943D; / branch
                      LDA.B !SpriteTableC2,X                    ;;9448|943F+943F/943F\943F; \ If value at C2 table is #$00,
                      BEQ CapeSprHitCont                        ;;944A|9441+9441/9441\9441; / branch
SetSprStunTimer:      LDA.B #$FF                                ;;944C|9443+9443/9443\9443; \ Generally used as a 'stun' timer. Set
                      STA.W !SpriteMisc1540,X                   ;;944E|9445+9445/9445\9445; / when hit by a cape
CapeSprHitCont:       STZ.W !SpriteMisc1558,X                   ;;9451|9448+9448/9448\9448;
                      LDA.B !_E                                 ;;9454|944B+944B/944B\944B; \ This routine is also used by the 'yoshi ground pound' routine
                      CMP.B #$35                                ;;9456|944D+944D/944D\944D; / (when Yellow Yoshi has a shell), and it stores #$35 to $0E
                      BEQ +                                     ;;9458|944F+944F/944F\944F;
                      JSL DisplayContactGfxS                    ;;945A|9451+9451/9451\9451;
                    + LDA.B #$00                                ;;945E|9455+9455/9455\9455;
                      JSL GivePoints                            ;;9460|9457+9457/9457\9457;
                      LDA.B #$02                                ;;9464|945B+945B/945B\945B; \ Sprite status = Killed
                      STA.W !SpriteStatus,X                     ;;9466|945D+945D/945D\945D; /
                      LDA.B !SpriteNumber,X                     ;;9469|9460+9460/9460\9460; \ If sprite is not #$1E (Cloud-riding Lakitu)
                      CMP.B #$1E                                ;;946B|9462+9462/9462\9462; | ...
                      BNE +                                     ;;946D|9464+9464/9464\9464; / branch
                      LDA.B #$1F                                ;;946F|9466+9466/9466\9466; \ Set the Timer for Lakitu's cloud
                      STA.W !SpriteMisc1540+9                   ;;9471|9468+9468/9468\9468; / ...It seems to be in a hardcoded slot
                    + LDA.W !SpriteTweaker1662,X                ;;9474|946B+946B/946B\946B; \ Branch if sprite 'falls straight down when killed'
                      AND.B #$80                                ;;9477|946E+946E/946E\946E; |
                      BNE CapeSprHitSetXYSpeed                  ;;9479|9470+9470/9470\9470; /
                      LDA.W !SpriteTweaker1656,X                ;;947B|9472+9472/9472\9472; \ Branch if can't be jumped on
                      AND.B #$10                                ;;947E|9475+9475/9475\9475;  |
                      BEQ CapeSprHitSetXYSpeed                  ;;9480|9477+9477/9477\9477; /
                      LDA.W !SpriteTweaker1656,X                ;;9482|9479+9479/9479\9479; \ Branch if dies when jumped on
                      AND.B #$20                                ;;9485|947C+947C/947C\947C;  |
                      BNE CapeSprHitSetXYSpeed                  ;;9487|947E+947E/947E\947E; /
                      LDA.B #$09                                ;;9489|9480+9480/9480\9480; \ Sprite status = Carryable
                      STA.W !SpriteStatus,X                     ;;948B|9482+9482/9482\9482; /
                      ASL.W !SpriteOBJAttribute,X               ;;948E|9485+9485/9485\9485;
                      SEC                                       ;;9491|9488+9488/9488\9488;
                      ROR.W !SpriteOBJAttribute,X               ;;9492|9489+9489/9489\9489;
                      LDA.W !SpriteTweaker1686,X                ;;9495|948C+948C/948C\948C; \ Branch if 'Spawns a new sprite' bit is not set
                      AND.B #$40                                ;;9498|948F+948F/948F\948F; |
                      BEQ CapeSprHitSetXYSpeed                  ;;949A|9491+9491/9491\9491; /
                      PHX                                       ;;949C|9493+9493/9493\9493; \ Use the current sprite number
                      LDA.B !SpriteNumber,X                     ;;949D|9494+9494/9494\9494; | To determine what sprite to spawn
                      TAX                                       ;;949F|9496+9496/9496\9496; |
                      LDA.L SpriteToSpawn,X                     ;;94A0|9497+9497/9497\9497; | Load the sprite to spawn
                      PLX                                       ;;94A4|949B+949B/949B\949B; |
                      STA.B !SpriteNumber,X                     ;;94A5|949C+949C/949C\949C; | Store the new sprite number
                      JSL LoadSpriteTables                      ;;94A7|949E+949E/949E\949E; / Initialize the sprite tables
CapeSprHitSetXYSpeed: LDA.B #$C0                                ;;94AB|94A2+94A2/94A2\94A2; \ Figure out the Y speed based
                      LDY.B !_E                                 ;;94AD|94A4+94A4/94A4\94A4; | on whatever is in $0E
                      BEQ +                                     ;;94AF|94A6+94A6/94A6\94A6; | TODO: what stores to $0E here?
                      LDA.B #$B0                                ;;94B1|94A8+94A8/94A8\94A8; | Known: Yoshi ground pound routine (#$35)
                      CPY.B #$02                                ;;94B3|94AA+94AA/94AA\94AA; |
                      BNE +                                     ;;94B5|94AC+94AC/94AC\94AC; |
                      LDA.B #$C0                                ;;94B7|94AE+94AE/94AE\94AE; /
                    + STA.B !SpriteYSpeed,X                     ;;94B9|94B0+94B0/94B0\94B0;
                      JSR SubHorzPosBnk2                        ;;94BB|94B2+94B2/94B2\94B2; \ Get current facing direction
                      LDA.W SpriteCapeHitXSpdTbl,Y              ;;94BE|94B5+94B5/94B5\94B5; / Set sprite's Y speed based on which way its facing
                      STA.B !SpriteXSpeed,X                     ;;94C1|94B8+94B8/94B8\94B8;
                      TYA                                       ;;94C3|94BA+94BA/94BA\94BA; \ Invert the sprite's horizontal
                      EOR.B #$01                                ;;94C4|94BB+94BB/94BB\94BB; | facing direction
                      STA.W !SpriteMisc157C,X                   ;;94C6|94BD+94BD/94BD\94BD; /
                      RTS                                       ;;94C9|94C0+94C0/94C0\94C0; Return
                                                                ;;                        ;
GroundPound:          LDA.B #$30                                ;;94CA|94C1+94C1/94C1\94C1; \ Set ground shake timer
                      STA.W !ScreenShakeTimer                   ;;94CC|94C3+94C3/94C3\94C3; /
                      STZ.W !GroundPoundTimer                   ;;94CF|94C6+94C6/94C6\94C6;
                      PHB                                       ;;94D2|94C9+94C9/94C9\94C9;
                      PHK                                       ;;94D3|94CA+94CA/94CA\94CA;
                      PLB                                       ;;94D4|94CB+94CB/94CB\94CB;
                      LDX.B #$09                                ;;94D5|94CC+94CC/94CC\94CC; Loop over sprites:
KillSprLoopStart:     LDA.W !SpriteStatus,X                     ;;94D7|94CE+94CE/94CE\94CE; \ Skip current sprite if status < 8
                      CMP.B #$08                                ;;94DA|94D1+94D1/94D1\94D1;  |
                      BCC +                                     ;;94DC|94D3+94D3/94D3\94D3; /
                      LDA.W !SpriteBlockedDirs,X                ;;94DE|94D5+94D5/94D5\94D5; \ Skip current sprite if not on ground
                      AND.B #$04                                ;;94E1|94D8+94D8/94D8\94D8;  |
                      BEQ +                                     ;;94E3|94DA+94DA/94DA\94DA; /
                      LDA.W !SpriteTweaker166E,X                ;;94E5|94DC+94DC/94DC\94DC; \ Skip current sprite if...
                      AND.B #$20                                ;;94E8|94DF+94DF/94DF\94DF;  | ...can't be killed by cape...
                      ORA.W !SpriteOnYoshiTongue,X              ;;94EA|94E1+94E1/94E1\94E1;  | ...or sprite being eaten...
                      ORA.W !SpriteMisc154C,X                   ;;94ED|94E4+94E4/94E4\94E4;  | ...or interaction disabled
                      BNE +                                     ;;94F0|94E7+94E7/94E7\94E7; /
                      LDA.B #$35                                ;;94F2|94E9+94E9/94E9\94E9;
                      STA.B !_E                                 ;;94F4|94EB+94EB/94EB\94EB;
                      JSR CapeSprHit                            ;;94F6|94ED+94ED/94ED\94ED;
                    + DEX                                       ;;94F9|94F0+94F0/94F0\94F0;
                      BPL KillSprLoopStart                      ;;94FA|94F1+94F1/94F1\94F1;
                      PLB                                       ;;94FC|94F3+94F3/94F3\94F3;
                      RTL                                       ;;94FD|94F4+94F4/94F4\94F4; Return
                                                                ;;                        ;
CODE_0294F5:          LDA.W !CapeInteracts                      ;;94FE|94F5+94F5/94F5\94F5;
                      BEQ Return02950A                          ;;9501|94F8+94F8/94F8\94F8;
                      STA.B !_E                                 ;;9503|94FA+94FA/94FA\94FA;
                      LDA.B !TrueFrame                          ;;9505|94FC+94FC/94FC\94FC;
                      LSR A                                     ;;9507|94FE+94FE/94FE\94FE;
                      BCC +                                     ;;9508|94FF+94FF/94FF\94FF;
                      JSR CODE_0293AE                           ;;950A|9501+9501/9501\9501;
                      JSR CODE_029631                           ;;950D|9504+9504/9504\9504;
                    + JSR CODE_02950B                           ;;9510|9507+9507/9507\9507;
Return02950A:         RTS                                       ;;9513|950A+950A/950A\950A; Return
                                                                ;;                        ;
CODE_02950B:          STZ.B !_F                                 ;;9514|950B+950B/950B\950B;
                      JSR CODE_029540                           ;;9516|950D+950D/950D\950D;
                      LDA.B !ScreenMode                         ;;9519|9510+9510/9510\9510;
                      BPL +                                     ;;951B|9512+9512/9512\9512;
                      INC.B !_F                                 ;;951D|9514+9514/9514\9514;
                      LDA.W !CapeInteractionXPos                ;;951F|9516+9516/9516\9516;
                      CLC                                       ;;9522|9519+9519/9519\9519;
                      ADC.B !Layer23XRelPos                     ;;9523|951A+951A/951A\951A;
                      STA.W !CapeInteractionXPos                ;;9525|951C+951C/951C\951C;
                      LDA.W !CapeInteractionXPos+1              ;;9528|951F+951F/951F\951F;
                      ADC.B !Layer23XRelPos+1                   ;;952B|9522+9522/9522\9522;
                      STA.W !CapeInteractionXPos+1              ;;952D|9524+9524/9524\9524;
                      LDA.W !CapeInteractionYPos                ;;9530|9527+9527/9527\9527;
                      CLC                                       ;;9533|952A+952A/952A\952A;
                      ADC.B !Layer23YRelPos                     ;;9534|952B+952B/952B\952B;
                      STA.W !CapeInteractionYPos                ;;9536|952D+952D/952D\952D;
                      LDA.W !CapeInteractionYPos+1              ;;9539|9530+9530/9530\9530;
                      ADC.B !Layer23YRelPos+1                   ;;953C|9533+9533/9533\9533;
                      STA.W !CapeInteractionYPos+1              ;;953E|9535+9535/9535\9535;
                      JSR CODE_029540                           ;;9541|9538+9538/9538\9538;
                    + RTS                                       ;;9544|953B+953B/953B\953B; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02953C:          db $08,$08                                ;;9545|953C+953C/953C\953C;
                                                                ;;                        ;
DATA_02953E:          db $02,$0E                                ;;9547|953E+953E/953E\953E;
                                                                ;;                        ;
CODE_029540:          LDA.B !TrueFrame                          ;;9549|9540+9540/9540\9540;
                      AND.B #$01                                ;;954B|9542+9542/9542\9542;
                      TAY                                       ;;954D|9544+9544/9544\9544;
                      LDA.B !_F                                 ;;954E|9545+9545/9545\9545;
                      INC A                                     ;;9550|9547+9547/9547\9547;
                      AND.B !ScreenMode                         ;;9551|9548+9548/9548\9548;
                      BEQ CODE_0295AE                           ;;9553|954A+954A/954A\954A;
                      LDA.W !CapeInteractionYPos                ;;9555|954C+954C/954C\954C;
                      CLC                                       ;;9558|954F+954F/954F\954F;
                      ADC.W DATA_02953C,Y                       ;;9559|9550+9550/9550\9550;
                      AND.B #$F0                                ;;955C|9553+9553/9553\9553;
                      STA.B !_0                                 ;;955E|9555+9555/9555\9555;
                      STA.B !TouchBlockYPos                     ;;9560|9557+9557/9557\9557;
                      LDA.W !CapeInteractionYPos+1              ;;9562|9559+9559/9559\9559;
                      ADC.B #$00                                ;;9565|955C+955C/955C\955C;
                      CMP.B !LevelScrLength                     ;;9567|955E+955E/955E\955E;
                      BCS Return0295AD                          ;;9569|9560+9560/9560\9560;
                      STA.B !_3                                 ;;956B|9562+9562/9562\9562;
                      STA.B !TouchBlockYPos+1                   ;;956D|9564+9564/9564\9564;
                      LDA.W !CapeInteractionXPos                ;;956F|9566+9566/9566\9566;
                      CLC                                       ;;9572|9569+9569/9569\9569;
                      ADC.W DATA_02953E,Y                       ;;9573|956A+956A/956A\956A;
                      STA.B !_1                                 ;;9576|956D+956D/956D\956D;
                      STA.B !TouchBlockXPos                     ;;9578|956F+956F/956F\956F;
                      LDA.W !CapeInteractionXPos+1              ;;957A|9571+9571/9571\9571;
                      ADC.B #$00                                ;;957D|9574+9574/9574\9574;
                      CMP.B #$02                                ;;957F|9576+9576/9576\9576;
                      BCS Return0295AD                          ;;9581|9578+9578/9578\9578;
                      STA.B !_2                                 ;;9583|957A+957A/957A\957A;
                      STA.B !TouchBlockXPos+1                   ;;9585|957C+957C/957C\957C;
                      LDA.B !_1                                 ;;9587|957E+957E/957E\957E;
                      LSR A                                     ;;9589|9580+9580/9580\9580;
                      LSR A                                     ;;958A|9581+9581/9581\9581;
                      LSR A                                     ;;958B|9582+9582/9582\9582;
                      LSR A                                     ;;958C|9583+9583/9583\9583;
                      ORA.B !_0                                 ;;958D|9584+9584/9584\9584;
                      STA.B !_0                                 ;;958F|9586+9586/9586\9586;
                      LDX.B !_3                                 ;;9591|9588+9588/9588\9588;
                      LDA.L DATA_00BA80,X                       ;;9593|958A+958A/958A\958A;
                      LDY.B !_F                                 ;;9597|958E+958E/958E\958E;
                      BEQ +                                     ;;9599|9590+9590/9590\9590;
                      LDA.L DATA_00BA8E,X                       ;;959B|9592+9592/9592\9592;
                    + CLC                                       ;;959F|9596+9596/9596\9596;
                      ADC.B !_0                                 ;;95A0|9597+9597/9597\9597;
                      STA.B !_5                                 ;;95A2|9599+9599/9599\9599;
                      LDA.L DATA_00BABC,X                       ;;95A4|959B+959B/959B\959B;
                      LDY.B !_F                                 ;;95A8|959F+959F/959F\959F;
                      BEQ +                                     ;;95AA|95A1+95A1/95A1\95A1;
                      LDA.L DATA_00BACA,X                       ;;95AC|95A3+95A3/95A3\95A3;
                    + ADC.B !_2                                 ;;95B0|95A7+95A7/95A7\95A7;
                      STA.B !_6                                 ;;95B2|95A9+95A9/95A9\95A9;
                      BRA CODE_02960D                           ;;95B4|95AB+95AB/95AB\95AB;
                                                                ;;                        ;
Return0295AD:         RTS                                       ;;95B6|95AD+95AD/95AD\95AD; Return
                                                                ;;                        ;
CODE_0295AE:          LDA.W !CapeInteractionYPos                ;;95B7|95AE+95AE/95AE\95AE;
                      CLC                                       ;;95BA|95B1+95B1/95B1\95B1;
                      ADC.W DATA_02953C,Y                       ;;95BB|95B2+95B2/95B2\95B2;
                      AND.B #$F0                                ;;95BE|95B5+95B5/95B5\95B5;
                      STA.B !_0                                 ;;95C0|95B7+95B7/95B7\95B7;
                      STA.B !TouchBlockYPos                     ;;95C2|95B9+95B9/95B9\95B9;
                      LDA.W !CapeInteractionYPos+1              ;;95C4|95BB+95BB/95BB\95BB;
                      ADC.B #$00                                ;;95C7|95BE+95BE/95BE\95BE;
                      CMP.B #$02                                ;;95C9|95C0+95C0/95C0\95C0;
                      BCS Return0295AD                          ;;95CB|95C2+95C2/95C2\95C2;
                      STA.B !_2                                 ;;95CD|95C4+95C4/95C4\95C4;
                      STA.B !TouchBlockYPos+1                   ;;95CF|95C6+95C6/95C6\95C6;
                      LDA.W !CapeInteractionXPos                ;;95D1|95C8+95C8/95C8\95C8;
                      CLC                                       ;;95D4|95CB+95CB/95CB\95CB;
                      ADC.W DATA_02953E,Y                       ;;95D5|95CC+95CC/95CC\95CC;
                      STA.B !_1                                 ;;95D8|95CF+95CF/95CF\95CF;
                      STA.B !TouchBlockXPos                     ;;95DA|95D1+95D1/95D1\95D1;
                      LDA.W !CapeInteractionXPos+1              ;;95DC|95D3+95D3/95D3\95D3;
                      ADC.B #$00                                ;;95DF|95D6+95D6/95D6\95D6;
                      CMP.B !LevelScrLength                     ;;95E1|95D8+95D8/95D8\95D8;
                      BCS Return0295AD                          ;;95E3|95DA+95DA/95DA\95DA;
                      STA.B !_3                                 ;;95E5|95DC+95DC/95DC\95DC;
                      STA.B !TouchBlockXPos+1                   ;;95E7|95DE+95DE/95DE\95DE;
                      LDA.B !_1                                 ;;95E9|95E0+95E0/95E0\95E0;
                      LSR A                                     ;;95EB|95E2+95E2/95E2\95E2;
                      LSR A                                     ;;95EC|95E3+95E3/95E3\95E3;
                      LSR A                                     ;;95ED|95E4+95E4/95E4\95E4;
                      LSR A                                     ;;95EE|95E5+95E5/95E5\95E5;
                      ORA.B !_0                                 ;;95EF|95E6+95E6/95E6\95E6;
                      STA.B !_0                                 ;;95F1|95E8+95E8/95E8\95E8;
                      LDX.B !_3                                 ;;95F3|95EA+95EA/95EA\95EA;
                      LDA.L DATA_00BA60,X                       ;;95F5|95EC+95EC/95EC\95EC;
                      LDY.B !_F                                 ;;95F9|95F0+95F0/95F0\95F0;
                      BEQ +                                     ;;95FB|95F2+95F2/95F2\95F2;
                      LDA.L DATA_00BA70,X                       ;;95FD|95F4+95F4/95F4\95F4;
                    + CLC                                       ;;9601|95F8+95F8/95F8\95F8;
                      ADC.B !_0                                 ;;9602|95F9+95F9/95F9\95F9;
                      STA.B !_5                                 ;;9604|95FB+95FB/95FB\95FB;
                      LDA.L DATA_00BA9C,X                       ;;9606|95FD+95FD/95FD\95FD;
                      LDY.B !_F                                 ;;960A|9601+9601/9601\9601;
                      BEQ +                                     ;;960C|9603+9603/9603\9603;
                      LDA.L DATA_00BAAC,X                       ;;960E|9605+9605/9605\9605;
                    + ADC.B !_2                                 ;;9612|9609+9609/9609\9609;
                      STA.B !_6                                 ;;9614|960B+960B/960B\960B;
CODE_02960D:          LDA.B #$7E                                ;;9616|960D+960D/960D\960D;
                      STA.B !_7                                 ;;9618|960F+960F/960F\960F;
                      LDA.B [!_5]                               ;;961A|9611+9611/9611\9611;
                      STA.W !Map16TileNumber                    ;;961C|9613+9613/9613\9613;
                      INC.B !_7                                 ;;961F|9616+9616/9616\9616;
                      LDA.B [!_5]                               ;;9621|9618+9618/9618\9618;
                      JSL CODE_00F545                           ;;9623|961A+961A/961A\961A;
                      CMP.B #$00                                ;;9627|961E+961E/961E\961E;
                      BEQ +                                     ;;9629|9620+9620/9620\9620;
                      LDA.B !_F                                 ;;962B|9622+9622/9622\9622;
                      STA.W !LayerProcessing                    ;;962D|9624+9624/9624\9624;
                      LDA.W !Map16TileNumber                    ;;9630|9627+9627/9627\9627;
                      LDY.B #$00                                ;;9633|962A+962A/962A\962A;
                      JSL CODE_00F160                           ;;9635|962C+962C/962C\962C;
                    + RTS                                       ;;9639|9630+9630/9630\9630; Return
                                                                ;;                        ;
CODE_029631:          LDX.B #$07                                ;;963A|9631+9631/9631\9631;
CODE_029633:          STX.W !CurSpriteProcess                   ;;963C|9633+9633/9633\9633;
                      LDA.W !ExtSpriteNumber,X                  ;;963F|9636+9636/9636\9636;
                      CMP.B #$02                                ;;9642|9639+9639/9639\9639;
                      BCC +                                     ;;9644|963B+963B/963B\963B;
                      JSR CODE_02A519                           ;;9646|963D+963D/963D\963D;
                      JSR SetCapeIntrCntctPrms                 ;;9649|9640+9640/9640\9640;
                      JSL CheckForContact                       ;;964C|9643+9643/9643\9643;
                      BCC +                                     ;;9650|9647+9647/9647\9647;
                      LDA.W !ExtSpriteNumber,X                  ;;9652|9649+9649/9649\9649;
                      CMP.B #$12                                ;;9655|964C+964C/964C\964C;
                      BEQ +                                     ;;9657|964E+964E/964E\964E;
                      JSR CODE_02A4DE                           ;;9659|9650+9650/9650\9650;
                    + DEX                                       ;;965C|9653+9653/9653\9653;
                      BPL CODE_029633                           ;;965D|9654+9654/9654\9654;
Return029656:         RTS                                       ;;965F|9656+9656/9656\9656; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029657:          db $FC                                    ;;9660|9657+9657/9657\9657;
                                                                ;;                        ;
DATA_029658:          db $E0,$FF                                ;;9661|9658+9658/9658\9658;
                                                                ;;                        ;
DATA_02965A:          db $FF,$18                                ;;9663|965A+965A/965A\965A;
                                                                ;;                        ;
DATA_02965C:          db $50,$FC                                ;;9665|965C+965C/965C\965C;
                                                                ;;                        ;
DATA_02965E:          db $F8,$FF                                ;;9667|965E+965E/965E\965E;
                                                                ;;                        ;
DATA_029660:          db $FF,$18,$10                            ;;9669|9660+9660/9660\9660;
                                                                ;;                        ;
QuakeSprSetCntctPrms: PHX                                       ;;966C|9663+9663/9663\9663;
                      LDA.W !QuakeSpriteNumber,Y                ;;966D|9664+9664/9664\9664;
                      TAX                                       ;;9670|9667+9667/9667\9667;
                      LDA.W !QuakeSpriteXPosLow,Y               ;;9671|9668+9668/9668\9668;
                      CLC                                       ;;9674|966B+966B/966B\966B;
                      ADC.W DATA_029657-1,X                      ;;9675|966C+966C/966C\966C;
                      STA.B !_0                                 ;;9678|966F+966F/966F\966F;
                      LDA.W !QuakeSpriteXPosHigh,Y              ;;967A|9671+9671/9671\9671;
                      ADC.W DATA_029658,X                       ;;967D|9674+9674/9674\9674;
                      STA.B !_8                                 ;;9680|9677+9677/9677\9677;
                      LDA.W DATA_02965A,X                       ;;9682|9679+9679/9679\9679;
                      STA.B !_2                                 ;;9685|967C+967C/967C\967C;
                      LDA.W !QuakeSpriteYPosLow,Y               ;;9687|967E+967E/967E\967E;
                      CLC                                       ;;968A|9681+9681/9681\9681;
                      ADC.W DATA_02965C,X                       ;;968B|9682+9682/9682\9682;
                      STA.B !_1                                 ;;968E|9685+9685/9685\9685;
                      LDA.W !QuakeSpriteYPosHigh,Y              ;;9690|9687+9687/9687\9687;
                      ADC.W DATA_02965E,X                       ;;9693|968A+968A/968A\968A;
                      STA.B !_9                                 ;;9696|968D+968D/968D\968D;
                      LDA.W DATA_029660,X                       ;;9698|968F+968F/968F\968F;
                      STA.B !_3                                 ;;969B|9692+9692/9692\9692;
                      PLX                                       ;;969D|9694+9694/9694\9694;
                      RTS                                       ;;969E|9695+9695/9695\9695; Return
                                                                ;;                        ;
SetCapeIntrCntctPrms: LDA.W !CapeInteractionXPos                ;;969F|9696+9696/9696\9696;
                      SEC                                       ;;96A2|9699+9699/9699\9699;
                      SBC.B #$02                                ;;96A3|969A+969A/969A\969A;
                      STA.B !_0                                 ;;96A5|969C+969C/969C\969C;
                      LDA.W !CapeInteractionXPos+1              ;;96A7|969E+969E/969E\969E;
                      SBC.B #$00                                ;;96AA|96A1+96A1/96A1\96A1;
                      STA.B !_8                                 ;;96AC|96A3+96A3/96A3\96A3;
                      LDA.B #$14                                ;;96AE|96A5+96A5/96A5\96A5;
                      STA.B !_2                                 ;;96B0|96A7+96A7/96A7\96A7;
                      LDA.W !CapeInteractionYPos                ;;96B2|96A9+96A9/96A9\96A9;
                      STA.B !_1                                 ;;96B5|96AC+96AC/96AC\96AC;
                      LDA.W !CapeInteractionYPos+1              ;;96B7|96AE+96AE/96AE\96AE;
                      STA.B !_9                                 ;;96BA|96B1+96B1/96B1\96B1;
                      LDA.B #$10                                ;;96BC|96B3+96B3/96B3\96B3;
                      STA.B !_3                                 ;;96BE|96B5+96B5/96B5\96B5;
                      RTS                                       ;;96C0|96B7+96B7/96B7\96B7; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0296B8:          db $20,$24,$28,$2C                        ;;96C1|96B8+96B8/96B8\96B8;
                                                                ;;                        ;
DATA_0296BC:          db $90,$94,$98,$9C                        ;;96C5|96BC+96BC/96BC\96BC;
                                                                ;;                        ;
RunSmokeSprites:      LDA.W !SmokeSpriteNumber,X                ;;96C9|96C0+96C0/96C0\96C0;
                      BEQ .return                               ;;96CC|96C3+96C3/96C3\96C3;
                      AND.B #$7F                                ;;96CE|96C5+96C5/96C5\96C5;
                      JSL ExecutePtr                            ;;96D0|96C7+96C7/96C7\96C7;
                                                                ;;                        ;
                      dw .return                                ;;96D4|96CB+96CB/96CB\96CB;
                      dw PuffSmokeSpr                           ;;96D6|96CD+96CD/96CD\96CD;
                      dw ContactSmokeSpr                        ;;96D8|96CF+96CF/96CF\96CF;
                      dw DustSmokeSpr                           ;;96DA|96D1+96D1/96D1\96D1;
                      dw .return                                ;;96DC|96D3+96D3/96D3\96D3;
                      dw GlitterSmokeSpr                        ;;96DE|96D5+96D5/96D5\96D5;
                                                                ;;                        ;
.return:              RTS                                       ;;96E0|96D7+96D7/96D7\96D7; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0296D8:          db $66,$66,$64,$62,$60,$62,$60            ;;96E1|96D8+96D8/96D8\96D8;
                                                                ;;                        ;
CODE_0296DF:          STZ.W !SmokeSpriteNumber,X                ;;96E8|96DF+96DF/96DF\96DF;
                      RTS                                       ;;96EB|96E2+96E2/96E2\96E2; Return
                                                                ;;                        ;
PuffSmokeSpr:         LDA.W !SmokeSpriteTimer,X                 ;;96EC|96E3+96E3/96E3\96E3;
                      BEQ CODE_0296DF                           ;;96EF|96E6+96E6/96E6\96E6;
                      LDA.W !SmokeSpriteNumber,X                ;;96F1|96E8+96E8/96E8\96E8;
                      BMI CODE_0296F1                           ;;96F4|96EB+96EB/96EB\96EB;
                      LDA.B !SpriteLock                         ;;96F6|96ED+96ED/96ED\96ED;
                      BNE +                                     ;;96F8|96EF+96EF/96EF\96EF;
CODE_0296F1:          DEC.W !SmokeSpriteTimer,X                 ;;96FA|96F1+96F1/96F1\96F1;
                    + LDA.B !SpriteNumber+7                     ;;96FD|96F4+96F4/96F4\96F4;
                      CMP.B #$A9                                ;;96FF|96F6+96F6/96F6\96F6;
                      BEQ CODE_02974A                           ;;9701|96F8+96F8/96F8\96F8;
                      LDA.W !IRQNMICommand                      ;;9703|96FA+96FA/96FA\96FA;
                      AND.B #$40                                ;;9706|96FD+96FD/96FD\96FD;
                      BEQ CODE_02974A                           ;;9708|96FF+96FF/96FF\96FF;
                      LDY.W DATA_0296BC,X                       ;;970A|9701+9701/9701\9701;
                      LDA.W !SmokeSpriteXPos,X                  ;;970D|9704+9704/9704\9704;
                      SEC                                       ;;9710|9707+9707/9707\9707;
                      SBC.B !Layer1XPos                         ;;9711|9708+9708/9708\9708;
                      CMP.B #$F4                                ;;9713|970A+970A/970A\970A;
                      BCS CODE_0296DF                           ;;9715|970C+970C/970C\970C;
                      STA.W !OAMTileXPos+$100,Y                 ;;9717|970E+970E/970E\970E;
                      LDA.W !SmokeSpriteYPos,X                  ;;971A|9711+9711/9711\9711;
                      SEC                                       ;;971D|9714+9714/9714\9714;
                      SBC.B !Layer1YPos                         ;;971E|9715+9715/9715\9715;
                      CMP.B #$E0                                ;;9720|9717+9717/9717\9717;
                      BCS CODE_0296DF                           ;;9722|9719+9719/9719\9719;
                      STA.W !OAMTileYPos+$100,Y                 ;;9724|971B+971B/971B\971B;
                      LDA.W !SmokeSpriteTimer,X                 ;;9727|971E+971E/971E\971E;
                      CMP.B #$08                                ;;972A|9721+9721/9721\9721;
                      LDA.B #$00                                ;;972C|9723+9723/9723\9723;
                      BCS +                                     ;;972E|9725+9725/9725\9725;
                      ASL A                                     ;;9730|9727+9727/9727\9727;
                      ASL A                                     ;;9731|9728+9728/9728\9728;
                      ASL A                                     ;;9732|9729+9729/9729\9729;
                      ASL A                                     ;;9733|972A+972A/972A\972A;
                      AND.B #$40                                ;;9734|972B+972B/972B\972B;
                    + ORA.B !SpriteProperties                   ;;9736|972D+972D/972D\972D;
                      STA.W !OAMTileAttr+$100,Y                 ;;9738|972F+972F/972F\972F;
                      LDA.W !SmokeSpriteTimer,X                 ;;973B|9732+9732/9732\9732;
                      PHY                                       ;;973E|9735+9735/9735\9735;
                      LSR A                                     ;;973F|9736+9736/9736\9736;
                      LSR A                                     ;;9740|9737+9737/9737\9737;
                      TAY                                       ;;9741|9738+9738/9738\9738;
                      LDA.W DATA_0296D8,Y                       ;;9742|9739+9739/9739\9739;
                      PLY                                       ;;9745|973C+973C/973C\973C;
                      STA.W !OAMTileNo+$100,Y                   ;;9746|973D+973D/973D\973D;
                      TYA                                       ;;9749|9740+9740/9740\9740;
                      LSR A                                     ;;974A|9741+9741/9741\9741;
                      LSR A                                     ;;974B|9742+9742/9742\9742;
                      TAY                                       ;;974C|9743+9743/9743\9743;
                      LDA.B #$02                                ;;974D|9744+9744/9744\9744;
                      STA.W !OAMTileSize+$40,Y                  ;;974F|9746+9746/9746\9746;
                      RTS                                       ;;9752|9749+9749/9749\9749; Return
                                                                ;;                        ;
CODE_02974A:          LDY.W DATA_0296B8,X                       ;;9753|974A+974A/974A\974A;
                      LDA.W !SmokeSpriteXPos,X                  ;;9756|974D+974D/974D\974D;
                      SEC                                       ;;9759|9750+9750/9750\9750;
                      SBC.B !Layer1XPos                         ;;975A|9751+9751/9751\9751;
                      CMP.B #$F4                                ;;975C|9753+9753/9753\9753;
                      BCS CODE_029793                           ;;975E|9755+9755/9755\9755;
                      STA.W !OAMTileXPos,Y                      ;;9760|9757+9757/9757\9757;
                      LDA.W !SmokeSpriteYPos,X                  ;;9763|975A+975A/975A\975A;
                      SEC                                       ;;9766|975D+975D/975D\975D;
                      SBC.B !Layer1YPos                         ;;9767|975E+975E/975E\975E;
                      CMP.B #$E0                                ;;9769|9760+9760/9760\9760;
                      BCS CODE_029793                           ;;976B|9762+9762/9762\9762;
                      STA.W !OAMTileYPos,Y                      ;;976D|9764+9764/9764\9764;
                      LDA.W !SmokeSpriteTimer,X                 ;;9770|9767+9767/9767\9767;
                      CMP.B #$08                                ;;9773|976A+976A/976A\976A;
                      LDA.B #$00                                ;;9775|976C+976C/976C\976C;
                      BCS +                                     ;;9777|976E+976E/976E\976E;
                      ASL A                                     ;;9779|9770+9770/9770\9770;
                      ASL A                                     ;;977A|9771+9771/9771\9771;
                      ASL A                                     ;;977B|9772+9772/9772\9772;
                      ASL A                                     ;;977C|9773+9773/9773\9773;
                      AND.B #$40                                ;;977D|9774+9774/9774\9774;
                    + ORA.B !SpriteProperties                   ;;977F|9776+9776/9776\9776;
                      STA.W !OAMTileAttr,Y                      ;;9781|9778+9778/9778\9778;
                      LDA.W !SmokeSpriteTimer,X                 ;;9784|977B+977B/977B\977B;
                      PHY                                       ;;9787|977E+977E/977E\977E;
                      LSR A                                     ;;9788|977F+977F/977F\977F;
                      LSR A                                     ;;9789|9780+9780/9780\9780;
                      TAY                                       ;;978A|9781+9781/9781\9781;
                      LDA.W DATA_0296D8,Y                       ;;978B|9782+9782/9782\9782;
                      PLY                                       ;;978E|9785+9785/9785\9785;
                      STA.W !OAMTileNo,Y                        ;;978F|9786+9786/9786\9786;
                      TYA                                       ;;9792|9789+9789/9789\9789;
                      LSR A                                     ;;9793|978A+978A/978A\978A;
                      LSR A                                     ;;9794|978B+978B/978B\978B;
                      TAY                                       ;;9795|978C+978C/978C\978C;
                      LDA.B #$02                                ;;9796|978D+978D/978D\978D;
                      STA.W !OAMTileSize,Y                      ;;9798|978F+978F/978F\978F;
                      RTS                                       ;;979B|9792+9792/9792\9792; Return
                                                                ;;                        ;
CODE_029793:          STZ.W !SmokeSpriteNumber,X                ;;979C|9793+9793/9793\9793;
                      RTS                                       ;;979F|9796+9796/9796\9796; Return
                                                                ;;                        ;
ContactSmokeSpr:      LDA.W !SmokeSpriteTimer,X                 ;;97A0|9797+9797/9797\9797;
                      BEQ CODE_029793                           ;;97A3|979A+979A/979A\979A;
                      LDY.B !SpriteLock                         ;;97A5|979C+979C/979C\979C;
                      BNE +                                     ;;97A7|979E+979E/979E\979E;
                      DEC.W !SmokeSpriteTimer,X                 ;;97A9|97A0+97A0/97A0\97A0;
                    + BIT.W !IRQNMICommand                      ;;97AC|97A3+97A3/97A3\97A3;
                      BVC +                                     ;;97AF|97A6+97A6/97A6\97A6;
                      LDA.W !IRQNMICommand                      ;;97B1|97A8+97A8/97A8\97A8;
                      CMP.B #$C1                                ;;97B4|97AB+97AB/97AB\97AB;
                      BEQ +                                     ;;97B6|97AD+97AD/97AD\97AD;
                      JMP CODE_029838                           ;;97B8|97AF+97AF/97AF\97AF;
                                                                ;;                        ;
                    + LDY.B #$F0                                ;;97BB|97B2+97B2/97B2\97B2;
                      LDA.W !SmokeSpriteXPos,X                  ;;97BD|97B4+97B4/97B4\97B4;
                      SEC                                       ;;97C0|97B7+97B7/97B7\97B7;
                      SBC.B !Layer1XPos                         ;;97C1|97B8+97B8/97B8\97B8;
                      CMP.B #$F0                                ;;97C3|97BA+97BA/97BA\97BA;
                      BCS CODE_029793                           ;;97C5|97BC+97BC/97BC\97BC;
                      STA.W !OAMTileXPos,Y                      ;;97C7|97BE+97BE/97BE\97BE;
                      STA.W !OAMTileXPos+8,Y                    ;;97CA|97C1+97C1/97C1\97C1;
                      CLC                                       ;;97CD|97C4+97C4/97C4\97C4;
                      ADC.B #$08                                ;;97CE|97C5+97C5/97C5\97C5;
                      STA.W !OAMTileXPos+4,Y                    ;;97D0|97C7+97C7/97C7\97C7;
                      STA.W !OAMTileXPos+$0C,Y                  ;;97D3|97CA+97CA/97CA\97CA;
                      LDA.W !SmokeSpriteYPos,X                  ;;97D6|97CD+97CD/97CD\97CD;
                      SEC                                       ;;97D9|97D0+97D0/97D0\97D0;
                      SBC.B !Layer1YPos                         ;;97DA|97D1+97D1/97D1\97D1;
                      STA.W !OAMTileYPos,Y                      ;;97DC|97D3+97D3/97D3\97D3;
                      STA.W !OAMTileYPos+4,Y                    ;;97DF|97D6+97D6/97D6\97D6;
                      CLC                                       ;;97E2|97D9+97D9/97D9\97D9;
                      ADC.B #$08                                ;;97E3|97DA+97DA/97DA\97DA;
                      STA.W !OAMTileYPos+8,Y                    ;;97E5|97DC+97DC/97DC\97DC;
                      STA.W !OAMTileYPos+$0C,Y                  ;;97E8|97DF+97DF/97DF\97DF;
                      LDA.W !SmokeSpriteTimer,X                 ;;97EB|97E2+97E2/97E2\97E2;
                      ASL A                                     ;;97EE|97E5+97E5/97E5\97E5;
                      ASL A                                     ;;97EF|97E6+97E6/97E6\97E6;
                      ASL A                                     ;;97F0|97E7+97E7/97E7\97E7;
                      ASL A                                     ;;97F1|97E8+97E8/97E8\97E8;
                      ASL A                                     ;;97F2|97E9+97E9/97E9\97E9;
                      AND.B #$40                                ;;97F3|97EA+97EA/97EA\97EA;
                      ORA.B !SpriteProperties                   ;;97F5|97EC+97EC/97EC\97EC;
                      STA.W !OAMTileAttr,Y                      ;;97F7|97EE+97EE/97EE\97EE;
                      STA.W !OAMTileAttr+4,Y                    ;;97FA|97F1+97F1/97F1\97F1;
                      EOR.B #$C0                                ;;97FD|97F4+97F4/97F4\97F4;
                      STA.W !OAMTileAttr+8,Y                    ;;97FF|97F6+97F6/97F6\97F6;
                      STA.W !OAMTileAttr+$0C,Y                  ;;9802|97F9+97F9/97F9\97F9;
                      LDA.W !SmokeSpriteTimer,X                 ;;9805|97FC+97FC/97FC\97FC;
                      AND.B #$02                                ;;9808|97FF+97FF/97FF\97FF;
                      BNE CODE_029815                           ;;980A|9801+9801/9801\9801;
                      LDA.B #$7C                                ;;980C|9803+9803/9803\9803;
                      STA.W !OAMTileNo,Y                        ;;980E|9805+9805/9805\9805;
                      STA.W !OAMTileNo+$0C,Y                    ;;9811|9808+9808/9808\9808;
                      LDA.B #$7D                                ;;9814|980B+980B/980B\980B;
                      STA.W !OAMTileNo+4,Y                      ;;9816|980D+980D/980D\980D;
                      STA.W !OAMTileNo+8,Y                      ;;9819|9810+9810/9810\9810;
                      BRA +                                     ;;981C|9813+9813/9813\9813;
                                                                ;;                        ;
CODE_029815:          LDA.B #$7D                                ;;981E|9815+9815/9815\9815;
                      STA.W !OAMTileNo,Y                        ;;9820|9817+9817/9817\9817;
                      STA.W !OAMTileNo+$0C,Y                    ;;9823|981A+981A/981A\981A;
                      LDA.B #$7C                                ;;9826|981D+981D/981D\981D;
                      STA.W !OAMTileNo+4,Y                      ;;9828|981F+981F/981F\981F;
                      STA.W !OAMTileNo+8,Y                      ;;982B|9822+9822/9822\9822;
                    + TYA                                       ;;982E|9825+9825/9825\9825;
                      LSR A                                     ;;982F|9826+9826/9826\9826;
                      LSR A                                     ;;9830|9827+9827/9827\9827;
                      TAY                                       ;;9831|9828+9828/9828\9828;
                      LDA.B #$00                                ;;9832|9829+9829/9829\9829;
                      STA.W !OAMTileSize,Y                      ;;9834|982B+982B/982B\982B;
                      STA.W !OAMTileSize+1,Y                    ;;9837|982E+982E/982E\982E;
                      STA.W !OAMTileSize+2,Y                    ;;983A|9831+9831/9831\9831;
                      STA.W !OAMTileSize+3,Y                    ;;983D|9834+9834/9834\9834;
                      RTS                                       ;;9840|9837+9837/9837\9837; Return
                                                                ;;                        ;
CODE_029838:          LDY.B #$90                                ;;9841|9838+9838/9838\9838;
                      LDA.W !SmokeSpriteXPos,X                  ;;9843|983A+983A/983A\983A;
                      SEC                                       ;;9846|983D+983D/983D\983D;
                      SBC.B !Layer1XPos                         ;;9847|983E+983E/983E\983E;
                      CMP.B #$F0                                ;;9849|9840+9840/9840\9840;
                      BCS CODE_0298BE                           ;;984B|9842+9842/9842\9842;
                      STA.W !OAMTileXPos+$100,Y                 ;;984D|9844+9844/9844\9844;
                      STA.W !OAMTileXPos+$108,Y                 ;;9850|9847+9847/9847\9847;
                      CLC                                       ;;9853|984A+984A/984A\984A;
                      ADC.B #$08                                ;;9854|984B+984B/984B\984B;
                      STA.W !OAMTileXPos+$104,Y                 ;;9856|984D+984D/984D\984D;
                      STA.W !OAMTileXPos+$10C,Y                 ;;9859|9850+9850/9850\9850;
                      LDA.W !SmokeSpriteYPos,X                  ;;985C|9853+9853/9853\9853;
                      SEC                                       ;;985F|9856+9856/9856\9856;
                      SBC.B !Layer1YPos                         ;;9860|9857+9857/9857\9857;
                      STA.W !OAMTileYPos+$100,Y                 ;;9862|9859+9859/9859\9859;
                      STA.W !OAMTileYPos+$104,Y                 ;;9865|985C+985C/985C\985C;
                      CLC                                       ;;9868|985F+985F/985F\985F;
                      ADC.B #$08                                ;;9869|9860+9860/9860\9860;
                      STA.W !OAMTileYPos+$108,Y                 ;;986B|9862+9862/9862\9862;
                      STA.W !OAMTileYPos+$10C,Y                 ;;986E|9865+9865/9865\9865;
                      LDA.W !SmokeSpriteTimer,X                 ;;9871|9868+9868/9868\9868;
                      ASL A                                     ;;9874|986B+986B/986B\986B;
                      ASL A                                     ;;9875|986C+986C/986C\986C;
                      ASL A                                     ;;9876|986D+986D/986D\986D;
                      ASL A                                     ;;9877|986E+986E/986E\986E;
                      ASL A                                     ;;9878|986F+986F/986F\986F;
                      AND.B #$40                                ;;9879|9870+9870/9870\9870;
                      ORA.B !SpriteProperties                   ;;987B|9872+9872/9872\9872;
                      STA.W !OAMTileAttr+$100,Y                 ;;987D|9874+9874/9874\9874;
                      STA.W !OAMTileAttr+$104,Y                 ;;9880|9877+9877/9877\9877;
                      EOR.B #$C0                                ;;9883|987A+987A/987A\987A;
                      STA.W !OAMTileAttr+$108,Y                 ;;9885|987C+987C/987C\987C;
                      STA.W !OAMTileAttr+$10C,Y                 ;;9888|987F+987F/987F\987F;
                      LDA.W !SmokeSpriteTimer,X                 ;;988B|9882+9882/9882\9882;
                      AND.B #$02                                ;;988E|9885+9885/9885\9885;
                      BNE CODE_02989B                           ;;9890|9887+9887/9887\9887;
                      LDA.B #$7C                                ;;9892|9889+9889/9889\9889;
                      STA.W !OAMTileNo+$100,Y                   ;;9894|988B+988B/988B\988B;
                      STA.W !OAMTileNo+$10C,Y                   ;;9897|988E+988E/988E\988E;
                      LDA.B #$7D                                ;;989A|9891+9891/9891\9891;
                      STA.W !OAMTileNo+$104,Y                   ;;989C|9893+9893/9893\9893;
                      STA.W !OAMTileNo+$108,Y                   ;;989F|9896+9896/9896\9896;
                      BRA +                                     ;;98A2|9899+9899/9899\9899;
                                                                ;;                        ;
CODE_02989B:          LDA.B #$7D                                ;;98A4|989B+989B/989B\989B;
                      STA.W !OAMTileNo+$100,Y                   ;;98A6|989D+989D/989D\989D;
                      STA.W !OAMTileNo+$10C,Y                   ;;98A9|98A0+98A0/98A0\98A0;
                      LDA.B #$7C                                ;;98AC|98A3+98A3/98A3\98A3;
                      STA.W !OAMTileNo+$104,Y                   ;;98AE|98A5+98A5/98A5\98A5;
                      STA.W !OAMTileNo+$108,Y                   ;;98B1|98A8+98A8/98A8\98A8;
                    + TYA                                       ;;98B4|98AB+98AB/98AB\98AB;
                      LSR A                                     ;;98B5|98AC+98AC/98AC\98AC;
                      LSR A                                     ;;98B6|98AD+98AD/98AD\98AD;
                      TAY                                       ;;98B7|98AE+98AE/98AE\98AE;
                      LDA.B #$00                                ;;98B8|98AF+98AF/98AF\98AF;
                      STA.W !OAMTileSize+$40,Y                  ;;98BA|98B1+98B1/98B1\98B1;
                      STA.W !OAMTileSize+$41,Y                  ;;98BD|98B4+98B4/98B4\98B4;
                      STA.W !OAMTileSize+$42,Y                  ;;98C0|98B7+98B7/98B7\98B7;
                      STA.W !OAMTileSize+$43,Y                  ;;98C3|98BA+98BA/98BA\98BA;
                      RTS                                       ;;98C6|98BD+98BD/98BD\98BD; Return
                                                                ;;                        ;
CODE_0298BE:          STZ.W !SmokeSpriteNumber,X                ;;98C7|98BE+98BE/98BE\98BE;
                      RTS                                       ;;98CA|98C1+98C1/98C1\98C1; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0298C2:          db $04,$08,$04,$00                        ;;98CB|98C2+98C2/98C2\98C2;
                                                                ;;                        ;
DATA_0298C6:          db $FC,$04,$0C,$04                        ;;98CF|98C6+98C6/98C6\98C6;
                                                                ;;                        ;
GlitterSmokeSpr:      LDA.W !SmokeSpriteTimer,X                 ;;98D3|98CA+98CA/98CA\98CA;
                      BEQ CODE_0298BE                           ;;98D6|98CD+98CD/98CD\98CD;
                      LDY.B !SpriteLock                         ;;98D8|98CF+98CF/98CF\98CF;
                      BNE Return029921                          ;;98DA|98D1+98D1/98D1\98D1;
                      DEC.W !SmokeSpriteTimer,X                 ;;98DC|98D3+98D3/98D3\98D3;
                      AND.B #$03                                ;;98DF|98D6+98D6/98D6\98D6;
                      BNE Return029921                          ;;98E1|98D8+98D8/98D8\98D8;
                      LDY.B #$0B                                ;;98E3|98DA+98DA/98DA\98DA;
CODE_0298DC:          LDA.W !MinExtSpriteNumber,Y               ;;98E5|98DC+98DC/98DC\98DC;
                      BEQ CODE_0298F1                           ;;98E8|98DF+98DF/98DF\98DF;
                      DEY                                       ;;98EA|98E1+98E1/98E1\98E1;
                      BPL CODE_0298DC                           ;;98EB|98E2+98E2/98E2\98E2;
                      DEC.W !MinExtSpriteSlotIdx                ;;98ED|98E4+98E4/98E4\98E4;
                      BPL +                                     ;;98F0|98E7+98E7/98E7\98E7;
                      LDA.B #$0B                                ;;98F2|98E9+98E9/98E9\98E9;
                      STA.W !MinExtSpriteSlotIdx                ;;98F4|98EB+98EB/98EB\98EB;
                    + LDY.W !MinExtSpriteSlotIdx                ;;98F7|98EE+98EE/98EE\98EE;
CODE_0298F1:          LDA.B #$02                                ;;98FA|98F1+98F1/98F1\98F1;
                      STA.W !MinExtSpriteNumber,Y               ;;98FC|98F3+98F3/98F3\98F3;
                      LDA.W !SmokeSpriteYPos,X                  ;;98FF|98F6+98F6/98F6\98F6;
                      STA.B !_1                                 ;;9902|98F9+98F9/98F9\98F9;
                      LDA.W !SmokeSpriteXPos,X                  ;;9904|98FB+98FB/98FB\98FB;
                      STA.B !_0                                 ;;9907|98FE+98FE/98FE\98FE;
                      LDA.W !SmokeSpriteTimer,X                 ;;9909|9900+9900/9900\9900;
                      LSR A                                     ;;990C|9903+9903/9903\9903;
                      LSR A                                     ;;990D|9904+9904/9904\9904;
                      AND.B #$03                                ;;990E|9905+9905/9905\9905;
                      PHX                                       ;;9910|9907+9907/9907\9907;
                      TAX                                       ;;9911|9908+9908/9908\9908;
                      LDA.W DATA_0298C2,X                       ;;9912|9909+9909/9909\9909;
                      CLC                                       ;;9915|990C+990C/990C\990C;
                      ADC.B !_0                                 ;;9916|990D+990D/990D\990D;
                      STA.W !MinExtSpriteXPosLow,Y              ;;9918|990F+990F/990F\990F;
                      LDA.W DATA_0298C6,X                       ;;991B|9912+9912/9912\9912;
                      CLC                                       ;;991E|9915+9915/9915\9915;
                      ADC.B !_1                                 ;;991F|9916+9916/9916\9916;
                      STA.W !MinExtSpriteYPosLow,Y              ;;9921|9918+9918/9918\9918;
                      PLX                                       ;;9924|991B+991B/991B\991B;
                      LDA.B #$17                                ;;9925|991C+991C/991C\991C;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;9927|991E+991E/991E\991E;
Return029921:         RTS                                       ;;992A|9921+9921/9921\9921; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029922:          db $66,$66,$64,$62,$62                    ;;992B|9922+9922/9922\9922;
                                                                ;;                        ;
DustSmokeSpr:         LDA.W !SmokeSpriteTimer,X                 ;;9930|9927+9927/9927\9927;
                      BNE CODE_029941                           ;;9933|992A+992A/992A\992A;
                      BIT.W !IRQNMICommand                      ;;9935|992C+992C/992C\992C;
                      BVC +                                     ;;9938|992F+992F/992F\992F;
                      LDA.W !ReznorOAMIndex                     ;;993A|9931+9931/9931\9931;
                      BNE +                                     ;;993D|9934+9934/9934\9934;
                      LDY.W DATA_0296BC,X                       ;;993F|9936+9936/9936\9936;
                      LDA.B #$F0                                ;;9942|9939+9939/9939\9939;
                      STA.W !OAMTileYPos+$100,Y                 ;;9944|993B+993B/993B\993B;
                    + JMP CODE_029793                           ;;9947|993E+993E/993E\993E;
                                                                ;;                        ;
CODE_029941:          LDY.B !SpriteLock                         ;;994A|9941+9941/9941\9941;
                      BNE +                                     ;;994C|9943+9943/9943\9943;
                      DEC.W !SmokeSpriteTimer,X                 ;;994E|9945+9945/9945\9945;
                      AND.B #$07                                ;;9951|9948+9948/9948\9948;
                      BNE +                                     ;;9953|994A+994A/994A\994A;
                      DEC.W !SmokeSpriteYPos,X                  ;;9955|994C+994C/994C\994C;
                    + LDA.B !SpriteNumber+7                     ;;9958|994F+994F/994F\994F;
                      CMP.B #$A9                                ;;995A|9951+9951/9951\9951;
                      BEQ CODE_02996C                           ;;995C|9953+9953/9953\9953;
                      LDA.W !ReznorOAMIndex                     ;;995E|9955+9955/9955\9955;
                      BNE CODE_02996C                           ;;9961|9958+9958/9958\9958;
                      LDA.W !IRQNMICommand                      ;;9963|995A+995A/995A\995A;
                      BPL CODE_02996C                           ;;9966|995D+995D/995D\995D;
                      CMP.B #$C1                                ;;9968|995F+995F/995F\995F;
                      BEQ CODE_029967                           ;;996A|9961+9961/9961\9961;
                      AND.B #$40                                ;;996C|9963+9963/9963\9963;
                      BNE CODE_02999F                           ;;996E|9965+9965/9965\9965;
CODE_029967:          LDY.W DATA_0296BC,X                       ;;9970|9967+9967/9967\9967;
                      BRA +                                     ;;9973|996A+996A/996A\996A;
                                                                ;;                        ;
CODE_02996C:          LDY.W DATA_0296B8,X                       ;;9975|996C+996C/996C\996C;
                    + LDA.W !SmokeSpriteXPos,X                  ;;9978|996F+996F/996F\996F;
                      SEC                                       ;;997B|9972+9972/9972\9972;
                      SBC.B !Layer1XPos                         ;;997C|9973+9973/9973\9973;
                      STA.W !OAMTileXPos,Y                      ;;997E|9975+9975/9975\9975;
                      LDA.W !SmokeSpriteYPos,X                  ;;9981|9978+9978/9978\9978;
                      SEC                                       ;;9984|997B+997B/997B\997B;
                      SBC.B !Layer1YPos                         ;;9985|997C+997C/997C\997C;
                      STA.W !OAMTileYPos,Y                      ;;9987|997E+997E/997E\997E;
                      LDA.B !SpriteProperties                   ;;998A|9981+9981/9981\9981;
                      STA.W !OAMTileAttr,Y                      ;;998C|9983+9983/9983\9983;
                      LDA.W !SmokeSpriteTimer,X                 ;;998F|9986+9986/9986\9986;
                      LSR A                                     ;;9992|9989+9989/9989\9989;
                      LSR A                                     ;;9993|998A+998A/998A\998A;
                      TAX                                       ;;9994|998B+998B/998B\998B;
                      %LorW_X(LDA,DATA_029922)                  ;;9995|998C+998C/998C\998C;
                      LDX.W !MinorSpriteProcIndex               ;;9999|998F+998F/998F\998F;
                      STA.W !OAMTileNo,Y                        ;;999C|9992+9992/9992\9992;
                      TYA                                       ;;999F|9995+9995/9995\9995;
                      LSR A                                     ;;99A0|9996+9996/9996\9996;
                      LSR A                                     ;;99A1|9997+9997/9997\9997;
                      TAY                                       ;;99A2|9998+9998/9998\9998;
                      LDA.B #$00                                ;;99A3|9999+9999/9999\9999;
                      STA.W !OAMTileSize,Y                      ;;99A5|999B+999B/999B\999B;
                      RTS                                       ;;99A8|999E+999E/999E\999E; Return
                                                                ;;                        ;
CODE_02999F:          LDY.W DATA_0296BC,X                       ;;99A9|999F+999F/999F\999F;
                      LDA.W !SmokeSpriteXPos,X                  ;;99AC|99A2+99A2/99A2\99A2;
                      SEC                                       ;;99AF|99A5+99A5/99A5\99A5;
                      SBC.B !Layer1XPos                         ;;99B0|99A6+99A6/99A6\99A6;
                      STA.W !OAMTileXPos+$100,Y                 ;;99B2|99A8+99A8/99A8\99A8;
                      LDA.W !SmokeSpriteYPos,X                  ;;99B5|99AB+99AB/99AB\99AB;
                      SEC                                       ;;99B8|99AE+99AE/99AE\99AE;
                      SBC.B !Layer1YPos                         ;;99B9|99AF+99AF/99AF\99AF;
                      STA.W !OAMTileYPos+$100,Y                 ;;99BB|99B1+99B1/99B1\99B1;
                      LDA.B !SpriteProperties                   ;;99BE|99B4+99B4/99B4\99B4;
                      STA.W !OAMTileAttr+$100,Y                 ;;99C0|99B6+99B6/99B6\99B6;
                      LDA.W !SmokeSpriteTimer,X                 ;;99C3|99B9+99B9/99B9\99B9;
                      LSR A                                     ;;99C6|99BC+99BC/99BC\99BC;
                      LSR A                                     ;;99C7|99BD+99BD/99BD\99BD;
                      TAX                                       ;;99C8|99BE+99BE/99BE\99BE;
                      %LorW_X(LDA,DATA_029922)                  ;;99C9|99BF+99BF/99BF\99BF;
                      LDX.W !MinorSpriteProcIndex               ;;99CD|99C2+99C2/99C2\99C2;
                      STA.W !OAMTileNo+$100,Y                   ;;99D0|99C5+99C5/99C5\99C5;
                      TYA                                       ;;99D3|99C8+99C8/99C8\99C8;
                      LSR A                                     ;;99D4|99C9+99C9/99C9\99C9;
                      LSR A                                     ;;99D5|99CA+99CA/99CA\99CA;
                      TAY                                       ;;99D6|99CB+99CB/99CB\99CB;
                      LDA.B #$00                                ;;99D7|99CC+99CC/99CC\99CC;
                      STA.W !OAMTileSize+$40,Y                  ;;99D9|99CE+99CE/99CE\99CE;
                      RTS                                       ;;99DC|99D1+99D1/99D1\99D1; Return
                                                                ;;                        ;
RunSpinningCoinSprs:  LDX.B #$03                                ;;99DD|99D2+99D2/99D2\99D2;
.next:                STX.W !CurSpriteProcess                   ;;99DF|99D4+99D4/99D4\99D4;
                      LDA.W !CoinSpriteExists,X                 ;;99E2|99D7+99D7/99D7\99D7;
                      BEQ +                                     ;;99E5|99DA+99DA/99DA\99DA;
                      JSR RunSpinningCoin                       ;;99E7|99DC+99DC/99DC\99DC;
                    + DEX                                       ;;99EA|99DF+99DF/99DF\99DF;
                      BPL .next                                 ;;99EB|99E0+99E0/99E0\99E0;
                      RTS                                       ;;99ED|99E2+99E2/99E2\99E2; Return
                                                                ;;                        ;
KillSpinningCoin:     LDA.B #$00                                ;;99EE|99E3+99E3/99E3\99E3;
                      STA.W !CoinSpriteExists,X                 ;;99F0|99E5+99E5/99E5\99E5;
                      RTS                                       ;;99F3|99E8+99E8/99E8\99E8; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0299E9:          db $30,$38,$40,$48,$EC,$EA,$E8,$EC        ;;99F4|99E9+99E9/99E9\99E9;
                                                                ;;                        ;
RunSpinningCoin:      LDA.B !SpriteLock                         ;;99FC|99F1+99F1/99F1\99F1;
                      BNE +                                     ;;99FE|99F3+99F3/99F3\99F3;
                      JSR CODE_02B58E                           ;;9A00|99F5+99F5/99F5\99F5;
                      LDA.W !CoinSpriteYSpeed,X                 ;;9A03|99F8+99F8/99F8\99F8;
                      CLC                                       ;;9A06|99FB+99FB/99FB\99FB;
                      ADC.B #$03                                ;;9A07|99FC+99FC/99FC\99FC;
                      STA.W !CoinSpriteYSpeed,X                 ;;9A09|99FE+99FE/99FE\99FE;
                      CMP.B #$20                                ;;9A0C|9A01+9A01/9A01\9A01;
                      BMI +                                     ;;9A0E|9A03+9A03/9A03\9A03;
                      JMP SpinCoinToScoreSpr                    ;;9A10|9A05+9A05/9A05\9A05;
                                                                ;;                        ;
                    + LDA.W !CoinSpriteLayer,X                  ;;9A13|9A08+9A08/9A08\9A08;
                      ASL A                                     ;;9A16|9A0B+9A0B/9A0B\9A0B;
                      ASL A                                     ;;9A17|9A0C+9A0C/9A0C\9A0C;
                      TAY                                       ;;9A18|9A0D+9A0D/9A0D\9A0D;
                      LDA.W !Layer1YPos,Y                       ;;9A19|9A0E+9A0E/9A0E\9A0E;
                      STA.B !_2                                 ;;9A1C|9A11+9A11/9A11\9A11;
                      LDA.W !Layer1XPos,Y                       ;;9A1E|9A13+9A13/9A13\9A13;
                      STA.B !_3                                 ;;9A21|9A16+9A16/9A16\9A16;
                      LDA.W !Layer1YPos+1,Y                     ;;9A23|9A18+9A18/9A18\9A18;
                      STA.B !_4                                 ;;9A26|9A1B+9A1B/9A1B\9A1B;
                      LDA.W !CoinSpriteYPosLow,X                ;;9A28|9A1D+9A1D/9A1D\9A1D;
                      CMP.B !_2                                 ;;9A2B|9A20+9A20/9A20\9A20;
                      LDA.W !CoinSpriteYPosHigh,X               ;;9A2D|9A22+9A22/9A22\9A22;
                      SBC.B !_4                                 ;;9A30|9A25+9A25/9A25\9A25;
                      BNE Return029A6D                          ;;9A32|9A27+9A27/9A27\9A27;
                      LDA.W !CoinSpriteXPosLow,X                ;;9A34|9A29+9A29/9A29\9A29;
                      SEC                                       ;;9A37|9A2C+9A2C/9A2C\9A2C;
                      SBC.B !_3                                 ;;9A38|9A2D+9A2D/9A2D\9A2D;
                      CMP.B #$F8                                ;;9A3A|9A2F+9A2F/9A2F\9A2F;
                      BCS KillSpinningCoin                      ;;9A3C|9A31+9A31/9A31\9A31;
                      STA.B !_0                                 ;;9A3E|9A33+9A33/9A33\9A33;
                      LDA.W !CoinSpriteYPosLow,X                ;;9A40|9A35+9A35/9A35\9A35;
                      SEC                                       ;;9A43|9A38+9A38/9A38\9A38;
                      SBC.B !_2                                 ;;9A44|9A39+9A39/9A39\9A39;
                      STA.B !_1                                 ;;9A46|9A3B+9A3B/9A3B\9A3B;
                      LDY.W DATA_0299E9,X                       ;;9A48|9A3D+9A3D/9A3D\9A3D;
                      STY.B !_F                                 ;;9A4B|9A40+9A40/9A40\9A40;
                      LDY.B !_F                                 ;;9A4D|9A42+9A42/9A42\9A42;
                      LDA.B !_0                                 ;;9A4F|9A44+9A44/9A44\9A44;
                      STA.W !OAMTileXPos,Y                      ;;9A51|9A46+9A46/9A46\9A46;
                      LDA.B !_1                                 ;;9A54|9A49+9A49/9A49\9A49;
                      STA.W !OAMTileYPos,Y                      ;;9A56|9A4B+9A4B/9A4B\9A4B;
                      LDA.B #$E8                                ;;9A59|9A4E+9A4E/9A4E\9A4E;
                      STA.W !OAMTileNo,Y                        ;;9A5B|9A50+9A50/9A50\9A50;
                      LDA.B #$04                                ;;9A5E|9A53+9A53/9A53\9A53;
                      ORA.B !SpriteProperties                   ;;9A60|9A55+9A55/9A55\9A55;
                      STA.W !OAMTileAttr,Y                      ;;9A62|9A57+9A57/9A57\9A57;
                      TYA                                       ;;9A65|9A5A+9A5A/9A5A\9A5A;
                      LSR A                                     ;;9A66|9A5B+9A5B/9A5B\9A5B;
                      LSR A                                     ;;9A67|9A5C+9A5C/9A5C\9A5C;
                      TAY                                       ;;9A68|9A5D+9A5D/9A5D\9A5D;
                      LDA.B #$02                                ;;9A69|9A5E+9A5E/9A5E\9A5E;
                      STA.W !OAMTileSize,Y                      ;;9A6B|9A60+9A60/9A60\9A60;
                      TXA                                       ;;9A6E|9A63+9A63/9A63\9A63;
                      CLC                                       ;;9A6F|9A64+9A64/9A64\9A64;
                      ADC.B !EffFrame                           ;;9A70|9A65+9A65/9A65\9A65;
                      LSR A                                     ;;9A72|9A67+9A67/9A67\9A67;
                      LSR A                                     ;;9A73|9A68+9A68/9A68\9A68;
                      AND.B #$03                                ;;9A74|9A69+9A69/9A69\9A69;
                      BNE +                                     ;;9A76|9A6B+9A6B/9A6B\9A6B;
Return029A6D:         RTS                                       ;;9A78|9A6D+9A6D/9A6D\9A6D; Return
                                                                ;;                        ;
                                                                ;;                        ;
SpinCoin8x8Tiles:     db $EA,$FA,$EA                            ;;9A79|9A6E+9A6E/9A6E\9A6E;
                                                                ;;                        ;
                    + LDY.B !_F                                 ;;9A7C|9A71+9A71/9A71\9A71;
                      PHX                                       ;;9A7E|9A73+9A73/9A73\9A73;
                      TAX                                       ;;9A7F|9A74+9A74/9A74\9A74;
                      LDA.B !_0                                 ;;9A80|9A75+9A75/9A75\9A75;
                      CLC                                       ;;9A82|9A77+9A77/9A77\9A77;
                      ADC.B #$04                                ;;9A83|9A78+9A78/9A78\9A78;
                      STA.W !OAMTileXPos,Y                      ;;9A85|9A7A+9A7A/9A7A\9A7A;
                      STA.W !OAMTileXPos+4,Y                    ;;9A88|9A7D+9A7D/9A7D\9A7D;
                      LDA.B !_1                                 ;;9A8B|9A80+9A80/9A80\9A80;
                      CLC                                       ;;9A8D|9A82+9A82/9A82\9A82;
                      ADC.B #$08                                ;;9A8E|9A83+9A83/9A83\9A83;
                      STA.W !OAMTileYPos+4,Y                    ;;9A90|9A85+9A85/9A85\9A85;
                      LDA.L SpinCoin8x8Tiles-1,X                ;;9A93|9A88+9A88/9A88\9A88;
                      STA.W !OAMTileNo,Y                        ;;9A97|9A8C+9A8C/9A8C\9A8C;
                      STA.W !OAMTileNo+4,Y                      ;;9A9A|9A8F+9A8F/9A8F\9A8F;
                      LDA.W !OAMTileAttr,Y                      ;;9A9D|9A92+9A92/9A92\9A92;
                      ORA.B #$80                                ;;9AA0|9A95+9A95/9A95\9A95;
                      STA.W !OAMTileAttr+4,Y                    ;;9AA2|9A97+9A97/9A97\9A97;
                      TYA                                       ;;9AA5|9A9A+9A9A/9A9A\9A9A;
                      LSR A                                     ;;9AA6|9A9B+9A9B/9A9B\9A9B;
                      LSR A                                     ;;9AA7|9A9C+9A9C/9A9C\9A9C;
                      TAY                                       ;;9AA8|9A9D+9A9D/9A9D\9A9D;
                      LDA.B #$00                                ;;9AA9|9A9E+9A9E/9A9E\9A9E;
                      STA.W !OAMTileSize,Y                      ;;9AAB|9AA0+9AA0/9AA0\9AA0;
                      STA.W !OAMTileSize+1,Y                    ;;9AAE|9AA3+9AA3/9AA3\9AA3;
                      PLX                                       ;;9AB1|9AA6+9AA6/9AA6\9AA6;
                      RTS                                       ;;9AB2|9AA7+9AA7/9AA7\9AA7; Return
                                                                ;;                        ;
SpinCoinToScoreSpr:   JSL CODE_02AD34                           ;;9AB3|9AA8+9AA8/9AA8\9AA8; Find next usable location in score sprite table
                      LDA.B #$01                                ;;9AB7|9AAC+9AAC/9AAC\9AAC;
                      STA.W !ScoreSpriteNumber,Y                ;;9AB9|9AAE+9AAE/9AAE\9AAE; add a "10" score sprite
                      LDA.W !CoinSpriteYPosLow,X                ;;9ABC|9AB1+9AB1/9AB1\9AB1;
                      STA.W !ScoreSpriteYPosLow,Y               ;;9ABF|9AB4+9AB4/9AB4\9AB4; set Yposition low byte
                      LDA.W !CoinSpriteYPosHigh,X               ;;9AC2|9AB7+9AB7/9AB7\9AB7;
                      STA.W !ScoreSpriteYPosHigh,Y              ;;9AC5|9ABA+9ABA/9ABA\9ABA; set Ypos high byte
                      LDA.W !CoinSpriteXPosLow,X                ;;9AC8|9ABD+9ABD/9ABD\9ABD;
                      STA.W !ScoreSpriteXPosLow,Y               ;;9ACB|9AC0+9AC0/9AC0\9AC0; set Xpos low byte
                      LDA.W !CoinsPriteXPosHigh,X               ;;9ACE|9AC3+9AC3/9AC3\9AC3;
                      STA.W !ScoreSpriteXPosHigh,Y              ;;9AD1|9AC6+9AC6/9AC6\9AC6; set Xpos high byte
                      LDA.B #$30                                ;;9AD4|9AC9+9AC9/9AC9\9AC9;
                      STA.W !ScoreSpriteTimer,Y                 ;;9AD6|9ACB+9ACB/9ACB\9ACB; set initial speed to 30
                      LDA.W !CoinSpriteLayer,X                  ;;9AD9|9ACE+9ACE/9ACE\9ACE;
                      STA.W !ScoreSpriteLayer,Y                 ;;9ADC|9AD1+9AD1/9AD1\9AD1;
                      JSR CODE_029ADA                           ;;9ADF|9AD4+9AD4/9AD4\9AD4;
                      JMP KillSpinningCoin                      ;;9AE2|9AD7+9AD7/9AD7\9AD7; Puts #$00 into $17D0 and returns
                                                                ;;                        ;
CODE_029ADA:          LDY.B #$03                                ;;9AE5|9ADA+9ADA/9ADA\9ADA; for (c=3;c>=0;c--)
CODE_029ADC:          LDA.W !SmokeSpriteNumber,Y                ;;9AE7|9ADC+9ADC/9ADC\9ADC; {
                      BEQ CODE_029AE5                           ;;9AEA|9ADF+9ADF/9ADF\9ADF;  check if there is empty space in smoke/dust sprite table
                      DEY                                       ;;9AEC|9AE1+9AE1/9AE1\9AE1;
                      BPL CODE_029ADC                           ;;9AED|9AE2+9AE2/9AE2\9AE2; }
                      RTS                                       ;;9AEF|9AE4+9AE4/9AE4\9AE4;  if no empty space, return
                                                                ;;                        ;
CODE_029AE5:          LDA.B #$05                                ;;9AF0|9AE5+9AE5/9AE5\9AE5; if there's an empty space, make it 5 (glitter sprite)
                      STA.W !SmokeSpriteNumber,Y                ;;9AF2|9AE7+9AE7/9AE7\9AE7;
                      LDA.W !CoinSpriteLayer,X                  ;;9AF5|9AEA+9AEA/9AEA\9AEA;  nots sure what 17E4 is used for yet - copied from $1933
                      LSR A                                     ;;9AF8|9AED+9AED/9AED\9AED; carryout = $17E4 % 2
                      PHP                                       ;;9AF9|9AEE+9AEE/9AEE\9AEE;
                      LDA.W !CoinSpriteXPosLow,X                ;;9AFA|9AEF+9AEF/9AEF\9AEF; get x coordinate low byte
                      BCC +                                     ;;9AFD|9AF2+9AF2/9AF2\9AF2; if carryout == 1
                      SBC.B !Layer23XRelPos                     ;;9AFF|9AF4+9AF4/9AF4\9AF4;   x-coord -= $26
                    + STA.W !SmokeSpriteXPos,Y                  ;;9B01|9AF6+9AF6/9AF6\9AF6; store x-coord
                      LDA.W !CoinSpriteYPosLow,X                ;;9B04|9AF9+9AF9/9AF9\9AF9; get y coordinate low byte
                      PLP                                       ;;9B07|9AFC+9AFC/9AFC\9AFC;
                      BCC +                                     ;;9B08|9AFD+9AFD/9AFD\9AFD; if carryout == 1
                      SBC.B !Layer23YRelPos                     ;;9B0A|9AFF+9AFF/9AFF\9AFF;   y-coord -=$28
                    + STA.W !SmokeSpriteYPos,Y                  ;;9B0C|9B01+9B01/9B01\9B01; store y-coord
                      LDA.B #$10                                ;;9B0F|9B04+9B04/9B04\9B04;
                      STA.W !SmokeSpriteTimer,Y                 ;;9B11|9B06+9B06/9B06\9B06; duration = 10
                      RTS                                       ;;9B14|9B09+9B09/9B09\9B09; Return
                                                                ;;                        ;
RunExtendedSprites:   LDX.B #$09                                ;;9B15|9B0A+9B0A/9B0A\9B0A;
.loopNextExtSlot:     STX.W !CurSpriteProcess                   ;;9B17|9B0C+9B0C/9B0C\9B0C;
                      JSR .runExtSprite                         ;;9B1A|9B0F+9B0F/9B0F\9B0F;
                      DEX                                       ;;9B1D|9B12+9B12/9B12\9B12;
                      BPL .loopNextExtSlot                      ;;9B1E|9B13+9B13/9B13\9B13;
.extSpritesDone:      RTS                                       ;;9B20|9B15+9B15/9B15\9B15; Return
                                                                ;;                        ;
.runExtSprite:        LDA.W !ExtSpriteNumber,X                  ;;9B21|9B16+9B16/9B16\9B16;
                      BEQ .extSpritesDone                       ;;9B24|9B19+9B19/9B19\9B19;
                      LDY.B !SpriteLock                         ;;9B26|9B1B+9B1B/9B1B\9B1B;
                      BNE +                                     ;;9B28|9B1D+9B1D/9B1D\9B1D;
                      LDY.W !ExtSpriteMisc176F,X                ;;9B2A|9B1F+9B1F/9B1F\9B1F;
                      BEQ +                                     ;;9B2D|9B22+9B22/9B22\9B22;
                      DEC.W !ExtSpriteMisc176F,X                ;;9B2F|9B24+9B24/9B24\9B24;
                    + JSL ExecutePtr                            ;;9B32|9B27+9B27/9B27\9B27;
                                                                ;;                        ;
                      dw .extSpritesDone                        ;;9B36|9B2B+9B2B/9B2B\9B2B; 00 - Empty slot
                      dw SmokePuff                              ;;9B38|9B2D+9B2D/9B2D\9B2D; 01 - Puff of smoke
                      dw ReznorFireball                         ;;9B3A|9B2F+9B2F/9B2F\9B2F; 02 - Reznor fireball
                      dw FlameRemnant                           ;;9B3C|9B31+9B31/9B31\9B31; 03 - Tiny flame left by hopping flame
                      dw Hammer                                 ;;9B3E|9B33+9B33/9B33\9B33; 04 - Hammer
                      dw MarioFireball                          ;;9B40|9B35+9B35/9B35\9B35; 05 - Mario fireball
                      dw Baseball                               ;;9B42|9B37+9B37/9B37\9B37; 06 - Bone
                      dw LavaSplash                             ;;9B44|9B39+9B39/9B39\9B39; 07 - Lava splash
                      dw LauncherArm                            ;;9B46|9B3B+9B3B/9B3B\9B3B; 08 - Torpedo Ted shooter's arm
                      dw UnusedExtendedSpr                      ;;9B48|9B3D+9B3D/9B3D\9B3D; 09 - Unused (Red thing that flickers from 16x16 to 8x8)
                      dw CloudCoin                              ;;9B4A|9B3F+9B3F/9B3F\9B3F; 0A - Coin from cloud game
                      dw Hammer                                 ;;9B4C|9B41+9B41/9B41\9B41; 0B - Piranha fireball
                      dw VolcanoLotusFire                       ;;9B4E|9B43+9B43/9B43\9B43; 0C - Volcano lotus fire
                      dw Baseball                               ;;9B50|9B45+9B45/9B45\9B45; 0D - Baseball
                      dw CloudCoin                              ;;9B52|9B47+9B47/9B47\9B47; 0E - Flower of Wiggler
                      dw SmokeTrail                             ;;9B54|9B49+9B49/9B49\9B49; 0F - Trail of smoke
                      dw SpinJumpStars                          ;;9B56|9B4B+9B4B/9B4B\9B4B; 10 - Spin Jump stars
                      dw YoshiFireball                          ;;9B58|9B4D+9B4D/9B4D\9B4D; 11 - Yoshi fireballs
                      dw WaterBubble                            ;;9B5A|9B4F+9B4F/9B4F\9B4F; 12 - Water bubble
                                                                ;;                        ;
VolcanoLotusFire:     LDY.W DATA_02A153,X                       ;;9B5C|9B51+9B51/9B51\9B51;
                      LDA.W !ExtSpriteXPosLow,X                 ;;9B5F|9B54+9B54/9B54\9B54;
                      SEC                                       ;;9B62|9B57+9B57/9B57\9B57;
                      SBC.B !Layer1XPos                         ;;9B63|9B58+9B58/9B58\9B58;
                      STA.B !_0                                 ;;9B65|9B5A+9B5A/9B5A\9B5A;
                      LDA.W !ExtSpriteXPosHigh,X                ;;9B67|9B5C+9B5C/9B5C\9B5C;
                      SBC.B !Layer1XPos+1                       ;;9B6A|9B5F+9B5F/9B5F\9B5F;
                      BNE CODE_029BDA                           ;;9B6C|9B61+9B61/9B61\9B61;
                      LDA.W !ExtSpriteYPosLow,X                 ;;9B6E|9B63+9B63/9B63\9B63;
                      SEC                                       ;;9B71|9B66+9B66/9B66\9B66;
                      SBC.B !Layer1YPos                         ;;9B72|9B67+9B67/9B67\9B67;
                      STA.B !_1                                 ;;9B74|9B69+9B69/9B69\9B69;
                      LDA.W !ExtSpriteYPosHigh,X                ;;9B76|9B6B+9B6B/9B6B\9B6B;
                      SBC.B !Layer1YPos+1                       ;;9B79|9B6E+9B6E/9B6E\9B6E;
                      BEQ CODE_029B76                           ;;9B7B|9B70+9B70/9B70\9B70;
                      BMI CODE_029BA5                           ;;9B7D|9B72+9B72/9B72\9B72;
                      BPL CODE_029BDA                           ;;9B7F|9B74+9B74/9B74\9B74;
CODE_029B76:          LDA.B !_0                                 ;;9B81|9B76+9B76/9B76\9B76;
                      STA.W !OAMTileXPos,Y                      ;;9B83|9B78+9B78/9B78\9B78;
                      LDA.B !_1                                 ;;9B86|9B7B+9B7B/9B7B\9B7B;
                      CMP.B #$F0                                ;;9B88|9B7D+9B7D/9B7D\9B7D;
                      BCS CODE_029BA5                           ;;9B8A|9B7F+9B7F/9B7F\9B7F;
                      STA.W !OAMTileYPos,Y                      ;;9B8C|9B81+9B81/9B81\9B81;
                      LDA.B #$09                                ;;9B8F|9B84+9B84/9B84\9B84;
                      ORA.B !SpriteProperties                   ;;9B91|9B86+9B86/9B86\9B86;
                      STA.W !OAMTileAttr,Y                      ;;9B93|9B88+9B88/9B88\9B88;
                      LDA.B !EffFrame                           ;;9B96|9B8B+9B8B/9B8B\9B8B;
                      LSR A                                     ;;9B98|9B8D+9B8D/9B8D\9B8D;
                      EOR.W !CurSpriteProcess                   ;;9B99|9B8E+9B8E/9B8E\9B8E;
                      LSR A                                     ;;9B9C|9B91+9B91/9B91\9B91;
                      LSR A                                     ;;9B9D|9B92+9B92/9B92\9B92;
                      LDA.B #$A6                                ;;9B9E|9B93+9B93/9B93\9B93;
                      BCC +                                     ;;9BA0|9B95+9B95/9B95\9B95;
                      LDA.B #$B6                                ;;9BA2|9B97+9B97/9B97\9B97;
                    + STA.W !OAMTileNo,Y                        ;;9BA4|9B99+9B99/9B99\9B99;
                      TYA                                       ;;9BA7|9B9C+9B9C/9B9C\9B9C;
                      LSR A                                     ;;9BA8|9B9D+9B9D/9B9D\9B9D;
                      LSR A                                     ;;9BA9|9B9E+9B9E/9B9E\9B9E;
                      TAY                                       ;;9BAA|9B9F+9B9F/9B9F\9B9F;
                      LDA.B #$00                                ;;9BAB|9BA0+9BA0/9BA0\9BA0;
                      STA.W !OAMTileSize,Y                      ;;9BAD|9BA2+9BA2/9BA2\9BA2;
CODE_029BA5:          LDA.B !SpriteLock                         ;;9BB0|9BA5+9BA5/9BA5\9BA5;
                      BNE Return029BD9                          ;;9BB2|9BA7+9BA7/9BA7\9BA7;
                      JSR CODE_02A3F6                           ;;9BB4|9BA9+9BA9/9BA9\9BA9;
                      JSR CODE_02B554                           ;;9BB7|9BAC+9BAC/9BAC\9BAC;
                      JSR CODE_02B560                           ;;9BBA|9BAF+9BAF/9BAF\9BAF;
                      LDA.B !TrueFrame                          ;;9BBD|9BB2+9BB2/9BB2\9BB2;
                      AND.B #$03                                ;;9BBF|9BB4+9BB4/9BB4\9BB4;
                      BNE +                                     ;;9BC1|9BB6+9BB6/9BB6\9BB6;
                      LDA.W !ExtSpriteYSpeed,X                  ;;9BC3|9BB8+9BB8/9BB8\9BB8;
                      CMP.B #$18                                ;;9BC6|9BBB+9BBB/9BBB\9BBB;
                      BPL +                                     ;;9BC8|9BBD+9BBD/9BBD\9BBD;
                      INC.W !ExtSpriteYSpeed,X                  ;;9BCA|9BBF+9BBF/9BBF\9BBF;
                    + LDA.W !ExtSpriteYSpeed,X                  ;;9BCD|9BC2+9BC2/9BC2\9BC2;
                      BMI Return029BD9                          ;;9BD0|9BC5+9BC5/9BC5\9BC5;
                      TXA                                       ;;9BD2|9BC7+9BC7/9BC7\9BC7;
                      ASL A                                     ;;9BD3|9BC8+9BC8/9BC8\9BC8;
                      ASL A                                     ;;9BD4|9BC9+9BC9/9BC9\9BC9;
                      ASL A                                     ;;9BD5|9BCA+9BCA/9BCA\9BCA;
                      ADC.B !TrueFrame                          ;;9BD6|9BCB+9BCB/9BCB\9BCB;
                      LDY.B #$08                                ;;9BD8|9BCD+9BCD/9BCD\9BCD;
                      AND.B #$08                                ;;9BDA|9BCF+9BCF/9BCF\9BCF;
                      BNE +                                     ;;9BDC|9BD1+9BD1/9BD1\9BD1;
                      LDY.B #$F8                                ;;9BDE|9BD3+9BD3/9BD3\9BD3;
                    + TYA                                       ;;9BE0|9BD5+9BD5/9BD5\9BD5;
                      STA.W !ExtSpriteXSpeed,X                  ;;9BE1|9BD6+9BD6/9BD6\9BD6;
Return029BD9:         RTS                                       ;;9BE4|9BD9+9BD9/9BD9\9BD9; Return
                                                                ;;                        ;
CODE_029BDA:          STZ.W !ExtSpriteNumber,X                  ;;9BE5|9BDA+9BDA/9BDA\9BDA; Clear extended sprite
                      RTS                                       ;;9BE8|9BDD+9BDD/9BDD\9BDD; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029BDE:          db $08,$F8                                ;;9BE9|9BDE+9BDE/9BDE\9BDE;
                                                                ;;                        ;
DATA_029BE0:          db $00,$FF                                ;;9BEB|9BE0+9BE0/9BE0\9BE0;
                                                                ;;                        ;
DATA_029BE2:          db $18,$E8                                ;;9BED|9BE2+9BE2/9BE2\9BE2;
                                                                ;;                        ;
CODE_029BE4:          LDA.B #$05                                ;;9BEF|9BE4+9BE4/9BE4\9BE4; \ Set ground shake timer
                      STA.W !ScreenShakeTimer                   ;;9BF1|9BE6+9BE6/9BE6\9BE6; /
                      LDA.B #!SFX_KAPOW                         ;;9BF4|9BE9+9BE9/9BE9\9BE9; \ Play sound effect
                      STA.W !SPCIO3                             ;;9BF6|9BEB+9BEB/9BEB\9BEB; /
                      STZ.B !_0                                 ;;9BF9|9BEE+9BEE/9BEE\9BEE;
                      JSR CODE_029BF5                           ;;9BFB|9BF0+9BF0/9BF0\9BF0;
                      INC.B !_0                                 ;;9BFE|9BF3+9BF3/9BF3\9BF3;
CODE_029BF5:          LDY.B #$07                                ;;9C00|9BF5+9BF5/9BF5\9BF5; \ Find a free extended sprite slot
CODE_029BF7:          LDA.W !ExtSpriteNumber,Y                  ;;9C02|9BF7+9BF7/9BF7\9BF7;  |
                      BEQ CODE_029C00                           ;;9C05|9BFA+9BFA/9BFA\9BFA;  |
                      DEY                                       ;;9C07|9BFC+9BFC/9BFC\9BFC;  |
                      BPL CODE_029BF7                           ;;9C08|9BFD+9BFD/9BFD\9BFD;  |
                      RTS                                       ;;9C0A|9BFF+9BFF/9BFF\9BFF; / Return if no free slots
                                                                ;;                        ;
CODE_029C00:          LDA.B #$0F                                ;;9C0B|9C00+9C00/9C00\9C00; \ Extended sprite = Yoshi stomp smoke
                      STA.W !ExtSpriteNumber,Y                  ;;9C0D|9C02+9C02/9C02\9C02; /
                      LDA.B !PlayerYPosNext                     ;;9C10|9C05+9C05/9C05\9C05;
                      CLC                                       ;;9C12|9C07+9C07/9C07\9C07;
                      ADC.B #$28                                ;;9C13|9C08+9C08/9C08\9C08;
                      STA.W !ExtSpriteYPosLow,Y                 ;;9C15|9C0A+9C0A/9C0A\9C0A;
                      LDA.B !PlayerYPosNext+1                   ;;9C18|9C0D+9C0D/9C0D\9C0D;
                      ADC.B #$00                                ;;9C1A|9C0F+9C0F/9C0F\9C0F;
                      STA.W !ExtSpriteYPosHigh,Y                ;;9C1C|9C11+9C11/9C11\9C11;
                      LDX.B !_0                                 ;;9C1F|9C14+9C14/9C14\9C14;
                      LDA.B !PlayerXPosNext                     ;;9C21|9C16+9C16/9C16\9C16;
                      CLC                                       ;;9C23|9C18+9C18/9C18\9C18;
                      ADC.W DATA_029BDE,X                       ;;9C24|9C19+9C19/9C19\9C19;
                      STA.W !ExtSpriteXPosLow,Y                 ;;9C27|9C1C+9C1C/9C1C\9C1C;
                      LDA.B !PlayerXPosNext+1                   ;;9C2A|9C1F+9C1F/9C1F\9C1F;
                      ADC.W DATA_029BE0,X                       ;;9C2C|9C21+9C21/9C21\9C21;
                      STA.W !ExtSpriteXPosHigh,Y                ;;9C2F|9C24+9C24/9C24\9C24;
                      LDA.W DATA_029BE2,X                       ;;9C32|9C27+9C27/9C27\9C27;
                      STA.W !ExtSpriteXSpeed,Y                  ;;9C35|9C2A+9C2A/9C2A\9C2A;
                      LDA.B #$15                                ;;9C38|9C2D+9C2D/9C2D\9C2D;
                      STA.W !ExtSpriteMisc176F,Y                ;;9C3A|9C2F+9C2F/9C2F\9C2F;
                      RTS                                       ;;9C3D|9C32+9C32/9C32\9C32; Return
                                                                ;;                        ;
                                                                ;;                        ;
SmokeTrailTiles:      db $66,$64,$62,$60,$60,$60,$60,$60        ;;9C3E|9C33+9C33/9C33\9C33;
                      db $60,$60,$60                            ;;9C46|9C3B+9C3B/9C3B\9C3B;
                                                                ;;                        ;
SmokeTrail:           JSR CODE_02A1A4                           ;;9C49|9C3E+9C3E/9C3E\9C3E;
                      LDY.W DATA_02A153,X                       ;;9C4C|9C41+9C41/9C41\9C41;
                      LDA.W !ExtSpriteMisc176F,X                ;;9C4F|9C44+9C44/9C44\9C44;
                      LSR A                                     ;;9C52|9C47+9C47/9C47\9C47;
                      PHX                                       ;;9C53|9C48+9C48/9C48\9C48;
                      TAX                                       ;;9C54|9C49+9C49/9C49\9C49;
                      LDA.B !EffFrame                           ;;9C55|9C4A+9C4A/9C4A\9C4A;
                      ASL A                                     ;;9C57|9C4C+9C4C/9C4C\9C4C;
                      ASL A                                     ;;9C58|9C4D+9C4D/9C4D\9C4D;
                      ASL A                                     ;;9C59|9C4E+9C4E/9C4E\9C4E;
                      ASL A                                     ;;9C5A|9C4F+9C4F/9C4F\9C4F;
                      AND.B #$C0                                ;;9C5B|9C50+9C50/9C50\9C50;
                      ORA.B #$32                                ;;9C5D|9C52+9C52/9C52\9C52;
                      STA.W !OAMTileAttr,Y                      ;;9C5F|9C54+9C54/9C54\9C54;
                      %LorW_X(LDA,SmokeTrailTiles)              ;;9C62|9C57+9C57/9C57\9C57;
                      STA.W !OAMTileNo,Y                        ;;9C66|9C5A+9C5A/9C5A\9C5A;
                      TYA                                       ;;9C69|9C5D+9C5D/9C5D\9C5D;
                      LSR A                                     ;;9C6A|9C5E+9C5E/9C5E\9C5E;
                      LSR A                                     ;;9C6B|9C5F+9C5F/9C5F\9C5F;
                      TAY                                       ;;9C6C|9C60+9C60/9C60\9C60;
                      LDA.B #$02                                ;;9C6D|9C61+9C61/9C61\9C61;
                      STA.W !OAMTileSize,Y                      ;;9C6F|9C63+9C63/9C63\9C63;
                      PLX                                       ;;9C72|9C66+9C66/9C66\9C66;
                      LDA.B !SpriteLock                         ;;9C73|9C67+9C67/9C67\9C67;
                      BNE Return029C7E                          ;;9C75|9C69+9C69/9C69\9C69;
                      LDA.W !ExtSpriteMisc176F,X                ;;9C77|9C6B+9C6B/9C6B\9C6B;
                      BEQ CODE_029C7F                           ;;9C7A|9C6E+9C6E/9C6E\9C6E;
                      CMP.B #$06                                ;;9C7C|9C70+9C70/9C70\9C70;
                      BNE +                                     ;;9C7E|9C72+9C72/9C72\9C72;
                      LDA.W !ExtSpriteXSpeed,X                  ;;9C80|9C74+9C74/9C74\9C74;
                      ASL A                                     ;;9C83|9C77+9C77/9C77\9C77;
                      ROR.W !ExtSpriteXSpeed,X                  ;;9C84|9C78+9C78/9C78\9C78;
                    + JSR CODE_02B554                           ;;9C87|9C7B+9C7B/9C7B\9C7B;
Return029C7E:         RTS                                       ;;9C8A|9C7E+9C7E/9C7E\9C7E; Return
                                                                ;;                        ;
CODE_029C7F:          STZ.W !ExtSpriteNumber,X                  ;;9C8B|9C7F+9C7F/9C7F\9C7F; Clear extended sprite
                      RTS                                       ;;9C8E|9C82+9C82/9C82\9C82; Return
                                                                ;;                        ;
SpinJumpStars:        LDA.W !ExtSpriteMisc176F,X                ;;9C8F|9C83+9C83/9C83\9C83;
                      BEQ CODE_029C7F                           ;;9C92|9C86+9C86/9C86\9C86;
                      JSR CODE_02A1A4                           ;;9C94|9C88+9C88/9C88\9C88;
                      LDY.W DATA_02A153,X                       ;;9C97|9C8B+9C8B/9C8B\9C8B;
                      LDA.B #$34                                ;;9C9A|9C8E+9C8E/9C8E\9C8E;
                      STA.W !OAMTileAttr,Y                      ;;9C9C|9C90+9C90/9C90\9C90;
                      LDA.B #$EF                                ;;9C9F|9C93+9C93/9C93\9C93;
                      STA.W !OAMTileNo,Y                        ;;9CA1|9C95+9C95/9C95\9C95;
                      LDA.B !SpriteLock                         ;;9CA4|9C98+9C98/9C98\9C98;
                      BNE +                                     ;;9CA6|9C9A+9C9A/9C9A\9C9A;
                      LDA.W !ExtSpriteMisc176F,X                ;;9CA8|9C9C+9C9C/9C9C\9C9C;
                      LSR A                                     ;;9CAB|9C9F+9C9F/9C9F\9C9F;
                      LSR A                                     ;;9CAC|9CA0+9CA0/9CA0\9CA0;
                      TAY                                       ;;9CAD|9CA1+9CA1/9CA1\9CA1;
                      LDA.B !TrueFrame                          ;;9CAE|9CA2+9CA2/9CA2\9CA2;
                      AND.W DATA_029CB0,Y                       ;;9CB0|9CA4+9CA4/9CA4\9CA4;
                      BNE +                                     ;;9CB3|9CA7+9CA7/9CA7\9CA7;
                      JSR CODE_02B554                           ;;9CB5|9CA9+9CA9/9CA9\9CA9;
                      JSR CODE_02B560                           ;;9CB8|9CAC+9CAC/9CAC\9CAC;
                    + RTS                                       ;;9CBB|9CAF+9CAF/9CAF\9CAF; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029CB0:          db $FF,$07,$01,$00,$00                    ;;9CBC|9CB0+9CB0/9CB0\9CB0;
                                                                ;;                        ;
CloudCoin:            LDA.B !SpriteLock                         ;;9CC1|9CB5+9CB5/9CB5\9CB5;
                      BNE CODE_029CF8                           ;;9CC3|9CB7+9CB7/9CB7\9CB7;
                      JSR CODE_02B560                           ;;9CC5|9CB9+9CB9/9CB9\9CB9;
                      LDA.W !ExtSpriteYSpeed,X                  ;;9CC8|9CBC+9CBC/9CBC\9CBC;
                      CMP.B #$30                                ;;9CCB|9CBF+9CBF/9CBF\9CBF;
                      BPL +                                     ;;9CCD|9CC1+9CC1/9CC1\9CC1;
                      CLC                                       ;;9CCF|9CC3+9CC3/9CC3\9CC3;
                      ADC.B #$02                                ;;9CD0|9CC4+9CC4/9CC4\9CC4;
                      STA.W !ExtSpriteYSpeed,X                  ;;9CD2|9CC6+9CC6/9CC6\9CC6;
                    + LDA.W !ExtSpriteNumber,X                  ;;9CD5|9CC9+9CC9/9CC9\9CC9;
                      CMP.B #$0E                                ;;9CD8|9CCC+9CCC/9CCC\9CCC;
                      BNE ADDR_029CE3                           ;;9CDA|9CCE+9CCE/9CCE\9CCE;
                      LDY.B #$08                                ;;9CDC|9CD0+9CD0/9CD0\9CD0;
                      LDA.B !EffFrame                           ;;9CDE|9CD2+9CD2/9CD2\9CD2;
                      AND.B #$08                                ;;9CE0|9CD4+9CD4/9CD4\9CD4;
                      BEQ +                                     ;;9CE2|9CD6+9CD6/9CD6\9CD6;
                      LDY.B #$F8                                ;;9CE4|9CD8+9CD8/9CD8\9CD8;
                    + TYA                                       ;;9CE6|9CDA+9CDA/9CDA\9CDA;
                      STA.W !ExtSpriteXSpeed,X                  ;;9CE7|9CDB+9CDB/9CDB\9CDB;
                      JSR CODE_02B554                           ;;9CEA|9CDE+9CDE/9CDE\9CDE;
                      BRA CODE_029CF8                           ;;9CED|9CE1+9CE1/9CE1\9CE1;
                                                                ;;                        ;
ADDR_029CE3:          LDA.W !ExtSpriteMisc1765,X                ;;9CEF|9CE3+9CE3/9CE3\9CE3;
                      BNE +                                     ;;9CF2|9CE6+9CE6/9CE6\9CE6;
                      JSR CODE_02A56E                           ;;9CF4|9CE8+9CE8/9CE8\9CE8;
                      BCC +                                     ;;9CF7|9CEB+9CEB/9CEB\9CEB;
                      LDA.B #$D0                                ;;9CF9|9CED+9CED/9CED\9CED;
                      STA.W !ExtSpriteYSpeed,X                  ;;9CFB|9CEF+9CEF/9CEF\9CEF;
                      INC.W !ExtSpriteMisc1765,X                ;;9CFE|9CF2+9CF2/9CF2\9CF2;
                    + JSR CODE_02A3F6                           ;;9D01|9CF5+9CF5/9CF5\9CF5;
CODE_029CF8:          LDA.W !ExtSpriteYPosLow,X                 ;;9D04|9CF8+9CF8/9CF8\9CF8;
                      SEC                                       ;;9D07|9CFB+9CFB/9CFB\9CFB;
                      SBC.B !Layer1YPos                         ;;9D08|9CFC+9CFC/9CFC\9CFC;
                      CMP.B #$F0                                ;;9D0A|9CFE+9CFE/9CFE\9CFE;
                      BCS CODE_029D5A                           ;;9D0C|9D00+9D00/9D00\9D00;
                      STA.B !_1                                 ;;9D0E|9D02+9D02/9D02\9D02;
                      LDA.W !ExtSpriteXPosLow,X                 ;;9D10|9D04+9D04/9D04\9D04;
                      CMP.B !Layer1XPos                         ;;9D13|9D07+9D07/9D07\9D07;
                      LDA.W !ExtSpriteXPosHigh,X                ;;9D15|9D09+9D09/9D09\9D09;
                      SBC.B !Layer1XPos+1                       ;;9D18|9D0C+9D0C/9D0C\9D0C;
                      BNE Return029D5D                          ;;9D1A|9D0E+9D0E/9D0E\9D0E;
                      LDY.W DATA_02A153,X                       ;;9D1C|9D10+9D10/9D10\9D10;
                      STY.B !_F                                 ;;9D1F|9D13+9D13/9D13\9D13;
                      LDA.W !ExtSpriteXPosLow,X                 ;;9D21|9D15+9D15/9D15\9D15;
                      SEC                                       ;;9D24|9D18+9D18/9D18\9D18;
                      SBC.B !Layer1XPos                         ;;9D25|9D19+9D19/9D19\9D19;
                      STA.B !_0                                 ;;9D27|9D1B+9D1B/9D1B\9D1B;
                      STA.W !OAMTileXPos,Y                      ;;9D29|9D1D+9D1D/9D1D\9D1D;
                      LDA.W !ExtSpriteNumber,X                  ;;9D2C|9D20+9D20/9D20\9D20;
                      CMP.B #$0E                                ;;9D2F|9D23+9D23/9D23\9D23;
                      BNE +                                     ;;9D31|9D25+9D25/9D25\9D25;
                      LDA.B !_1                                 ;;9D33|9D27+9D27/9D27\9D27;
                      SEC                                       ;;9D35|9D29+9D29/9D29\9D29;
                      SBC.B #$05                                ;;9D36|9D2A+9D2A/9D2A\9D2A;
                      STA.W !OAMTileYPos,Y                      ;;9D38|9D2C+9D2C/9D2C\9D2C;
                      LDA.B #$98                                ;;9D3B|9D2F+9D2F/9D2F\9D2F;
                      STA.W !OAMTileNo,Y                        ;;9D3D|9D31+9D31/9D31\9D31;
                      LDA.B #$0B                                ;;9D40|9D34+9D34/9D34\9D34;
CODE_029D36:          ORA.B !SpriteProperties                   ;;9D42|9D36+9D36/9D36\9D36;
                      STA.W !OAMTileAttr,Y                      ;;9D44|9D38+9D38/9D38\9D38;
                      TYA                                       ;;9D47|9D3B+9D3B/9D3B\9D3B;
                      LSR A                                     ;;9D48|9D3C+9D3C/9D3C\9D3C;
                      LSR A                                     ;;9D49|9D3D+9D3D/9D3D\9D3D;
                      TAY                                       ;;9D4A|9D3E+9D3E/9D3E\9D3E;
                      LDA.B #$00                                ;;9D4B|9D3F+9D3F/9D3F\9D3F;
                      STA.W !OAMTileSize,Y                      ;;9D4D|9D41+9D41/9D41\9D41;
                      RTS                                       ;;9D50|9D44+9D44/9D44\9D44; Return
                                                                ;;                        ;
                    + LDA.B !_1                                 ;;9D51|9D45+9D45/9D45\9D45;
                      STA.W !OAMTileYPos,Y                      ;;9D53|9D47+9D47/9D47\9D47;
                      LDA.B #$C2                                ;;9D56|9D4A+9D4A/9D4A\9D4A;
                      STA.W !OAMTileNo,Y                        ;;9D58|9D4C+9D4C/9D4C\9D4C;
                      LDA.B #$04                                ;;9D5B|9D4F+9D4F/9D4F\9D4F;
                      JSR CODE_029D36                           ;;9D5D|9D51+9D51/9D51\9D51;
                      LDA.B #$02                                ;;9D60|9D54+9D54/9D54\9D54;
                      STA.W !OAMTileSize,Y                      ;;9D62|9D56+9D56/9D56\9D56;
                      RTS                                       ;;9D65|9D59+9D59/9D59\9D59; Return
                                                                ;;                        ;
CODE_029D5A:          STZ.W !ExtSpriteNumber,X                  ;;9D66|9D5A+9D5A/9D5A\9D5A; Clear extended sprite
Return029D5D:         RTS                                       ;;9D69|9D5D+9D5D/9D5D\9D5D; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029D5E:          db $00,$01,$02,$03,$02,$03,$02,$03        ;;9D6A|9D5E+9D5E/9D5E\9D5E;
                      db $03,$02,$03,$02,$03,$02,$01,$00        ;;9D72|9D66+9D66/9D66\9D66;
UnusedExSprDispX:     db $10,$F8,$03,$10,$F8,$03,$10,$F0        ;;9D7A|9D6E+9D6E/9D6E\9D6E;
                      db $FF,$10,$F0,$FF                        ;;9D82|9D76+9D76/9D76\9D76;
                                                                ;;                        ;
UnusedExSprDispY:     db $02,$02,$EE,$02,$02,$EE,$FE,$FE        ;;9D86|9D7A+9D7A/9D7A\9D7A;
                      db $E6,$FE,$FE,$E6                        ;;9D8E|9D82+9D82/9D82\9D82;
                                                                ;;                        ;
UnusedExSprTiles:     db $B3,$B3,$B1,$B2,$B2,$B0,$8E,$8E        ;;9D92|9D86+9D86/9D86\9D86;
                      db $A8,$8C,$8C,$88                        ;;9D9A|9D8E+9D8E/9D8E\9D8E;
                                                                ;;                        ;
UnusedExSprGfxProp:   db $69,$29,$29                            ;;9D9E|9D92+9D92/9D92\9D92;
                                                                ;;                        ;
UnusedExSprTileSize:  db $00,$00,$02,$02                        ;;9DA1|9D95+9D95/9D95\9D95;
                                                                ;;                        ;
                    - STZ.W !ExtSpriteNumber,X                  ;;9DA5|9D99+9D99/9D99\9D99; Clear extended sprite
                      RTS                                       ;;9DA8|9D9C+9D9C/9D9C\9D9C; Return
                                                                ;;                        ;
UnusedExtendedSpr:    JSR CODE_02A3F6                           ;;9DA9|9D9D+9D9D/9D9D\9D9D;
                      LDY.W !ExtSpriteXSpeed,X                  ;;9DAC|9DA0+9DA0/9DA0\9DA0;
                      LDA.W !SpriteStatus,Y                     ;;9DAF|9DA3+9DA3/9DA3\9DA3;
                      CMP.B #$08                                ;;9DB2|9DA6+9DA6/9DA6\9DA6;
                      BNE -                                     ;;9DB4|9DA8+9DA8/9DA8\9DA8;
                      LDA.W !ExtSpriteMisc176F,X                ;;9DB6|9DAA+9DAA/9DAA\9DAA;
                      BEQ -                                     ;;9DB9|9DAD+9DAD/9DAD\9DAD;
                      LSR A                                     ;;9DBB|9DAF+9DAF/9DAF\9DAF;
                      LSR A                                     ;;9DBC|9DB0+9DB0/9DB0\9DB0;
                      NOP                                       ;;9DBD|9DB1+9DB1/9DB1\9DB1;
                      NOP                                       ;;9DBE|9DB2+9DB2/9DB2\9DB2;
                      TAY                                       ;;9DBF|9DB3+9DB3/9DB3\9DB3;
                      LDA.W DATA_029D5E,Y                       ;;9DC0|9DB4+9DB4/9DB4\9DB4;
                      STA.B !_F                                 ;;9DC3|9DB7+9DB7/9DB7\9DB7;
                      ASL A                                     ;;9DC5|9DB9+9DB9/9DB9\9DB9;
                      ADC.B !_F                                 ;;9DC6|9DBA+9DBA/9DBA\9DBA;
                      STA.B !_2                                 ;;9DC8|9DBC+9DBC/9DBC\9DBC;
                      LDA.W !ExtSpriteMisc1765,X                ;;9DCA|9DBE+9DBE/9DBE\9DBE;
                      CLC                                       ;;9DCD|9DC1+9DC1/9DC1\9DC1;
                      ADC.B !_2                                 ;;9DCE|9DC2+9DC2/9DC2\9DC2;
                      TAY                                       ;;9DD0|9DC4+9DC4/9DC4\9DC4;
                      STY.B !_3                                 ;;9DD1|9DC5+9DC5/9DC5\9DC5;
                      LDA.W !ExtSpriteXPosLow,X                 ;;9DD3|9DC7+9DC7/9DC7\9DC7;
                      CLC                                       ;;9DD6|9DCA+9DCA/9DCA\9DCA;
                      ADC.W UnusedExSprDispX,Y                  ;;9DD7|9DCB+9DCB/9DCB\9DCB;
                      SEC                                       ;;9DDA|9DCE+9DCE/9DCE\9DCE;
                      SBC.B !Layer1XPos                         ;;9DDB|9DCF+9DCF/9DCF\9DCF;
                      STA.B !_0                                 ;;9DDD|9DD1+9DD1/9DD1\9DD1;
                      LDA.W !ExtSpriteYPosLow,X                 ;;9DDF|9DD3+9DD3/9DD3\9DD3;
                      CLC                                       ;;9DE2|9DD6+9DD6/9DD6\9DD6;
                      ADC.W UnusedExSprDispY,Y                  ;;9DE3|9DD7+9DD7/9DD7\9DD7;
                      SEC                                       ;;9DE6|9DDA+9DDA/9DDA\9DDA;
                      SBC.B !Layer1YPos                         ;;9DE7|9DDB+9DDB/9DDB\9DDB;
                      STA.B !_1                                 ;;9DE9|9DDD+9DDD/9DDD\9DDD;
                      LDY.W DATA_02A153,X                       ;;9DEB|9DDF+9DDF/9DDF\9DDF;
                      CMP.B #$F0                                ;;9DEE|9DE2+9DE2/9DE2\9DE2;
                      BCS CODE_029E39                           ;;9DF0|9DE4+9DE4/9DE4\9DE4;
                      STA.W !OAMTileYPos,Y                      ;;9DF2|9DE6+9DE6/9DE6\9DE6;
                      LDA.B !_0                                 ;;9DF5|9DE9+9DE9/9DE9\9DE9;
                      CMP.B #$10                                ;;9DF7|9DEB+9DEB/9DEB\9DEB;
                      BCC CODE_029E39                           ;;9DF9|9DED+9DED/9DED\9DED;
                      CMP.B #$F0                                ;;9DFB|9DEF+9DEF/9DEF\9DEF;
                      BCS CODE_029E39                           ;;9DFD|9DF1+9DF1/9DF1\9DF1;
                      STA.W !OAMTileXPos,Y                      ;;9DFF|9DF3+9DF3/9DF3\9DF3;
                      LDA.W !ExtSpriteMisc1765,X                ;;9E02|9DF6+9DF6/9DF6\9DF6;
                      TAX                                       ;;9E05|9DF9+9DF9/9DF9\9DF9;
                      %LorW_X(LDA,UnusedExSprGfxProp)           ;;9E06|9DFA+9DFA/9DFA\9DFA;
                      STA.W !OAMTileAttr,Y                      ;;9E0A|9DFD+9DFD/9DFD\9DFD;
                      LDX.B !_3                                 ;;9E0D|9E00+9E00/9E00\9E00;
                      %LorW_X(LDA,UnusedExSprTiles)             ;;9E0F|9E02+9E02/9E02\9E02;
                      STA.W !OAMTileNo,Y                        ;;9E13|9E05+9E05/9E05\9E05;
                      TYA                                       ;;9E16|9E08+9E08/9E08\9E08;
                      LSR A                                     ;;9E17|9E09+9E09/9E09\9E09;
                      LSR A                                     ;;9E18|9E0A+9E0A/9E0A\9E0A;
                      TAY                                       ;;9E19|9E0B+9E0B/9E0B\9E0B;
                      LDX.B !_F                                 ;;9E1A|9E0C+9E0C/9E0C\9E0C;
                      %LorW_X(LDA,UnusedExSprTileSize)          ;;9E1C|9E0E+9E0E/9E0E\9E0E;
                      STA.W !OAMTileSize,Y                      ;;9E20|9E11+9E11/9E11\9E11;
                      LDX.W !CurSpriteProcess                   ;;9E23|9E14+9E14/9E14\9E14; X = Sprite index
                      LDA.B !_0                                 ;;9E26|9E17+9E17/9E17\9E17;
                      SEC                                       ;;9E28|9E19+9E19/9E19\9E19;
                      SBC.B !PlayerXPosScrRel                   ;;9E29|9E1A+9E1A/9E1A\9E1A;
                      CLC                                       ;;9E2B|9E1C+9E1C/9E1C\9E1C;
                      ADC.B #$04                                ;;9E2C|9E1D+9E1D/9E1D\9E1D;
                      CMP.B #$08                                ;;9E2E|9E1F+9E1F/9E1F\9E1F;
                      BCS +                                     ;;9E30|9E21+9E21/9E21\9E21;
                      LDA.B !_1                                 ;;9E32|9E23+9E23/9E23\9E23;
                      SEC                                       ;;9E34|9E25+9E25/9E25\9E25;
                      SBC.B !PlayerYPosScrRel                   ;;9E35|9E26+9E26/9E26\9E26;
                      SEC                                       ;;9E37|9E28+9E28/9E28\9E28;
                      SBC.B #$10                                ;;9E38|9E29+9E29/9E29\9E29;
                      CLC                                       ;;9E3A|9E2B+9E2B/9E2B\9E2B;
                      ADC.B #$10                                ;;9E3B|9E2C+9E2C/9E2C\9E2C;
                      CMP.B #$10                                ;;9E3D|9E2E+9E2E/9E2E\9E2E;
                      BCS +                                     ;;9E3F|9E30+9E30/9E30\9E30;
                      JMP CODE_02A469                           ;;9E41|9E32+9E32/9E32\9E32;
                                                                ;;                        ;
                    + RTS                                       ;;9E44|9E35+9E35/9E35\9E35; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029E36:          db $08,$00,$F8                            ;;9E45|9E36+9E36/9E36\9E36;
                                                                ;;                        ;
CODE_029E39:          STZ.W !ExtSpriteNumber,X                  ;;9E48|9E39+9E39/9E39\9E39;
                      RTS                                       ;;9E4B|9E3C+9E3C/9E3C\9E3C; Return
                                                                ;;                        ;
LauncherArm:          LDY.B #$00                                ;;9E4C|9E3D+9E3D/9E3D\9E3D;
                      LDA.W !ExtSpriteMisc176F,X                ;;9E4E|9E3F+9E3F/9E3F\9E3F;
                      BEQ CODE_029E39                           ;;9E51|9E42+9E42/9E42\9E42;
                      CMP.B #$60                                ;;9E53|9E44+9E44/9E44\9E44;
                      BCS +                                     ;;9E55|9E46+9E46/9E46\9E46;
                      INY                                       ;;9E57|9E48+9E48/9E48\9E48;
                      CMP.B #$30                                ;;9E58|9E49+9E49/9E49\9E49;
                      BCS +                                     ;;9E5A|9E4B+9E4B/9E4B\9E4B;
                      INY                                       ;;9E5C|9E4D+9E4D/9E4D\9E4D;
                    + PHY                                       ;;9E5D|9E4E+9E4E/9E4E\9E4E;
                      LDA.B !SpriteLock                         ;;9E5E|9E4F+9E4F/9E4F\9E4F;
                      BNE +                                     ;;9E60|9E51+9E51/9E51\9E51;
                      LDA.W DATA_029E36,Y                       ;;9E62|9E53+9E53/9E53\9E53;
                      STA.W !ExtSpriteYSpeed,X                  ;;9E65|9E56+9E56/9E56\9E56;
                      JSR CODE_02B560                           ;;9E68|9E59+9E59/9E59\9E59;
                    + JSR CODE_02A1A4                           ;;9E6B|9E5C+9E5C/9E5C\9E5C;
                      LDY.W DATA_02A153,X                       ;;9E6E|9E5F+9E5F/9E5F\9E5F;
                      PLA                                       ;;9E71|9E62+9E62/9E62\9E62;
                      CMP.B #$01                                ;;9E72|9E63+9E63/9E63\9E63;
                      LDA.B #$84                                ;;9E74|9E65+9E65/9E65\9E65;
                      BCC +                                     ;;9E76|9E67+9E67/9E67\9E67;
                      LDA.B #$A4                                ;;9E78|9E69+9E69/9E69\9E69;
                    + STA.W !OAMTileNo,Y                        ;;9E7A|9E6B+9E6B/9E6B\9E6B;
                      LDA.W !OAMTileAttr,Y                      ;;9E7D|9E6E+9E6E/9E6E\9E6E;
                      AND.B #$00                                ;;9E80|9E71+9E71/9E71\9E71;
                      ORA.B #$13                                ;;9E82|9E73+9E73/9E73\9E73;
                      STA.W !OAMTileAttr,Y                      ;;9E84|9E75+9E75/9E75\9E75;
                      TYA                                       ;;9E87|9E78+9E78/9E78\9E78;
                      LSR A                                     ;;9E88|9E79+9E79/9E79\9E79;
                      LSR A                                     ;;9E89|9E7A+9E7A/9E7A\9E7A;
                      TAY                                       ;;9E8A|9E7B+9E7B/9E7B\9E7B;
                      LDA.B #$02                                ;;9E8B|9E7C+9E7C/9E7C\9E7C;
                      STA.W !OAMTileSize,Y                      ;;9E8D|9E7E+9E7E/9E7E\9E7E;
                      RTS                                       ;;9E90|9E81+9E81/9E81\9E81; Return
                                                                ;;                        ;
                                                                ;;                        ;
LavaSplashTiles2:     db $D7,$C7,$D6,$C6                        ;;9E91|9E82+9E82/9E82\9E82;
                                                                ;;                        ;
LavaSplash:           LDA.B !SpriteLock                         ;;9E95|9E86+9E86/9E86\9E86;
                      BNE CODE_029E9D                           ;;9E97|9E88+9E88/9E88\9E88;
                      JSR CODE_02B554                           ;;9E99|9E8A+9E8A/9E8A\9E8A;
                      JSR CODE_02B560                           ;;9E9C|9E8D+9E8D/9E8D\9E8D;
                      LDA.W !ExtSpriteYSpeed,X                  ;;9E9F|9E90+9E90/9E90\9E90;
                      CLC                                       ;;9EA2|9E93+9E93/9E93\9E93;
                      ADC.B #$02                                ;;9EA3|9E94+9E94/9E94\9E94;
                      STA.W !ExtSpriteYSpeed,X                  ;;9EA5|9E96+9E96/9E96\9E96;
                      CMP.B #$30                                ;;9EA8|9E99+9E99/9E99\9E99;
                      BPL +                                     ;;9EAA|9E9B+9E9B/9E9B\9E9B;
CODE_029E9D:          LDY.W DATA_02A153,X                       ;;9EAC|9E9D+9E9D/9E9D\9E9D;
                      LDA.W !ExtSpriteXPosLow,X                 ;;9EAF|9EA0+9EA0/9EA0\9EA0;
                      SEC                                       ;;9EB2|9EA3+9EA3/9EA3\9EA3;
                      SBC.B !Layer1XPos                         ;;9EB3|9EA4+9EA4/9EA4\9EA4;
                      STA.B !_0                                 ;;9EB5|9EA6+9EA6/9EA6\9EA6;
                      LDA.W !ExtSpriteXPosHigh,X                ;;9EB7|9EA8+9EA8/9EA8\9EA8;
                      SBC.B !Layer1XPos+1                       ;;9EBA|9EAB+9EAB/9EAB\9EAB;
                      BNE +                                     ;;9EBC|9EAD+9EAD/9EAD\9EAD;
                      LDA.B !_0                                 ;;9EBE|9EAF+9EAF/9EAF\9EAF;
                      STA.W !OAMTileXPos,Y                      ;;9EC0|9EB1+9EB1/9EB1\9EB1;
                      LDA.W !ExtSpriteYPosLow,X                 ;;9EC3|9EB4+9EB4/9EB4\9EB4;
                      SEC                                       ;;9EC6|9EB7+9EB7/9EB7\9EB7;
                      SBC.B !Layer1YPos                         ;;9EC7|9EB8+9EB8/9EB8\9EB8;
                      CMP.B #$F0                                ;;9EC9|9EBA+9EBA/9EBA\9EBA;
                      BCS +                                     ;;9ECB|9EBC+9EBC/9EBC\9EBC;
                      STA.W !OAMTileYPos,Y                      ;;9ECD|9EBE+9EBE/9EBE\9EBE;
                      LDA.W !ExtSpriteMisc176F,X                ;;9ED0|9EC1+9EC1/9EC1\9EC1;
                      LSR A                                     ;;9ED3|9EC4+9EC4/9EC4\9EC4;
                      LSR A                                     ;;9ED4|9EC5+9EC5/9EC5\9EC5;
                      LSR A                                     ;;9ED5|9EC6+9EC6/9EC6\9EC6;
                      NOP                                       ;;9ED6|9EC7+9EC7/9EC7\9EC7;
                      NOP                                       ;;9ED7|9EC8+9EC8/9EC8\9EC8;
                      AND.B #$03                                ;;9ED8|9EC9+9EC9/9EC9\9EC9;
                      TAX                                       ;;9EDA|9ECB+9ECB/9ECB\9ECB;
                      %LorW_X(LDA,LavaSplashTiles2)             ;;9EDB|9ECC+9ECC/9ECC\9ECC;
                      STA.W !OAMTileNo,Y                        ;;9EDF|9ECF+9ECF/9ECF\9ECF;
                      LDA.B !SpriteProperties                   ;;9EE2|9ED2+9ED2/9ED2\9ED2;
                      ORA.B #$05                                ;;9EE4|9ED4+9ED4/9ED4\9ED4;
                      STA.W !OAMTileAttr,Y                      ;;9EE6|9ED6+9ED6/9ED6\9ED6;
                      TYA                                       ;;9EE9|9ED9+9ED9/9ED9\9ED9;
                      LSR A                                     ;;9EEA|9EDA+9EDA/9EDA\9EDA;
                      LSR A                                     ;;9EEB|9EDB+9EDB/9EDB\9EDB;
                      TAY                                       ;;9EEC|9EDC+9EDC/9EDC\9EDC;
                      LDA.B #$00                                ;;9EED|9EDD+9EDD/9EDD\9EDD;
                      STA.W !OAMTileSize,Y                      ;;9EEF|9EDF+9EDF/9EDF\9EDF;
                      LDX.W !CurSpriteProcess                   ;;9EF2|9EE2+9EE2/9EE2\9EE2; X = Sprite index
                      RTS                                       ;;9EF5|9EE5+9EE5/9EE5\9EE5; Return
                                                                ;;                        ;
                    + STZ.W !ExtSpriteNumber,X                  ;;9EF6|9EE6+9EE6/9EE6\9EE6; Clear extended sprite
                      RTS                                       ;;9EF9|9EE9+9EE9/9EE9\9EE9; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029EEA:          db $00,$01,$00,$FF                        ;;9EFA|9EEA+9EEA/9EEA\9EEA;
                                                                ;;                        ;
WaterBubble:          LDA.B !SpriteLock                         ;;9EFE|9EEE+9EEE/9EEE\9EEE;
                      BNE CODE_029F2A                           ;;9F00|9EF0+9EF0/9EF0\9EF0;
                      INC.W !ExtSpriteMisc1765,X                ;;9F02|9EF2+9EF2/9EF2\9EF2;
                      LDA.W !ExtSpriteMisc1765,X                ;;9F05|9EF5+9EF5/9EF5\9EF5;
                      AND.B #$30                                ;;9F08|9EF8+9EF8/9EF8\9EF8;
                      BEQ +                                     ;;9F0A|9EFA+9EFA/9EFA\9EFA;
                      DEC.W !ExtSpriteYPosLow,X                 ;;9F0C|9EFC+9EFC/9EFC\9EFC;
                      LDY.W !ExtSpriteYPosLow,X                 ;;9F0F|9EFF+9EFF/9EFF\9EFF;
                      INY                                       ;;9F12|9F02+9F02/9F02\9F02;
                      BNE +                                     ;;9F13|9F03+9F03/9F03\9F03;
                      DEC.W !ExtSpriteYPosHigh,X                ;;9F15|9F05+9F05/9F05\9F05;
                    + TXA                                       ;;9F18|9F08+9F08/9F08\9F08;
                      EOR.B !TrueFrame                          ;;9F19|9F09+9F09/9F09\9F09;
                      LSR A                                     ;;9F1B|9F0B+9F0B/9F0B\9F0B;
                      BCS CODE_029F2A                           ;;9F1C|9F0C+9F0C/9F0C\9F0C;
                      JSR CODE_02A56E                           ;;9F1E|9F0E+9F0E/9F0E\9F0E;
                      BCS CODE_029F27                           ;;9F21|9F11+9F11/9F11\9F11;
                      LDA.B !LevelIsWater                       ;;9F23|9F13+9F13/9F13\9F13;
                      BNE CODE_029F2A                           ;;9F25|9F15+9F15/9F15\9F15;
                      LDA.B !_C                                 ;;9F27|9F17+9F17/9F17\9F17;
                      CMP.B #$06                                ;;9F29|9F19+9F19/9F19\9F19;
                      BCC CODE_029F2A                           ;;9F2B|9F1B+9F1B/9F1B\9F1B;
                      LDA.B !_F                                 ;;9F2D|9F1D+9F1D/9F1D\9F1D;
                      BEQ CODE_029F27                           ;;9F2F|9F1F+9F1F/9F1F\9F1F;
                      LDA.B !_D                                 ;;9F31|9F21+9F21/9F21\9F21;
                      CMP.B #$06                                ;;9F33|9F23+9F23/9F23\9F23;
                      BCC CODE_029F2A                           ;;9F35|9F25+9F25/9F25\9F25;
CODE_029F27:          JMP CODE_02A211                           ;;9F37|9F27+9F27/9F27\9F27;
                                                                ;;                        ;
CODE_029F2A:          LDA.W !ExtSpriteYPosLow,X                 ;;9F3A|9F2A+9F2A/9F2A\9F2A;
                      CMP.B !Layer1YPos                         ;;9F3D|9F2D+9F2D/9F2D\9F2D;
                      LDA.W !ExtSpriteYPosHigh,X                ;;9F3F|9F2F+9F2F/9F2F\9F2F;
                      SBC.B !Layer1YPos+1                       ;;9F42|9F32+9F32/9F32\9F32;
                      BNE CODE_029F27                           ;;9F44|9F34+9F34/9F34\9F34;
                      JSR CODE_02A1A4                           ;;9F46|9F36+9F36/9F36\9F36;
                      LDA.W !ExtSpriteMisc1765,X                ;;9F49|9F39+9F39/9F39\9F39;
                      AND.B #$0C                                ;;9F4C|9F3C+9F3C/9F3C\9F3C;
                      LSR A                                     ;;9F4E|9F3E+9F3E/9F3E\9F3E;
                      LSR A                                     ;;9F4F|9F3F+9F3F/9F3F\9F3F;
                      TAY                                       ;;9F50|9F40+9F40/9F40\9F40;
                      LDA.W DATA_029EEA,Y                       ;;9F51|9F41+9F41/9F41\9F41;
                      STA.B !_0                                 ;;9F54|9F44+9F44/9F44\9F44;
                      LDY.W DATA_02A153,X                       ;;9F56|9F46+9F46/9F46\9F46;
                      LDA.W !OAMTileXPos,Y                      ;;9F59|9F49+9F49/9F49\9F49;
                      CLC                                       ;;9F5C|9F4C+9F4C/9F4C\9F4C;
                      ADC.B !_0                                 ;;9F5D|9F4D+9F4D/9F4D\9F4D;
                      STA.W !OAMTileXPos,Y                      ;;9F5F|9F4F+9F4F/9F4F\9F4F;
                      LDA.W !OAMTileYPos,Y                      ;;9F62|9F52+9F52/9F52\9F52;
                      CLC                                       ;;9F65|9F55+9F55/9F55\9F55;
                      ADC.B #$05                                ;;9F66|9F56+9F56/9F56\9F56;
                      STA.W !OAMTileYPos,Y                      ;;9F68|9F58+9F58/9F58\9F58;
                      LDA.B #$1C                                ;;9F6B|9F5B+9F5B/9F5B\9F5B;
                      STA.W !OAMTileNo,Y                        ;;9F6D|9F5D+9F5D/9F5D\9F5D;
                      RTS                                       ;;9F70|9F60+9F60/9F60\9F60; Return
                                                                ;;                        ;
YoshiFireball:        LDA.B !SpriteLock                         ;;9F71|9F61+9F61/9F61\9F61;
                      BNE +                                     ;;9F73|9F63+9F63/9F63\9F63;
                      JSR CODE_02B554                           ;;9F75|9F65+9F65/9F65\9F65;
                      JSR CODE_02B560                           ;;9F78|9F68+9F68/9F68\9F68;
                      JSR ProcessFireball                       ;;9F7B|9F6B+9F6B/9F6B\9F6B;
                    + JSR CODE_02A1A4                           ;;9F7E|9F6E+9F6E/9F6E\9F6E;
                      LDA.B !EffFrame                           ;;9F81|9F71+9F71/9F71\9F71;
                      LSR A                                     ;;9F83|9F73+9F73/9F73\9F73;
                      LSR A                                     ;;9F84|9F74+9F74/9F74\9F74;
                      LSR A                                     ;;9F85|9F75+9F75/9F75\9F75;
                      LDY.W DATA_02A153,X                       ;;9F86|9F76+9F76/9F76\9F76;
                      LDA.B #$04                                ;;9F89|9F79+9F79/9F79\9F79;
                      BCC +                                     ;;9F8B|9F7B+9F7B/9F7B\9F7B;
                      LDA.B #$2B                                ;;9F8D|9F7D+9F7D/9F7D\9F7D;
                    + STA.W !OAMTileNo,Y                        ;;9F8F|9F7F+9F7F/9F7F\9F7F;
                      LDA.W !ExtSpriteXSpeed,X                  ;;9F92|9F82+9F82/9F82\9F82;
                      AND.B #$80                                ;;9F95|9F85+9F85/9F85\9F85;
                      EOR.B #$80                                ;;9F97|9F87+9F87/9F87\9F87;
                      LSR A                                     ;;9F99|9F89+9F89/9F89\9F89;
                      ORA.B #$35                                ;;9F9A|9F8A+9F8A/9F8A\9F8A;
                      STA.W !OAMTileAttr,Y                      ;;9F9C|9F8C+9F8C/9F8C\9F8C;
                      TYA                                       ;;9F9F|9F8F+9F8F/9F8F\9F8F;
                      LSR A                                     ;;9FA0|9F90+9F90/9F90\9F90;
                      LSR A                                     ;;9FA1|9F91+9F91/9F91\9F91;
                      TAY                                       ;;9FA2|9F92+9F92/9F92\9F92;
                      LDA.B #$02                                ;;9FA3|9F93+9F93/9F93\9F93;
                      STA.W !OAMTileSize,Y                      ;;9FA5|9F95+9F95/9F95\9F95;
                      RTS                                       ;;9FA8|9F98+9F98/9F98\9F98; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_029F99:          db $00,$B8,$C0,$C8,$D0,$D8,$E0,$E8        ;;9FA9|9F99+9F99/9F99\9F99;
                      db $F0                                    ;;9FB1|9FA1+9FA1/9FA1\9FA1;
                                                                ;;                        ;
DATA_029FA2:          db $00                                    ;;9FB2|9FA2+9FA2/9FA2\9FA2;
                                                                ;;                        ;
DATA_029FA3:          db $05,$03                                ;;9FB3|9FA3+9FA3/9FA3\9FA3;
                                                                ;;                        ;
DATA_029FA5:          db $02,$02,$02,$02,$02,$02,$F8,$FC        ;;9FB5|9FA5+9FA5/9FA5\9FA5;
                      db $A0,$A4                                ;;9FBD|9FAD+9FAD/9FAD\9FAD;
                                                                ;;                        ;
MarioFireball:        LDA.B !SpriteLock                         ;;9FBF|9FAF+9FAF/9FAF\9FAF;
                      BNE CODE_02A02C                           ;;9FC1|9FB1+9FB1/9FB1\9FB1;
                      LDA.W !ExtSpriteYPosLow,X                 ;;9FC3|9FB3+9FB3/9FB3\9FB3;
                      CMP.B !Layer1YPos                         ;;9FC6|9FB6+9FB6/9FB6\9FB6;
                      LDA.W !ExtSpriteYPosHigh,X                ;;9FC8|9FB8+9FB8/9FB8\9FB8;
                      SBC.B !Layer1YPos+1                       ;;9FCB|9FBB+9FBB/9FBB\9FBB;
                      BEQ +                                     ;;9FCD|9FBD+9FBD/9FBD\9FBD;
                      JMP CODE_02A211                           ;;9FCF|9FBF+9FBF/9FBF\9FBF;
                                                                ;;                        ;
                    + INC.W !ExtSpriteMisc1765,X                ;;9FD2|9FC2+9FC2/9FC2\9FC2;
                      JSR ProcessFireball                       ;;9FD5|9FC5+9FC5/9FC5\9FC5;
                      LDA.W !ExtSpriteYSpeed,X                  ;;9FD8|9FC8+9FC8/9FC8\9FC8;
                      CMP.B #$30                                ;;9FDB|9FCB+9FCB/9FCB\9FCB;
                      BPL +                                     ;;9FDD|9FCD+9FCD/9FCD\9FCD;
                      LDA.W !ExtSpriteYSpeed,X                  ;;9FDF|9FCF+9FCF/9FCF\9FCF;
                      CLC                                       ;;9FE2|9FD2+9FD2/9FD2\9FD2;
                      ADC.B #$04                                ;;9FE3|9FD3+9FD3/9FD3\9FD3;
                      STA.W !ExtSpriteYSpeed,X                  ;;9FE5|9FD5+9FD5/9FD5\9FD5;
                    + JSR CODE_02A56E                           ;;9FE8|9FD8+9FD8/9FD8\9FD8;
                      BCC CODE_02A010                           ;;9FEB|9FDB+9FDB/9FDB\9FDB;
                      INC.W !ExtSpriteXPosSpx,X                 ;;9FED|9FDD+9FDD/9FDD\9FDD;
                      LDA.W !ExtSpriteXPosSpx,X                 ;;9FF0|9FE0+9FE0/9FE0\9FE0;
                      CMP.B #$02                                ;;9FF3|9FE3+9FE3/9FE3\9FE3;
                      BCS CODE_02A042                           ;;9FF5|9FE5+9FE5/9FE5\9FE5;
                      LDA.W !ExtSpriteXSpeed,X                  ;;9FF7|9FE7+9FE7/9FE7\9FE7;
                      BPL +                                     ;;9FFA|9FEA+9FEA/9FEA\9FEA;
                      LDA.B !_B                                 ;;9FFC|9FEC+9FEC/9FEC\9FEC;
                      EOR.B #$FF                                ;;9FFE|9FEE+9FEE/9FEE\9FEE;
                      INC A                                     ;;A000|9FF0+9FF0/9FF0\9FF0;
                      STA.B !_B                                 ;;A001|9FF1+9FF1/9FF1\9FF1;
                    + LDA.B !_B                                 ;;A003|9FF3+9FF3/9FF3\9FF3;
                      CLC                                       ;;A005|9FF5+9FF5/9FF5\9FF5;
                      ADC.B #$04                                ;;A006|9FF6+9FF6/9FF6\9FF6;
                      TAY                                       ;;A008|9FF8+9FF8/9FF8\9FF8;
                      LDA.W DATA_029F99,Y                       ;;A009|9FF9+9FF9/9FF9\9FF9;
                      STA.W !ExtSpriteYSpeed,X                  ;;A00C|9FFC+9FFC/9FFC\9FFC;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A00F|9FFF+9FFF/9FFF\9FFF;
                      SEC                                       ;;A012|A002+A002/A002\A002;
                      SBC.W DATA_029FA2,Y                       ;;A013|A003+A003/A003\A003;
                      STA.W !ExtSpriteYPosLow,X                 ;;A016|A006+A006/A006\A006;
                      BCS +                                     ;;A019|A009+A009/A009\A009;
                      DEC.W !ExtSpriteYPosHigh,X                ;;A01B|A00B+A00B/A00B\A00B;
                    + BRA +                                     ;;A01E|A00E+A00E/A00E\A00E;
                                                                ;;                        ;
CODE_02A010:          STZ.W !ExtSpriteXPosSpx,X                 ;;A020|A010+A010/A010\A010;
                    + LDY.B #$00                                ;;A023|A013+A013/A013\A013;
                      LDA.W !ExtSpriteXSpeed,X                  ;;A025|A015+A015/A015\A015;
                      BPL +                                     ;;A028|A018+A018/A018\A018;
                      DEY                                       ;;A02A|A01A+A01A/A01A\A01A;
                    + CLC                                       ;;A02B|A01B+A01B/A01B\A01B;
                      ADC.W !ExtSpriteXPosLow,X                 ;;A02C|A01C+A01C/A01C\A01C;
                      STA.W !ExtSpriteXPosLow,X                 ;;A02F|A01F+A01F/A01F\A01F;
                      TYA                                       ;;A032|A022+A022/A022\A022;
                      ADC.W !ExtSpriteXPosHigh,X                ;;A033|A023+A023/A023\A023;
                      STA.W !ExtSpriteXPosHigh,X                ;;A036|A026+A026/A026\A026;
                      JSR CODE_02B560                           ;;A039|A029+A029/A029\A029;
CODE_02A02C:          LDA.B !SpriteNumber+7                     ;;A03C|A02C+A02C/A02C\A02C;
                      CMP.B #$A9                                ;;A03E|A02E+A02E/A02E\A02E;
                      BEQ CODE_02A03B                           ;;A040|A030+A030/A030\A030;
                      LDA.W !IRQNMICommand                      ;;A042|A032+A032/A032\A032;
                      BPL CODE_02A03B                           ;;A045|A035+A035/A035\A035;
                      AND.B #$40                                ;;A047|A037+A037/A037\A037;
                      BNE +                                     ;;A049|A039+A039/A039\A039;
CODE_02A03B:          LDY.W DATA_029FA3,X                       ;;A04B|A03B+A03B/A03B\A03B;
                      JSR CODE_02A1A7                           ;;A04E|A03E+A03E/A03E\A03E;
                      RTS                                       ;;A051|A041+A041/A041\A041; Return
                                                                ;;                        ;
CODE_02A042:          JSR CODE_02A02C                           ;;A052|A042+A042/A042\A042;
CODE_02A045:          LDA.B #!SFX_BONK                          ;;A055|A045+A045/A045\A045; \ Play sound effect
                      STA.W !SPCIO0                             ;;A057|A047+A047/A047\A047; /
                      LDA.B #$0F                                ;;A05A|A04A+A04A/A04A\A04A;
                      JMP CODE_02A4E0                           ;;A05C|A04C+A04C/A04C\A04C;
                                                                ;;                        ;
                    + LDY.W DATA_029FA5,X                       ;;A05F|A04F+A04F/A04F\A04F;
                      LDA.W !ExtSpriteXSpeed,X                  ;;A062|A052+A052/A052\A052;
                      AND.B #$80                                ;;A065|A055+A055/A055\A055;
                      LSR A                                     ;;A067|A057+A057/A057\A057;
                      STA.B !_0                                 ;;A068|A058+A058/A058\A058;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A06A|A05A+A05A/A05A\A05A;
                      SEC                                       ;;A06D|A05D+A05D/A05D\A05D;
                      SBC.B !Layer1XPos                         ;;A06E|A05E+A05E/A05E\A05E;
                      CMP.B #$F8                                ;;A070|A060+A060/A060\A060;
                      BCS ADDR_02A0A9                           ;;A072|A062+A062/A062\A062;
                      STA.W !OAMTileXPos+$100,Y                 ;;A074|A064+A064/A064\A064;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A077|A067+A067/A067\A067;
                      SEC                                       ;;A07A|A06A+A06A/A06A\A06A;
                      SBC.B !Layer1YPos                         ;;A07B|A06B+A06B/A06B\A06B;
                      CMP.B #$F0                                ;;A07D|A06D+A06D/A06D\A06D;
                      BCS ADDR_02A0A9                           ;;A07F|A06F+A06F/A06F\A06F;
                      STA.W !OAMTileYPos+$100,Y                 ;;A081|A071+A071/A071\A071;
                      LDA.W !ExtSpritePriority,X                ;;A084|A074+A074/A074\A074;
                      STA.B !_1                                 ;;A087|A077+A077/A077\A077;
                      LDA.W !ExtSpriteMisc1765,X                ;;A089|A079+A079/A079\A079;
                      LSR A                                     ;;A08C|A07C+A07C/A07C\A07C;
                      LSR A                                     ;;A08D|A07D+A07D/A07D\A07D;
                      AND.B #$03                                ;;A08E|A07E+A07E/A07E\A07E;
                      TAX                                       ;;A090|A080+A080/A080\A080;
                      LDA.W FireballTiles,X                     ;;A091|A081+A081/A081\A081;
                      STA.W !OAMTileNo+$100,Y                   ;;A094|A084+A084/A084\A084;
                      LDA.W DATA_02A15F,X                       ;;A097|A087+A087/A087\A087;
                      EOR.B !_0                                 ;;A09A|A08A+A08A/A08A\A08A;
                      ORA.B !SpriteProperties                   ;;A09C|A08C+A08C/A08C\A08C;
                      STA.W !OAMTileAttr+$100,Y                 ;;A09E|A08E+A08E/A08E\A08E;
                      LDX.B !_1                                 ;;A0A1|A091+A091/A091\A091;
                      BEQ +                                     ;;A0A3|A093+A093/A093\A093;
                      AND.B #$CF                                ;;A0A5|A095+A095/A095\A095;
                      ORA.B #$10                                ;;A0A7|A097+A097/A097\A097;
                      STA.W !OAMTileAttr+$100,Y                 ;;A0A9|A099+A099/A099\A099;
                    + TYA                                       ;;A0AC|A09C+A09C/A09C\A09C;
                      LSR A                                     ;;A0AD|A09D+A09D/A09D\A09D;
                      LSR A                                     ;;A0AE|A09E+A09E/A09E\A09E;
                      TAY                                       ;;A0AF|A09F+A09F/A09F\A09F;
                      LDA.B #$00                                ;;A0B0|A0A0+A0A0/A0A0\A0A0;
                      STA.W !OAMTileSize+$40,Y                  ;;A0B2|A0A2+A0A2/A0A2\A0A2;
                      LDX.W !CurSpriteProcess                   ;;A0B5|A0A5+A0A5/A0A5\A0A5; X = Sprite index
                    - RTS                                       ;;A0B8|A0A8+A0A8/A0A8\A0A8; Return
                                                                ;;                        ;
ADDR_02A0A9:          JMP CODE_02A211                           ;;A0B9|A0A9+A0A9/A0A9\A0A9;
                                                                ;;                        ;
ProcessFireball:      TXA                                       ;;A0BC|A0AC+A0AC/A0AC\A0AC; \ Return every other frame
                      EOR.B !TrueFrame                          ;;A0BD|A0AD+A0AD/A0AD\A0AD;  |
                      AND.B #$03                                ;;A0BF|A0AF+A0AF/A0AF\A0AF;  |
                      BNE -                                     ;;A0C1|A0B1+A0B1/A0B1\A0B1; /
                      PHX                                       ;;A0C3|A0B3+A0B3/A0B3\A0B3;
                      TXY                                       ;;A0C4|A0B4+A0B4/A0B4\A0B4;
                      STY.W !TileGenerateTrackA                 ;;A0C5|A0B5+A0B5/A0B5\A0B5; $185E = Y = Extended sprite index
                      LDX.B #$09                                ;;A0C8|A0B8+A0B8/A0B8\A0B8; Loop over sprites:
FireRtLoopStart:      STX.W !CurSpriteProcess                   ;;A0CA|A0BA+A0BA/A0BA\A0BA;
                      LDA.W !SpriteStatus,X                     ;;A0CD|A0BD+A0BD/A0BD\A0BD; \ Skip current sprite if status < 8
                      CMP.B #$08                                ;;A0D0|A0C0+A0C0/A0C0\A0C0;  |
                      BCC FireRtNextSprite                      ;;A0D2|A0C2+A0C2/A0C2\A0C2; /
                      LDA.W !SpriteTweaker167A,X                ;;A0D4|A0C4+A0C4/A0C4\A0C4; \ Skip current sprite if...
                      AND.B #$02                                ;;A0D7|A0C7+A0C7/A0C7\A0C7;  | ...invincible to fire/cape/etc
                      ORA.W !SpriteOnYoshiTongue,X              ;;A0D9|A0C9+A0C9/A0C9\A0C9;  | ...sprite being eaten...
                      ORA.W !SpriteBehindScene,X                ;;A0DC|A0CC+A0CC/A0CC\A0CC;  | ...interactions disabled...
                      EOR.W !ExtSpritePriority,Y                ;;A0DF|A0CF+A0CF/A0CF\A0CF;
                      BNE FireRtNextSprite                      ;;A0E2|A0D2+A0D2/A0D2\A0D2; /
                      JSL GetSpriteClippingA                    ;;A0E4|A0D4+A0D4/A0D4\A0D4;
                      JSR CODE_02A547                           ;;A0E8|A0D8+A0D8/A0D8\A0D8;
                      JSL CheckForContact                       ;;A0EB|A0DB+A0DB/A0DB\A0DB;
                      BCC FireRtNextSprite                      ;;A0EF|A0DF+A0DF/A0DF\A0DF;
                      LDA.W !ExtSpriteNumber,Y                  ;;A0F1|A0E1+A0E1/A0E1\A0E1; \ if Yoshi fireball...
                      CMP.B #$11                                ;;A0F4|A0E4+A0E4/A0E4\A0E4;  |
                      BEQ +                                     ;;A0F6|A0E6+A0E6/A0E6\A0E6;  |
                      PHX                                       ;;A0F8|A0E8+A0E8/A0E8\A0E8;  |
                      TYX                                       ;;A0F9|A0E9+A0E9/A0E9\A0E9;  |
                      JSR CODE_02A045                           ;;A0FA|A0EA+A0EA/A0EA\A0EA;  | ...?
                      PLX                                       ;;A0FD|A0ED+A0ED/A0ED\A0ED; /
                    + LDA.W !SpriteTweaker166E,X                ;;A0FE|A0EE+A0EE/A0EE\A0EE; \ Skip sprite if fire killing is disabled
                      AND.B #$10                                ;;A101|A0F1+A0F1/A0F1\A0F1;  |
                      BNE FireRtNextSprite                      ;;A103|A0F3+A0F3/A0F3\A0F3; /
                      LDA.W !SpriteTweaker190F,X                ;;A105|A0F5+A0F5/A0F5\A0F5; \ Branch if takes 1 fireball to kill
                      AND.B #$08                                ;;A108|A0F8+A0F8/A0F8\A0F8;  |
                      BEQ TurnSpriteToCoin                      ;;A10A|A0FA+A0FA/A0FA\A0FA; /
                      INC.W !SpriteMisc1528,X                   ;;A10C|A0FC+A0FC/A0FC\A0FC; Increase times Chuck hit by fireball
                      LDA.W !SpriteMisc1528,X                   ;;A10F|A0FF+A0FF/A0FF\A0FF; \ If fire count >= 5, kill Chuck:
                      CMP.B #$05                                ;;A112|A102+A102/A102\A102;  |
                      BCC FireRtNextSprite                      ;;A114|A104+A104/A104\A104;  |
                      LDA.B #!SFX_SPLAT                         ;;A116|A106+A106/A106\A106;  | Play sound effect
                      STA.W !SPCIO0                             ;;A118|A108+A108/A108\A108;  |
                      LDA.B #$02                                ;;A11B|A10B+A10B/A10B\A10B;  | Sprite status = Killed
                      STA.W !SpriteStatus,X                     ;;A11D|A10D+A10D/A10D\A10D;  |
                      LDA.B #$D0                                ;;A120|A110+A110/A110\A110;  | Set death Y speed
                      STA.B !SpriteYSpeed,X                     ;;A122|A112+A112/A112\A112;  |
                      JSR SubHorzPosBnk2                        ;;A124|A114+A114/A114\A114;
                      LDA.W FireKillSpeedX,Y                    ;;A127|A117+A117/A117\A117;  | Set death X speed
                      STA.B !SpriteXSpeed,X                     ;;A12A|A11A+A11A/A11A\A11A;  |
                      LDA.B #$04                                ;;A12C|A11C+A11C/A11C\A11C;  | Increase points
                      JSL GivePoints                            ;;A12E|A11E+A11E/A11E\A11E;  |
                      BRA FireRtNextSprite                      ;;A132|A122+A122/A122\A122; /
                                                                ;;                        ;
TurnSpriteToCoin:     LDA.B #!SFX_KICK                          ;;A134|A124+A124/A124\A124; \ Turn sprite into coin:
                      STA.W !SPCIO0                             ;;A136|A126+A126/A126\A126;  | Play sound effect
                      LDA.B #$21                                ;;A139|A129+A129/A129\A129;  | Sprite = Moving Coin
                      STA.B !SpriteNumber,X                     ;;A13B|A12B+A12B/A12B\A12B;  |
                      LDA.B #$08                                ;;A13D|A12D+A12D/A12D\A12D;  | Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;A13F|A12F+A12F/A12F\A12F;  |
                      JSL InitSpriteTables                      ;;A142|A132+A132/A132\A132;  | Reset sprite tables
                      LDA.B #$D0                                ;;A146|A136+A136/A136\A136;  | Set upward speed
                      STA.B !SpriteYSpeed,X                     ;;A148|A138+A138/A138\A138;  |
                      JSR SubHorzPosBnk2                        ;;A14A|A13A+A13A/A13A\A13A;
                      TYA                                       ;;A14D|A13D+A13D/A13D\A13D;
                      EOR.B #$01                                ;;A14E|A13E+A13E/A13E\A13E;
                      STA.W !SpriteMisc157C,X                   ;;A150|A140+A140/A140\A140; /
FireRtNextSprite:     LDY.W !TileGenerateTrackA                 ;;A153|A143+A143/A143\A143;
                      DEX                                       ;;A156|A146+A146/A146\A146;
                      BMI +                                     ;;A157|A147+A147/A147\A147;
                      JMP FireRtLoopStart                       ;;A159|A149+A149/A149\A149;
                                                                ;;                        ;
                    + PLX                                       ;;A15C|A14C+A14C/A14C\A14C; $15E9 = Sprite index
                      STX.W !CurSpriteProcess                   ;;A15D|A14D+A14D/A14D\A14D; $15E9 = Sprite index
                      RTS                                       ;;A160|A150+A150/A150\A150; Return
                                                                ;;                        ;
                                                                ;;                        ;
FireKillSpeedX:       db $F0,$10                                ;;A161|A151+A151/A151\A151;
                                                                ;;                        ;
DATA_02A153:          db $90,$94,$98,$9C,$A0,$A4,$A8,$AC        ;;A163|A153+A153/A153\A153;
FireballTiles:        db $2C,$2D,$2C,$2D                        ;;A16B|A15B+A15B/A15B\A15B;
                                                                ;;                        ;
DATA_02A15F:          db $04,$04,$C4,$C4                        ;;A16F|A15F+A15F/A15F\A15F;
                                                                ;;                        ;
ReznorFireTiles:      db $26,$2A,$26,$2A                        ;;A173|A163+A163/A163\A163;
                                                                ;;                        ;
DATA_02A167:          db $35,$35,$F5,$F5                        ;;A177|A167+A167/A167\A167;
                                                                ;;                        ;
ReznorFireball:       LDA.B !SpriteLock                         ;;A17B|A16B+A16B/A16B\A16B;
                      BNE CODE_02A178                           ;;A17D|A16D+A16D/A16D\A16D;
                      JSR CODE_02B554                           ;;A17F|A16F+A16F/A16F\A16F;
                      JSR CODE_02B560                           ;;A182|A172+A172/A172\A172;
                      JSR CODE_02A3F6                           ;;A185|A175+A175/A175\A175;
CODE_02A178:          LDA.W !IRQNMICommand                      ;;A188|A178+A178/A178\A178;
                      BPL CODE_02A1A4                           ;;A18B|A17B+A17B/A17B\A17B;
                      JSR CODE_02A1A4                           ;;A18D|A17D+A17D/A17D\A17D;
                      LDY.W DATA_02A153,X                       ;;A190|A180+A180/A180\A180;
                      LDA.B !EffFrame                           ;;A193|A183+A183/A183\A183;
                      LSR A                                     ;;A195|A185+A185/A185\A185;
                      LSR A                                     ;;A196|A186+A186/A186\A186;
                      AND.B #$03                                ;;A197|A187+A187/A187\A187;
                      PHX                                       ;;A199|A189+A189/A189\A189;
                      TAX                                       ;;A19A|A18A+A18A/A18A\A18A;
                      LDA.W ReznorFireTiles,X                   ;;A19B|A18B+A18B/A18B\A18B;
                      STA.W !OAMTileNo,Y                        ;;A19E|A18E+A18E/A18E\A18E;
                      LDA.W DATA_02A167,X                       ;;A1A1|A191+A191/A191\A191;
                      EOR.B !_0                                 ;;A1A4|A194+A194/A194\A194;
                      STA.W !OAMTileAttr,Y                      ;;A1A6|A196+A196/A196\A196;
                      TYA                                       ;;A1A9|A199+A199/A199\A199;
                      LSR A                                     ;;A1AA|A19A+A19A/A19A\A19A;
                      LSR A                                     ;;A1AB|A19B+A19B/A19B\A19B;
                      TAX                                       ;;A1AC|A19C+A19C/A19C\A19C;
                      LDA.B #$02                                ;;A1AD|A19D+A19D/A19D\A19D;
                      STA.W !OAMTileSize,X                      ;;A1AF|A19F+A19F/A19F\A19F;
                      PLX                                       ;;A1B2|A1A2+A1A2/A1A2\A1A2;
                      RTS                                       ;;A1B3|A1A3+A1A3/A1A3\A1A3; Return
                                                                ;;                        ;
CODE_02A1A4:          LDY.W DATA_02A153,X                       ;;A1B4|A1A4+A1A4/A1A4\A1A4;
CODE_02A1A7:          LDA.W !ExtSpriteXSpeed,X                  ;;A1B7|A1A7+A1A7/A1A7\A1A7;
                      AND.B #$80                                ;;A1BA|A1AA+A1AA/A1AA\A1AA;
                      EOR.B #$80                                ;;A1BC|A1AC+A1AC/A1AC\A1AC;
                      LSR A                                     ;;A1BE|A1AE+A1AE/A1AE\A1AE;
                      STA.B !_0                                 ;;A1BF|A1AF+A1AF/A1AF\A1AF;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A1C1|A1B1+A1B1/A1B1\A1B1;
                      SEC                                       ;;A1C4|A1B4+A1B4/A1B4\A1B4;
                      SBC.B !Layer1XPos                         ;;A1C5|A1B5+A1B5/A1B5\A1B5;
                      STA.B !_1                                 ;;A1C7|A1B7+A1B7/A1B7\A1B7;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A1C9|A1B9+A1B9/A1B9\A1B9;
                      SBC.B !Layer1XPos+1                       ;;A1CC|A1BC+A1BC/A1BC\A1BC;
                      BNE CODE_02A211                           ;;A1CE|A1BE+A1BE/A1BE\A1BE;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A1D0|A1C0+A1C0/A1C0\A1C0;
                      SEC                                       ;;A1D3|A1C3+A1C3/A1C3\A1C3;
                      SBC.B !Layer1YPos                         ;;A1D4|A1C4+A1C4/A1C4\A1C4;
                      STA.B !_2                                 ;;A1D6|A1C6+A1C6/A1C6\A1C6;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A1D8|A1C8+A1C8/A1C8\A1C8;
                      SBC.B !Layer1YPos+1                       ;;A1DB|A1CB+A1CB/A1CB\A1CB;
                      BNE CODE_02A211                           ;;A1DD|A1CD+A1CD/A1CD\A1CD;
                      LDA.B !_2                                 ;;A1DF|A1CF+A1CF/A1CF\A1CF;
                      CMP.B #$F0                                ;;A1E1|A1D1+A1D1/A1D1\A1D1;
                      BCS CODE_02A211                           ;;A1E3|A1D3+A1D3/A1D3\A1D3;
                      STA.W !OAMTileYPos,Y                      ;;A1E5|A1D5+A1D5/A1D5\A1D5;
                      LDA.B !_1                                 ;;A1E8|A1D8+A1D8/A1D8\A1D8;
                      STA.W !OAMTileXPos,Y                      ;;A1EA|A1DA+A1DA/A1DA\A1DA;
                      LDA.W !ExtSpritePriority,X                ;;A1ED|A1DD+A1DD/A1DD\A1DD;
                      STA.B !_1                                 ;;A1F0|A1E0+A1E0/A1E0\A1E0;
                      LDA.B !EffFrame                           ;;A1F2|A1E2+A1E2/A1E2\A1E2;
                      LSR A                                     ;;A1F4|A1E4+A1E4/A1E4\A1E4;
                      LSR A                                     ;;A1F5|A1E5+A1E5/A1E5\A1E5;
                      AND.B #$03                                ;;A1F6|A1E6+A1E6/A1E6\A1E6;
                      TAX                                       ;;A1F8|A1E8+A1E8/A1E8\A1E8;
                      %LorW_X(LDA,FireballTiles)                ;;A1F9|A1E9+A1E9/A1E9\A1E9;
                      STA.W !OAMTileNo,Y                        ;;A1FD|A1EC+A1EC/A1EC\A1EC;
                      %LorW_X(LDA,DATA_02A15F)                  ;;A200|A1EF+A1EF/A1EF\A1EF;
                      EOR.B !_0                                 ;;A204|A1F2+A1F2/A1F2\A1F2;
                      ORA.B !SpriteProperties                   ;;A206|A1F4+A1F4/A1F4\A1F4;
                      STA.W !OAMTileAttr,Y                      ;;A208|A1F6+A1F6/A1F6\A1F6;
                      LDX.B !_1                                 ;;A20B|A1F9+A1F9/A1F9\A1F9;
                      BEQ +                                     ;;A20D|A1FB+A1FB/A1FB\A1FB;
                      AND.B #$CF                                ;;A20F|A1FD+A1FD/A1FD\A1FD;
                      ORA.B #$10                                ;;A211|A1FF+A1FF/A1FF\A1FF;
                      STA.W !OAMTileAttr,Y                      ;;A213|A201+A201/A201\A201;
                    + TYA                                       ;;A216|A204+A204/A204\A204;
                      LSR A                                     ;;A217|A205+A205/A205\A205;
                      LSR A                                     ;;A218|A206+A206/A206\A206;
                      TAY                                       ;;A219|A207+A207/A207\A207;
                      LDA.B #$00                                ;;A21A|A208+A208/A208\A208;
                      STA.W !OAMTileSize,Y                      ;;A21C|A20A+A20A/A20A\A20A;
                      LDX.W !CurSpriteProcess                   ;;A21F|A20D+A20D/A20D\A20D; X = Sprite index
                      RTS                                       ;;A222|A210+A210/A210\A210; Return
                                                                ;;                        ;
CODE_02A211:          LDA.B #$00                                ;;A223|A211+A211/A211\A211; \ Clear extended sprite
                      STA.W !ExtSpriteNumber,X                  ;;A225|A213+A213/A213\A213; /
                      RTS                                       ;;A228|A216+A216/A216\A216; Return
                                                                ;;                        ;
                                                                ;;                        ;
SmallFlameTiles:      db $AC,$AD                                ;;A229|A217+A217/A217\A217;
                                                                ;;                        ;
FlameRemnant:         LDA.B !SpriteLock                         ;;A22B|A219+A219/A219\A219;
                      BNE CODE_02A22F                           ;;A22D|A21B+A21B/A21B\A21B;
                      INC.W !ExtSpriteMisc1765,X                ;;A22F|A21D+A21D/A21D\A21D;
                      LDA.W !ExtSpriteMisc176F,X                ;;A232|A220+A220/A220\A220;
                      BEQ CODE_02A211                           ;;A235|A223+A223/A223\A223;
                      CMP.B #$50                                ;;A237|A225+A225/A225\A225;
                      BCS CODE_02A22F                           ;;A239|A227+A227/A227\A227;
                      AND.B #$01                                ;;A23B|A229+A229/A229\A229;
                      BNE Return02A253                          ;;A23D|A22B+A22B/A22B\A22B;
                      BEQ +                                     ;;A23F|A22D+A22D/A22D\A22D;
CODE_02A22F:          JSR CODE_02A3F6                           ;;A241|A22F+A22F/A22F\A22F;
                    + JSR CODE_02A1A4                           ;;A244|A232+A232/A232\A232;
                      LDY.W DATA_02A153,X                       ;;A247|A235+A235/A235\A235;
                      LDA.W !ExtSpriteMisc1765,X                ;;A24A|A238+A238/A238\A238;
                      LSR A                                     ;;A24D|A23B+A23B/A23B\A23B;
                      LSR A                                     ;;A24E|A23C+A23C/A23C\A23C;
                      AND.B #$01                                ;;A24F|A23D+A23D/A23D\A23D;
                      TAX                                       ;;A251|A23F+A23F/A23F\A23F;
                      %LorW_X(LDA,SmallFlameTiles)              ;;A252|A240+A240/A240\A240;
                      STA.W !OAMTileNo,Y                        ;;A256|A243+A243/A243\A243;
                      LDA.W !OAMTileAttr,Y                      ;;A259|A246+A246/A246\A246;
                      AND.B #$3F                                ;;A25C|A249+A249/A249\A249;
                      ORA.B #$05                                ;;A25E|A24B+A24B/A24B\A24B;
                      STA.W !OAMTileAttr,Y                      ;;A260|A24D+A24D/A24D\A24D;
                      LDX.W !CurSpriteProcess                   ;;A263|A250+A250/A250\A250; X = Sprite index
Return02A253:         RTS                                       ;;A266|A253+A253/A253\A253; Return
                                                                ;;                        ;
Baseball:             LDA.B !SpriteLock                         ;;A267|A254+A254/A254\A254;
                      BNE CODE_02A26A                           ;;A269|A256+A256/A256\A256;
                      JSR CODE_02B554                           ;;A26B|A258+A258/A258\A258;
                      INC.W !ExtSpriteMisc1765,X                ;;A26E|A25B+A25B/A25B\A25B;
                      LDA.B !TrueFrame                          ;;A271|A25E+A25E/A25E\A25E;
                      AND.B #$01                                ;;A273|A260+A260/A260\A260;
                      BNE +                                     ;;A275|A262+A262/A262\A262;
                      INC.W !ExtSpriteMisc1765,X                ;;A277|A264+A264/A264\A264;
                    + JSR CODE_02A3F6                           ;;A27A|A267+A267/A267\A267;
CODE_02A26A:          LDA.W !ExtSpriteNumber,X                  ;;A27D|A26A+A26A/A26A\A26A;
                      CMP.B #$0D                                ;;A280|A26D+A26D/A26D\A26D;
                      BNE CODE_02A2C3                           ;;A282|A26F+A26F/A26F\A26F;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A284|A271+A271/A271\A271;
                      SEC                                       ;;A287|A274+A274/A274\A274;
                      SBC.B !Layer1XPos                         ;;A288|A275+A275/A275\A275;
                      STA.B !_0                                 ;;A28A|A277+A277/A277\A277;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A28C|A279+A279/A279\A279;
                      SBC.B !Layer1XPos+1                       ;;A28F|A27C+A27C/A27C\A27C;
                      BEQ CODE_02A287                           ;;A291|A27E+A27E/A27E\A27E;
                      EOR.W !ExtSpriteXSpeed,X                  ;;A293|A280+A280/A280\A280;
                      BPL CODE_02A2BF                           ;;A296|A283+A283/A283\A283;
                      BMI Return02A2BE                          ;;A298|A285+A285/A285\A285;
CODE_02A287:          LDY.W DATA_02A153,X                       ;;A29A|A287+A287/A287\A287;
                      LDA.B !_0                                 ;;A29D|A28A+A28A/A28A\A28A;
                      STA.W !OAMTileXPos,Y                      ;;A29F|A28C+A28C/A28C\A28C;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A2A2|A28F+A28F/A28F\A28F;
                      SEC                                       ;;A2A5|A292+A292/A292\A292;
                      SBC.B !Layer1YPos                         ;;A2A6|A293+A293/A293\A293;
                      STA.B !_1                                 ;;A2A8|A295+A295/A295\A295;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A2AA|A297+A297/A297\A297;
                      SBC.B !Layer1YPos+1                       ;;A2AD|A29A+A29A/A29A\A29A;
                      BNE CODE_02A2BF                           ;;A2AF|A29C+A29C/A29C\A29C;
                      LDA.B !_1                                 ;;A2B1|A29E+A29E/A29E\A29E;
                      STA.W !OAMTileYPos,Y                      ;;A2B3|A2A0+A2A0/A2A0\A2A0;
                      LDA.B #$AD                                ;;A2B6|A2A3+A2A3/A2A3\A2A3;
                      STA.W !OAMTileNo,Y                        ;;A2B8|A2A5+A2A5/A2A5\A2A5;
                      LDA.B !EffFrame                           ;;A2BB|A2A8+A2A8/A2A8\A2A8;
                      ASL A                                     ;;A2BD|A2AA+A2AA/A2AA\A2AA;
                      ASL A                                     ;;A2BE|A2AB+A2AB/A2AB\A2AB;
                      ASL A                                     ;;A2BF|A2AC+A2AC/A2AC\A2AC;
                      ASL A                                     ;;A2C0|A2AD+A2AD/A2AD\A2AD;
                      AND.B #$C0                                ;;A2C1|A2AE+A2AE/A2AE\A2AE;
                      ORA.B #$39                                ;;A2C3|A2B0+A2B0/A2B0\A2B0;
                      STA.W !OAMTileAttr,Y                      ;;A2C5|A2B2+A2B2/A2B2\A2B2;
                      TYA                                       ;;A2C8|A2B5+A2B5/A2B5\A2B5;
                      LSR A                                     ;;A2C9|A2B6+A2B6/A2B6\A2B6;
                      LSR A                                     ;;A2CA|A2B7+A2B7/A2B7\A2B7;
                      TAY                                       ;;A2CB|A2B8+A2B8/A2B8\A2B8;
                      LDA.B #$00                                ;;A2CC|A2B9+A2B9/A2B9\A2B9;
                      STA.W !OAMTileSize,Y                      ;;A2CE|A2BB+A2BB/A2BB\A2BB;
Return02A2BE:         RTS                                       ;;A2D1|A2BE+A2BE/A2BE\A2BE; Return
                                                                ;;                        ;
CODE_02A2BF:          STZ.W !ExtSpriteNumber,X                  ;;A2D2|A2BF+A2BF/A2BF\A2BF; Clear extended sprite
                      RTS                                       ;;A2D5|A2C2+A2C2/A2C2\A2C2; Return
                                                                ;;                        ;
CODE_02A2C3:          JSR CODE_02A317                           ;;A2D6|A2C3+A2C3/A2C3\A2C3;
                      LDA.W !OAMTileNo,Y                        ;;A2D9|A2C6+A2C6/A2C6\A2C6;
                      CMP.B #$26                                ;;A2DC|A2C9+A2C9/A2C9\A2C9;
                      LDA.B #$80                                ;;A2DE|A2CB+A2CB/A2CB\A2CB;
                      BCS +                                     ;;A2E0|A2CD+A2CD/A2CD\A2CD;
                      LDA.B #$82                                ;;A2E2|A2CF+A2CF/A2CF\A2CF;
                    + STA.W !OAMTileNo,Y                        ;;A2E4|A2D1+A2D1/A2D1\A2D1;
                      LDA.W !OAMTileAttr,Y                      ;;A2E7|A2D4+A2D4/A2D4\A2D4;
                      AND.B #$F1                                ;;A2EA|A2D7+A2D7/A2D7\A2D7;
                      ORA.B #$02                                ;;A2EC|A2D9+A2D9/A2D9\A2D9;
                      STA.W !OAMTileAttr,Y                      ;;A2EE|A2DB+A2DB/A2DB\A2DB;
                      RTS                                       ;;A2F1|A2DE+A2DE/A2DE\A2DE; Return
                                                                ;;                        ;
                                                                ;;                        ;
HammerTiles:          db $08,$6D,$6D,$08,$08,$6D,$6D,$08        ;;A2F2|A2DF+A2DF/A2DF\A2DF;
HammerGfxProp:        db $47,$47,$07,$07,$87,$87,$C7,$C7        ;;A2FA|A2E7+A2E7/A2E7\A2E7;
                                                                ;;                        ;
Hammer:               LDA.B !SpriteLock                         ;;A302|A2EF+A2EF/A2EF\A2EF;
                      BNE CODE_02A30C                           ;;A304|A2F1+A2F1/A2F1\A2F1;
                      JSR CODE_02B554                           ;;A306|A2F3+A2F3/A2F3\A2F3;
                      JSR CODE_02B560                           ;;A309|A2F6+A2F6/A2F6\A2F6;
                      LDA.W !ExtSpriteYSpeed,X                  ;;A30C|A2F9+A2F9/A2F9\A2F9;
                      CMP.B #$40                                ;;A30F|A2FC+A2FC/A2FC\A2FC;
                      BPL +                                     ;;A311|A2FE+A2FE/A2FE\A2FE;
                      INC.W !ExtSpriteYSpeed,X                  ;;A313|A300+A300/A300\A300;
                      INC.W !ExtSpriteYSpeed,X                  ;;A316|A303+A303/A303\A303;
                    + JSR CODE_02A3F6                           ;;A319|A306+A306/A306\A306;
                      INC.W !ExtSpriteMisc1765,X                ;;A31C|A309+A309/A309\A309;
CODE_02A30C:          LDA.W !ExtSpriteNumber,X                  ;;A31F|A30C+A30C/A30C\A30C;
                      CMP.B #$0B                                ;;A322|A30F+A30F/A30F\A30F; \ Piranha fireball GFX routine
                      BNE CODE_02A317                           ;;A324|A311+A311/A311\A311; /
                      JSR CODE_02A178                           ;;A326|A313+A313/A313\A313;
                      RTS                                       ;;A329|A316+A316/A316\A316; Return
                                                                ;;                        ;
CODE_02A317:          JSR CODE_02A1A4                           ;;A32A|A317+A317/A317\A317;
                      LDY.W DATA_02A153,X                       ;;A32D|A31A+A31A/A31A\A31A;
                      LDA.W !ExtSpriteMisc1765,X                ;;A330|A31D+A31D/A31D\A31D;
                      LSR A                                     ;;A333|A320+A320/A320\A320;
                      LSR A                                     ;;A334|A321+A321/A321\A321;
                      LSR A                                     ;;A335|A322+A322/A322\A322;
                      AND.B #$07                                ;;A336|A323+A323/A323\A323;
                      PHX                                       ;;A338|A325+A325/A325\A325;
                      TAX                                       ;;A339|A326+A326/A326\A326;
                      %LorW_X(LDA,HammerTiles)                  ;;A33A|A327+A327/A327\A327;
                      STA.W !OAMTileNo,Y                        ;;A33E|A32A+A32A/A32A\A32A;
                      %LorW_X(LDA,HammerGfxProp)                ;;A341|A32D+A32D/A32D\A32D;
                      EOR.B !_0                                 ;;A345|A330+A330/A330\A330;
                      EOR.B #$40                                ;;A347|A332+A332/A332\A332;
                      ORA.B !SpriteProperties                   ;;A349|A334+A334/A334\A334;
                      STA.W !OAMTileAttr,Y                      ;;A34B|A336+A336/A336\A336;
                      TYA                                       ;;A34E|A339+A339/A339\A339;
                      LSR A                                     ;;A34F|A33A+A33A/A33A\A33A;
                      LSR A                                     ;;A350|A33B+A33B/A33B\A33B;
                      TAX                                       ;;A351|A33C+A33C/A33C\A33C;
                      LDA.B #$02                                ;;A352|A33D+A33D/A33D\A33D;
                      STA.W !OAMTileSize,X                      ;;A354|A33F+A33F/A33F\A33F;
                      PLX                                       ;;A357|A342+A342/A342\A342;
                      RTS                                       ;;A358|A343+A343/A343\A343; Return
                                                                ;;                        ;
                    - JMP CODE_02A211                           ;;A359|A344+A344/A344\A344;
                                                                ;;                        ;
                                                                ;;                        ;
DustCloudTiles:       db $66,$64,$60,$62                        ;;A35C|A347+A347/A347\A347;
                                                                ;;                        ;
DATA_02A34B:          db $00,$40,$C0,$80                        ;;A360|A34B+A34B/A34B\A34B;
                                                                ;;                        ;
SmokePuff:            LDA.W !ExtSpriteMisc176F,X                ;;A364|A34F+A34F/A34F\A34F;
                      BEQ -                                     ;;A367|A352+A352/A352\A352;
                      LDA.W !ReznorOAMIndex                     ;;A369|A354+A354/A354\A354;
                      BNE CODE_02A362                           ;;A36C|A357+A357/A357\A357;
                      LDA.W !IRQNMICommand                      ;;A36E|A359+A359/A359\A359;
                      BPL CODE_02A362                           ;;A371|A35C+A35C/A35C\A35C;
                      AND.B #$40                                ;;A373|A35E+A35E/A35E\A35E;
                      BNE ADDR_02A3B1                           ;;A375|A360+A360/A360\A360;
CODE_02A362:          LDY.W DATA_02A153,X                       ;;A377|A362+A362/A362\A362;
                      CPX.B #$08                                ;;A37A|A365+A365/A365\A365;
                      BCC +                                     ;;A37C|A367+A367/A367\A367;
                      LDY.W DATA_029FA3,X                       ;;A37E|A369+A369/A369\A369;
                    + LDA.W !ExtSpriteXPosLow,X                 ;;A381|A36C+A36C/A36C\A36C;
                      SEC                                       ;;A384|A36F+A36F/A36F\A36F;
                      SBC.B !Layer1XPos                         ;;A385|A370+A370/A370\A370;
                      CMP.B #$F8                                ;;A387|A372+A372/A372\A372;
                      BCS CODE_02A3AE                           ;;A389|A374+A374/A374\A374;
                      STA.W !OAMTileXPos,Y                      ;;A38B|A376+A376/A376\A376;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A38E|A379+A379/A379\A379;
                      SEC                                       ;;A391|A37C+A37C/A37C\A37C;
                      SBC.B !Layer1YPos                         ;;A392|A37D+A37D/A37D\A37D;
                      CMP.B #$F0                                ;;A394|A37F+A37F/A37F\A37F;
                      BCS CODE_02A3AE                           ;;A396|A381+A381/A381\A381;
                      STA.W !OAMTileYPos,Y                      ;;A398|A383+A383/A383\A383;
                      LDA.W !ExtSpriteMisc176F,X                ;;A39B|A386+A386/A386\A386;
                      LSR A                                     ;;A39E|A389+A389/A389\A389;
                      LSR A                                     ;;A39F|A38A+A38A/A38A\A38A;
                      TAX                                       ;;A3A0|A38B+A38B/A38B\A38B;
                      %LorW_X(LDA,DustCloudTiles)               ;;A3A1|A38C+A38C/A38C\A38C;
                      STA.W !OAMTileNo,Y                        ;;A3A5|A38F+A38F/A38F\A38F;
                      LDA.B !EffFrame                           ;;A3A8|A392+A392/A392\A392;
                      LSR A                                     ;;A3AA|A394+A394/A394\A394;
                      LSR A                                     ;;A3AB|A395+A395/A395\A395;
                      AND.B #$03                                ;;A3AC|A396+A396/A396\A396;
                      TAX                                       ;;A3AE|A398+A398/A398\A398;
                      %LorW_X(LDA,DATA_02A34B)                  ;;A3AF|A399+A399/A399\A399;
                      ORA.B !SpriteProperties                   ;;A3B3|A39C+A39C/A39C\A39C;
                      STA.W !OAMTileAttr,Y                      ;;A3B5|A39E+A39E/A39E\A39E;
                      TYA                                       ;;A3B8|A3A1+A3A1/A3A1\A3A1;
                      LSR A                                     ;;A3B9|A3A2+A3A2/A3A2\A3A2;
                      LSR A                                     ;;A3BA|A3A3+A3A3/A3A3\A3A3;
                      TAY                                       ;;A3BB|A3A4+A3A4/A3A4\A3A4;
                      LDA.B #$02                                ;;A3BC|A3A5+A3A5/A3A5\A3A5;
                      STA.W !OAMTileSize,Y                      ;;A3BE|A3A7+A3A7/A3A7\A3A7;
                      LDX.W !CurSpriteProcess                   ;;A3C1|A3AA+A3AA/A3AA\A3AA; X = Sprite index
                      RTS                                       ;;A3C4|A3AD+A3AD/A3AD\A3AD; Return
                                                                ;;                        ;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
CODE_02A3AE:          JML CODE_02A211                           ;;A3C5                    ;
                   else                               ;<  ELSE  ;;------------------------; U, SS, E0, & E1
CODE_02A3AE:          JMP CODE_02A211                           ;;    |A3AE+A3AE/A3AE\A3AE;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
ADDR_02A3B1:          LDY.W DATA_029FA5,X                       ;;A3C9|A3B1+A3B1/A3B1\A3B1;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A3CC|A3B4+A3B4/A3B4\A3B4;
                      SEC                                       ;;A3CF|A3B7+A3B7/A3B7\A3B7;
                      SBC.B !Layer1XPos                         ;;A3D0|A3B8+A3B8/A3B8\A3B8;
                      CMP.B #$F8                                ;;A3D2|A3BA+A3BA/A3BA\A3BA;
                      BCS CODE_02A3AE                           ;;A3D4|A3BC+A3BC/A3BC\A3BC;
                      STA.W !OAMTileXPos+$100,Y                 ;;A3D6|A3BE+A3BE/A3BE\A3BE;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A3D9|A3C1+A3C1/A3C1\A3C1;
                      SEC                                       ;;A3DC|A3C4+A3C4/A3C4\A3C4;
                      SBC.B !Layer1YPos                         ;;A3DD|A3C5+A3C5/A3C5\A3C5;
                      CMP.B #$F0                                ;;A3DF|A3C7+A3C7/A3C7\A3C7;
                      BCS CODE_02A3AE                           ;;A3E1|A3C9+A3C9/A3C9\A3C9;
                      STA.W !OAMTileYPos+$100,Y                 ;;A3E3|A3CB+A3CB/A3CB\A3CB;
                      LDA.W !ExtSpriteMisc176F,X                ;;A3E6|A3CE+A3CE/A3CE\A3CE;
                      LSR A                                     ;;A3E9|A3D1+A3D1/A3D1\A3D1;
                      LSR A                                     ;;A3EA|A3D2+A3D2/A3D2\A3D2;
                      TAX                                       ;;A3EB|A3D3+A3D3/A3D3\A3D3;
                      %LorW_X(LDA,DustCloudTiles)               ;;A3EC|A3D4+A3D4/A3D4\A3D4;
                      STA.W !OAMTileNo+$100,Y                   ;;A3F0|A3D7+A3D7/A3D7\A3D7;
                      LDA.B !EffFrame                           ;;A3F3|A3DA+A3DA/A3DA\A3DA;
                      LSR A                                     ;;A3F5|A3DC+A3DC/A3DC\A3DC;
                      LSR A                                     ;;A3F6|A3DD+A3DD/A3DD\A3DD;
                      AND.B #$03                                ;;A3F7|A3DE+A3DE/A3DE\A3DE;
                      TAX                                       ;;A3F9|A3E0+A3E0/A3E0\A3E0;
                      %LorW_X(LDA,DATA_02A34B)                  ;;A3FA|A3E1+A3E1/A3E1\A3E1;
                      ORA.B !SpriteProperties                   ;;A3FE|A3E4+A3E4/A3E4\A3E4;
                      STA.W !OAMTileAttr+$100,Y                 ;;A400|A3E6+A3E6/A3E6\A3E6;
                      LDX.W !CurSpriteProcess                   ;;A403|A3E9+A3E9/A3E9\A3E9; X = Sprite index
                      TYA                                       ;;A406|A3EC+A3EC/A3EC\A3EC;
                      LSR A                                     ;;A407|A3ED+A3ED/A3ED\A3ED;
                      LSR A                                     ;;A408|A3EE+A3EE/A3EE\A3EE;
                      TAY                                       ;;A409|A3EF+A3EF/A3EF\A3EF;
                      LDA.B #$02                                ;;A40A|A3F0+A3F0/A3F0\A3F0;
                      STA.W !OAMTileSize+$40,Y                  ;;A40C|A3F2+A3F2/A3F2\A3F2;
                      RTS                                       ;;A40F|A3F5+A3F5/A3F5\A3F5; Return
                                                                ;;                        ;
CODE_02A3F6:          LDA.W !PlayerBehindNet                    ;;A410|A3F6+A3F6/A3F6\A3F6;
                      EOR.W !ExtSpritePriority,X                ;;A413|A3F9+A3F9/A3F9\A3F9;
                      BNE Return02A468                          ;;A416|A3FC+A3FC/A3FC\A3FC;
                      JSL GetMarioClipping                      ;;A418|A3FE+A3FE/A3FE\A3FE;
                      JSR CODE_02A519                           ;;A41C|A402+A402/A402\A402;
                      JSL CheckForContact                       ;;A41F|A405+A405/A405\A405;
                      BCC Return02A468                          ;;A423|A409+A409/A409\A409;
                      LDA.W !ExtSpriteNumber,X                  ;;A425|A40B+A40B/A40B\A40B;
                      CMP.B #$0A                                ;;A428|A40E+A40E/A40E\A40E;
                      BNE CODE_02A469                           ;;A42A|A410+A410/A410\A410;
                      JSL CODE_05B34A                           ;;A42C|A412+A412/A412\A412;
                      INC.W !GameCloudCoinCount                 ;;A430|A416+A416/A416\A416;
                      STZ.W !ExtSpriteNumber,X                  ;;A433|A419+A419/A419\A419; Clear extended sprite
                      LDY.B #$03                                ;;A436|A41C+A41C/A41C\A41C;
ADDR_02A41E:          LDA.W !SmokeSpriteNumber,Y                ;;A438|A41E+A41E/A41E\A41E;
                      BEQ ADDR_02A427                           ;;A43B|A421+A421/A421\A421;
                      DEY                                       ;;A43D|A423+A423/A423\A423;
                      BPL ADDR_02A41E                           ;;A43E|A424+A424/A424\A424;
                      INY                                       ;;A440|A426+A426/A426\A426;
ADDR_02A427:          LDA.B #$05                                ;;A441|A427+A427/A427\A427;
                      STA.W !SmokeSpriteNumber,Y                ;;A443|A429+A429/A429\A429;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A446|A42C+A42C/A42C\A42C;
                      STA.W !SmokeSpriteXPos,Y                  ;;A449|A42F+A42F/A42F\A42F;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A44C|A432+A432/A432\A432;
                      STA.W !SmokeSpriteYPos,Y                  ;;A44F|A435+A435/A435\A435;
                      LDA.B #$0A                                ;;A452|A438+A438/A438\A438;
                      STA.W !SmokeSpriteTimer,Y                 ;;A454|A43A+A43A/A43A\A43A;
                      JSL CODE_02AD34                           ;;A457|A43D+A43D/A43D\A43D;
                      LDA.B #$05                                ;;A45B|A441+A441/A441\A441;
                      STA.W !ScoreSpriteNumber,Y                ;;A45D|A443+A443/A443\A443;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A460|A446+A446/A446\A446;
                      STA.W !ScoreSpriteYPosLow,Y               ;;A463|A449+A449/A449\A449;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A466|A44C+A44C/A44C\A44C;
                      STA.W !ScoreSpriteYPosHigh,Y              ;;A469|A44F+A44F/A44F\A44F;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A46C|A452+A452/A452\A452;
                      STA.W !ScoreSpriteXPosLow,Y               ;;A46F|A455+A455/A455\A455;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A472|A458+A458/A458\A458;
                      STA.W !ScoreSpriteXPosHigh,Y              ;;A475|A45B+A45B/A45B\A45B;
                      LDA.B #$30                                ;;A478|A45E+A45E/A45E\A45E;
                      STA.W !ScoreSpriteTimer,Y                 ;;A47A|A460+A460/A460\A460;
                      LDA.B #$00                                ;;A47D|A463+A463/A463\A463;
                      STA.W !ScoreSpriteLayer,Y                 ;;A47F|A465+A465/A465\A465;
Return02A468:         RTS                                       ;;A482|A468+A468/A468\A468; Return
                                                                ;;                        ;
CODE_02A469:          LDA.W !InvinsibilityTimer                 ;;A483|A469+A469/A469\A469; \ Branch if Mario has star
                      BNE CODE_02A4B5                           ;;A486|A46C+A46C/A46C\A46C; /
                      LDA.W !PlayerRidingYoshi                  ;;A488|A46E+A46E/A46E\A46E;
                      BEQ +                                     ;;A48B|A471+A471/A471\A471;
CODE_02A473:          PHX                                       ;;A48D|A473+A473/A473\A473;
                      LDX.W !CurrentYoshiSlot                   ;;A48E|A474+A474/A474\A474;
                      LDA.B #$10                                ;;A491|A477+A477/A477\A477;
                      STA.W !SpriteMisc163E-1,X                 ;;A493|A479+A479/A479\A479;
                      LDA.B #!SFX_YOSHIDRUMOFF                  ;;A496|A47C+A47C/A47C\A47C; \ Play sound effect
                      STA.W !SPCIO1                             ;;A498|A47E+A47E/A47E\A47E; /
                      LDA.B #!SFX_YOSHIHURT                     ;;A49B|A481+A481/A481\A481; \ Play sound effect
                      STA.W !SPCIO3                             ;;A49D|A483+A483/A483\A483; /
                      LDA.B #$02                                ;;A4A0|A486+A486/A486\A486;
                      STA.B !SpriteTableC2-1,X                  ;;A4A2|A488+A488/A488\A488;
                      STZ.W !PlayerRidingYoshi                  ;;A4A4|A48A+A48A/A48A\A48A;
                      STZ.W !CarryYoshiThruLvls                 ;;A4A7|A48D+A48D/A48D\A48D;
                      LDA.B #$C0                                ;;A4AA|A490+A490/A490\A490;
                      STA.B !PlayerYSpeed                       ;;A4AC|A492+A492/A492\A492;
                      STZ.B !PlayerXSpeed                       ;;A4AE|A494+A494/A494\A494;
                      LDY.W !SpriteMisc157C-1,X                 ;;A4B0|A496+A496/A496\A496;
                      LDA.W DATA_02A4B3,Y                       ;;A4B3|A499+A499/A499\A499;
                      STA.B !SpriteXSpeed-1,X                   ;;A4B6|A49C+A49C/A49C\A49C;
                      STZ.W !SpriteMisc1594-1,X                 ;;A4B8|A49E+A49E/A49E\A49E;
                      STZ.W !SpriteMisc151C-1,X                 ;;A4BB|A4A1+A4A1/A4A1\A4A1;
                      STZ.W !YoshiStartEatTimer                 ;;A4BE|A4A4+A4A4/A4A4\A4A4;
                      LDA.B #$30                                ;;A4C1|A4A7+A4A7/A4A7\A4A7;
                      STA.W !IFrameTimer                        ;;A4C3|A4A9+A4A9/A4A9\A4A9;
                      PLX                                       ;;A4C6|A4AC+A4AC/A4AC\A4AC;
                      RTS                                       ;;A4C7|A4AD+A4AD/A4AD\A4AD; Return
                                                                ;;                        ;
                    + JSL HurtMario                             ;;A4C8|A4AE+A4AE/A4AE\A4AE;
                      RTS                                       ;;A4CC|A4B2+A4B2/A4B2\A4B2; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02A4B3:          db $10,$F0                                ;;A4CD|A4B3+A4B3/A4B3\A4B3;
                                                                ;;                        ;
CODE_02A4B5:          LDA.W !ExtSpriteNumber,X                  ;;A4CF|A4B5+A4B5/A4B5\A4B5;
                      CMP.B #$04                                ;;A4D2|A4B8+A4B8/A4B8\A4B8;
                      BEQ CODE_02A4DE                           ;;A4D4|A4BA+A4BA/A4BA\A4BA;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A4D6|A4BC+A4BC/A4BC\A4BC;
                      SEC                                       ;;A4D9|A4BF+A4BF/A4BF\A4BF;
                      SBC.B #$04                                ;;A4DA|A4C0+A4C0/A4C0\A4C0;
                      STA.W !ExtSpriteXPosLow,X                 ;;A4DC|A4C2+A4C2/A4C2\A4C2;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A4DF|A4C5+A4C5/A4C5\A4C5;
                      SBC.B #$00                                ;;A4E2|A4C8+A4C8/A4C8\A4C8;
                      STA.W !ExtSpriteXPosHigh,X                ;;A4E4|A4CA+A4CA/A4CA\A4CA;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A4E7|A4CD+A4CD/A4CD\A4CD;
                      SEC                                       ;;A4EA|A4D0+A4D0/A4D0\A4D0;
                      SBC.B #$04                                ;;A4EB|A4D1+A4D1/A4D1\A4D1;
                      STA.W !ExtSpriteYPosLow,X                 ;;A4ED|A4D3+A4D3/A4D3\A4D3;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A4F0|A4D6+A4D6/A4D6\A4D6;
                      SBC.B #$00                                ;;A4F3|A4D9+A4D9/A4D9\A4D9;
                      STA.W !ExtSpriteYPosHigh,X                ;;A4F5|A4DB+A4DB/A4DB\A4DB;
CODE_02A4DE:          LDA.B #$07                                ;;A4F8|A4DE+A4DE/A4DE\A4DE;
CODE_02A4E0:          STA.W !ExtSpriteMisc176F,X                ;;A4FA|A4E0+A4E0/A4E0\A4E0;
                      LDA.B #$01                                ;;A4FD|A4E3+A4E3/A4E3\A4E3;
                      STA.W !ExtSpriteNumber,X                  ;;A4FF|A4E5+A4E5/A4E5\A4E5;
                      RTS                                       ;;A502|A4E8+A4E8/A4E8\A4E8; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02A4E9:          db $03,$03,$04,$03,$04,$00,$00,$00        ;;A503|A4E9+A4E9/A4E9\A4E9;
                      db $04,$03                                ;;A50B|A4F1+A4F1/A4F1\A4F1;
                                                                ;;                        ;
DATA_02A4F3:          db $03,$03,$03,$03,$04,$03,$04,$00        ;;A50D|A4F3+A4F3/A4F3\A4F3;
                      db $00,$00,$02,$03                        ;;A515|A4FB+A4FB/A4FB\A4FB;
                                                                ;;                        ;
DATA_02A4FF:          db $03,$03,$01,$01,$08,$01,$08,$00        ;;A519|A4FF+A4FF/A4FF\A4FF;
                      db $00,$0F,$08,$01                        ;;A521|A507+A507/A507\A507;
                                                                ;;                        ;
DATA_02A50B:          db $01,$01,$01,$01,$08,$01,$08,$00        ;;A525|A50B+A50B/A50B\A50B;
                      db $00,$0F,$0C,$01,$01,$01                ;;A52D|A513+A513/A513\A513;
                                                                ;;                        ;
CODE_02A519:          LDY.W !ExtSpriteNumber,X                  ;;A533|A519+A519/A519\A519;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A536|A51C+A51C/A51C\A51C;
                      CLC                                       ;;A539|A51F+A51F/A51F\A51F;
                      ADC.W DATA_02A4E9-2,Y                     ;;A53A|A520+A520/A520\A520;
                      STA.B !_4                                 ;;A53D|A523+A523/A523\A523;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A53F|A525+A525/A525\A525;
                      ADC.B #$00                                ;;A542|A528+A528/A528\A528;
                      STA.B !_A                                 ;;A544|A52A+A52A/A52A\A52A;
                      LDA.W DATA_02A4FF,Y                       ;;A546|A52C+A52C/A52C\A52C;
                      STA.B !_6                                 ;;A549|A52F+A52F/A52F\A52F;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A54B|A531+A531/A531\A531;
                      CLC                                       ;;A54E|A534+A534/A534\A534;
                      ADC.W DATA_02A4F3,Y                       ;;A54F|A535+A535/A535\A535;
                      STA.B !_5                                 ;;A552|A538+A538/A538\A538;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A554|A53A+A53A/A53A\A53A;
                      ADC.B #$00                                ;;A557|A53D+A53D/A53D\A53D;
                      STA.B !_B                                 ;;A559|A53F+A53F/A53F\A53F;
                      LDA.W DATA_02A50B,Y                       ;;A55B|A541+A541/A541\A541;
                      STA.B !_7                                 ;;A55E|A544+A544/A544\A544;
                      RTS                                       ;;A560|A546+A546/A546\A546; Return
                                                                ;;                        ;
CODE_02A547:          LDA.W !ExtSpriteXPosLow,Y                 ;;A561|A547+A547/A547\A547;
                      SEC                                       ;;A564|A54A+A54A/A54A\A54A;
                      SBC.B #$02                                ;;A565|A54B+A54B/A54B\A54B;
                      STA.B !_0                                 ;;A567|A54D+A54D/A54D\A54D;
                      LDA.W !ExtSpriteXPosHigh,Y                ;;A569|A54F+A54F/A54F\A54F;
                      SBC.B #$00                                ;;A56C|A552+A552/A552\A552;
                      STA.B !_8                                 ;;A56E|A554+A554/A554\A554;
                      LDA.B #$0C                                ;;A570|A556+A556/A556\A556;
                      STA.B !_2                                 ;;A572|A558+A558/A558\A558;
                      LDA.W !ExtSpriteYPosLow,Y                 ;;A574|A55A+A55A/A55A\A55A;
                      SEC                                       ;;A577|A55D+A55D/A55D\A55D;
                      SBC.B #$04                                ;;A578|A55E+A55E/A55E\A55E;
                      STA.B !_1                                 ;;A57A|A560+A560/A560\A560;
                      LDA.W !ExtSpriteYPosHigh,Y                ;;A57C|A562+A562/A562\A562;
                      SBC.B #$00                                ;;A57F|A565+A565/A565\A565;
                      STA.B !_9                                 ;;A581|A567+A567/A567\A567;
                      LDA.B #$13                                ;;A583|A569+A569/A569\A569;
                      STA.B !_3                                 ;;A585|A56B+A56B/A56B\A56B;
                      RTS                                       ;;A587|A56D+A56D/A56D\A56D; Return
                                                                ;;                        ;
CODE_02A56E:          STZ.B !_F                                 ;;A588|A56E+A56E/A56E\A56E;
                      STZ.B !_E                                 ;;A58A|A570+A570/A570\A570;
                      STZ.B !_B                                 ;;A58C|A572+A572/A572\A572;
                      STZ.W !SpriteBlockOffset                  ;;A58E|A574+A574/A574\A574;
                      LDA.W !ReznorOAMIndex                     ;;A591|A577+A577/A577\A577;
                      BNE CODE_02A5BC                           ;;A594|A57A+A57A/A57A\A57A;
                      LDA.W !IRQNMICommand                      ;;A596|A57C+A57C/A57C\A57C;
                      BPL CODE_02A5BC                           ;;A599|A57F+A57F/A57F\A57F;
                      AND.B #$40                                ;;A59B|A581+A581/A581\A581;
                      BEQ CODE_02A592                           ;;A59D|A583+A583/A583\A583;
                      LDA.W !IRQNMICommand                      ;;A59F|A585+A585/A585\A585;
                      CMP.B #$C1                                ;;A5A2|A588+A588/A588\A588;
                      BEQ CODE_02A5BC                           ;;A5A4|A58A+A58A/A58A\A58A;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A5A6|A58C+A58C/A58C\A58C;
                      CMP.B #$A8                                ;;A5A9|A58F+A58F/A58F\A58F;
                      RTS                                       ;;A5AB|A591+A591/A591\A591; Return
                                                                ;;                        ;
CODE_02A592:          LDA.W !ExtSpriteXPosLow,X                 ;;A5AC|A592+A592/A592\A592;
                      CLC                                       ;;A5AF|A595+A595/A595\A595;
                      ADC.B #$04                                ;;A5B0|A596+A596/A596\A596;
                      STA.W !BrSwingXDist                       ;;A5B2|A598+A598/A598\A598;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A5B5|A59B+A59B/A59B\A59B;
                      ADC.B #$00                                ;;A5B8|A59E+A59E/A59E\A59E;
                      STA.W !BrSwingXDist+1                     ;;A5BA|A5A0+A5A0/A5A0\A5A0;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A5BD|A5A3+A5A3/A5A3\A5A3;
                      CLC                                       ;;A5C0|A5A6+A5A6/A5A6\A5A6;
                      ADC.B #$08                                ;;A5C1|A5A7+A5A7/A5A7\A5A7;
                      STA.W !BrSwingYDist                       ;;A5C3|A5A9+A5A9/A5A9\A5A9;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A5C6|A5AC+A5AC/A5AC\A5AC;
                      ADC.B #$00                                ;;A5C9|A5AF+A5AF/A5AF\A5AF;
                      STA.W !BrSwingYDist+1                     ;;A5CB|A5B1+A5B1/A5B1\A5B1;
                      JSL CODE_01CC9D                           ;;A5CE|A5B4+A5B4/A5B4\A5B4;
                      LDX.W !CurSpriteProcess                   ;;A5D2|A5B8+A5B8/A5B8\A5B8; X = Sprite index
                      RTS                                       ;;A5D5|A5BB+A5BB/A5BB\A5BB; Return
                                                                ;;                        ;
CODE_02A5BC:          JSR CODE_02A611                           ;;A5D6|A5BC+A5BC/A5BC\A5BC;
                      ROL.B !_E                                 ;;A5D9|A5BF+A5BF/A5BF\A5BF;
                      LDA.W !Map16TileNumber                    ;;A5DB|A5C1+A5C1/A5C1\A5C1;
                      STA.B !_C                                 ;;A5DE|A5C4+A5C4/A5C4\A5C4;
                      LDA.B !ScreenMode                         ;;A5E0|A5C6+A5C6/A5C6\A5C6;
                      BPL +                                     ;;A5E2|A5C8+A5C8/A5C8\A5C8;
                      INC.B !_F                                 ;;A5E4|A5CA+A5CA/A5CA\A5CA;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A5E6|A5CC+A5CC/A5CC\A5CC;
                      PHA                                       ;;A5E9|A5CF+A5CF/A5CF\A5CF;
                      CLC                                       ;;A5EA|A5D0+A5D0/A5D0\A5D0;
                      ADC.B !Layer23XRelPos                     ;;A5EB|A5D1+A5D1/A5D1\A5D1;
                      STA.W !ExtSpriteXPosLow,X                 ;;A5ED|A5D3+A5D3/A5D3\A5D3;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A5F0|A5D6+A5D6/A5D6\A5D6;
                      PHA                                       ;;A5F3|A5D9+A5D9/A5D9\A5D9;
                      ADC.B !Layer23XRelPos+1                   ;;A5F4|A5DA+A5DA/A5DA\A5DA;
                      STA.W !ExtSpriteXPosHigh,X                ;;A5F6|A5DC+A5DC/A5DC\A5DC;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A5F9|A5DF+A5DF/A5DF\A5DF;
                      PHA                                       ;;A5FC|A5E2+A5E2/A5E2\A5E2;
                      CLC                                       ;;A5FD|A5E3+A5E3/A5E3\A5E3;
                      ADC.B !Layer23YRelPos                     ;;A5FE|A5E4+A5E4/A5E4\A5E4;
                      STA.W !ExtSpriteYPosLow,X                 ;;A600|A5E6+A5E6/A5E6\A5E6;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A603|A5E9+A5E9/A5E9\A5E9;
                      PHA                                       ;;A606|A5EC+A5EC/A5EC\A5EC;
                      ADC.B !Layer23YRelPos+1                   ;;A607|A5ED+A5ED/A5ED\A5ED;
                      STA.W !ExtSpriteYPosHigh,X                ;;A609|A5EF+A5EF/A5EF\A5EF;
                      JSR CODE_02A611                           ;;A60C|A5F2+A5F2/A5F2\A5F2;
                      ROL.B !_E                                 ;;A60F|A5F5+A5F5/A5F5\A5F5;
                      LDA.W !Map16TileNumber                    ;;A611|A5F7+A5F7/A5F7\A5F7;
                      STA.B !_D                                 ;;A614|A5FA+A5FA/A5FA\A5FA;
                      PLA                                       ;;A616|A5FC+A5FC/A5FC\A5FC;
                      STA.W !ExtSpriteYPosHigh,X                ;;A617|A5FD+A5FD/A5FD\A5FD;
                      PLA                                       ;;A61A|A600+A600/A600\A600;
                      STA.W !ExtSpriteYPosLow,X                 ;;A61B|A601+A601/A601\A601;
                      PLA                                       ;;A61E|A604+A604/A604\A604;
                      STA.W !ExtSpriteXPosHigh,X                ;;A61F|A605+A605/A605\A605;
                      PLA                                       ;;A622|A608+A608/A608\A608;
                      STA.W !ExtSpriteXPosLow,X                 ;;A623|A609+A609/A609\A609;
                    + LDA.B !_E                                 ;;A626|A60C+A60C/A60C\A60C;
                      CMP.B #$01                                ;;A628|A60E+A60E/A60E\A60E;
                      RTS                                       ;;A62A|A610+A610/A610\A610; Return
                                                                ;;                        ;
CODE_02A611:          LDA.B !_F                                 ;;A62B|A611+A611/A611\A611;
                      INC A                                     ;;A62D|A613+A613/A613\A613;
                      AND.B !ScreenMode                         ;;A62E|A614+A614/A614\A614;
                      BEQ CODE_02A679                           ;;A630|A616+A616/A616\A616;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A632|A618+A618/A618\A618;
                      CLC                                       ;;A635|A61B+A61B/A61B\A61B;
                      ADC.B #$08                                ;;A636|A61C+A61C/A61C\A61C;
                      STA.B !TouchBlockYPos                     ;;A638|A61E+A61E/A61E\A61E;
                      AND.B #$F0                                ;;A63A|A620+A620/A620\A620;
                      STA.B !_0                                 ;;A63C|A622+A622/A622\A622;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A63E|A624+A624/A624\A624;
                      ADC.B #$00                                ;;A641|A627+A627/A627\A627;
                      CMP.B !LevelScrLength                     ;;A643|A629+A629/A629\A629;
                      BCS CODE_02A677                           ;;A645|A62B+A62B/A62B\A62B;
                      STA.B !_3                                 ;;A647|A62D+A62D/A62D\A62D;
                      STA.B !TouchBlockYPos+1                   ;;A649|A62F+A62F/A62F\A62F;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A64B|A631+A631/A631\A631;
                      CLC                                       ;;A64E|A634+A634/A634\A634;
                      ADC.B #$04                                ;;A64F|A635+A635/A635\A635;
                      STA.B !_1                                 ;;A651|A637+A637/A637\A637;
                      STA.B !TouchBlockXPos                     ;;A653|A639+A639/A639\A639;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A655|A63B+A63B/A63B\A63B;
                      ADC.B #$00                                ;;A658|A63E+A63E/A63E\A63E;
                      CMP.B #$02                                ;;A65A|A640+A640/A640\A640;
                      BCS CODE_02A677                           ;;A65C|A642+A642/A642\A642;
                      STA.B !_2                                 ;;A65E|A644+A644/A644\A644;
                      STA.B !TouchBlockXPos+1                   ;;A660|A646+A646/A646\A646;
                      LDA.B !_1                                 ;;A662|A648+A648/A648\A648;
                      LSR A                                     ;;A664|A64A+A64A/A64A\A64A;
                      LSR A                                     ;;A665|A64B+A64B/A64B\A64B;
                      LSR A                                     ;;A666|A64C+A64C/A64C\A64C;
                      LSR A                                     ;;A667|A64D+A64D/A64D\A64D;
                      ORA.B !_0                                 ;;A668|A64E+A64E/A64E\A64E;
                      STA.B !_0                                 ;;A66A|A650+A650/A650\A650;
                      LDX.B !_3                                 ;;A66C|A652+A652/A652\A652;
                      LDA.L DATA_00BA80,X                       ;;A66E|A654+A654/A654\A654;
                      LDY.B !_F                                 ;;A672|A658+A658/A658\A658;
                      BEQ +                                     ;;A674|A65A+A65A/A65A\A65A;
                      LDA.L DATA_00BA8E,X                       ;;A676|A65C+A65C/A65C\A65C;
                    + CLC                                       ;;A67A|A660+A660/A660\A660;
                      ADC.B !_0                                 ;;A67B|A661+A661/A661\A661;
                      STA.B !_5                                 ;;A67D|A663+A663/A663\A663;
                      LDA.L DATA_00BABC,X                       ;;A67F|A665+A665/A665\A665;
                      LDY.B !_F                                 ;;A683|A669+A669/A669\A669;
                      BEQ +                                     ;;A685|A66B+A66B/A66B\A66B;
                      LDA.L DATA_00BACA,X                       ;;A687|A66D+A66D/A66D\A66D;
                    + ADC.B !_2                                 ;;A68B|A671+A671/A671\A671;
                      STA.B !_6                                 ;;A68D|A673+A673/A673\A673;
                      BRA CODE_02A6DB                           ;;A68F|A675+A675/A675\A675;
                                                                ;;                        ;
CODE_02A677:          CLC                                       ;;A691|A677+A677/A677\A677;
                      RTS                                       ;;A692|A678+A678/A678\A678; Return
                                                                ;;                        ;
CODE_02A679:          LDA.W !ExtSpriteYPosLow,X                 ;;A693|A679+A679/A679\A679;
                      CLC                                       ;;A696|A67C+A67C/A67C\A67C;
                      ADC.B #$08                                ;;A697|A67D+A67D/A67D\A67D;
                      STA.B !TouchBlockYPos                     ;;A699|A67F+A67F/A67F\A67F;
                      AND.B #$F0                                ;;A69B|A681+A681/A681\A681;
                      STA.B !_0                                 ;;A69D|A683+A683/A683\A683;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A69F|A685+A685/A685\A685;
                      ADC.B #$00                                ;;A6A2|A688+A688/A688\A688;
                      STA.B !_2                                 ;;A6A4|A68A+A68A/A68A\A68A;
                      STA.B !TouchBlockYPos+1                   ;;A6A6|A68C+A68C/A68C\A68C;
                      LDA.B !_0                                 ;;A6A8|A68E+A68E/A68E\A68E;
                      SEC                                       ;;A6AA|A690+A690/A690\A690;
                      SBC.B !Layer1YPos                         ;;A6AB|A691+A691/A691\A691;
                      CMP.B #$F0                                ;;A6AD|A693+A693/A693\A693;
                      BCS CODE_02A677                           ;;A6AF|A695+A695/A695\A695;
                      LDA.W !ExtSpriteXPosLow,X                 ;;A6B1|A697+A697/A697\A697;
                      CLC                                       ;;A6B4|A69A+A69A/A69A\A69A;
                      ADC.B #$04                                ;;A6B5|A69B+A69B/A69B\A69B;
                      STA.B !_1                                 ;;A6B7|A69D+A69D/A69D\A69D;
                      STA.B !TouchBlockXPos                     ;;A6B9|A69F+A69F/A69F\A69F;
                      LDA.W !ExtSpriteXPosHigh,X                ;;A6BB|A6A1+A6A1/A6A1\A6A1;
                      ADC.B #$00                                ;;A6BE|A6A4+A6A4/A6A4\A6A4;
                      CMP.B !LevelScrLength                     ;;A6C0|A6A6+A6A6/A6A6\A6A6;
                      BCS CODE_02A677                           ;;A6C2|A6A8+A6A8/A6A8\A6A8;
                      STA.B !_3                                 ;;A6C4|A6AA+A6AA/A6AA\A6AA;
                      STA.B !TouchBlockXPos+1                   ;;A6C6|A6AC+A6AC/A6AC\A6AC;
                      LDA.B !_1                                 ;;A6C8|A6AE+A6AE/A6AE\A6AE;
                      LSR A                                     ;;A6CA|A6B0+A6B0/A6B0\A6B0;
                      LSR A                                     ;;A6CB|A6B1+A6B1/A6B1\A6B1;
                      LSR A                                     ;;A6CC|A6B2+A6B2/A6B2\A6B2;
                      LSR A                                     ;;A6CD|A6B3+A6B3/A6B3\A6B3;
                      ORA.B !_0                                 ;;A6CE|A6B4+A6B4/A6B4\A6B4;
                      STA.B !_0                                 ;;A6D0|A6B6+A6B6/A6B6\A6B6;
                      LDX.B !_3                                 ;;A6D2|A6B8+A6B8/A6B8\A6B8;
                      LDA.L DATA_00BA60,X                       ;;A6D4|A6BA+A6BA/A6BA\A6BA;
                      LDY.B !_F                                 ;;A6D8|A6BE+A6BE/A6BE\A6BE;
                      BEQ +                                     ;;A6DA|A6C0+A6C0/A6C0\A6C0;
                      LDA.L DATA_00BA70,X                       ;;A6DC|A6C2+A6C2/A6C2\A6C2;
                    + CLC                                       ;;A6E0|A6C6+A6C6/A6C6\A6C6;
                      ADC.B !_0                                 ;;A6E1|A6C7+A6C7/A6C7\A6C7;
                      STA.B !_5                                 ;;A6E3|A6C9+A6C9/A6C9\A6C9;
                      LDA.L DATA_00BA9C,X                       ;;A6E5|A6CB+A6CB/A6CB\A6CB;
                      LDY.B !_F                                 ;;A6E9|A6CF+A6CF/A6CF\A6CF;
                      BEQ +                                     ;;A6EB|A6D1+A6D1/A6D1\A6D1;
                      LDA.L DATA_00BAAC,X                       ;;A6ED|A6D3+A6D3/A6D3\A6D3;
                    + ADC.B !_2                                 ;;A6F1|A6D7+A6D7/A6D7\A6D7;
                      STA.B !_6                                 ;;A6F3|A6D9+A6D9/A6D9\A6D9;
CODE_02A6DB:          LDA.B #$7E                                ;;A6F5|A6DB+A6DB/A6DB\A6DB;
                      STA.B !_7                                 ;;A6F7|A6DD+A6DD/A6DD\A6DD;
                      LDX.W !CurSpriteProcess                   ;;A6F9|A6DF+A6DF/A6DF\A6DF; X = Sprite index
                      LDA.B [!_5]                               ;;A6FC|A6E2+A6E2/A6E2\A6E2;
                      STA.W !Map16TileNumber                    ;;A6FE|A6E4+A6E4/A6E4\A6E4;
                      INC.B !_7                                 ;;A701|A6E7+A6E7/A6E7\A6E7;
                      LDA.B [!_5]                               ;;A703|A6E9+A6E9/A6E9\A6E9;
                      JSL CODE_00F545                           ;;A705|A6EB+A6EB/A6EB\A6EB;
                      CMP.B #$00                                ;;A709|A6EF+A6EF/A6EF\A6EF;
                      BEQ CODE_02A729                           ;;A70B|A6F1+A6F1/A6F1\A6F1;
                      LDA.W !Map16TileNumber                    ;;A70D|A6F3+A6F3/A6F3\A6F3;
                      CMP.B #$11                                ;;A710|A6F6+A6F6/A6F6\A6F6;
                      BCC CODE_02A72B                           ;;A712|A6F8+A6F8/A6F8\A6F8;
                      CMP.B #$6E                                ;;A714|A6FA+A6FA/A6FA\A6FA;
                      BCC CODE_02A727                           ;;A716|A6FC+A6FC/A6FC\A6FC;
                      CMP.B #$D8                                ;;A718|A6FE+A6FE/A6FE\A6FE;
                      BCS CODE_02A735                           ;;A71A|A700+A700/A700\A700;
                      LDY.B !TouchBlockXPos                     ;;A71C|A702+A702/A702\A702;
                      STY.B !_A                                 ;;A71E|A704+A704/A704\A704;
                      LDY.B !TouchBlockYPos                     ;;A720|A706+A706/A706\A706;
                      STY.B !_C                                 ;;A722|A708+A708/A708\A708;
                      JSL CODE_00FA19                           ;;A724|A70A+A70A/A70A\A70A;
                      LDA.B !_0                                 ;;A728|A70E+A70E/A70E\A70E;
                      CMP.B #$0C                                ;;A72A|A710+A710/A710\A710;
                      BCS CODE_02A718                           ;;A72C|A712+A712/A712\A712;
                      CMP.B [!_5],Y                             ;;A72E|A714+A714/A714\A714;
                      BCC CODE_02A729                           ;;A730|A716+A716/A716\A716;
CODE_02A718:          LDA.B [!_5],Y                             ;;A732|A718+A718/A718\A718;
                      STA.W !SpriteBlockOffset                  ;;A734|A71A+A71A/A71A\A71A;
                      PHX                                       ;;A737|A71D+A71D/A71D\A71D;
                      LDX.B !_8                                 ;;A738|A71E+A71E/A71E\A71E;
                      LDA.L DATA_00E53D,X                       ;;A73A|A720+A720/A720\A720;
                      PLX                                       ;;A73E|A724+A724/A724\A724;
                      STA.B !_B                                 ;;A73F|A725+A725/A725\A725;
CODE_02A727:          SEC                                       ;;A741|A727+A727/A727\A727;
                      RTS                                       ;;A742|A728+A728/A728\A728; Return
                                                                ;;                        ;
CODE_02A729:          CLC                                       ;;A743|A729+A729/A729\A729;
                      RTS                                       ;;A744|A72A+A72A/A72A\A72A; Return
                                                                ;;                        ;
CODE_02A72B:          LDA.B !TouchBlockYPos                     ;;A745|A72B+A72B/A72B\A72B;
                      AND.B #$0F                                ;;A747|A72D+A72D/A72D\A72D;
                      CMP.B #$06                                ;;A749|A72F+A72F/A72F\A72F;
                      BCS CODE_02A729                           ;;A74B|A731+A731/A731\A731;
                      SEC                                       ;;A74D|A733+A733/A733\A733;
                      RTS                                       ;;A74E|A734+A734/A734\A734; Return
                                                                ;;                        ;
CODE_02A735:          LDA.B !TouchBlockYPos                     ;;A74F|A735+A735/A735\A735;
                      AND.B #$0F                                ;;A751|A737+A737/A737\A737;
                      CMP.B #$06                                ;;A753|A739+A739/A739\A739;
                      BCS CODE_02A729                           ;;A755|A73B+A73B/A73B\A73B;
                      LDA.W !ExtSpriteYPosLow,X                 ;;A757|A73D+A73D/A73D\A73D;
                      SEC                                       ;;A75A|A740+A740/A740\A740;
                      SBC.B #$02                                ;;A75B|A741+A741/A741\A741;
                      STA.W !ExtSpriteYPosLow,X                 ;;A75D|A743+A743/A743\A743;
                      LDA.W !ExtSpriteYPosHigh,X                ;;A760|A746+A746/A746\A746;
                      SBC.B #$00                                ;;A763|A749+A749/A749\A749;
                      STA.W !ExtSpriteYPosHigh,X                ;;A765|A74B+A74B/A74B\A74B;
                      JMP CODE_02A611                           ;;A768|A74E+A74E/A74E\A74E;
                                                                ;;                        ;
CODE_02A751:          PHB                                       ;;A76B|A751+A751/A751\A751; Called from bank 5
                      PHK                                       ;;A76C|A752+A752/A752\A752;
                      PLB                                       ;;A76D|A753+A753/A753\A753;
                      JSR CODE_02ABF2                           ;;A76E|A754+A754/A754\A754;
                      JSR CODE_02AC5C                           ;;A771|A757+A757/A757\A757;
                      LDA.W !IRQNMICommand                      ;;A774|A75A+A75A/A75A\A75A;
                      BMI +                                     ;;A777|A75D+A75D/A75D\A75D;
                      JSL RunSprites                            ;;A779|A75F+A75F/A75F\A75F;
                    + LDA.W !CarryYoshiThruLvls                 ;;A77D|A763+A763/A763\A763;
                      BEQ +                                     ;;A780|A766+A766/A766\A766;
                      LDA.W !RemoveYoshiFlag                    ;;A782|A768+A768/A768\A768;
                      BNE +                                     ;;A785|A76B+A76B/A76B\A76B;
                      JSL CODE_00FC7A                           ;;A787|A76D+A76D/A76D\A76D;
                    + PLB                                       ;;A78B|A771+A771/A771\A771;
                      RTL                                       ;;A78C|A772+A772/A772\A772; Return
                                                                ;;                        ;
                                                                ;;                        ;
SpriteSlotMax:        db $09,$05,$07,$07,$07,$06,$07,$06        ;;A78D|A773+A773/A773\A773;
                      db $06,$09,$08,$04,$07,$07,$07,$08        ;;A795|A77B+A77B/A77B\A77B;
                      db $09,$05,$05                            ;;A79D|A783+A783/A783\A783;
                                                                ;;                        ;
SpriteSlotMax1:       db $09,$07,$07,$01,$00,$01,$07,$06        ;;A7A0|A786+A786/A786\A786;
                      db $06,$00,$02,$00,$07,$01,$07,$08        ;;A7A8|A78E+A78E/A78E\A78E;
                      db $09,$07,$05                            ;;A7B0|A796+A796/A796\A796;
                                                                ;;                        ;
SpriteSlotMax2:       db $09,$07,$07,$01,$00,$06,$07,$06        ;;A7B3|A799+A799/A799\A799;
                      db $06,$00,$02,$00,$07,$01,$07,$08        ;;A7BB|A7A1+A7A1/A7A1\A7A1;
                      db $09,$07,$05                            ;;A7C3|A7A9+A7A9/A7A9\A7A9;
                                                                ;;                        ;
SpriteSlotStart:      db $FF,$FF,$00,$01,$00,$01,$FF,$01        ;;A7C6|A7AC+A7AC/A7AC\A7AC;
                      db $FF,$00,$FF,$00,$FF,$01,$FF,$FF        ;;A7CE|A7B4+A7B4/A7B4\A7B4;
                      db $FF,$FF,$FF                            ;;A7D6|A7BC+A7BC/A7BC\A7BC;
                                                                ;;                        ;
SpriteSlotStart1:     db $FF,$05,$FF,$FF,$FF,$FF,$FF,$01        ;;A7D9|A7BF+A7BF/A7BF\A7BF;
                      db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF        ;;A7E1|A7C7+A7C7/A7C7\A7C7;
                      db $FF,$05,$FF                            ;;A7E9|A7CF+A7CF/A7CF\A7CF;
                                                                ;;                        ;
ReservedSprite1:      db $FF,$5F,$54,$5E,$60,$28,$88,$FF        ;;A7EC|A7D2+A7D2/A7D2\A7D2;
                      db $FF,$C5,$86,$28,$FF,$90,$FF,$FF        ;;A7F4|A7DA+A7DA/A7DA\A7DA;
                      db $FF,$AE                                ;;A7FC|A7E2+A7E2/A7E2\A7E2;
                                                                ;;                        ;
ReservedSprite2:      db $FF,$64,$FF,$FF,$9F,$FF,$FF,$FF        ;;A7FE|A7E4+A7E4/A7E4\A7E4;
                      db $FF,$FF,$FF,$FF,$FF,$9F,$FF,$FF        ;;A806|A7EC+A7EC/A7EC\A7EC;
                      db $FF,$FF                                ;;A80E|A7F4+A7F4/A7F4\A7F4;
                                                                ;;                        ;
DATA_02A7F6:          db $D0,$00,$20                            ;;A810|A7F6+A7F6/A7F6\A7F6;
                                                                ;;                        ;
DATA_02A7F9:          db $FF,$00,$01                            ;;A813|A7F9+A7F9/A7F9\A7F9;
                                                                ;;                        ;
LoadSprFromLevel:     LDA.B !TrueFrame                          ;;A816|A7FC+A7FC/A7FC\A7FC; \ Return every other frame
                      AND.B #$01                                ;;A818|A7FE+A7FE/A7FE\A7FE;  |
                      BNE Return02A84B                          ;;A81A|A800+A800/A800\A800; /
LoadSprFromLvlNoFR:   LDY.B !Layer1ScrollDir                    ;;A81C|A802+A802/A802\A802; FR - framerule
                      LDA.B !ScreenMode                         ;;A81E|A804+A804/A804\A804; \ Branch if horizontal level
                      LSR A                                     ;;A820|A806+A806/A806\A806;  |
                      BCC LoadSprHorzLevel                      ;;A821|A807+A807/A807\A807; /
                      LDA.B !Layer1YPos                         ;;A823|A809+A809/A809\A809; \ Vertical level:
                      CLC                                       ;;A825|A80B+A80B/A80B\A80B;  | $00,$01 = Screen boundary Y + offset
                      ADC.W DATA_02A7F6,Y                       ;;A826|A80C+A80C/A80C\A80C;  |
                      AND.B #$F0                                ;;A829|A80F+A80F/A80F\A80F;  |
                      STA.B !_0                                 ;;A82B|A811+A811/A811\A811;  |
                      LDA.B !Layer1YPos+1                       ;;A82D|A813+A813/A813\A813;  |
                      BRA LoadSprPosDone                        ;;A82F|A815+A815/A815\A815; /
                                                                ;;                        ;
LoadSprHorzLevel:     LDA.B !Layer1XPos                         ;;A831|A817+A817/A817\A817; \ Horizontal level:
                      CLC                                       ;;A833|A819+A819/A819\A819;  | $00,$01 = Screen boundary X + offset
                      ADC.W DATA_02A7F6,Y                       ;;A834|A81A+A81A/A81A\A81A;  |
                      AND.B #$F0                                ;;A837|A81D+A81D/A81D\A81D;  |
                      STA.B !_0                                 ;;A839|A81F+A81F/A81F\A81F;  |
                      LDA.B !Layer1XPos+1                       ;;A83B|A821+A821/A821\A821;  |
LoadSprPosDone:       ADC.W DATA_02A7F9,Y                       ;;A83D|A823+A823/A823\A823;  |
                      BMI Return02A84B                          ;;A840|A826+A826/A826\A826;  |
                      STA.B !_1                                 ;;A842|A828+A828/A828\A828; /
                      LDX.B #$00                                ;;A844|A82A+A82A/A82A\A82A; X = #$00 (Number of sprite in level)
                      LDY.B #$01                                ;;A846|A82C+A82C/A82C\A82C; Y = #$01 (Index into level data)
LoadSpriteLoopStrt:   LDA.B [!SpriteDataPtr],Y                  ;;A848|A82E+A82E/A82E\A82E; Byte format: YYYYEEsy
                      CMP.B #$FF                                ;;A84A|A830+A830/A830\A830; \ Return when we encounter $FF, as it signals the end
                      BEQ Return02A84B                          ;;A84C|A832+A832/A832\A832; /
                      ASL A                                     ;;A84E|A834+A834/A834\A834; \ If 's' is set, $02 = #$10
                      ASL A                                     ;;A84F|A835+A835/A835\A835;  | Else, $02 = #$00
                      ASL A                                     ;;A850|A836+A836/A836\A836;  |
                      AND.B #$10                                ;;A851|A837+A837/A837\A837;  |
                      STA.B !_2                                 ;;A853|A839+A839/A839\A839; /
                      INY                                       ;;A855|A83B+A83B/A83B\A83B; Next byte
                      LDA.B [!SpriteDataPtr],Y                  ;;A856|A83C+A83C/A83C\A83C; Byte format: XXXXSSSS
                      AND.B #$0F                                ;;A858|A83E+A83E/A83E\A83E; \ Skip all sprites until we find one at the adjusted screen boundary:
                      ORA.B !_2                                 ;;A85A|A840+A840/A840\A840;  |
                      CMP.B !_1                                 ;;A85C|A842+A842/A842\A842;  | If sprite screen (sSSSS) < adjusted screen boundary...
                      BCS CODE_02A84C                           ;;A85E|A844+A844/A844\A844; / ...skip the sprite
LoadNextSprite:       INY                                       ;;A860|A846+A846/A846\A846; \ Move on to the next sprite
                      INY                                       ;;A861|A847+A847/A847\A847;  |
                      INX                                       ;;A862|A848+A848/A848\A848;  |
                      BRA LoadSpriteLoopStrt                    ;;A863|A849+A849/A849\A849; /
                                                                ;;                        ;
Return02A84B:         RTS                                       ;;A865|A84B+A84B/A84B\A84B; Return
                                                                ;;                        ;
CODE_02A84C:          BNE Return02A84B                          ;;A866|A84C+A84C/A84C\A84C; Return if sprite screen > adjusted screen boundary
                      LDA.B [!SpriteDataPtr],Y                  ;;A868|A84E+A84E/A84E\A84E; Byte format: XXXXSSSS
                      AND.B #$F0                                ;;A86A|A850+A850/A850\A850; \ Skip sprite if not right at the screen boundary
                      CMP.B !_0                                 ;;A86C|A852+A852/A852\A852;  |
                      BNE LoadNextSprite                        ;;A86E|A854+A854/A854\A854; /
                      LDA.W !SpriteLoadStatus,X                 ;;A870|A856+A856/A856\A856; \ This table has a flag for every sprite in the level (not just those onscreen)
                      BNE LoadNextSprite                        ;;A873|A859+A859/A859\A859; / Skip sprite if it's already been loaded/permanently killed
                      STX.B !_2                                 ;;A875|A85B+A85B/A85B\A85B; $02 = Number of sprite in level
                      INC.W !SpriteLoadStatus,X                 ;;A877|A85D+A85D/A85D\A85D; Mark sprite as loaded
                      INY                                       ;;A87A|A860+A860/A860\A860; Next byte
                      LDA.B [!SpriteDataPtr],Y                  ;;A87B|A861+A861/A861\A861; Byte format: Sprite number
                      STA.B !_5                                 ;;A87D|A863+A863/A863\A863; $05 = Sprite number
                      DEY                                       ;;A87F|A865+A865/A865\A865; Y = index to current loading sprite x-position
                      CMP.B #$E7                                ;;A880|A866+A866/A866\A866; \ Branch if sprite number < #$E7
                      BCC LoadSprNotScrollCmd                   ;;A882|A868+A868/A868\A868; /
                      LDA.W !Layer1ScrollCmd                    ;;A884|A86A+A86A/A86A\A86A;
                      ORA.W !Layer2ScrollCmd                    ;;A887|A86D+A86D/A86D\A86D;
                      BNE +                                     ;;A88A|A870+A870/A870\A870;
                      PHY                                       ;;A88C|A872+A872/A872\A872;
                      PHX                                       ;;A88D|A873+A873/A873\A873;
                      LDA.B !_5                                 ;;A88E|A874+A874/A874\A874; \ $143E = Type of scroll sprite
                      SEC                                       ;;A890|A876+A876/A876\A876;  | (Sprite number - #$E7)
                      SBC.B #$E7                                ;;A891|A877+A877/A877\A877;  |
                      STA.W !Layer1ScrollCmd                    ;;A893|A879+A879/A879\A879; /
                      DEY                                       ;;A896|A87C+A87C/A87C\A87C; Y = index to current loading sprite y-position
                      LDA.B [!SpriteDataPtr],Y                  ;;A897|A87D+A87D/A87D\A87D; Byte format: YYYYEEsy
                      LSR A                                     ;;A899|A87F+A87F/A87F\A87F;
                      LSR A                                     ;;A89A|A880+A880/A880\A880;
                      STA.W !Layer1ScrollBits                   ;;A89B|A881+A881/A881\A881;
                      JSL CODE_05BCD6                           ;;A89E|A884+A884/A884\A884;
                      PLX                                       ;;A8A2|A888+A888/A888\A888;
                      PLY                                       ;;A8A3|A889+A889/A889\A889;
                    + BRA LoadNextSprite                        ;;A8A4|A88A+A88A/A88A\A88A;
                                                                ;;                        ;
LoadSprNotScrollCmd:  CMP.B #$DE                                ;;A8A6|A88C+A88C/A88C\A88C; \ Branch if sprite number != 5 Eeries
                      BNE CODE_02A89C                           ;;A8A8|A88E+A88E/A88E\A88E; /
                      PHY                                       ;;A8AA|A890+A890/A890\A890;
                      PHX                                       ;;A8AB|A891+A891/A891\A891;
                      DEY                                       ;;A8AC|A892+A892/A892\A892;
                      STY.B !_3                                 ;;A8AD|A893+A893/A893\A893;
                      JSR Load5Eeries                           ;;A8AF|A895+A895/A895\A895;
                      PLX                                       ;;A8B2|A898+A898/A898\A898;
                      PLY                                       ;;A8B3|A899+A899/A899\A899;
LoadNextSprIndir:     BRA LoadNextSprite                        ;;A8B4|A89A+A89A/A89A\A89A;
                                                                ;;                        ;
CODE_02A89C:          CMP.B #$E0                                ;;A8B6|A89C+A89C/A89C\A89C; \ Branch if sprite number != 3 Platforms on Chain
                      BNE CODE_02A8AC                           ;;A8B8|A89E+A89E/A89E\A89E; /
                      PHY                                       ;;A8BA|A8A0+A8A0/A8A0\A8A0;
                      PHX                                       ;;A8BB|A8A1+A8A1/A8A1\A8A1;
                      DEY                                       ;;A8BC|A8A2+A8A2/A8A2\A8A2;
                      STY.B !_3                                 ;;A8BD|A8A3+A8A3/A8A3\A8A3;
                      JSR Load3Platforms                        ;;A8BF|A8A5+A8A5/A8A5\A8A5;
                      PLX                                       ;;A8C2|A8A8+A8A8/A8A8\A8A8;
                      PLY                                       ;;A8C3|A8A9+A8A9/A8A9\A8A9;
                      BRA LoadNextSprIndir                      ;;A8C4|A8AA+A8AA/A8AA\A8AA;
                                                                ;;                        ;
CODE_02A8AC:          CMP.B #$CB                                ;;A8C6|A8AC+A8AC/A8AC\A8AC; \ Branch if sprite number < #$CB
                      BCC CODE_02A8D4                           ;;A8C8|A8AE+A8AE/A8AE\A8AE; /
                      CMP.B #$DA                                ;;A8CA|A8B0+A8B0/A8B0\A8B0; \ Branch if sprite number >= #$DA
                      BCS CODE_02A8C0                           ;;A8CC|A8B2+A8B2/A8B2\A8B2; /
                      SEC                                       ;;A8CE|A8B4+A8B4/A8B4\A8B4; \ $18B9 = Type of generator
                      SBC.B #$CB                                ;;A8CF|A8B5+A8B5/A8B5\A8B5;  | (Sprite number - #$CA)
                      INC A                                     ;;A8D1|A8B7+A8B7/A8B7\A8B7;  |
                      STA.W !CurrentGenerator                   ;;A8D2|A8B8+A8B8/A8B8\A8B8; /
                      STZ.W !SpriteLoadStatus,X                 ;;A8D5|A8BB+A8BB/A8BB\A8BB; Allow sprite to be reloaded by level loading routine
                      BRA LoadNextSprIndir                      ;;A8D8|A8BE+A8BE/A8BE\A8BE;
                                                                ;;                        ;
CODE_02A8C0:          CMP.B #$E1                                ;;A8DA|A8C0+A8C0/A8C0\A8C0; \ Branch if sprite number < #$E1
                      BCC LoadShell                             ;;A8DC|A8C2+A8C2/A8C2\A8C2; /
                      PHX                                       ;;A8DE|A8C4+A8C4/A8C4\A8C4;
                      PHY                                       ;;A8DF|A8C5+A8C5/A8C5\A8C5;
                      DEY                                       ;;A8E0|A8C6+A8C6/A8C6\A8C6;
                      STY.B !_3                                 ;;A8E1|A8C7+A8C7/A8C7\A8C7;
                      JSR CODE_02AAC0                           ;;A8E3|A8C9+A8C9/A8C9\A8C9;
                      PLY                                       ;;A8E6|A8CC+A8CC/A8CC\A8CC;
                      PLX                                       ;;A8E7|A8CD+A8CD/A8CD\A8CD;
                      BRA LoadNextSprIndir                      ;;A8E8|A8CE+A8CE/A8CE\A8CE;
                                                                ;;                        ;
LoadShell:            LDA.B #$09                                ;;A8EA|A8D0+A8D0/A8D0\A8D0;
                      BRA LoadNormSprAltStatus                  ;;A8EC|A8D2+A8D2/A8D2\A8D2;
                                                                ;;                        ;
CODE_02A8D4:          CMP.B #$C9                                ;;A8EE|A8D4+A8D4/A8D4\A8D4; \ Branch if sprite number < #$C9
                      BCC LoadNormalSprite                      ;;A8F0|A8D6+A8D6/A8D6\A8D6; /
                      JSR LoadShooter                           ;;A8F2|A8D8+A8D8/A8D8\A8D8;
                      BRA LoadNextSprIndir                      ;;A8F5|A8DB+A8DB/A8DB\A8DB;
                                                                ;;                        ;
LoadNormalSprite:     LDA.B #$01                                ;;A8F7|A8DD+A8DD/A8DD\A8DD; \ $04 = #$01
LoadNormSprAltStatus: STA.B !_4                                 ;;A8F9|A8DF+A8DF/A8DF\A8DF; / Eventually goes into sprite status
                      DEY                                       ;;A8FB|A8E1+A8E1/A8E1\A8E1; Previous byte
                      STY.B !_3                                 ;;A8FC|A8E2+A8E2/A8E2\A8E2;
                      LDY.W !SpriteMemorySetting                ;;A8FE|A8E4+A8E4/A8E4\A8E4;
                      LDX.W SpriteSlotMax,Y                     ;;A901|A8E7+A8E7/A8E7\A8E7;
                      LDA.W SpriteSlotStart,Y                   ;;A904|A8EA+A8EA/A8EA\A8EA;
                      STA.B !_6                                 ;;A907|A8ED+A8ED/A8ED\A8ED;
                      LDA.B !_5                                 ;;A909|A8EF+A8EF/A8EF\A8EF;
                      CMP.W ReservedSprite1,Y                   ;;A90B|A8F1+A8F1/A8F1\A8F1;
                      BNE +                                     ;;A90E|A8F4+A8F4/A8F4\A8F4;
                      LDX.W SpriteSlotMax1,Y                    ;;A910|A8F6+A8F6/A8F6\A8F6;
                      LDA.W SpriteSlotStart1,Y                  ;;A913|A8F9+A8F9/A8F9\A8F9;
                      STA.B !_6                                 ;;A916|A8FC+A8FC/A8FC\A8FC;
                    + LDA.B !_5                                 ;;A918|A8FE+A8FE/A8FE\A8FE;
                      CMP.W ReservedSprite2,Y                   ;;A91A|A900+A900/A900\A900;
                      BNE CODE_02A916                           ;;A91D|A903+A903/A903\A903;
                      CMP.B #$64                                ;;A91F|A905+A905/A905\A905;
                      BNE CODE_02A90F                           ;;A921|A907+A907/A907\A907;
                      LDA.B !_0                                 ;;A923|A909+A909/A909\A909;
                      AND.B #$10                                ;;A925|A90B+A90B/A90B\A90B;
                      BEQ CODE_02A916                           ;;A927|A90D+A90D/A90D\A90D;
CODE_02A90F:          LDX.W SpriteSlotMax2,Y                    ;;A929|A90F+A90F/A90F\A90F;
                      LDA.B #$FF                                ;;A92C|A912+A912/A912\A912;
                      STA.B !_6                                 ;;A92E|A914+A914/A914\A914;
CODE_02A916:          STX.B !_F                                 ;;A930|A916+A916/A916\A916;
CODE_02A918:          LDA.W !SpriteStatus,X                     ;;A932|A918+A918/A918\A918;
                      BEQ CODE_02A93C                           ;;A935|A91B+A91B/A91B\A91B;
                      DEX                                       ;;A937|A91D+A91D/A91D\A91D;
                      CPX.B !_6                                 ;;A938|A91E+A91E/A91E\A91E;
                      BNE CODE_02A918                           ;;A93A|A920+A920/A920\A920;
                      LDA.B !_5                                 ;;A93C|A922+A922/A922\A922;
                      CMP.B #$7B                                ;;A93E|A924+A924/A924\A924;
                      BNE CODE_02A936                           ;;A940|A926+A926/A926\A926;
                      LDX.B !_F                                 ;;A942|A928+A928/A928\A928;
ADDR_02A92A:          LDA.W !SpriteTweaker167A,X                ;;A944|A92A+A92A/A92A\A92A;
                      AND.B #$02                                ;;A947|A92D+A92D/A92D\A92D;
                      BEQ CODE_02A93C                           ;;A949|A92F+A92F/A92F\A92F;
                      DEX                                       ;;A94B|A931+A931/A931\A931;
                      CPX.B !_6                                 ;;A94C|A932+A932/A932\A932;
                      BNE ADDR_02A92A                           ;;A94E|A934+A934/A934\A934;
CODE_02A936:          LDX.B !_2                                 ;;A950|A936+A936/A936\A936;
                      STZ.W !SpriteLoadStatus,X                 ;;A952|A938+A938/A938\A938; Allow sprite to be reloaded by level loading routine
                      RTS                                       ;;A955|A93B+A93B/A93B\A93B; Return
                                                                ;;                        ;
CODE_02A93C:          LDY.B !_3                                 ;;A956|A93C+A93C/A93C\A93C;
                      LDA.B !ScreenMode                         ;;A958|A93E+A93E/A93E\A93E; \ Branch if horizontal level
                      LSR A                                     ;;A95A|A940+A940/A940\A940;  |
                      BCC LoadNSprHorzLvlPos                    ;;A95B|A941+A941/A941\A941; /
                      LDA.B [!SpriteDataPtr],Y                  ;;A95D|A943+A943/A943\A943; \ Vertical level:
                      PHA                                       ;;A95F|A945+A945/A945\A945;  | Same as below with X and Y coords swapped
                      AND.B #$F0                                ;;A960|A946+A946/A946\A946;  |
                      STA.B !SpriteXPosLow,X                    ;;A962|A948+A948/A948\A948;  |
                      PLA                                       ;;A964|A94A+A94A/A94A\A94A;  |
                      AND.B #$0D                                ;;A965|A94B+A94B/A94B\A94B;  |
                      STA.W !SpriteXPosHigh,X                   ;;A967|A94D+A94D/A94D\A94D;  |
                      LDA.B !_0                                 ;;A96A|A950+A950/A950\A950;  |
                      STA.B !SpriteYPosLow,X                    ;;A96C|A952+A952/A952\A952;  |
                      LDA.B !_1                                 ;;A96E|A954+A954/A954\A954;  |
                      STA.W !SpriteYPosHigh,X                   ;;A970|A956+A956/A956\A956;  |
                      BRA LoadNSprPosLoadDone                   ;;A973|A959+A959/A959\A959; /
                                                                ;;                        ;
LoadNSprHorzLvlPos:   LDA.B [!SpriteDataPtr],Y                  ;;A975|A95B+A95B/A95B\A95B; Byte format: YYYYEEsy
                      PHA                                       ;;A977|A95D+A95D/A95D\A95D; \ Bits 11110000 are low byte of Y position
                      AND.B #$F0                                ;;A978|A95E+A95E/A95E\A95E;  |
                      STA.B !SpriteYPosLow,X                    ;;A97A|A960+A960/A960\A960; /
                      PLA                                       ;;A97C|A962+A962/A962\A962; \ Bits 00001101 are high byte of Y position
                      AND.B #$0D                                ;;A97D|A963+A963/A963\A963;  | (Extra bits are stored in Y position)
                      STA.W !SpriteYPosHigh,X                   ;;A97F|A965+A965/A965\A965; /
                      LDA.B !_0                                 ;;A982|A968+A968/A968\A968; \ X position = adjusted screen boundary
                      STA.B !SpriteXPosLow,X                    ;;A984|A96A+A96A/A96A\A96A;  |
                      LDA.B !_1                                 ;;A986|A96C+A96C/A96C\A96C;  |
                      STA.W !SpriteXPosHigh,X                   ;;A988|A96E+A96E/A96E\A96E; /
LoadNSprPosLoadDone:  INY                                       ;;A98B|A971+A971/A971\A971; \ Y = index to sprite id
                      INY                                       ;;A98C|A972+A972/A972\A972; /
                      LDA.B !_4                                 ;;A98D|A973+A973/A973\A973; \ Sprite status = $01, or $09 if shell
                      STA.W !SpriteStatus,X                     ;;A98F|A975+A975/A975\A975; /
                      CMP.B #$09                                ;;A992|A978+A978/A978\A978;
                      LDA.B [!SpriteDataPtr],Y                  ;;A994|A97A+A97A/A97A\A97A; Load sprite id
                      BCC LoadNSprStatusInit                    ;;A996|A97C+A97C/A97C\A97C; > Was sprite state set to < 9? Skip if so
                      SEC                                       ;;A998|A97E+A97E/A97E\A97E; \
                      SBC.B #$DA                                ;;A999|A97F+A97F/A97F\A97F; | Subtract $DA, first koopa shell value (green)
                      CLC                                       ;;A99B|A981+A981/A981\A981; | Then add 4 (account for shelless koopas)
                      ADC.B #$04                                ;;A99C|A982+A982/A982\A982; / So sprite num for shell will be 04 through 09 (Skipping 08, value DE is for 5 eeries)
LoadNSprStatusInit:   PHY                                       ;;A99E|A984+A984/A984\A984; > Push Y (index to current loading sprite's id)
                      LDY.W !OWLevelTileSettings+$49            ;;A99F|A985+A985/A985\A985; \ special world cleared setting
                      BPL LoadKoopaNoColorChg                   ;;A9A2|A988+A988/A988\A988; /
                      CMP.B #$04                                ;;A9A4|A98A+A98A/A98A\A98A; \ If green koopa
                      BNE LoadKoopaNotGreen                     ;;A9A6|A98C+A98C/A98C\A98C; | ..
                      LDA.B #$07                                ;;A9A8|A98E+A98E/A98E\A98E; / make it yellow
LoadKoopaNotGreen:    CMP.B #$05                                ;;A9AA|A990+A990/A990\A990; \ if red koopa
                      BNE LoadKoopaNoColorChg                   ;;A9AC|A992+A992/A992\A992; | ..
                      LDA.B #$06                                ;;A9AE|A994+A994/A994\A994; / make it blue
LoadKoopaNoColorChg:  STA.B !SpriteNumber,X                     ;;A9B0|A996+A996/A996\A996; > store the actual sprite number
                      PLY                                       ;;A9B2|A998+A998/A998\A998; > Pull Y (Index to current loading sprite's id)
                      LDA.B !_2                                 ;;A9B3|A999+A999/A999\A999; \ $161A,x = index of the sprite in the level
                      STA.W !SpriteLoadIndex,X                  ;;A9B5|A99B+A99B/A99B\A99B; / (Number of sprites in level, not just onscreen)
                      LDA.W !SilverPSwitchTimer                 ;;A9B8|A99E+A99E/A99E\A99E; \ Is a silver P-switch active?
                      BEQ LoadNSprInitTbls                      ;;A9BB|A9A1+A9A1/A9A1\A9A1; / Branch if not
                      PHX                                       ;;A9BD|A9A3+A9A3/A9A3\A9A3; Push X (Sprite index in the loader list)
                      LDA.B !SpriteNumber,X                     ;;A9BE|A9A4+A9A4/A9A4\A9A4; \ Get 190F val for this sprite's id
                      TAX                                       ;;A9C0|A9A6+A9A6/A9A6\A9A6; |
                      LDA.L Sprite190FVals,X                    ;;A9C1|A9A7+A9A7/A9A7\A9A7; /
                      PLX                                       ;;A9C5|A9AB+A9AB/A9AB\A9AB; > Pull X (Sprite's index in the loader list)
                      AND.B #$40                                ;;A9C6|A9AC+A9AC/A9AC\A9AC; \ Can this sprite be turned into a silver coin?
                      BNE LoadNSprInitTbls                      ;;A9C8|A9AE+A9AE/A9AE\A9AE; / Branch if not
                      LDA.B #$21                                ;;A9CA|A9B0+A9B0/A9B0\A9B0; \ Sprite = Moving Coin
                      STA.B !SpriteNumber,X                     ;;A9CC|A9B2+A9B2/A9B2\A9B2; /
                      LDA.B #$08                                ;;A9CE|A9B4+A9B4/A9B4\A9B4; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;A9D0|A9B6+A9B6/A9B6\A9B6; /
                      JSL InitSpriteTables                      ;;A9D3|A9B9+A9B9/A9B9\A9B9;
                      LDA.W !SpriteOBJAttribute,X               ;;A9D7|A9BD+A9BD/A9BD\A9BD; \ Change palette to sprite palette 1
                      AND.B #$F1                                ;;A9DA|A9C0+A9C0/A9C0\A9C0; |
                      ORA.B #$02                                ;;A9DC|A9C2+A9C2/A9C2\A9C2; |
                      STA.W !SpriteOBJAttribute,X               ;;A9DE|A9C4+A9C4/A9C4\A9C4; /
                      BRA LoadNSprNoInitTbls                    ;;A9E1|A9C7+A9C7/A9C7\A9C7;
                                                                ;;                        ;
LoadNSprInitTbls:     JSL InitSpriteTables                      ;;A9E3|A9C9+A9C9/A9C9\A9C9; Reset sprite tables (N = normal)
LoadNSprNoInitTbls:   LDA.B #$01                                ;;A9E7|A9CD+A9CD/A9CD\A9CD; \ Set off screen horizontally
                      STA.W !SpriteOffscreenX,X                 ;;A9E9|A9CF+A9CF/A9CF\A9CF; /
                      LDA.B #$04                                ;;A9EC|A9D2+A9D2/A9D2\A9D2; \ $1FE2,X = #$04 (to disable water splash
                      STA.W !SpriteMisc1FE2,X                   ;;A9EE|A9D4+A9D4/A9D4\A9D4; / animation if spawned in water, presumably)
                      INY                                       ;;A9F1|A9D7+A9D7/A9D7\A9D7; > Y = y position of next sprite to load
                      LDX.B !_2                                 ;;A9F2|A9D8+A9D8/A9D8\A9D8;
                      INX                                       ;;A9F4|A9DA+A9DA/A9DA\A9DA;
                      JMP LoadSpriteLoopStrt                    ;;A9F5|A9DB+A9DB/A9DB\A9DB;
                                                                ;;                        ;
FindFreeSlotLowPri:   LDA.B #$02                                ;;A9F8|A9DE+A9DE/A9DE\A9DE; \ Number of slots to leave free = 2
                      STA.B !_E                                 ;;A9FA|A9E0+A9E0/A9E0\A9E0;  |
                      BRA +                                     ;;A9FC|A9E2+A9E2/A9E2\A9E2; /
                                                                ;;                        ;
FindFreeSprSlot:      STZ.B !_E                                 ;;A9FE|A9E4+A9E4/A9E4\A9E4; Number of slots tp leave free = 0
                    + PHB                                       ;;AA00|A9E6+A9E6/A9E6\A9E6;
                      PHK                                       ;;AA01|A9E7+A9E7/A9E7\A9E7;
                      PLB                                       ;;AA02|A9E8+A9E8/A9E8\A9E8;
                      JSR FindFreeSlotRt                        ;;AA03|A9E9+A9E9/A9E9\A9E9;
                      PLB                                       ;;AA06|A9EC+A9EC/A9EC\A9EC;
                      TYA                                       ;;AA07|A9ED+A9ED/A9ED\A9ED;
                      RTL                                       ;;AA08|A9EE+A9EE/A9EE\A9EE; Return
                                                                ;;                        ;
FindFreeSlotRt:       LDY.W !SpriteMemorySetting                ;;AA09|A9EF+A9EF/A9EF\A9EF; \ Subroutine: Return the first free sprite slot in Y (#$FF if not found)
                      LDA.W SpriteSlotStart,Y                   ;;AA0C|A9F2+A9F2/A9F2\A9F2;  | Y = Sprite memory index
                      STA.B !_F                                 ;;AA0F|A9F5+A9F5/A9F5\A9F5;  |
                      LDA.W SpriteSlotMax,Y                     ;;AA11|A9F7+A9F7/A9F7\A9F7;  |
                      SEC                                       ;;AA14|A9FA+A9FA/A9FA\A9FA;  |
                      SBC.B !_E                                 ;;AA15|A9FB+A9FB/A9FB\A9FB;  |
                      TAY                                       ;;AA17|A9FD+A9FD/A9FD\A9FD;  |
CODE_02A9FE:          LDA.W !SpriteStatus,Y                     ;;AA18|A9FE+A9FE/A9FE\A9FE;  | If free slot...
                      BEQ Return02AA0A                          ;;AA1B|AA01+AA01/AA01\AA01;  |  ...return
                      DEY                                       ;;AA1D|AA03+AA03/AA03\AA03;  |
                      CPY.B !_F                                 ;;AA1E|AA04+AA04/AA04\AA04;  |
                      BNE CODE_02A9FE                           ;;AA20|AA06+AA06/AA06\AA06;  |
                      LDY.B #$FF                                ;;AA22|AA08+AA08/AA08\AA08;  | If no free slots, Y=#$FF
Return02AA0A:         RTS                                       ;;AA24|AA0A+AA0A/AA0A\AA0A; /
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02AA0B:          db $31,$71,$A1,$43,$93,$C3,$14,$65        ;;AA25|AA0B+AA0B/AA0B\AA0B;
                      db $E5,$36,$A7,$39,$99,$F9,$1A,$7A        ;;AA2D|AA13+AA13/AA13\AA13;
                      db $DA,$4C,$AD,$ED                        ;;AA35|AA1B+AA1B/AA1B\AA1B;
                                                                ;;                        ;
DATA_02AA1F:          db $01,$51,$91,$D1,$22,$62,$A2,$73        ;;AA39|AA1F+AA1F/AA1F\AA1F;
                      db $E3,$C7,$88,$29,$5A,$AA,$EB,$2C        ;;AA41|AA27+AA27/AA27\AA27;
                      db $8C,$CC,$FC,$5D                        ;;AA49|AA2F+AA2F/AA2F\AA2F;
                                                                ;;                        ;
CODE_02AA33:          LDX.B #$0E                                ;;AA4D|AA33+AA33/AA33\AA33; \ Unreachable
                    - STZ.W !ClusterSpriteMisc1E66,X            ;;AA4F|AA35+AA35/AA35\AA35;  | Loop X = 00 to 0E
                      STZ.W !ClusterSpriteMisc0F86,X            ;;AA52|AA38+AA38/AA38\AA38;
                      LDA.B #$08                                ;;AA55|AA3B+AA3B/AA3B\AA3B;
                      STA.W !ClusterSpriteNumber,X              ;;AA57|AA3D+AA3D/AA3D\AA3D;
                      JSL GetRand                               ;;AA5A|AA40+AA40/AA40\AA40;
                      CLC                                       ;;AA5E|AA44+AA44/AA44\AA44;
                      ADC.B !Layer1XPos                         ;;AA5F|AA45+AA45/AA45\AA45;
                      STA.W !ClusterSpriteXPosLow,X             ;;AA61|AA47+AA47/AA47\AA47;
                      STA.W !ClusterSpriteMisc0F4A,X            ;;AA64|AA4A+AA4A/AA4A\AA4A;
                      LDA.B !Layer1XPos+1                       ;;AA67|AA4D+AA4D/AA4D\AA4D;
                      ADC.B #$00                                ;;AA69|AA4F+AA4F/AA4F\AA4F;
                      STA.W !ClusterSpriteXPosHigh,X            ;;AA6B|AA51+AA51/AA51\AA51;
                      LDY.B !_3                                 ;;AA6E|AA54+AA54/AA54\AA54;
                      LDA.B [!SpriteDataPtr],Y                  ;;AA70|AA56+AA56/AA56\AA56;
                      PHA                                       ;;AA72|AA58+AA58/AA58\AA58;
                      AND.B #$F0                                ;;AA73|AA59+AA59/AA59\AA59;
                      STA.W !ClusterSpriteYPosLow,X             ;;AA75|AA5B+AA5B/AA5B\AA5B;
                      PLA                                       ;;AA78|AA5E+AA5E/AA5E\AA5E;
                      AND.B #$01                                ;;AA79|AA5F+AA5F/AA5F\AA5F;
                      STA.W !ClusterSpriteYPosHigh,X            ;;AA7B|AA61+AA61/AA61\AA61;
                      DEX                                       ;;AA7E|AA64+AA64/AA64\AA64;
                      BPL -                                     ;;AA7F|AA65+AA65/AA65\AA65;
                      RTS                                       ;;AA81|AA67+AA67/AA67\AA67; / Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02AA68:          db $50,$90,$D0,$10                        ;;AA82|AA68+AA68/AA68\AA68;
                                                                ;;                        ;
GenSpawnBgFlameCls:   LDA.B #$07                                ;;AA86|AA6C+AA6C/AA6C\AA6C;
                      STA.W !SpriteStatus+3                     ;;AA88|AA6E+AA6E/AA6E\AA6E;
                      LDX.B #$03                                ;;AA8B|AA71+AA71/AA71\AA71;
                    - LDA.B #$05                                ;;AA8D|AA73+AA73/AA73\AA73;
                      STA.W !ClusterSpriteNumber,X              ;;AA8F|AA75+AA75/AA75\AA75;
                      %LorW_X(LDA,DATA_02AA68)                  ;;AA92|AA78+AA78/AA78\AA78;
                      STA.W !ClusterSpriteXPosLow,X             ;;AA96|AA7B+AA7B/AA7B\AA7B;
                      LDA.B #$F0                                ;;AA99|AA7E+AA7E/AA7E\AA7E;
                      STA.W !ClusterSpriteYPosLow,X             ;;AA9B|AA80+AA80/AA80\AA80;
                      TXA                                       ;;AA9E|AA83+AA83/AA83\AA83;
                      ASL A                                     ;;AA9F|AA84+AA84/AA84\AA84;
                      ASL A                                     ;;AAA0|AA85+AA85/AA85\AA85;
                      STA.W !ClusterSpriteMisc0F4A,X            ;;AAA1|AA86+AA86/AA86\AA86;
                      DEX                                       ;;AAA4|AA89+AA89/AA89\AA89;
                      BPL -                                     ;;AAA5|AA8A+AA8A/AA8A\AA8A;
                      RTS                                       ;;AAA7|AA8C+AA8C/AA8C\AA8C; Return
                                                                ;;                        ;
CODE_02AA8D:          STZ.W !BooCloudTimer                      ;;AAA8|AA8D+AA8D/AA8D\AA8D;
                      LDX.B #$13                                ;;AAAB|AA90+AA90/AA90\AA90;
                    - LDA.B #$07                                ;;AAAD|AA92+AA92/AA92\AA92;
                      STA.W !ClusterSpriteNumber,X              ;;AAAF|AA94+AA94/AA94\AA94;
                      LDA.W DATA_02AA0B,X                       ;;AAB2|AA97+AA97/AA97\AA97;
                      PHA                                       ;;AAB5|AA9A+AA9A/AA9A\AA9A;
                      AND.B #$F0                                ;;AAB6|AA9B+AA9B/AA9B\AA9B;
                      STA.W !ClusterSpriteMisc1E66,X            ;;AAB8|AA9D+AA9D/AA9D\AA9D;
                      PLA                                       ;;AABB|AAA0+AAA0/AAA0\AAA0;
                      ASL A                                     ;;AABC|AAA1+AAA1/AAA1\AAA1;
                      ASL A                                     ;;AABD|AAA2+AAA2/AAA2\AAA2;
                      ASL A                                     ;;AABE|AAA3+AAA3/AAA3\AAA3;
                      ASL A                                     ;;AABF|AAA4+AAA4/AAA4\AAA4;
                      STA.W !ClusterSpriteMisc1E52,X            ;;AAC0|AAA5+AAA5/AAA5\AAA5;
                      LDA.W DATA_02AA1F,X                       ;;AAC3|AAA8+AAA8/AAA8\AAA8;
                      PHA                                       ;;AAC6|AAAB+AAAB/AAAB\AAAB;
                      AND.B #$F0                                ;;AAC7|AAAC+AAAC/AAAC\AAAC;
                      STA.W !ClusterSpriteMisc1E8E,X            ;;AAC9|AAAE+AAAE/AAAE\AAAE;
                      PLA                                       ;;AACC|AAB1+AAB1/AAB1\AAB1;
                      ASL A                                     ;;AACD|AAB2+AAB2/AAB2\AAB2;
                      ASL A                                     ;;AACE|AAB3+AAB3/AAB3\AAB3;
                      ASL A                                     ;;AACF|AAB4+AAB4/AAB4\AAB4;
                      ASL A                                     ;;AAD0|AAB5+AAB5/AAB5\AAB5;
                      STA.W !ClusterSpriteMisc1E7A,X            ;;AAD1|AAB6+AAB6/AAB6\AAB6;
                      DEX                                       ;;AAD4|AAB9+AAB9/AAB9\AAB9;
                      BPL -                                     ;;AAD5|AABA+AABA/AABA\AABA;
                      RTS                                       ;;AAD7|AABC+AABC/AABC\AABC; Return
                                                                ;;                        ;
                    - JMP CODE_02AA33                           ;;AAD8|AABD+AABD/AABD\AABD;
                                                                ;;                        ;
CODE_02AAC0:          LDY.B #$01                                ;;AADB|AAC0+AAC0/AAC0\AAC0;
                      STY.W !ActivateClusterSprite              ;;AADD|AAC2+AAC2/AAC2\AAC2;
                      CMP.B #$E4                                ;;AAE0|AAC5+AAC5/AAC5\AAC5;
                      BEQ -                                     ;;AAE2|AAC7+AAC7/AAC7\AAC7;
                      CMP.B #$E6                                ;;AAE4|AAC9+AAC9/AAC9\AAC9;
                      BEQ GenSpawnBgFlameCls                    ;;AAE6|AACB+AACB/AACB\AACB;
                      CMP.B #$E5                                ;;AAE8|AACD+AACD/AACD\AACD;
                      BEQ CODE_02AA8D                           ;;AAEA|AACF+AACF/AACF\AACF;
                      CMP.B #$E2                                ;;AAEC|AAD1+AAD1/AAD1\AAD1;
                      BCS GenSpawnClsBooRing                    ;;AAEE|AAD3+AAD3/AAD3\AAD3;
                      LDX.B #$13                                ;;AAF0|AAD5+AAD5/AAD5\AAD5;
                    - STZ.W !ClusterSpriteMisc1E66,X            ;;AAF2|AAD7+AAD7/AAD7\AAD7;
                      STZ.W !ClusterSpriteMisc0F86,X            ;;AAF5|AADA+AADA/AADA\AADA;
                      LDA.B #$03                                ;;AAF8|AADD+AADD/AADD\AADD;
                      STA.W !ClusterSpriteNumber,X              ;;AAFA|AADF+AADF/AADF\AADF;
                      JSL GetRand                               ;;AAFD|AAE2+AAE2/AAE2\AAE2;
                      CLC                                       ;;AB01|AAE6+AAE6/AAE6\AAE6;
                      ADC.B !Layer1XPos                         ;;AB02|AAE7+AAE7/AAE7\AAE7;
                      STA.W !ClusterSpriteXPosLow,X             ;;AB04|AAE9+AAE9/AAE9\AAE9;
                      STA.W !ClusterSpriteMisc0F4A,X            ;;AB07|AAEC+AAEC/AAEC\AAEC;
                      LDA.B !Layer1XPos+1                       ;;AB0A|AAEF+AAEF/AAEF\AAEF;
                      ADC.B #$00                                ;;AB0C|AAF1+AAF1/AAF1\AAF1;
                      STA.W !ClusterSpriteXPosHigh,X            ;;AB0E|AAF3+AAF3/AAF3\AAF3;
                      LDA.W !RandomNumber+1                     ;;AB11|AAF6+AAF6/AAF6\AAF6;
                      AND.B #$3F                                ;;AB14|AAF9+AAF9/AAF9\AAF9;
                      ADC.B #$08                                ;;AB16|AAFB+AAFB/AAFB\AAFB;
                      CLC                                       ;;AB18|AAFD+AAFD/AAFD\AAFD;
                      ADC.B !Layer1YPos                         ;;AB19|AAFE+AAFE/AAFE\AAFE;
                      STA.W !ClusterSpriteYPosLow,X             ;;AB1B|AB00+AB00/AB00\AB00;
                      LDA.B !Layer1YPos+1                       ;;AB1E|AB03+AB03/AB03\AB03;
                      ADC.B #$00                                ;;AB20|AB05+AB05/AB05\AB05;
                      STA.W !ClusterSpriteYPosHigh,X            ;;AB22|AB07+AB07/AB07\AB07;
                      DEX                                       ;;AB25|AB0A+AB0A/AB0A\AB0A;
                      BPL -                                     ;;AB26|AB0B+AB0B/AB0B\AB0B;
                      INC.W !BooRingIndex                       ;;AB28|AB0D+AB0D/AB0D\AB0D;
                      RTS                                       ;;AB2B|AB10+AB10/AB10\AB10; Return
                                                                ;;                        ;
GenSpawnClsBooRing:   LDY.W !BooRingIndex                       ;;AB2C|AB11+AB11/AB11\AB11;
                      CPY.B #$02                                ;;AB2F|AB14+AB14/AB14\AB14;
                      BCS Return02AB77                          ;;AB31|AB16+AB16/AB16\AB16;
                      LDY.B #$01                                ;;AB33|AB18+AB18/AB18\AB18;
                      CMP.B #$E2                                ;;AB35|AB1A+AB1A/AB1A\AB1A;
                      BEQ +                                     ;;AB37|AB1C+AB1C/AB1C\AB1C;
                      LDY.B #$FF                                ;;AB39|AB1E+AB1E/AB1E\AB1E;
                    + STY.B !_F                                 ;;AB3B|AB20+AB20/AB20\AB20;
                      LDA.B #$09                                ;;AB3D|AB22+AB22/AB22\AB22;
                      STA.B !_E                                 ;;AB3F|AB24+AB24/AB24\AB24;
                      LDX.B #$13                                ;;AB41|AB26+AB26/AB26\AB26;
CODE_02AB28:          LDA.W !ClusterSpriteNumber,X              ;;AB43|AB28+AB28/AB28\AB28;
                      BNE CODE_02AB71                           ;;AB46|AB2B+AB2B/AB2B\AB2B;
                      LDA.B #$04                                ;;AB48|AB2D+AB2D/AB2D\AB2D;
                      STA.W !ClusterSpriteNumber,X              ;;AB4A|AB2F+AB2F/AB2F\AB2F;
                      LDA.W !BooRingIndex                       ;;AB4D|AB32+AB32/AB32\AB32;
                      STA.W !ClusterSpriteMisc0F86,X            ;;AB50|AB35+AB35/AB35\AB35;
                      LDA.B !_E                                 ;;AB53|AB38+AB38/AB38\AB38;
                      STA.W !ClusterSpriteMisc0F72,X            ;;AB55|AB3A+AB3A/AB3A\AB3A;
                      LDA.B !_F                                 ;;AB58|AB3D+AB3D/AB3D\AB3D;
                      STA.W !ClusterSpriteMisc0F4A,X            ;;AB5A|AB3F+AB3F/AB3F\AB3F;
                      STZ.B !_F                                 ;;AB5D|AB42+AB42/AB42\AB42;
                      BEQ +                                     ;;AB5F|AB44+AB44/AB44\AB44;
                      LDY.B !_3                                 ;;AB61|AB46+AB46/AB46\AB46;
                      LDA.B [!SpriteDataPtr],Y                  ;;AB63|AB48+AB48/AB48\AB48;
                      LDY.W !BooRingIndex                       ;;AB65|AB4A+AB4A/AB4A\AB4A;
                      PHA                                       ;;AB68|AB4D+AB4D/AB4D\AB4D;
                      AND.B #$F0                                ;;AB69|AB4E+AB4E/AB4E\AB4E;
                      STA.W !BooRingYPosLow,Y                   ;;AB6B|AB50+AB50/AB50\AB50;
                      PLA                                       ;;AB6E|AB53+AB53/AB53\AB53;
                      AND.B #$01                                ;;AB6F|AB54+AB54/AB54\AB54;
                      STA.W !BooRingYPosHigh,Y                  ;;AB71|AB56+AB56/AB56\AB56;
                      LDA.B !_0                                 ;;AB74|AB59+AB59/AB59\AB59;
                      STA.W !BooRingXPosLow,Y                   ;;AB76|AB5B+AB5B/AB5B\AB5B;
                      LDA.B !_1                                 ;;AB79|AB5E+AB5E/AB5E\AB5E;
                      STA.W !BooRingXPosHigh,Y                  ;;AB7B|AB60+AB60/AB60\AB60;
                      LDA.B #$00                                ;;AB7E|AB63+AB63/AB63\AB63;
                      STA.W !BooRingOffscreen,Y                 ;;AB80|AB65+AB65/AB65\AB65;
                      LDA.B !_2                                 ;;AB83|AB68+AB68/AB68\AB68;
                      STA.W !BooRingLoadIndex,Y                 ;;AB85|AB6A+AB6A/AB6A\AB6A;
                    + DEC.B !_E                                 ;;AB88|AB6D+AB6D/AB6D\AB6D;
                      BMI CODE_02AB74                           ;;AB8A|AB6F+AB6F/AB6F\AB6F;
CODE_02AB71:          DEX                                       ;;AB8C|AB71+AB71/AB71\AB71;
                      BPL CODE_02AB28                           ;;AB8D|AB72+AB72/AB72\AB72;
CODE_02AB74:          INC.W !BooRingIndex                       ;;AB8F|AB74+AB74/AB74\AB74;
Return02AB77:         RTS                                       ;;AB92|AB77+AB77/AB77\AB77; Return
                                                                ;;                        ;
LoadShooter:          STX.B !_2                                 ;;AB93|AB78+AB78/AB78\AB78;
                      DEY                                       ;;AB95|AB7A+AB7A/AB7A\AB7A;
                      STY.B !_3                                 ;;AB96|AB7B+AB7B/AB7B\AB7B;
                      STA.B !_4                                 ;;AB98|AB7D+AB7D/AB7D\AB7D;
                      LDX.B #$07                                ;;AB9A|AB7F+AB7F/AB7F\AB7F;
CODE_02AB81:          LDA.W !ShooterNumber,X                    ;;AB9C|AB81+AB81/AB81\AB81;
                      BEQ CODE_02AB9E                           ;;AB9F|AB84+AB84/AB84\AB84;
                      DEX                                       ;;ABA1|AB86+AB86/AB86\AB86;
                      BPL CODE_02AB81                           ;;ABA2|AB87+AB87/AB87\AB87;
                      DEC.W !ShooterSlotIdx                     ;;ABA4|AB89+AB89/AB89\AB89;
                      BPL +                                     ;;ABA7|AB8C+AB8C/AB8C\AB8C;
                      LDA.B #$07                                ;;ABA9|AB8E+AB8E/AB8E\AB8E;
                      STA.W !ShooterSlotIdx                     ;;ABAB|AB90+AB90/AB90\AB90;
                    + LDX.W !ShooterSlotIdx                     ;;ABAE|AB93+AB93/AB93\AB93;
                      LDY.W !ShooterLoadIndex,X                 ;;ABB1|AB96+AB96/AB96\AB96;
                      LDA.B #$00                                ;;ABB4|AB99+AB99/AB99\AB99; \ Allow sprite to be reloaded by level loading routine
                      STA.W !SpriteLoadStatus,Y                 ;;ABB6|AB9B+AB9B/AB9B\AB9B; /
CODE_02AB9E:          LDY.B !_3                                 ;;ABB9|AB9E+AB9E/AB9E\AB9E;
                      LDA.B !_4                                 ;;ABBB|ABA0+ABA0/ABA0\ABA0;
                      SEC                                       ;;ABBD|ABA2+ABA2/ABA2\ABA2;
                      SBC.B #$C8                                ;;ABBE|ABA3+ABA3/ABA3\ABA3;
                      STA.W !ShooterNumber,X                    ;;ABC0|ABA5+ABA5/ABA5\ABA5;
                      LDA.B !ScreenMode                         ;;ABC3|ABA8+ABA8/ABA8\ABA8;
                      LSR A                                     ;;ABC5|ABAA+ABAA/ABAA\ABAA;
                      BCC CODE_02ABC7                           ;;ABC6|ABAB+ABAB/ABAB\ABAB;
                      LDA.B [!SpriteDataPtr],Y                  ;;ABC8|ABAD+ABAD/ABAD\ABAD;
                      PHA                                       ;;ABCA|ABAF+ABAF/ABAF\ABAF;
                      AND.B #$F0                                ;;ABCB|ABB0+ABB0/ABB0\ABB0;
                      STA.W !ShooterXPosLow,X                   ;;ABCD|ABB2+ABB2/ABB2\ABB2;
                      PLA                                       ;;ABD0|ABB5+ABB5/ABB5\ABB5;
                      AND.B #$01                                ;;ABD1|ABB6+ABB6/ABB6\ABB6;
                      STA.W !ShooterXPosHigh,X                  ;;ABD3|ABB8+ABB8/ABB8\ABB8;
                      LDA.B !_0                                 ;;ABD6|ABBB+ABBB/ABBB\ABBB;
                      STA.W !ShooterYPosLow,X                   ;;ABD8|ABBD+ABBD/ABBD\ABBD;
                      LDA.B !_1                                 ;;ABDB|ABC0+ABC0/ABC0\ABC0;
                      STA.W !ShooterYPosHigh,X                  ;;ABDD|ABC2+ABC2/ABC2\ABC2;
                      BRA +                                     ;;ABE0|ABC5+ABC5/ABC5\ABC5;
                                                                ;;                        ;
CODE_02ABC7:          LDA.B [!SpriteDataPtr],Y                  ;;ABE2|ABC7+ABC7/ABC7\ABC7;
                      PHA                                       ;;ABE4|ABC9+ABC9/ABC9\ABC9;
                      AND.B #$F0                                ;;ABE5|ABCA+ABCA/ABCA\ABCA;
                      STA.W !ShooterYPosLow,X                   ;;ABE7|ABCC+ABCC/ABCC\ABCC;
                      PLA                                       ;;ABEA|ABCF+ABCF/ABCF\ABCF;
                      AND.B #$01                                ;;ABEB|ABD0+ABD0/ABD0\ABD0;
                      STA.W !ShooterYPosHigh,X                  ;;ABED|ABD2+ABD2/ABD2\ABD2;
                      LDA.B !_0                                 ;;ABF0|ABD5+ABD5/ABD5\ABD5;
                      STA.W !ShooterXPosLow,X                   ;;ABF2|ABD7+ABD7/ABD7\ABD7;
                      LDA.B !_1                                 ;;ABF5|ABDA+ABDA/ABDA\ABDA;
                      STA.W !ShooterXPosHigh,X                  ;;ABF7|ABDC+ABDC/ABDC\ABDC;
                    + LDA.B !_2                                 ;;ABFA|ABDF+ABDF/ABDF\ABDF;
                      STA.W !ShooterLoadIndex,X                 ;;ABFC|ABE1+ABE1/ABE1\ABE1;
                      LDA.B #$10                                ;;ABFF|ABE4+ABE4/ABE4\ABE4;
                      STA.W !ShooterTimer,X                     ;;AC01|ABE6+ABE6/ABE6\ABE6;
                      INY                                       ;;AC04|ABE9+ABE9/ABE9\ABE9;
                      INY                                       ;;AC05|ABEA+ABEA/ABEA\ABEA;
                      INY                                       ;;AC06|ABEB+ABEB/ABEB\ABEB;
                      LDX.B !_2                                 ;;AC07|ABEC+ABEC/ABEC\ABEC;
                      INX                                       ;;AC09|ABEE+ABEE/ABEE\ABEE;
                      JMP LoadSpriteLoopStrt                    ;;AC0A|ABEF+ABEF/ABEF\ABEF;
                                                                ;;                        ;
CODE_02ABF2:          LDX.B #$3F                                ;;AC0D|ABF2+ABF2/ABF2\ABF2; This should be $7F: the table is 128 bytes long. In the original SMW it never comes up, though.
                    - STZ.W !SpriteLoadStatus,X                 ;;AC0F|ABF4+ABF4/ABF4\ABF4; Allow sprite to be reloaded by level loading routine
                      DEX                                       ;;AC12|ABF7+ABF7/ABF7\ABF7;
                      BPL -                                     ;;AC13|ABF8+ABF8/ABF8\ABF8;
                      LDA.B #$FF                                ;;AC15|ABFA+ABFA/ABFA\ABFA;
                      STA.B !_0                                 ;;AC17|ABFC+ABFC/ABFC\ABFC;
                      LDX.B #$0B                                ;;AC19|ABFE+ABFE/ABFE\ABFE;
CODE_02AC00:          LDA.B #$FF                                ;;AC1B|AC00+AC00/AC00\AC00; \ Set to permanently erase sprite
                      STA.W !SpriteLoadIndex,X                  ;;AC1D|AC02+AC02/AC02\AC02; /
                      LDA.W !SpriteStatus,X                     ;;AC20|AC05+AC05/AC05\AC05;
                      CMP.B #$0B                                ;;AC23|AC08+AC08/AC08\AC08;
                      BEQ CODE_02AC11                           ;;AC25|AC0A+AC0A/AC0A\AC0A;
                      STZ.W !SpriteStatus,X                     ;;AC27|AC0C+AC0C/AC0C\AC0C;
                      BRA +                                     ;;AC2A|AC0F+AC0F/AC0F\AC0F;
                                                                ;;                        ;
CODE_02AC11:          STX.B !_0                                 ;;AC2C|AC11+AC11/AC11\AC11;
                    + DEX                                       ;;AC2E|AC13+AC13/AC13\AC13;
                      BPL CODE_02AC00                           ;;AC2F|AC14+AC14/AC14\AC14;
                      LDX.B !_0                                 ;;AC31|AC16+AC16/AC16\AC16;
                      BMI +                                     ;;AC33|AC18+AC18/AC18\AC18;
                      STZ.W !SpriteStatus,X                     ;;AC35|AC1A+AC1A/AC1A\AC1A;
                      LDA.B #$0B                                ;;AC38|AC1D+AC1D/AC1D\AC1D; \ Sprite status = Being carried
                      STA.W !SpriteStatus                       ;;AC3A|AC1F+AC1F/AC1F\AC1F; /
                      LDA.B !SpriteNumber,X                     ;;AC3D|AC22+AC22/AC22\AC22; \ Move carried sprites to slot 0
                      STA.B !SpriteNumber                       ;;AC3F|AC24+AC24/AC24\AC24; | on level transition
                      LDA.B !SpriteXPosLow,X                    ;;AC41|AC26+AC26/AC26\AC26;
                      STA.B !SpriteXPosLow                      ;;AC43|AC28+AC28/AC28\AC28;
                      LDA.W !SpriteXPosHigh,X                   ;;AC45|AC2A+AC2A/AC2A\AC2A;
                      STA.W !SpriteXPosHigh                     ;;AC48|AC2D+AC2D/AC2D\AC2D;
                      LDA.B !SpriteYPosLow,X                    ;;AC4B|AC30+AC30/AC30\AC30;
                      STA.B !SpriteYPosLow                      ;;AC4D|AC32+AC32/AC32\AC32;
                      LDA.W !SpriteYPosHigh,X                   ;;AC4F|AC34+AC34/AC34\AC34;
                      STA.W !SpriteYPosHigh                     ;;AC52|AC37+AC37/AC37\AC37;
                      LDA.W !SpriteOBJAttribute,X               ;;AC55|AC3A+AC3A/AC3A\AC3A;
                      PHA                                       ;;AC58|AC3D+AC3D/AC3D\AC3D;
                      LDX.B #$00                                ;;AC59|AC3E+AC3E/AC3E\AC3E;
                      JSL InitSpriteTables                      ;;AC5B|AC40+AC40/AC40\AC40;
                      PLA                                       ;;AC5F|AC44+AC44/AC44\AC44;
                      STA.W !SpriteOBJAttribute                 ;;AC60|AC45+AC45/AC45\AC45; /
                    + REP #$10                                  ;;AC63|AC48+AC48/AC48\AC48; Index (16 bit)
                      LDX.W #$027A                              ;;AC65|AC4A+AC4A/AC4A\AC4A;
                    - STZ.W !Map16TileNumber,X                  ;;AC68|AC4D+AC4D/AC4D\AC4D; clear ram before entering new stage/area
                      DEX                                       ;;AC6B|AC50+AC50/AC50\AC50;
                      BPL -                                     ;;AC6C|AC51+AC51/AC51\AC51;
                      SEP #$10                                  ;;AC6E|AC53+AC53/AC53\AC53; Index (8 bit)
                      STZ.W !Layer1ScrollCmd                    ;;AC70|AC55+AC55/AC55\AC55;
                      STZ.W !Layer2ScrollCmd                    ;;AC73|AC58+AC58/AC58\AC58;
                      RTS                                       ;;AC76|AC5B+AC5B/AC5B\AC5B; Return
                                                                ;;                        ;
CODE_02AC5C:          LDA.B !ScreenMode                         ;;AC77|AC5C+AC5C/AC5C\AC5C;
                      LSR A                                     ;;AC79|AC5E+AC5E/AC5E\AC5E;
                      BCC CODE_02ACA1                           ;;AC7A|AC5F+AC5F/AC5F\AC5F;
                      LDA.B !Layer1ScrollDir                    ;;AC7C|AC61+AC61/AC61\AC61;
                      PHA                                       ;;AC7E|AC63+AC63/AC63\AC63;
                      LDA.B #$01                                ;;AC7F|AC64+AC64/AC64\AC64;
                      STA.B !Layer1ScrollDir                    ;;AC81|AC66+AC66/AC66\AC66;
                      LDA.B !Layer1YPos                         ;;AC83|AC68+AC68/AC68\AC68;
                      PHA                                       ;;AC85|AC6A+AC6A/AC6A\AC6A;
                      SEC                                       ;;AC86|AC6B+AC6B/AC6B\AC6B;
                      SBC.B #$60                                ;;AC87|AC6C+AC6C/AC6C\AC6C;
                      STA.B !Layer1YPos                         ;;AC89|AC6E+AC6E/AC6E\AC6E;
                      LDA.B !Layer1YPos+1                       ;;AC8B|AC70+AC70/AC70\AC70;
                      PHA                                       ;;AC8D|AC72+AC72/AC72\AC72;
                      SBC.B #$00                                ;;AC8E|AC73+AC73/AC73\AC73;
                      STA.B !Layer1YPos+1                       ;;AC90|AC75+AC75/AC75\AC75;
                      STZ.W !TileGenerateTrackB                 ;;AC92|AC77+AC77/AC77\AC77;
                    - JSR LoadSprFromLvlNoFR                    ;;AC95|AC7A+AC7A/AC7A\AC7A;
                      JSR LoadSprFromLvlNoFR                    ;;AC98|AC7D+AC7D/AC7D\AC7D;
                      LDA.B !Layer1YPos                         ;;AC9B|AC80+AC80/AC80\AC80;
                      CLC                                       ;;AC9D|AC82+AC82/AC82\AC82;
                      ADC.B #$10                                ;;AC9E|AC83+AC83/AC83\AC83;
                      STA.B !Layer1YPos                         ;;ACA0|AC85+AC85/AC85\AC85;
                      LDA.B !Layer1YPos+1                       ;;ACA2|AC87+AC87/AC87\AC87;
                      ADC.B #$00                                ;;ACA4|AC89+AC89/AC89\AC89;
                      STA.B !Layer1YPos+1                       ;;ACA6|AC8B+AC8B/AC8B\AC8B;
                      INC.W !TileGenerateTrackB                 ;;ACA8|AC8D+AC8D/AC8D\AC8D;
                      LDA.W !TileGenerateTrackB                 ;;ACAB|AC90+AC90/AC90\AC90;
                      CMP.B #$20                                ;;ACAE|AC93+AC93/AC93\AC93;
                      BCC -                                     ;;ACB0|AC95+AC95/AC95\AC95;
                      PLA                                       ;;ACB2|AC97+AC97/AC97\AC97;
                      STA.B !Layer1YPos+1                       ;;ACB3|AC98+AC98/AC98\AC98;
                      PLA                                       ;;ACB5|AC9A+AC9A/AC9A\AC9A;
                      STA.B !Layer1YPos                         ;;ACB6|AC9B+AC9B/AC9B\AC9B;
                      PLA                                       ;;ACB8|AC9D+AC9D/AC9D\AC9D;
                      STA.B !Layer1ScrollDir                    ;;ACB9|AC9E+AC9E/AC9E\AC9E;
                      RTS                                       ;;ACBB|ACA0+ACA0/ACA0\ACA0; Return
                                                                ;;                        ;
CODE_02ACA1:          LDA.B !Layer1ScrollDir                    ;;ACBC|ACA1+ACA1/ACA1\ACA1;
                      PHA                                       ;;ACBE|ACA3+ACA3/ACA3\ACA3;
                      LDA.B #$01                                ;;ACBF|ACA4+ACA4/ACA4\ACA4;
                      STA.B !Layer1ScrollDir                    ;;ACC1|ACA6+ACA6/ACA6\ACA6;
                      LDA.B !Layer1XPos                         ;;ACC3|ACA8+ACA8/ACA8\ACA8;
                      PHA                                       ;;ACC5|ACAA+ACAA/ACAA\ACAA;
                      SEC                                       ;;ACC6|ACAB+ACAB/ACAB\ACAB;
                      SBC.B #$60                                ;;ACC7|ACAC+ACAC/ACAC\ACAC;
                      STA.B !Layer1XPos                         ;;ACC9|ACAE+ACAE/ACAE\ACAE;
                      LDA.B !Layer1XPos+1                       ;;ACCB|ACB0+ACB0/ACB0\ACB0;
                      PHA                                       ;;ACCD|ACB2+ACB2/ACB2\ACB2;
                      SBC.B #$00                                ;;ACCE|ACB3+ACB3/ACB3\ACB3;
                      STA.B !Layer1XPos+1                       ;;ACD0|ACB5+ACB5/ACB5\ACB5;
                      STZ.W !TileGenerateTrackB                 ;;ACD2|ACB7+ACB7/ACB7\ACB7;
                    - JSR LoadSprFromLvlNoFR                    ;;ACD5|ACBA+ACBA/ACBA\ACBA;
                      JSR LoadSprFromLvlNoFR                    ;;ACD8|ACBD+ACBD/ACBD\ACBD;
                      LDA.B !Layer1XPos                         ;;ACDB|ACC0+ACC0/ACC0\ACC0;
                      CLC                                       ;;ACDD|ACC2+ACC2/ACC2\ACC2;
                      ADC.B #$10                                ;;ACDE|ACC3+ACC3/ACC3\ACC3;
                      STA.B !Layer1XPos                         ;;ACE0|ACC5+ACC5/ACC5\ACC5;
                      LDA.B !Layer1XPos+1                       ;;ACE2|ACC7+ACC7/ACC7\ACC7;
                      ADC.B #$00                                ;;ACE4|ACC9+ACC9/ACC9\ACC9;
                      STA.B !Layer1XPos+1                       ;;ACE6|ACCB+ACCB/ACCB\ACCB;
                      INC.W !TileGenerateTrackB                 ;;ACE8|ACCD+ACCD/ACCD\ACCD;
                      LDA.W !TileGenerateTrackB                 ;;ACEB|ACD0+ACD0/ACD0\ACD0;
                      CMP.B #$20                                ;;ACEE|ACD3+ACD3/ACD3\ACD3;
                      BCC -                                     ;;ACF0|ACD5+ACD5/ACD5\ACD5;
                      PLA                                       ;;ACF2|ACD7+ACD7/ACD7\ACD7;
                      STA.B !Layer1XPos+1                       ;;ACF3|ACD8+ACD8/ACD8\ACD8;
                      PLA                                       ;;ACF5|ACDA+ACDA/ACDA\ACDA;
                      STA.B !Layer1XPos                         ;;ACF6|ACDB+ACDB/ACDB\ACDB;
                      PLA                                       ;;ACF8|ACDD+ACDD/ACDD\ACDD;
                      STA.B !Layer1ScrollDir                    ;;ACF9|ACDE+ACDE/ACDE\ACDE;
                      RTS                                       ;;ACFB|ACE0+ACE0/ACE0\ACE0; Return
                                                                ;;                        ;
CODE_02ACE1:          PHX                                       ;;ACFC|ACE1+ACE1/ACE1\ACE1;
                      TYX                                       ;;ACFD|ACE2+ACE2/ACE2\ACE2;
                      BRA +                                     ;;ACFE|ACE3+ACE3/ACE3\ACE3;
                                                                ;;                        ;
GivePoints:           PHX                                       ;;AD00|ACE5+ACE5/ACE5\ACE5;  takes sprite type -5 as input in A
                    + CLC                                       ;;AD01|ACE6+ACE6/ACE6\ACE6;
                      ADC.B #$05                                ;;AD02|ACE7+ACE7/ACE7\ACE7; Add 5 to sprite type (200,400,1up)
                      JSL CODE_02ACEF                           ;;AD04|ACE9+ACE9/ACE9\ACE9; Set score sprite type/initial position
                      PLX                                       ;;AD08|ACED+ACED/ACED\ACED;
                      RTL                                       ;;AD09|ACEE+ACEE/ACEE\ACEE; Return
                                                                ;;                        ;
CODE_02ACEF:          PHY                                       ;;AD0A|ACEF+ACEF/ACEF\ACEF;  - note coordinates are level coords, not screen
                      PHA                                       ;;AD0B|ACF0+ACF0/ACF0\ACF0;    sprite type 1=10,2=20,3=40,4=80,5=100,6=200,7=400,8=800,9=1000,A=2000,B=4000,C=8000,D=1up
                      JSL CODE_02AD34                           ;;AD0C|ACF1+ACF1/ACF1\ACF1; Get next free position in table($16E1) to add score sprite
                      PLA                                       ;;AD10|ACF5+ACF5/ACF5\ACF5;
                      STA.W !ScoreSpriteNumber,Y                ;;AD11|ACF6+ACF6/ACF6\ACF6; Set score sprite type (200,400,1up, etc)
                      LDA.B !SpriteYPosLow,X                    ;;AD14|ACF9+ACF9/ACF9\ACF9; Load y position of sprite jumped on
                      SEC                                       ;;AD16|ACFB+ACFB/ACFB\ACFB;
                      SBC.B #$08                                ;;AD17|ACFC+ACFC/ACFC\ACFC;   - make the score sprite appear a little higher
                      STA.W !ScoreSpriteYPosLow,Y               ;;AD19|ACFE+ACFE/ACFE\ACFE; Set this as score sprite y-position
                      PHA                                       ;;AD1C|AD01+AD01/AD01\AD01; save that value
                      LDA.W !SpriteYPosHigh,X                   ;;AD1D|AD02+AD02/AD02\AD02; Get y-pos high byte for sprite jumped on
                      SBC.B #$00                                ;;AD20|AD05+AD05/AD05\AD05;
                      STA.W !ScoreSpriteYPosHigh,Y              ;;AD22|AD07+AD07/AD07\AD07; Set score sprite y-pos high byte
                      PLA                                       ;;AD25|AD0A+AD0A/AD0A\AD0A; restore score sprite y-pos to A
                      SEC                                       ;;AD26|AD0B+AD0B/AD0B\AD0B; \
                      SBC.B !Layer1YPos                         ;;AD27|AD0C+AD0C/AD0C\AD0C; |
                      CMP.B #$F0                                ;;AD29|AD0E+AD0E/AD0E\AD0E; |if (score sprite ypos <1C && >=0C)
                      BCC +                                     ;;AD2B|AD10+AD10/AD10\AD10; |{
                      LDA.W !ScoreSpriteYPosLow,Y               ;;AD2D|AD12+AD12/AD12\AD12; |
                      ADC.B #$10                                ;;AD30|AD15+AD15/AD15\AD15; |
                      STA.W !ScoreSpriteYPosLow,Y               ;;AD32|AD17+AD17/AD17\AD17; |  move score sprite down by #$10
                      LDA.W !ScoreSpriteYPosHigh,Y              ;;AD35|AD1A+AD1A/AD1A\AD1A; |
                      ADC.B #$00                                ;;AD38|AD1D+AD1D/AD1D\AD1D; |
                      STA.W !ScoreSpriteYPosHigh,Y              ;;AD3A|AD1F+AD1F/AD1F\AD1F; /}
                    + LDA.B !SpriteXPosLow,X                    ;;AD3D|AD22+AD22/AD22\AD22; \
                      STA.W !ScoreSpriteXPosLow,Y               ;;AD3F|AD24+AD24/AD24\AD24; /Set score sprite x-position
                      LDA.W !SpriteXPosHigh,X                   ;;AD42|AD27+AD27/AD27\AD27; \
                      STA.W !ScoreSpriteXPosHigh,Y              ;;AD45|AD2A+AD2A/AD2A\AD2A; /Set score sprite x-pos high byte
                      LDA.B #$30                                ;;AD48|AD2D+AD2D/AD2D\AD2D; \
                      STA.W !ScoreSpriteTimer,Y                 ;;AD4A|AD2F+AD2F/AD2F\AD2F; /scoreSpriteSpeed = #$30
                      PLY                                       ;;AD4D|AD32+AD32/AD32\AD32;
                      RTL                                       ;;AD4E|AD33+AD33/AD33\AD33; Return
                                                                ;;                        ;
CODE_02AD34:          LDY.B #$05                                ;;AD4F|AD34+AD34/AD34\AD34; (here css is used to index through the table of score sprites in table at $16E1
CODE_02AD36:          LDA.W !ScoreSpriteNumber,Y                ;;AD51|AD36+AD36/AD36\AD36; for (css=5;css>=0;css--){
                      BEQ Return02AD4B                          ;;AD54|AD39+AD39/AD39\AD39;  if (css's type == 0)      --check for empty space
                      DEY                                       ;;AD56|AD3B+AD3B/AD3B\AD3B;
                      BPL CODE_02AD36                           ;;AD57|AD3C+AD3C/AD3C\AD3C; }
                      DEC.W !ScoreSpriteSlotIdx                 ;;AD59|AD3E+AD3E/AD3E\AD3E; $18f7--;                   --gives LRU
                      BPL +                                     ;;AD5C|AD41+AD41/AD41\AD41; if ($18f7 <0)
                      LDA.B #$05                                ;;AD5E|AD43+AD43/AD43\AD43;   $18f7=5;
                      STA.W !ScoreSpriteSlotIdx                 ;;AD60|AD45+AD45/AD45\AD45;
                    + LDY.W !ScoreSpriteSlotIdx                 ;;AD63|AD48+AD48/AD48\AD48; return $18f7 in Y;
Return02AD4B:         RTL                                       ;;AD66|AD4B+AD4B/AD4B\AD4B; Return
                                                                ;;                        ;
                                                                ;;                        ;
PointTile1:           db $00,$83,$83,$83,$83,$44,$54,$46        ;;AD67|AD4C+AD4C/AD4C\AD4C;
                      db $47,$44,$54,$46,$47,$56,$29,$39        ;;AD6F|AD54+AD54/AD54\AD54;
                      db $38,$5E,$5E,$5E,$5E,$5E                ;;AD77|AD5C+AD5C/AD5C\AD5C;
                                                                ;;                        ;
PointTile2:           db $00,$44,$54,$46,$47,$45,$45,$45        ;;AD7D|AD62+AD62/AD62\AD62;
                      db $45,$55,$55,$55,$55,$57,$57,$57        ;;AD85|AD6A+AD6A/AD6A\AD6A;
                      db $57,$4E,$44,$4F,$54,$5D                ;;AD8D|AD72+AD72/AD72\AD72;
                                                                ;;                        ;
PointMultiplierLo:    db $00,$01,$02,$04,$08,$0A,$14,$28        ;;AD93|AD78+AD78/AD78\AD78;
                      db $50,$64,$C8,$90,$20,$00,$00,$00        ;;AD9B|AD80+AD80/AD80\AD80;
                      db $00                                    ;;ADA3|AD88+AD88/AD88\AD88;
                                                                ;;                        ;
PointMultiplierHi:    db $00,$00,$00,$00,$00,$00,$00,$00        ;;ADA4|AD89+AD89/AD89\AD89;
                      db $00,$00,$00,$01,$03,$00,$00,$00        ;;ADAC|AD91+AD91/AD91\AD91;
                      db $00                                    ;;ADB4|AD99+AD99/AD99\AD99;
                                                                ;;                        ;
PointSpeedY:          db $03,$01,$00,$00                        ;;ADB5|AD9A+AD9A/AD9A\AD9A;
                                                                ;;                        ;
DATA_02AD9E:          db $B0,$B8,$C0,$C8,$D0,$D8                ;;ADB9|AD9E+AD9E/AD9E\AD9E;
                                                                ;;                        ;
ScoreSprGfx:          BIT.W !IRQNMICommand                      ;;ADBF|ADA4+ADA4/ADA4\ADA4;
                      BVC CODE_02ADB8                           ;;ADC2|ADA7+ADA7/ADA7\ADA7;
                      LDA.W !IRQNMICommand                      ;;ADC4|ADA9+ADA9/ADA9\ADA9;
                      CMP.B #$C1                                ;;ADC7|ADAC+ADAC/ADAC\ADAC;
                      BEQ Return02ADC8                          ;;ADC9|ADAE+ADAE/ADAE\ADAE;
                      LDA.B #$F0                                ;;ADCB|ADB0+ADB0/ADB0\ADB0;
                      STA.W !OAMTileYPos+4                      ;;ADCD|ADB2+ADB2/ADB2\ADB2;
                      STA.W !OAMTileYPos+8                      ;;ADD0|ADB5+ADB5/ADB5\ADB5;
CODE_02ADB8:          LDX.B #$05                                ;;ADD3|ADB8+ADB8/ADB8\ADB8;
CODE_02ADBA:          STX.W !CurSpriteProcess                   ;;ADD5|ADBA+ADBA/ADBA\ADBA;
                      LDA.W !ScoreSpriteNumber,X                ;;ADD8|ADBD+ADBD/ADBD\ADBD;
                      BEQ +                                     ;;ADDB|ADC0+ADC0/ADC0\ADC0;
                      JSR CODE_02ADC9                           ;;ADDD|ADC2+ADC2/ADC2\ADC2;
                    + DEX                                       ;;ADE0|ADC5+ADC5/ADC5\ADC5;
                      BPL CODE_02ADBA                           ;;ADE1|ADC6+ADC6/ADC6\ADC6;
Return02ADC8:         RTS                                       ;;ADE3|ADC8+ADC8/ADC8\ADC8; Return
                                                                ;;                        ;
CODE_02ADC9:          LDA.B !SpriteLock                         ;;ADE4|ADC9+ADC9/ADC9\ADC9;
                      BEQ +                                     ;;ADE6|ADCB+ADCB/ADCB\ADCB;
                      JMP CODE_02AE5B                           ;;ADE8|ADCD+ADCD/ADCD\ADCD;
                    + LDA.W !ScoreSpriteTimer,X                 ;;ADEB|ADD0+ADD0/ADD0\ADD0;
                      BNE +                                     ;;ADEE|ADD3+ADD3/ADD3\ADD3;
                      STZ.W !ScoreSpriteNumber,X                ;;ADF0|ADD5+ADD5/ADD5\ADD5;
                      RTS                                       ;;ADF3|ADD8+ADD8/ADD8\ADD8; Return
                                                                ;;                        ;
NotPointRewards:      db $01,$02,$03,$05,$05,$0A,$0F,$14        ;;ADF4|ADD9+ADD9/ADD9\ADD9;
                      db $19                                    ;;ADFC|ADE1+ADE1/ADE1\ADE1;
                                                                ;;                        ;
TwoUpThreeUpProps:    db $04,$06                                ;;ADFD|ADE2+ADE2/ADE2\ADE2;
                                                                ;;                        ;
                    + DEC.W !ScoreSpriteTimer,X                 ;;ADFF|ADE4+ADE4/ADE4\ADE4;
                      CMP.B #$2A                                ;;AE02|ADE7+ADE7/ADE7\ADE7;
                      BNE DontRewardYet                         ;;AE04|ADE9+ADE9/ADE9\ADE9;
                      LDY.W !ScoreSpriteNumber,X                ;;AE06|ADEB+ADEB/ADEB\ADEB;
                      CPY.B #$0D                                ;;AE09|ADEE+ADEE/ADEE\ADEE;
                      BCC ScoreSpritePoints                     ;;AE0B|ADF0+ADF0/ADF0\ADF0;
                      CPY.B #$11                                ;;AE0D|ADF2+ADF2/ADF2\ADF2;
                      BCC ScoreSprite1Ups                       ;;AE0F|ADF4+ADF4/ADF4\ADF4;
                      PHX                                       ;;AE11|ADF6+ADF6/ADF6\ADF6;
                      PHY                                       ;;AE12|ADF7+ADF7/ADF7\ADF7;
                      LDA.W NotPointRewards-$0D,Y               ;;AE13|ADF8+ADF8/ADF8\ADF8;
                      JSL GiveCoins                             ;;AE16|ADFB+ADFB/ADFB\ADFB;
                      PLY                                       ;;AE1A|ADFF+ADFF/ADFF\ADFF;
                      PLX                                       ;;AE1B|AE00+AE00/AE00\AE00;
                      BRA ScoreSpritePoints                     ;;AE1C|AE01+AE01/AE01\AE01; This is likely erroneous (should branch over giving score),
                                                                ;;                        ; but the score sprites that reward coins are only invocable via glitches anyway.
ScoreSprite1Ups:      LDA.W NotPointRewards-$0D,Y               ;;AE1E|AE03+AE03/AE03\AE03;
                      CLC                                       ;;AE21|AE06+AE06/AE06\AE06;
                      ADC.W !GivePlayerLives                    ;;AE22|AE07+AE07/AE07\AE07;
                      STA.W !GivePlayerLives                    ;;AE25|AE0A+AE0A/AE0A\AE0A;
                      STZ.W !GiveLivesTimer                     ;;AE28|AE0D+AE0D/AE0D\AE0D;
                      BRA +                                     ;;AE2B|AE10+AE10/AE10\AE10;
                                                                ;;                        ;
ScoreSpritePoints:    LDA.W !PlayerTurnLvl                      ;;AE2D|AE12+AE12/AE12\AE12; \ Get index for active player's score.
                      ASL A                                     ;;AE30|AE15+AE15/AE15\AE15; |
                      ADC.W !PlayerTurnLvl                      ;;AE31|AE16+AE16/AE16\AE16; |
                      TAX                                       ;;AE34|AE19+AE19/AE19\AE19; /
                      LDA.W !PlayerScore,X                      ;;AE35|AE1A+AE1A/AE1A\AE1A;
                      CLC                                       ;;AE38|AE1D+AE1D/AE1D\AE1D;
                      ADC.W PointMultiplierLo,Y                 ;;AE39|AE1E+AE1E/AE1E\AE1E;
                      STA.W !PlayerScore,X                      ;;AE3C|AE21+AE21/AE21\AE21;
                      LDA.W !PlayerScore+1,X                    ;;AE3F|AE24+AE24/AE24\AE24;
                      ADC.W PointMultiplierHi,Y                 ;;AE42|AE27+AE27/AE27\AE27;
                      STA.W !PlayerScore+1,X                    ;;AE45|AE2A+AE2A/AE2A\AE2A;
                      LDA.W !PlayerScore+2,X                    ;;AE48|AE2D+AE2D/AE2D\AE2D;
                      ADC.B #$00                                ;;AE4B|AE30+AE30/AE30\AE30;
                      STA.W !PlayerScore+2,X                    ;;AE4D|AE32+AE32/AE32\AE32;
                    + LDX.W !CurSpriteProcess                   ;;AE50|AE35+AE35/AE35\AE35; X = Sprite index
DontRewardYet:        LDA.W !ScoreSpriteTimer,X                 ;;AE53|AE38+AE38/AE38\AE38;
                      LSR A                                     ;;AE56|AE3B+AE3B/AE3B\AE3B;
                      LSR A                                     ;;AE57|AE3C+AE3C/AE3C\AE3C;
                      LSR A                                     ;;AE58|AE3D+AE3D/AE3D\AE3D;
                      LSR A                                     ;;AE59|AE3E+AE3E/AE3E\AE3E;
                      TAY                                       ;;AE5A|AE3F+AE3F/AE3F\AE3F;
                      LDA.B !TrueFrame                          ;;AE5B|AE40+AE40/AE40\AE40;
                      AND.W PointSpeedY,Y                       ;;AE5D|AE42+AE42/AE42\AE42;
                      BNE CODE_02AE5B                           ;;AE60|AE45+AE45/AE45\AE45;
                      LDA.W !ScoreSpriteYPosLow,X               ;;AE62|AE47+AE47/AE47\AE47;
                      TAY                                       ;;AE65|AE4A+AE4A/AE4A\AE4A;
                      SEC                                       ;;AE66|AE4B+AE4B/AE4B\AE4B;
                      SBC.B !Layer1YPos                         ;;AE67|AE4C+AE4C/AE4C\AE4C;
                      CMP.B #$04                                ;;AE69|AE4E+AE4E/AE4E\AE4E;
                      BCC CODE_02AE5B                           ;;AE6B|AE50+AE50/AE50\AE50;
                      DEC.W !ScoreSpriteYPosLow,X               ;;AE6D|AE52+AE52/AE52\AE52;
                      TYA                                       ;;AE70|AE55+AE55/AE55\AE55;
                      BNE CODE_02AE5B                           ;;AE71|AE56+AE56/AE56\AE56;
                      DEC.W !ScoreSpriteYPosHigh,X              ;;AE73|AE58+AE58/AE58\AE58;
CODE_02AE5B:          LDA.W !ScoreSpriteLayer,X                 ;;AE76|AE5B+AE5B/AE5B\AE5B;
                      ASL A                                     ;;AE79|AE5E+AE5E/AE5E\AE5E;
                      ASL A                                     ;;AE7A|AE5F+AE5F/AE5F\AE5F;
                      TAY                                       ;;AE7B|AE60+AE60/AE60\AE60;
                      REP #$20                                  ;;AE7C|AE61+AE61/AE61\AE61; Accum (16 bit)
                      LDA.W !Layer1YPos,Y                       ;;AE7E|AE63+AE63/AE63\AE63;
                      STA.B !_2                                 ;;AE81|AE66+AE66/AE66\AE66;
                      LDA.W !Layer1XPos,Y                       ;;AE83|AE68+AE68/AE68\AE68;
                      STA.B !_4                                 ;;AE86|AE6B+AE6B/AE6B\AE6B;
                      SEP #$20                                  ;;AE88|AE6D+AE6D/AE6D\AE6D; Accum (8 bit)
                      LDA.W !ScoreSpriteXPosLow,X               ;;AE8A|AE6F+AE6F/AE6F\AE6F;
                      CLC                                       ;;AE8D|AE72+AE72/AE72\AE72;
                      ADC.B #$0C                                ;;AE8E|AE73+AE73/AE73\AE73;
                      PHP                                       ;;AE90|AE75+AE75/AE75\AE75;
                      SEC                                       ;;AE91|AE76+AE76/AE76\AE76;
                      SBC.B !_4                                 ;;AE92|AE77+AE77/AE77\AE77;
                      LDA.W !ScoreSpriteXPosHigh,X              ;;AE94|AE79+AE79/AE79\AE79;
                      SBC.B !_5                                 ;;AE97|AE7C+AE7C/AE7C\AE7C;
                      PLP                                       ;;AE99|AE7E+AE7E/AE7E\AE7E;
                      ADC.B #$00                                ;;AE9A|AE7F+AE7F/AE7F\AE7F;
                      BNE Return02AEFB                          ;;AE9C|AE81+AE81/AE81\AE81;
                      LDA.W !ScoreSpriteXPosLow,X               ;;AE9E|AE83+AE83/AE83\AE83;
                      CMP.B !_4                                 ;;AEA1|AE86+AE86/AE86\AE86;
                      LDA.W !ScoreSpriteXPosHigh,X              ;;AEA3|AE88+AE88/AE88\AE88;
                      SBC.B !_5                                 ;;AEA6|AE8B+AE8B/AE8B\AE8B;
                      BNE Return02AEFB                          ;;AEA8|AE8D+AE8D/AE8D\AE8D;
                      LDA.W !ScoreSpriteYPosLow,X               ;;AEAA|AE8F+AE8F/AE8F\AE8F;
                      CMP.B !_2                                 ;;AEAD|AE92+AE92/AE92\AE92;
                      LDA.W !ScoreSpriteYPosHigh,X              ;;AEAF|AE94+AE94/AE94\AE94;
                      SBC.B !_3                                 ;;AEB2|AE97+AE97/AE97\AE97;
                      BNE Return02AEFB                          ;;AEB4|AE99+AE99/AE99\AE99;
                      LDY.W DATA_02AD9E,X                       ;;AEB6|AE9B+AE9B/AE9B\AE9B;
                      BIT.W !IRQNMICommand                      ;;AEB9|AE9E+AE9E/AE9E\AE9E;
                      BVC +                                     ;;AEBC|AEA1+AEA1/AEA1\AEA1;
                      LDY.B #$04                                ;;AEBE|AEA3+AEA3/AEA3\AEA3;
                    + LDA.W !ScoreSpriteYPosLow,X               ;;AEC0|AEA5+AEA5/AEA5\AEA5;
                      SEC                                       ;;AEC3|AEA8+AEA8/AEA8\AEA8;
                      SBC.B !_2                                 ;;AEC4|AEA9+AEA9/AEA9\AEA9;
                      STA.W !OAMTileYPos,Y                      ;;AEC6|AEAB+AEAB/AEAB\AEAB;
                      STA.W !OAMTileYPos+4,Y                    ;;AEC9|AEAE+AEAE/AEAE\AEAE;
                      LDA.W !ScoreSpriteXPosLow,X               ;;AECC|AEB1+AEB1/AEB1\AEB1;
                      SEC                                       ;;AECF|AEB4+AEB4/AEB4\AEB4;
                      SBC.B !_4                                 ;;AED0|AEB5+AEB5/AEB5\AEB5;
                      STA.W !OAMTileXPos,Y                      ;;AED2|AEB7+AEB7/AEB7\AEB7;
                      CLC                                       ;;AED5|AEBA+AEBA/AEBA\AEBA;
                      ADC.B #$08                                ;;AED6|AEBB+AEBB/AEBB\AEBB;
                      STA.W !OAMTileXPos+4,Y                    ;;AED8|AEBD+AEBD/AEBD\AEBD;
                      PHX                                       ;;AEDB|AEC0+AEC0/AEC0\AEC0;
                      LDA.W !ScoreSpriteNumber,X                ;;AEDC|AEC1+AEC1/AEC1\AEC1;
                      TAX                                       ;;AEDF|AEC4+AEC4/AEC4\AEC4;
                      %LorW_X(LDA,PointTile1)                   ;;AEE0|AEC5+AEC5/AEC5\AEC5;
                      STA.W !OAMTileNo,Y                        ;;AEE4|AEC8+AEC8/AEC8\AEC8;
                      %LorW_X(LDA,PointTile2)                   ;;AEE7|AECB+AECB/AECB\AECB;
                      STA.W !OAMTileNo+4,Y                      ;;AEEB|AECE+AECE/AECE\AECE;
                      PLX                                       ;;AEEE|AED1+AED1/AED1\AED1;
                      PHY                                       ;;AEEF|AED2+AED2/AED2\AED2;
                      LDY.W !ScoreSpriteNumber,X                ;;AEF0|AED3+AED3/AED3\AED3; \ Get score sprite number,
                      CPY.B #$0E                                ;;AEF3|AED6+AED6/AED6\AED6; | and set processor flags
                      LDA.B #$08                                ;;AEF5|AED8+AED8/AED8\AED8; | Use palette 4 (reds) as default,
                      BCC +                                     ;;AEF7|AEDA+AEDA/AEDA\AEDA; | If score sprite number => 0E (2up)
                      LDA.W TwoUpThreeUpProps-$0E,Y             ;;AEF9|AEDC+AEDC/AEDC\AEDC; | Use the values from this table instead.
                    + PLY                                       ;;AEFC|AEDF+AEDF/AEDF\AEDF; /
                      ORA.B #$30                                ;;AEFD|AEE0+AEE0/AEE0\AEE0;
                      STA.W !OAMTileAttr,Y                      ;;AEFF|AEE2+AEE2/AEE2\AEE2;
                      STA.W !OAMTileAttr+4,Y                    ;;AF02|AEE5+AEE5/AEE5\AEE5;
                      TYA                                       ;;AF05|AEE8+AEE8/AEE8\AEE8;
                      LSR A                                     ;;AF06|AEE9+AEE9/AEE9\AEE9;
                      LSR A                                     ;;AF07|AEEA+AEEA/AEEA\AEEA;
                      TAY                                       ;;AF08|AEEB+AEEB/AEEB\AEEB;
                      LDA.B #$00                                ;;AF09|AEEC+AEEC/AEEC\AEEC;
                      STA.W !OAMTileSize,Y                      ;;AF0B|AEEE+AEEE/AEEE\AEEE;
                      STA.W !OAMTileSize+1,Y                    ;;AF0E|AEF1+AEF1/AEF1\AEF1;
                      LDA.W !ScoreSpriteNumber,X                ;;AF11|AEF4+AEF4/AEF4\AEF4;
                      CMP.B #$11                                ;;AF14|AEF7+AEF7/AEF7\AEF7;
                      BCS +                                     ;;AF16|AEF9+AEF9/AEF9\AEF9;
Return02AEFB:         RTS                                       ;;AF18|AEFB+AEFB/AEFB\AEFB; Return
                                                                ;;                        ;
                    + LDY.B #$4C                                ;;AF19|AEFC+AEFC/AEFC\AEFC;
                      LDA.W !ScoreSpriteXPosLow,X               ;;AF1B|AEFE+AEFE/AEFE\AEFE;
                      SEC                                       ;;AF1E|AF01+AF01/AF01\AF01;
                      SBC.B !_4                                 ;;AF1F|AF02+AF02/AF02\AF02;
                      SEC                                       ;;AF21|AF04+AF04/AF04\AF04;
                      SBC.B #$08                                ;;AF22|AF05+AF05/AF05\AF05;
                      STA.W !OAMTileXPos,Y                      ;;AF24|AF07+AF07/AF07\AF07;
                      LDA.W !ScoreSpriteYPosLow,X               ;;AF27|AF0A+AF0A/AF0A\AF0A;
                      SEC                                       ;;AF2A|AF0D+AF0D/AF0D\AF0D;
                      SBC.B !_2                                 ;;AF2B|AF0E+AF0E/AF0E\AF0E;
                      STA.W !OAMTileYPos,Y                      ;;AF2D|AF10+AF10/AF10\AF10;
                      LDA.B #$5F                                ;;AF30|AF13+AF13/AF13\AF13;
                      STA.W !OAMTileNo,Y                        ;;AF32|AF15+AF15/AF15\AF15;
                      LDA.B #$04                                ;;AF35|AF18+AF18/AF18\AF18;
                      ORA.B #$30                                ;;AF37|AF1A+AF1A/AF1A\AF1A;
                      STA.W !OAMTileAttr,Y                      ;;AF39|AF1C+AF1C/AF1C\AF1C;
                      TYA                                       ;;AF3C|AF1F+AF1F/AF1F\AF1F;
                      LSR A                                     ;;AF3D|AF20+AF20/AF20\AF20;
                      LSR A                                     ;;AF3E|AF21+AF21/AF21\AF21;
                      TAY                                       ;;AF3F|AF22+AF22/AF22\AF22;
                      LDA.B #$00                                ;;AF40|AF23+AF23/AF23\AF23;
                      STA.W !OAMTileSize,Y                      ;;AF42|AF25+AF25/AF25\AF25;
                      RTS                                       ;;AF45|AF28+AF28/AF28\AF28; Return
                                                                ;;                        ;
                      STZ.W !ScoreSpriteNumber,X                ;;AF46|AF29+AF29/AF29\AF29; \ Unreachable
                      RTS                                       ;;AF49|AF2C+AF2C/AF2C\AF2C; /
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02AF2D:          db $00,$AA,$54                            ;;AF4A|AF2D+AF2D/AF2D\AF2D;
                                                                ;;                        ;
DATA_02AF30:          db $00,$00,$01                            ;;AF4D|AF30+AF30/AF30\AF30;
                                                                ;;                        ;
Load3Platforms:       LDY.B !_3                                 ;;AF50|AF33+AF33/AF33\AF33;
                      LDA.B [!SpriteDataPtr],Y                  ;;AF52|AF35+AF35/AF35\AF35;
                      PHA                                       ;;AF54|AF37+AF37/AF37\AF37;
                      AND.B #$F0                                ;;AF55|AF38+AF38/AF38\AF38;
                      STA.B !_8                                 ;;AF57|AF3A+AF3A/AF3A\AF3A;
                      PLA                                       ;;AF59|AF3C+AF3C/AF3C\AF3C;
                      AND.B #$01                                ;;AF5A|AF3D+AF3D/AF3D\AF3D;
                      STA.B !_9                                 ;;AF5C|AF3F+AF3F/AF3F\AF3F;
                      LDA.B #$02                                ;;AF5E|AF41+AF41/AF41\AF41;
                      STA.B !_4                                 ;;AF60|AF43+AF43/AF43\AF43;
CODE_02AF45:          JSL FindFreeSprSlot                       ;;AF62|AF45+AF45/AF45\AF45; \ Return if no free slots
                      BMI Return02AF86                          ;;AF66|AF49+AF49/AF49\AF49; /
                      TYX                                       ;;AF68|AF4B+AF4B/AF4B\AF4B;
                      LDA.B #$01                                ;;AF69|AF4C+AF4C/AF4C\AF4C; \ Sprite status = Initialization
                      STA.W !SpriteStatus,X                     ;;AF6B|AF4E+AF4E/AF4E\AF4E; /
                      LDA.B #$A3                                ;;AF6E|AF51+AF51/AF51\AF51; \ Sprite = Grey Platform on Chain
                      STA.B !SpriteNumber,X                     ;;AF70|AF53+AF53/AF53\AF53; /
                      JSL InitSpriteTables                      ;;AF72|AF55+AF55/AF55\AF55;
                      LDA.B !_0                                 ;;AF76|AF59+AF59/AF59\AF59;
                      STA.B !SpriteXPosLow,X                    ;;AF78|AF5B+AF5B/AF5B\AF5B;
                      LDA.B !_1                                 ;;AF7A|AF5D+AF5D/AF5D\AF5D;
                      STA.W !SpriteXPosHigh,X                   ;;AF7C|AF5F+AF5F/AF5F\AF5F;
                      LDA.B !_8                                 ;;AF7F|AF62+AF62/AF62\AF62;
                      STA.B !SpriteYPosLow,X                    ;;AF81|AF64+AF64/AF64\AF64;
                      LDA.B !_9                                 ;;AF83|AF66+AF66/AF66\AF66;
                      STA.W !SpriteYPosHigh,X                   ;;AF85|AF68+AF68/AF68\AF68;
                      LDY.B !_4                                 ;;AF88|AF6B+AF6B/AF6B\AF6B;
                      LDA.W DATA_02AF2D,Y                       ;;AF8A|AF6D+AF6D/AF6D\AF6D;
                      STA.W !SpriteMisc1602,X                   ;;AF8D|AF70+AF70/AF70\AF70;
                      LDA.W DATA_02AF30,Y                       ;;AF90|AF73+AF73/AF73\AF73;
                      STA.W !SpriteMisc151C,X                   ;;AF93|AF76+AF76/AF76\AF76;
                      CPY.B #$02                                ;;AF96|AF79+AF79/AF79\AF79;
                      BNE +                                     ;;AF98|AF7B+AF7B/AF7B\AF7B;
                      LDA.B !_2                                 ;;AF9A|AF7D+AF7D/AF7D\AF7D;
                      STA.W !SpriteLoadIndex,X                  ;;AF9C|AF7F+AF7F/AF7F\AF7F;
                    + DEC.B !_4                                 ;;AF9F|AF82+AF82/AF82\AF82;
                      BPL CODE_02AF45                           ;;AFA1|AF84+AF84/AF84\AF84;
Return02AF86:         RTS                                       ;;AFA3|AF86+AF86/AF86\AF86; Return
                                                                ;;                        ;
                                                                ;;                        ;
EerieGroupDispXLo:    db $E0,$F0,$00,$10,$20                    ;;AFA4|AF87+AF87/AF87\AF87;
                                                                ;;                        ;
EerieGroupDispXHi:    db $FF,$FF,$00,$00,$00                    ;;AFA9|AF8C+AF8C/AF8C\AF8C;
                                                                ;;                        ;
EerieGroupSpeedY:     db $17,$E9,$17,$E9,$17                    ;;AFAE|AF91+AF91/AF91\AF91;
                                                                ;;                        ;
EerieGroupState:      db $00,$01,$00,$01,$00                    ;;AFB3|AF96+AF96/AF96\AF96;
                                                                ;;                        ;
EerieGroupSpeedX:     db $10,$F0                                ;;AFB8|AF9B+AF9B/AF9B\AF9B;
                                                                ;;                        ;
Load5Eeries:          LDY.B !_3                                 ;;AFBA|AF9D+AF9D/AF9D\AF9D;
                      LDA.B [!SpriteDataPtr],Y                  ;;AFBC|AF9F+AF9F/AF9F\AF9F;
                      PHA                                       ;;AFBE|AFA1+AFA1/AFA1\AFA1;
                      AND.B #$F0                                ;;AFBF|AFA2+AFA2/AFA2\AFA2;
                      STA.B !_8                                 ;;AFC1|AFA4+AFA4/AFA4\AFA4;
                      PLA                                       ;;AFC3|AFA6+AFA6/AFA6\AFA6;
                      AND.B #$01                                ;;AFC4|AFA7+AFA7/AFA7\AFA7;
                      STA.B !_9                                 ;;AFC6|AFA9+AFA9/AFA9\AFA9;
                      LDA.B #$04                                ;;AFC8|AFAB+AFAB/AFAB\AFAB;
                      STA.B !_4                                 ;;AFCA|AFAD+AFAD/AFAD\AFAD;
CODE_02AFAF:          JSL FindFreeSprSlot                       ;;AFCC|AFAF+AFAF/AFAF\AFAF; \ Return if no free slots
                      BMI Return02AFFD                          ;;AFD0|AFB3+AFB3/AFB3\AFB3; /
                      TYX                                       ;;AFD2|AFB5+AFB5/AFB5\AFB5;
                      LDA.B #$08                                ;;AFD3|AFB6+AFB6/AFB6\AFB6; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;AFD5|AFB8+AFB8/AFB8\AFB8; /
                      LDA.B #$39                                ;;AFD8|AFBB+AFBB/AFBB\AFBB; \ Sprite = Wave Eerie
                      STA.B !SpriteNumber,X                     ;;AFDA|AFBD+AFBD/AFBD\AFBD; /
                      JSL InitSpriteTables                      ;;AFDC|AFBF+AFBF/AFBF\AFBF;
                      LDY.B !_4                                 ;;AFE0|AFC3+AFC3/AFC3\AFC3;
                      LDA.B !_0                                 ;;AFE2|AFC5+AFC5/AFC5\AFC5;
                      CLC                                       ;;AFE4|AFC7+AFC7/AFC7\AFC7;
                      ADC.W EerieGroupDispXLo,Y                 ;;AFE5|AFC8+AFC8/AFC8\AFC8;
                      STA.B !SpriteXPosLow,X                    ;;AFE8|AFCB+AFCB/AFCB\AFCB;
                      LDA.B !_1                                 ;;AFEA|AFCD+AFCD/AFCD\AFCD;
                      ADC.W EerieGroupDispXHi,Y                 ;;AFEC|AFCF+AFCF/AFCF\AFCF;
                      STA.W !SpriteXPosHigh,X                   ;;AFEF|AFD2+AFD2/AFD2\AFD2;
                      LDA.B !_8                                 ;;AFF2|AFD5+AFD5/AFD5\AFD5;
                      STA.B !SpriteYPosLow,X                    ;;AFF4|AFD7+AFD7/AFD7\AFD7;
                      LDA.B !_9                                 ;;AFF6|AFD9+AFD9/AFD9\AFD9;
                      STA.W !SpriteYPosHigh,X                   ;;AFF8|AFDB+AFDB/AFDB\AFDB;
                      LDA.W EerieGroupSpeedY,Y                  ;;AFFB|AFDE+AFDE/AFDE\AFDE;
                      STA.B !SpriteYSpeed,X                     ;;AFFE|AFE1+AFE1/AFE1\AFE1;
                      LDA.W EerieGroupState,Y                   ;;B000|AFE3+AFE3/AFE3\AFE3;
                      STA.B !SpriteTableC2,X                    ;;B003|AFE6+AFE6/AFE6\AFE6;
                      CPY.B #$04                                ;;B005|AFE8+AFE8/AFE8\AFE8;
                      BNE +                                     ;;B007|AFEA+AFEA/AFEA\AFEA;
                      LDA.B !_2                                 ;;B009|AFEC+AFEC/AFEC\AFEC;
                      STA.W !SpriteLoadIndex,X                  ;;B00B|AFEE+AFEE/AFEE\AFEE;
                    + JSR SubHorzPosBnk2                        ;;B00E|AFF1+AFF1/AFF1\AFF1;
                      LDA.W EerieGroupSpeedX,Y                  ;;B011|AFF4+AFF4/AFF4\AFF4;
                      STA.B !SpriteXSpeed,X                     ;;B014|AFF7+AFF7/AFF7\AFF7;
                      DEC.B !_4                                 ;;B016|AFF9+AFF9/AFF9\AFF9;
                      BPL CODE_02AFAF                           ;;B018|AFFB+AFFB/AFFB\AFFB;
Return02AFFD:         RTS                                       ;;B01A|AFFD+AFFD/AFFD\AFFD; Return
                                                                ;;                        ;
CallGenerator:        LDA.W !CurrentGenerator                   ;;B01B|AFFE+AFFE/AFFE\AFFE;
                      BEQ +                                     ;;B01E|B001+B001/B001\B001;
                      LDY.B !SpriteLock                         ;;B020|B003+B003/B003\B003;
                      BNE +                                     ;;B022|B005+B005/B005\B005;
                      DEC A                                     ;;B024|B007+B007/B007\B007;
                      JSL ExecutePtr                            ;;B025|B008+B008/B008\B008;
                                                                ;;                        ;
                      dw GenerateEerie                          ;;B029|B00C+B00C/B00C\B00C; 00 - Eerie, generator
                      dw GenParaEnemy                           ;;B02B|B00E+B00E/B00E\B00E; 01 - Para-Goomba, generator
                      dw GenParaEnemy                           ;;B02D|B010+B010/B010\B010; 02 - Para-Bomb, generator
                      dw GenParaEnemy                           ;;B02F|B012+B012/B012\B012; 03 - Para-Bomb and Para-Goomba, generator
                      dw GenerateDolphin                        ;;B031|B014+B014/B014\B014; 04 - Dolphin, left, generator
                      dw GenerateDolphin                        ;;B033|B016+B016/B016\B016; 05 - Dolphin, right, generator
                      dw GenerateFish                           ;;B035|B018+B018/B018\B018; 06 - Jumping fish, generator
                      dw TurnOffGen2                            ;;B037|B01A+B01A/B01A\B01A; 07 - Turn off generator 2 (sprite E5)
                      dw GenSuperKoopa                          ;;B039|B01C+B01C/B01C\B01C; 08 - Super Koopa, generator
                      dw GenerateBubble                         ;;B03B|B01E+B01E/B01E\B01E; 09 - Bubble with Goomba and Bob-omb, generator
                      dw GenerateBullet                         ;;B03D|B020+B020/B020\B020; 0A - Bullet Bill, generator
                      dw GenMultiBullets                        ;;B03F|B022+B022/B022\B022; 0B - Bullet Bill surrounded, generator
                      dw GenMultiBullets                        ;;B041|B024+B024/B024\B024; 0C - Bullet Bill diagonal, generator
                      dw GenerateFire                           ;;B043|B026+B026/B026\B026; 0D - Bowser statue fire breath, generator
                      dw TurnOffGenerators                      ;;B045|B028+B028/B028\B028; 0E - Turn off standard generators
                                                                ;;                        ;
                    + RTS                                       ;;B047|B02A+B02A/B02A\B02A; Return
                                                                ;;                        ;
TurnOffGen2:          INC.W !SpriteWillAppear                   ;;B048|B02B+B02B/B02B\B02B;
                      STZ.W !SpriteRespawnTimer                 ;;B04B|B02E+B02E/B02E\B02E; Don't respawn any sprites
                      RTS                                       ;;B04E|B031+B031/B031\B031; Return
                                                                ;;                        ;
TurnOffGenerators:    STZ.W !CurrentGenerator                   ;;B04F|B032+B032/B032\B032;
                      RTS                                       ;;B052|B035+B035/B035\B035; Return
                                                                ;;                        ;
GenerateFire:         LDA.B !EffFrame                           ;;B053|B036+B036/B036\B036;
                      AND.B #$7F                                ;;B055|B038+B038/B038\B038;
                      BNE +                                     ;;B057|B03A+B03A/B03A\B03A;
                      JSL FindFreeSlotLowPri                    ;;B059|B03C+B03C/B03C\B03C;
                      BMI +                                     ;;B05D|B040+B040/B040\B040;
                      TYX                                       ;;B05F|B042+B042/B042\B042;
                      LDA.B #!SFX_FIRESPIT                      ;;B060|B043+B043/B043\B043; \ Play sound effect
                      STA.W !SPCIO3                             ;;B062|B045+B045/B045\B045; /
                      LDA.B #$08                                ;;B065|B048+B048/B048\B048; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B067|B04A+B04A/B04A\B04A; /
                      LDA.B #$B3                                ;;B06A|B04D+B04D/B04D\B04D; \ Sprite = Bowser's Statue Fireball
                      STA.B !SpriteNumber,X                     ;;B06C|B04F+B04F/B04F\B04F; /
                      JSL InitSpriteTables                      ;;B06E|B051+B051/B051\B051;
                      JSL GetRand                               ;;B072|B055+B055/B055\B055;
                      AND.B #$7F                                ;;B076|B059+B059/B059\B059;
                      ADC.B #$20                                ;;B078|B05B+B05B/B05B\B05B;
                      ADC.B !Layer1YPos                         ;;B07A|B05D+B05D/B05D\B05D;
                      AND.B #$F0                                ;;B07C|B05F+B05F/B05F\B05F;
                      STA.B !SpriteYPosLow,X                    ;;B07E|B061+B061/B061\B061;
                      LDA.B !Layer1YPos+1                       ;;B080|B063+B063/B063\B063;
                      ADC.B #$00                                ;;B082|B065+B065/B065\B065;
                      STA.W !SpriteYPosHigh,X                   ;;B084|B067+B067/B067\B067;
                      LDA.B !Layer1XPos                         ;;B087|B06A+B06A/B06A\B06A;
                      CLC                                       ;;B089|B06C+B06C/B06C\B06C;
                      ADC.B #$FF                                ;;B08A|B06D+B06D/B06D\B06D;
                      STA.B !SpriteXPosLow,X                    ;;B08C|B06F+B06F/B06F\B06F;
                      LDA.B !Layer1XPos+1                       ;;B08E|B071+B071/B071\B071;
                      ADC.B #$00                                ;;B090|B073+B073/B073\B073;
                      STA.W !SpriteXPosHigh,X                   ;;B092|B075+B075/B075\B075;
                      INC.W !SpriteMisc157C,X                   ;;B095|B078+B078/B078\B078;
                    + RTS                                       ;;B098|B07B+B07B/B07B\B07B; Return
                                                                ;;                        ;
GenerateBullet:       LDA.B !EffFrame                           ;;B099|B07C+B07C/B07C\B07C;
                      AND.B #$7F                                ;;B09B|B07E+B07E/B07E\B07E;  |
                      BNE +                                     ;;B09D|B080+B080/B080\B080; /
                      JSL FindFreeSlotLowPri                    ;;B09F|B082+B082/B082\B082;
                      BMI +                                     ;;B0A3|B086+B086/B086\B086;
                      LDA.B #!SFX_KAPOW                         ;;B0A5|B088+B088/B088\B088; \ Play sound effect
                      STA.W !SPCIO3                             ;;B0A7|B08A+B08A/B08A\B08A; /
                      TYX                                       ;;B0AA|B08D+B08D/B08D\B08D;
                      LDA.B #$08                                ;;B0AB|B08E+B08E/B08E\B08E; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B0AD|B090+B090/B090\B090; /
                      LDA.B #$1C                                ;;B0B0|B093+B093/B093\B093; \ Sprite = Bullet Bill
                      STA.B !SpriteNumber,X                     ;;B0B2|B095+B095/B095\B095; /
                      JSL InitSpriteTables                      ;;B0B4|B097+B097/B097\B097;
                      JSL GetRand                               ;;B0B8|B09B+B09B/B09B\B09B;
                      PHA                                       ;;B0BC|B09F+B09F/B09F\B09F;
                      AND.B #$7F                                ;;B0BD|B0A0+B0A0/B0A0\B0A0;
                      ADC.B #$20                                ;;B0BF|B0A2+B0A2/B0A2\B0A2;
                      ADC.B !Layer1YPos                         ;;B0C1|B0A4+B0A4/B0A4\B0A4;
                      AND.B #$F0                                ;;B0C3|B0A6+B0A6/B0A6\B0A6;
                      STA.B !SpriteYPosLow,X                    ;;B0C5|B0A8+B0A8/B0A8\B0A8;
                      LDA.B !Layer1YPos+1                       ;;B0C7|B0AA+B0AA/B0AA\B0AA;
                      ADC.B #$00                                ;;B0C9|B0AC+B0AC/B0AC\B0AC;
                      STA.W !SpriteYPosHigh,X                   ;;B0CB|B0AE+B0AE/B0AE\B0AE;
                      PLA                                       ;;B0CE|B0B1+B0B1/B0B1\B0B1;
                      AND.B #$01                                ;;B0CF|B0B2+B0B2/B0B2\B0B2;
                      TAY                                       ;;B0D1|B0B4+B0B4/B0B4\B0B4;
                      LDA.B !Layer1XPos                         ;;B0D2|B0B5+B0B5/B0B5\B0B5;
                      CLC                                       ;;B0D4|B0B7+B0B7/B0B7\B0B7;
                      ADC.W DATA_02B1B8,Y                       ;;B0D5|B0B8+B0B8/B0B8\B0B8;
                      STA.B !SpriteXPosLow,X                    ;;B0D8|B0BB+B0BB/B0BB\B0BB;
CODE_02B0BD:          LDA.B !Layer1XPos+1                       ;;B0DA|B0BD+B0BD/B0BD\B0BD;
CODE_02B0BF:          ADC.W DATA_02B1BA,Y                       ;;B0DC|B0BF+B0BF/B0BF\B0BF;
                      STA.W !SpriteXPosHigh,X                   ;;B0DF|B0C2+B0C2/B0C2\B0C2;
                      TYA                                       ;;B0E2|B0C5+B0C5/B0C5\B0C5;
                      STA.B !SpriteTableC2,X                    ;;B0E3|B0C6+B0C6/B0C6\B0C6;
                    + RTS                                       ;;B0E5|B0C8+B0C8/B0C8\B0C8; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $04,$08,$04,$03                        ;;B0E6|B0C9+B0C9/B0C9\B0C9;
                                                                ;;                        ;
GenMultiBullets:      LDA.B !EffFrame                           ;;B0EA|B0CD+B0CD/B0CD\B0CD;
                      LSR A                                     ;;B0EC|B0CF+B0CF/B0CF\B0CF;
                      BCS Return02B0F9                          ;;B0ED|B0D0+B0D0/B0D0\B0D0;
                      LDA.W !DiagonalBulletTimer                ;;B0EF|B0D2+B0D2/B0D2\B0D2;
                      INC.W !DiagonalBulletTimer                ;;B0F2|B0D5+B0D5/B0D5\B0D5;
                      CMP.B #$A0                                ;;B0F5|B0D8+B0D8/B0D8\B0D8;
                      BNE Return02B0F9                          ;;B0F7|B0DA+B0DA/B0DA\B0DA;
                      STZ.W !DiagonalBulletTimer                ;;B0F9|B0DC+B0DC/B0DC\B0DC;
                      LDA.B #!SFX_KAPOW                         ;;B0FC|B0DF+B0DF/B0DF\B0DF; \ Play sound effect
                      STA.W !SPCIO3                             ;;B0FE|B0E1+B0E1/B0E1\B0E1; /
                      LDY.W !CurrentGenerator                   ;;B101|B0E4+B0E4/B0E4\B0E4;
                      LDA.W CODE_02B0BD,Y                       ;;B104|B0E7+B0E7/B0E7\B0E7;
                      LDX.W CODE_02B0BF,Y                       ;;B107|B0EA+B0EA/B0EA\B0EA;
                      STA.B !_D                                 ;;B10A|B0ED+B0ED/B0ED\B0ED;
                    - PHX                                       ;;B10C|B0EF+B0EF/B0EF\B0EF;
                      JSR CODE_02B115                           ;;B10D|B0F0+B0F0/B0F0\B0F0;
                      DEC.B !_D                                 ;;B110|B0F3+B0F3/B0F3\B0F3;
                      PLX                                       ;;B112|B0F5+B0F5/B0F5\B0F5;
                      DEX                                       ;;B113|B0F6+B0F6/B0F6\B0F6;
                      BPL -                                     ;;B114|B0F7+B0F7/B0F7\B0F7;
Return02B0F9:         RTS                                       ;;B116|B0F9+B0F9/B0F9\B0F9; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B0FA:          db $00,$00,$40,$C0,$F0,$00,$00,$F0        ;;B117|B0FA+B0FA/B0FA\B0FA;
                      db $F0                                    ;;B11F|B102+B102/B102\B102;
                                                                ;;                        ;
DATA_02B103:          db $50,$B0,$E0,$E0,$80,$00,$E0,$E0        ;;B120|B103+B103/B103\B103;
                      db $00                                    ;;B128|B10B+B10B/B10B\B10B;
                                                                ;;                        ;
DATA_02B10C:          db $00,$00,$02,$02,$01,$05,$04,$07        ;;B129|B10C+B10C/B10C\B10C;
                      db $06                                    ;;B131|B114+B114/B114\B114;
                                                                ;;                        ;
CODE_02B115:          JSL FindFreeSlotLowPri                    ;;B132|B115+B115/B115\B115;
                      BMI +                                     ;;B136|B119+B119/B119\B119;
                      LDA.B #$1C                                ;;B138|B11B+B11B/B11B\B11B; \ Sprite = Bullet Bill
                      STA.W !SpriteNumber,Y                     ;;B13A|B11D+B11D/B11D\B11D; /
                      LDA.B #$08                                ;;B13D|B120+B120/B120\B120; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;B13F|B122+B122/B122\B122; /
                      TYX                                       ;;B142|B125+B125/B125\B125;
                      JSL InitSpriteTables                      ;;B143|B126+B126/B126\B126;
                      LDX.B !_D                                 ;;B147|B12A+B12A/B12A\B12A;
                      LDA.W DATA_02B0FA,X                       ;;B149|B12C+B12C/B12C\B12C;
                      CLC                                       ;;B14C|B12F+B12F/B12F\B12F;
                      ADC.B !Layer1XPos                         ;;B14D|B130+B130/B130\B130;
                      STA.W !SpriteXPosLow,Y                    ;;B14F|B132+B132/B132\B132;
                      LDA.B !Layer1XPos+1                       ;;B152|B135+B135/B135\B135;
                      ADC.B #$00                                ;;B154|B137+B137/B137\B137;
                      STA.W !SpriteXPosHigh,Y                   ;;B156|B139+B139/B139\B139;
                      LDA.W DATA_02B103,X                       ;;B159|B13C+B13C/B13C\B13C;
                      CLC                                       ;;B15C|B13F+B13F/B13F\B13F;
                      ADC.B !Layer1YPos                         ;;B15D|B140+B140/B140\B140;
                      STA.W !SpriteYPosLow,Y                    ;;B15F|B142+B142/B142\B142;
                      LDA.B !Layer1YPos+1                       ;;B162|B145+B145/B145\B145;
                      ADC.B #$00                                ;;B164|B147+B147/B147\B147;
                      STA.W !SpriteYPosHigh,Y                   ;;B166|B149+B149/B149\B149;
                      LDA.W DATA_02B10C,X                       ;;B169|B14C+B14C/B14C\B14C;
                      STA.W !SpriteTableC2,Y                    ;;B16C|B14F+B14F/B14F\B14F;
                    + RTS                                       ;;B16F|B152+B152/B152\B152; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B153:          db $10,$18,$20,$28                        ;;B170|B153+B153/B153\B153;
                                                                ;;                        ;
DATA_02B157:          db $18,$1A,$1C,$1E                        ;;B174|B157+B157/B157\B157;
                                                                ;;                        ;
GenerateFish:         LDA.B !EffFrame                           ;;B178|B15B+B15B/B15B\B15B;
                      AND.B #$1F                                ;;B17A|B15D+B15D/B15D\B15D;
                      BNE Return02B1B7                          ;;B17C|B15F+B15F/B15F\B15F;
                      JSL FindFreeSlotLowPri                    ;;B17E|B161+B161/B161\B161;
                      BMI Return02B1B7                          ;;B182|B165+B165/B165\B165;
                      TYX                                       ;;B184|B167+B167/B167\B167;
                      LDA.B #$08                                ;;B185|B168+B168/B168\B168; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B187|B16A+B16A/B16A\B16A; /
                      LDA.B #$17                                ;;B18A|B16D+B16D/B16D\B16D; \ Sprite = Flying Fish
                      STA.B !SpriteNumber,X                     ;;B18C|B16F+B16F/B16F\B16F; /
                      JSL InitSpriteTables                      ;;B18E|B171+B171/B171\B171;
                      LDA.B !Layer1YPos                         ;;B192|B175+B175/B175\B175;
                      CLC                                       ;;B194|B177+B177/B177\B177;
                      ADC.B #$C0                                ;;B195|B178+B178/B178\B178;
                      STA.B !SpriteYPosLow,X                    ;;B197|B17A+B17A/B17A\B17A;
                      LDA.B !Layer1YPos+1                       ;;B199|B17C+B17C/B17C\B17C;
                      ADC.B #$00                                ;;B19B|B17E+B17E/B17E\B17E;
                      STA.W !SpriteYPosHigh,X                   ;;B19D|B180+B180/B180\B180;
                      JSL GetRand                               ;;B1A0|B183+B183/B183\B183;
                      CMP.B #$00                                ;;B1A4|B187+B187/B187\B187;
                      PHP                                       ;;B1A6|B189+B189/B189\B189;
                      PHP                                       ;;B1A7|B18A+B18A/B18A\B18A;
                      AND.B #$03                                ;;B1A8|B18B+B18B/B18B\B18B;
                      TAY                                       ;;B1AA|B18D+B18D/B18D\B18D;
                      LDA.W DATA_02B153,Y                       ;;B1AB|B18E+B18E/B18E\B18E;
                      PLP                                       ;;B1AE|B191+B191/B191\B191;
                      BPL +                                     ;;B1AF|B192+B192/B192\B192;
                      EOR.B #$FF                                ;;B1B1|B194+B194/B194\B194;
                    + CLC                                       ;;B1B3|B196+B196/B196\B196;
                      ADC.B !Layer1XPos                         ;;B1B4|B197+B197/B197\B197;
                      STA.B !SpriteXPosLow,X                    ;;B1B6|B199+B199/B199\B199;
                      LDA.B !Layer1XPos+1                       ;;B1B8|B19B+B19B/B19B\B19B;
                      ADC.B #$00                                ;;B1BA|B19D+B19D/B19D\B19D;
                      STA.W !SpriteXPosHigh,X                   ;;B1BC|B19F+B19F/B19F\B19F;
                      LDA.W !RandomNumber+1                     ;;B1BF|B1A2+B1A2/B1A2\B1A2;
                      AND.B #$03                                ;;B1C2|B1A5+B1A5/B1A5\B1A5;
                      TAY                                       ;;B1C4|B1A7+B1A7/B1A7\B1A7;
                      LDA.W DATA_02B157,Y                       ;;B1C5|B1A8+B1A8/B1A8\B1A8;
                      PLP                                       ;;B1C8|B1AB+B1AB/B1AB\B1AB;
                      BPL +                                     ;;B1C9|B1AC+B1AC/B1AC\B1AC;
                      EOR.B #$FF                                ;;B1CB|B1AE+B1AE/B1AE\B1AE;
                      INC A                                     ;;B1CD|B1B0+B1B0/B1B0\B1B0;
                    + STA.B !SpriteXSpeed,X                     ;;B1CE|B1B1+B1B1/B1B1\B1B1;
                      LDA.B #$B8                                ;;B1D0|B1B3+B1B3/B1B3\B1B3;
                      STA.B !SpriteYSpeed,X                     ;;B1D2|B1B5+B1B5/B1B5\B1B5;
Return02B1B7:         RTS                                       ;;B1D4|B1B7+B1B7/B1B7\B1B7; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B1B8:          db $E0,$10                                ;;B1D5|B1B8+B1B8/B1B8\B1B8;
                                                                ;;                        ;
DATA_02B1BA:          db $FF,$01                                ;;B1D7|B1BA+B1BA/B1BA\B1BA;
                                                                ;;                        ;
GenSuperKoopa:        LDA.B !EffFrame                           ;;B1D9|B1BC+B1BC/B1BC\B1BC;
                      AND.B #$3F                                ;;B1DB|B1BE+B1BE/B1BE\B1BE;
                      BNE +                                     ;;B1DD|B1C0+B1C0/B1C0\B1C0;
                      JSL FindFreeSlotLowPri                    ;;B1DF|B1C2+B1C2/B1C2\B1C2;
                      BMI +                                     ;;B1E3|B1C6+B1C6/B1C6\B1C6;
                      TYX                                       ;;B1E5|B1C8+B1C8/B1C8\B1C8;
                      LDA.B #$08                                ;;B1E6|B1C9+B1C9/B1C9\B1C9; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B1E8|B1CB+B1CB/B1CB\B1CB; /
                      LDA.B #$71                                ;;B1EB|B1CE+B1CE/B1CE\B1CE;
                      STA.B !SpriteNumber,X                     ;;B1ED|B1D0+B1D0/B1D0\B1D0;
                      JSL InitSpriteTables                      ;;B1EF|B1D2+B1D2/B1D2\B1D2;
                      JSL GetRand                               ;;B1F3|B1D6+B1D6/B1D6\B1D6;
                      PHA                                       ;;B1F7|B1DA+B1DA/B1DA\B1DA;
                      AND.B #$3F                                ;;B1F8|B1DB+B1DB/B1DB\B1DB;
                      ADC.B #$20                                ;;B1FA|B1DD+B1DD/B1DD\B1DD;
                      ADC.B !Layer1YPos                         ;;B1FC|B1DF+B1DF/B1DF\B1DF;
                      STA.B !SpriteYPosLow,X                    ;;B1FE|B1E1+B1E1/B1E1\B1E1;
                      LDA.B !Layer1YPos+1                       ;;B200|B1E3+B1E3/B1E3\B1E3;
                      ADC.B #$00                                ;;B202|B1E5+B1E5/B1E5\B1E5;
                      STA.W !SpriteYPosHigh,X                   ;;B204|B1E7+B1E7/B1E7\B1E7;
                      LDA.B #$28                                ;;B207|B1EA+B1EA/B1EA\B1EA;
                      STA.B !SpriteYSpeed,X                     ;;B209|B1EC+B1EC/B1EC\B1EC;
                      PLA                                       ;;B20B|B1EE+B1EE/B1EE\B1EE;
                      AND.B #$01                                ;;B20C|B1EF+B1EF/B1EF\B1EF;
                      TAY                                       ;;B20E|B1F1+B1F1/B1F1\B1F1;
                      LDA.B !Layer1XPos                         ;;B20F|B1F2+B1F2/B1F2\B1F2;
                      CLC                                       ;;B211|B1F4+B1F4/B1F4\B1F4;
                      ADC.W DATA_02B1B8,Y                       ;;B212|B1F5+B1F5/B1F5\B1F5;
                      STA.B !SpriteXPosLow,X                    ;;B215|B1F8+B1F8/B1F8\B1F8;
                      LDA.B !Layer1XPos+1                       ;;B217|B1FA+B1FA/B1FA\B1FA;
                      ADC.W DATA_02B1BA,Y                       ;;B219|B1FC+B1FC/B1FC\B1FC;
                      STA.W !SpriteXPosHigh,X                   ;;B21C|B1FF+B1FF/B1FF\B1FF;
                      TYA                                       ;;B21F|B202+B202/B202\B202;
                      STA.W !SpriteMisc157C,X                   ;;B220|B203+B203/B203\B203;
                    + RTS                                       ;;B223|B206+B206/B206\B206; Return
                                                                ;;                        ;
GenerateBubble:       LDA.B !EffFrame                           ;;B224|B207+B207/B207\B207;
                      AND.B #$7F                                ;;B226|B209+B209/B209\B209;
                      BNE Return02B259                          ;;B228|B20B+B20B/B20B\B20B;
                      JSL FindFreeSlotLowPri                    ;;B22A|B20D+B20D/B20D\B20D;
                      BMI Return02B259                          ;;B22E|B211+B211/B211\B211;
                      TYX                                       ;;B230|B213+B213/B213\B213;
                      LDA.B #$08                                ;;B231|B214+B214/B214\B214; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B233|B216+B216/B216\B216; /
                      LDA.B #$9D                                ;;B236|B219+B219/B219\B219;
                      STA.B !SpriteNumber,X                     ;;B238|B21B+B21B/B21B\B21B;
                      JSL InitSpriteTables                      ;;B23A|B21D+B21D/B21D\B21D;
                      JSL GetRand                               ;;B23E|B221+B221/B221\B221;
                      PHA                                       ;;B242|B225+B225/B225\B225;
                      AND.B #$3F                                ;;B243|B226+B226/B226\B226;
                      ADC.B #$20                                ;;B245|B228+B228/B228\B228;
                      ADC.B !Layer1YPos                         ;;B247|B22A+B22A/B22A\B22A;
                      STA.B !SpriteYPosLow,X                    ;;B249|B22C+B22C/B22C\B22C;
                      LDA.B !Layer1YPos+1                       ;;B24B|B22E+B22E/B22E\B22E;
                      ADC.B #$00                                ;;B24D|B230+B230/B230\B230;
                      STA.W !SpriteYPosHigh,X                   ;;B24F|B232+B232/B232\B232;
                      PLA                                       ;;B252|B235+B235/B235\B235;
                      AND.B #$01                                ;;B253|B236+B236/B236\B236;
                      TAY                                       ;;B255|B238+B238/B238\B238;
                      LDA.B !Layer1XPos                         ;;B256|B239+B239/B239\B239;
                      CLC                                       ;;B258|B23B+B23B/B23B\B23B;
                      ADC.W DATA_02B1B8,Y                       ;;B259|B23C+B23C/B23C\B23C;
                      STA.B !SpriteXPosLow,X                    ;;B25C|B23F+B23F/B23F\B23F;
                      LDA.B !Layer1XPos+1                       ;;B25E|B241+B241/B241\B241;
                      ADC.W DATA_02B1BA,Y                       ;;B260|B243+B243/B243\B243;
                      STA.W !SpriteXPosHigh,X                   ;;B263|B246+B246/B246\B246;
                      TYA                                       ;;B266|B249+B249/B249\B249;
                      STA.W !SpriteMisc157C,X                   ;;B267|B24A+B24A/B24A\B24A;
                      JSL GetRand                               ;;B26A|B24D+B24D/B24D\B24D;
                      AND.B #$03                                ;;B26E|B251+B251/B251\B251;
                      TAY                                       ;;B270|B253+B253/B253\B253;
                      LDA.W DATA_02B25A,Y                       ;;B271|B254+B254/B254\B254;
                      STA.B !SpriteTableC2,X                    ;;B274|B257+B257/B257\B257;
Return02B259:         RTS                                       ;;B276|B259+B259/B259\B259; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B25A:          db $00                                    ;;B277|B25A+B25A/B25A\B25A;
                                                                ;;                        ;
DATA_02B25B:          db $01,$02                                ;;B278|B25B+B25B/B25B\B25B;
                                                                ;;                        ;
DATA_02B25D:          db $00,$10,$E0,$01,$FF,$E8                ;;B27A|B25D+B25D/B25D\B25D;
                                                                ;;                        ;
DATA_02B263:          db $18                                    ;;B280|B263+B263/B263\B263;
                                                                ;;                        ;
DATA_02B264:          db $F0                                    ;;B281|B264+B264/B264\B264;
                                                                ;;                        ;
DATA_02B265:          db $E0,$00,$10,$04,$09,$FF,$04            ;;B282|B265+B265/B265\B265;
                                                                ;;                        ;
GenerateDolphin:      LDA.B !EffFrame                           ;;B289|B26C+B26C/B26C\B26C;
                      AND.B #$1F                                ;;B28B|B26E+B26E/B26E\B26E;
                      BNE Return02B2CF                          ;;B28D|B270+B270/B270\B270;
                      LDY.W !CurrentGenerator                   ;;B28F|B272+B272/B272\B272;
                      LDX.W DATA_02B263,Y                       ;;B292|B275+B275/B275\B275;
                      LDA.W DATA_02B265,Y                       ;;B295|B278+B278/B278\B278;
                      STA.B !_0                                 ;;B298|B27B+B27B/B27B\B27B;
CODE_02B27D:          LDA.W !SpriteStatus,X                     ;;B29A|B27D+B27D/B27D\B27D;
                      BEQ CODE_02B288                           ;;B29D|B280+B280/B280\B280;
                      DEX                                       ;;B29F|B282+B282/B282\B282;
                      CPX.B !_0                                 ;;B2A0|B283+B283/B283\B283;
                      BNE CODE_02B27D                           ;;B2A2|B285+B285/B285\B285;
                      RTS                                       ;;B2A4|B287+B287/B287\B287; Return
                                                                ;;                        ;
CODE_02B288:          LDA.B #$08                                ;;B2A5|B288+B288/B288\B288; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B2A7|B28A+B28A/B28A\B28A; /
                      LDA.B #$41                                ;;B2AA|B28D+B28D/B28D\B28D;
                      STA.B !SpriteNumber,X                     ;;B2AC|B28F+B28F/B28F\B28F;
                      JSL InitSpriteTables                      ;;B2AE|B291+B291/B291\B291;
                      JSL GetRand                               ;;B2B2|B295+B295/B295\B295;
                      AND.B #$7F                                ;;B2B6|B299+B299/B299\B299;
                      ADC.B #$40                                ;;B2B8|B29B+B29B/B29B\B29B;
                      ADC.B !Layer1YPos                         ;;B2BA|B29D+B29D/B29D\B29D;
                      STA.B !SpriteYPosLow,X                    ;;B2BC|B29F+B29F/B29F\B29F;
                      LDA.B !Layer1YPos+1                       ;;B2BE|B2A1+B2A1/B2A1\B2A1;
                      ADC.B #$00                                ;;B2C0|B2A3+B2A3/B2A3\B2A3;
                      STA.W !SpriteYPosHigh,X                   ;;B2C2|B2A5+B2A5/B2A5\B2A5;
                      JSL GetRand                               ;;B2C5|B2A8+B2A8/B2A8\B2A8;
                      AND.B #$03                                ;;B2C9|B2AC+B2AC/B2AC\B2AC;
                      TAY                                       ;;B2CB|B2AE+B2AE/B2AE\B2AE;
                      LDA.W DATA_02B264,Y                       ;;B2CC|B2AF+B2AF/B2AF\B2AF;
                      STA.B !SpriteYSpeed,X                     ;;B2CF|B2B2+B2B2/B2B2\B2B2;
                      LDY.W !CurrentGenerator                   ;;B2D1|B2B4+B2B4/B2B4\B2B4;
                      LDA.B !Layer1XPos                         ;;B2D4|B2B7+B2B7/B2B7\B2B7;
                      CLC                                       ;;B2D6|B2B9+B2B9/B2B9\B2B9;
                      ADC.W Return02B259,Y                      ;;B2D7|B2BA+B2BA/B2BA\B2BA;
                      STA.B !SpriteXPosLow,X                    ;;B2DA|B2BD+B2BD/B2BD\B2BD;
                      LDA.B !Layer1XPos+1                       ;;B2DC|B2BF+B2BF/B2BF\B2BF;
                      ADC.W DATA_02B25B,Y                       ;;B2DE|B2C1+B2C1/B2C1\B2C1;
                      STA.W !SpriteXPosHigh,X                   ;;B2E1|B2C4+B2C4/B2C4\B2C4;
                      LDA.W DATA_02B25D,Y                       ;;B2E4|B2C7+B2C7/B2C7\B2C7;
                      STA.B !SpriteXSpeed,X                     ;;B2E7|B2CA+B2CA/B2CA\B2CA;
                      INC.W !SpriteMisc151C,X                   ;;B2E9|B2CC+B2CC/B2CC\B2CC;
Return02B2CF:         RTS                                       ;;B2EC|B2CF+B2CF/B2CF\B2CF; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B2D0:          db $F0,$FF                                ;;B2ED|B2D0+B2D0/B2D0\B2D0;
                                                                ;;                        ;
DATA_02B2D2:          db $FF,$00                                ;;B2EF|B2D2+B2D2/B2D2\B2D2;
                                                                ;;                        ;
DATA_02B2D4:          db $10,$F0                                ;;B2F1|B2D4+B2D4/B2D4\B2D4;
                                                                ;;                        ;
GenerateEerie:        LDA.B !EffFrame                           ;;B2F3|B2D6+B2D6/B2D6\B2D6;
                      AND.B #$3F                                ;;B2F5|B2D8+B2D8/B2D8\B2D8;
                      BNE +                                     ;;B2F7|B2DA+B2DA/B2DA\B2DA;
                      JSL FindFreeSlotLowPri                    ;;B2F9|B2DC+B2DC/B2DC\B2DC;
                      BMI +                                     ;;B2FD|B2E0+B2E0/B2E0\B2E0;
                      TYX                                       ;;B2FF|B2E2+B2E2/B2E2\B2E2;
                      LDA.B #$08                                ;;B300|B2E3+B2E3/B2E3\B2E3; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B302|B2E5+B2E5/B2E5\B2E5; /
                      LDA.B #$38                                ;;B305|B2E8+B2E8/B2E8\B2E8;
                      STA.B !SpriteNumber,X                     ;;B307|B2EA+B2EA/B2EA\B2EA;
                      JSL InitSpriteTables                      ;;B309|B2EC+B2EC/B2EC\B2EC;
                      JSL GetRand                               ;;B30D|B2F0+B2F0/B2F0\B2F0;
                      AND.B #$7F                                ;;B311|B2F4+B2F4/B2F4\B2F4;
                      ADC.B #$40                                ;;B313|B2F6+B2F6/B2F6\B2F6;
                      ADC.B !Layer1YPos                         ;;B315|B2F8+B2F8/B2F8\B2F8;
                      STA.B !SpriteYPosLow,X                    ;;B317|B2FA+B2FA/B2FA\B2FA;
                      LDA.B !Layer1YPos+1                       ;;B319|B2FC+B2FC/B2FC\B2FC;
                      ADC.B #$00                                ;;B31B|B2FE+B2FE/B2FE\B2FE;
                      STA.W !SpriteYPosHigh,X                   ;;B31D|B300+B300/B300\B300;
                      LDA.W !RandomNumber+1                     ;;B320|B303+B303/B303\B303;
                      AND.B #$01                                ;;B323|B306+B306/B306\B306;
                      TAY                                       ;;B325|B308+B308/B308\B308;
                      LDA.W DATA_02B2D0,Y                       ;;B326|B309+B309/B309\B309;
                      CLC                                       ;;B329|B30C+B30C/B30C\B30C;
                      ADC.B !Layer1XPos                         ;;B32A|B30D+B30D/B30D\B30D;
                      STA.B !SpriteXPosLow,X                    ;;B32C|B30F+B30F/B30F\B30F;
                      LDA.B !Layer1XPos+1                       ;;B32E|B311+B311/B311\B311;
                      ADC.W DATA_02B2D2,Y                       ;;B330|B313+B313/B313\B313;
                      STA.W !SpriteXPosHigh,X                   ;;B333|B316+B316/B316\B316;
                      LDA.W DATA_02B2D4,Y                       ;;B336|B319+B319/B319\B319;
                      STA.B !SpriteXSpeed,X                     ;;B339|B31C+B31C/B31C\B31C;
                    + RTS                                       ;;B33B|B31E+B31E/B31E\B31E; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B31F:          db $3F,$40,$3F,$3F,$40,$40                ;;B33C|B31F+B31F/B31F\B31F;
                                                                ;;                        ;
DATA_02B325:          db $FA,$FB,$FC,$FD                        ;;B342|B325+B325/B325\B325;
                                                                ;;                        ;
GenParaEnemy:         LDA.B !EffFrame                           ;;B346|B329+B329/B329\B329;
                      AND.B #$7F                                ;;B348|B32B+B32B/B32B\B32B;
                      BNE Return02B386                          ;;B34A|B32D+B32D/B32D\B32D;
                      JSL FindFreeSlotLowPri                    ;;B34C|B32F+B32F/B32F\B32F;
                      BMI Return02B386                          ;;B350|B333+B333/B333\B333;
                      TYX                                       ;;B352|B335+B335/B335\B335;
                      LDA.B #$08                                ;;B353|B336+B336/B336\B336; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;B355|B338+B338/B338\B338; /
                      JSL GetRand                               ;;B358|B33B+B33B/B33B\B33B;
                      LSR A                                     ;;B35C|B33F+B33F/B33F\B33F;
                      LDY.W !CurrentGenerator                   ;;B35D|B340+B340/B340\B340;
                      BCC +                                     ;;B360|B343+B343/B343\B343;
                      INY                                       ;;B362|B345+B345/B345\B345;
                      INY                                       ;;B363|B346+B346/B346\B346;
                      INY                                       ;;B364|B347+B347/B347\B347;
                    + LDA.W DATA_02B31F-2,Y                     ;;B365|B348+B348/B348\B348;
                      STA.B !SpriteNumber,X                     ;;B368|B34B+B34B/B34B\B34B;
                      JSL InitSpriteTables                      ;;B36A|B34D+B34D/B34D\B34D;
                      LDA.B !Layer1YPos                         ;;B36E|B351+B351/B351\B351;
                      SEC                                       ;;B370|B353+B353/B353\B353;
                      SBC.B #$20                                ;;B371|B354+B354/B354\B354;
                      STA.B !SpriteYPosLow,X                    ;;B373|B356+B356/B356\B356;
                      LDA.B !Layer1YPos+1                       ;;B375|B358+B358/B358\B358;
                      SBC.B #$00                                ;;B377|B35A+B35A/B35A\B35A;
                      STA.W !SpriteYPosHigh,X                   ;;B379|B35C+B35C/B35C\B35C;
                      LDA.W !RandomNumber                       ;;B37C|B35F+B35F/B35F\B35F;
                      AND.B #$FF                                ;;B37F|B362+B362/B362\B362;
                      CLC                                       ;;B381|B364+B364/B364\B364;
                      ADC.B #$30                                ;;B382|B365+B365/B365\B365;
                      PHP                                       ;;B384|B367+B367/B367\B367;
                      ADC.B !Layer1XPos                         ;;B385|B368+B368/B368\B368;
                      STA.B !SpriteXPosLow,X                    ;;B387|B36A+B36A/B36A\B36A;
                      PHP                                       ;;B389|B36C+B36C/B36C\B36C;
                      AND.B #$0E                                ;;B38A|B36D+B36D/B36D\B36D;
                      STA.W !SpriteMisc1570,X                   ;;B38C|B36F+B36F/B36F\B36F;
                      LSR A                                     ;;B38F|B372+B372/B372\B372;
                      AND.B #$03                                ;;B390|B373+B373/B373\B373;
                      TAY                                       ;;B392|B375+B375/B375\B375;
                      LDA.W DATA_02B325,Y                       ;;B393|B376+B376/B376\B376;
                      STA.B !SpriteXSpeed,X                     ;;B396|B379+B379/B379\B379;
                      LDA.B !Layer1XPos+1                       ;;B398|B37B+B37B/B37B\B37B;
                      PLP                                       ;;B39A|B37D+B37D/B37D\B37D;
                      ADC.B #$00                                ;;B39B|B37E+B37E/B37E\B37E;
                      PLP                                       ;;B39D|B380+B380/B380\B380;
                      ADC.B #$00                                ;;B39E|B381+B381/B381\B381;
                      STA.W !SpriteXPosHigh,X                   ;;B3A0|B383+B383/B383\B383;
Return02B386:         RTS                                       ;;B3A3|B386+B386/B386\B386; Return
                                                                ;;                        ;
RunShooters:          LDA.B !SpriteLock                         ;;B3A4|B387+B387/B387\B387;
                      BNE Return02B3AA                          ;;B3A6|B389+B389/B389\B389;
                      LDX.B #$07                                ;;B3A8|B38B+B38B/B38B\B38B;
.loopNextShooterSlot: STX.W !CurSpriteProcess                   ;;B3AA|B38D+B38D/B38D\B38D;
                      LDA.W !ShooterNumber,X                    ;;B3AD|B390+B390/B390\B390;
                      BEQ .shooterNext                          ;;B3B0|B393+B393/B393\B393;
                      LDY.W !ShooterTimer,X                     ;;B3B2|B395+B395/B395\B395;
                      BEQ .shooterDoShoot                       ;;B3B5|B398+B398/B398\B398;
                      PHA                                       ;;B3B7|B39A+B39A/B39A\B39A;
                      LDA.B !TrueFrame                          ;;B3B8|B39B+B39B/B39B\B39B;
                      LSR A                                     ;;B3BA|B39D+B39D/B39D\B39D;
                      BCC +                                     ;;B3BB|B39E+B39E/B39E\B39E;
                      DEC.W !ShooterTimer,X                     ;;B3BD|B3A0+B3A0/B3A0\B3A0;
                    + PLA                                       ;;B3C0|B3A3+B3A3/B3A3\B3A3;
.shooterDoShoot:      JSR ShooterShoot                          ;;B3C1|B3A4+B3A4/B3A4\B3A4;
.shooterNext:         DEX                                       ;;B3C4|B3A7+B3A7/B3A7\B3A7;
                      BPL .loopNextShooterSlot                  ;;B3C5|B3A8+B3A8/B3A8\B3A8;
Return02B3AA:         RTS                                       ;;B3C7|B3AA+B3AA/B3AA\B3AA; Return
                                                                ;;                        ;
ShooterShoot:         DEC A                                     ;;B3C8|B3AB+B3AB/B3AB\B3AB;
                      JSL ExecutePtr                            ;;B3C9|B3AC+B3AC/B3AC\B3AC;
                                                                ;;                        ;
                      dw ShootBullet                            ;;B3CD|B3B0+B3B0/B3B0\B3B0; 00 - Bullet Bill shooter
                      dw LaunchTorpedo                          ;;B3CF|B3B2+B3B2/B3B2\B3B2; 01 - Torpedo Ted launcher
                      dw Return02B3AA                           ;;B3D1|B3B4+B3B4/B3B4\B3B4; 02 - Unused
                                                                ;;                        ;
LaunchTorpedo:        LDA.W !ShooterTimer,X                     ;;B3D3|B3B6+B3B6/B3B6\B3B6;
                      BNE Return02B42C                          ;;B3D6|B3B9+B3B9/B3B9\B3B9;
                      LDA.B #$50                                ;;B3D8|B3BB+B3BB/B3BB\B3BB;
                      STA.W !ShooterTimer,X                     ;;B3DA|B3BD+B3BD/B3BD\B3BD;
                      LDA.W !ShooterYPosLow,X                   ;;B3DD|B3C0+B3C0/B3C0\B3C0;
                      CMP.B !Layer1YPos                         ;;B3E0|B3C3+B3C3/B3C3\B3C3;
                      LDA.W !ShooterYPosHigh,X                  ;;B3E2|B3C5+B3C5/B3C5\B3C5;
                      SBC.B !Layer1YPos+1                       ;;B3E5|B3C8+B3C8/B3C8\B3C8;
                      BNE Return02B3AA                          ;;B3E7|B3CA+B3CA/B3CA\B3CA;
                      LDA.W !ShooterXPosLow,X                   ;;B3E9|B3CC+B3CC/B3CC\B3CC;
                      CMP.B !Layer1XPos                         ;;B3EC|B3CF+B3CF/B3CF\B3CF;
                      LDA.W !ShooterXPosHigh,X                  ;;B3EE|B3D1+B3D1/B3D1\B3D1;
                      SBC.B !Layer1XPos+1                       ;;B3F1|B3D4+B3D4/B3D4\B3D4;
                      BNE Return02B3AA                          ;;B3F3|B3D6+B3D6/B3D6\B3D6;
                      LDA.W !ShooterXPosLow,X                   ;;B3F5|B3D8+B3D8/B3D8\B3D8;
                      SEC                                       ;;B3F8|B3DB+B3DB/B3DB\B3DB;
                      SBC.B !Layer1XPos                         ;;B3F9|B3DC+B3DC/B3DC\B3DC;
                      CLC                                       ;;B3FB|B3DE+B3DE/B3DE\B3DE;
                      ADC.B #$10                                ;;B3FC|B3DF+B3DF/B3DF\B3DF;
                      CMP.B #$20                                ;;B3FE|B3E1+B3E1/B3E1\B3E1;
                      BCC Return02B42C                          ;;B400|B3E3+B3E3/B3E3\B3E3;
                      JSL FindFreeSlotLowPri                    ;;B402|B3E5+B3E5/B3E5\B3E5;
                      BMI Return02B42C                          ;;B406|B3E9+B3E9/B3E9\B3E9;
                      LDA.B #$08                                ;;B408|B3EB+B3EB/B3EB\B3EB; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;B40A|B3ED+B3ED/B3ED\B3ED; /
                      LDA.B #$44                                ;;B40D|B3F0+B3F0/B3F0\B3F0; \ Sprite = Torpedo Ted
                      STA.W !SpriteNumber,Y                     ;;B40F|B3F2+B3F2/B3F2\B3F2; /
                      LDA.W !ShooterXPosLow,X                   ;;B412|B3F5+B3F5/B3F5\B3F5; \ Sprite position = Shooter position
                      STA.W !SpriteXPosLow,Y                    ;;B415|B3F8+B3F8/B3F8\B3F8;  |
                      LDA.W !ShooterXPosHigh,X                  ;;B418|B3FB+B3FB/B3FB\B3FB;  |
                      STA.W !SpriteXPosHigh,Y                   ;;B41B|B3FE+B3FE/B3FE\B3FE;  |
                      LDA.W !ShooterYPosLow,X                   ;;B41E|B401+B401/B401\B401;  |
                      STA.W !SpriteYPosLow,Y                    ;;B421|B404+B404/B404\B404;  |
                      LDA.W !ShooterYPosHigh,X                  ;;B424|B407+B407/B407\B407;  |
                      STA.W !SpriteYPosHigh,Y                   ;;B427|B40A+B40A/B40A\B40A; /
                      PHX                                       ;;B42A|B40D+B40D/B40D\B40D;
                      TYX                                       ;;B42B|B40E+B40E/B40E\B40E; X = sprite index
                      JSL InitSpriteTables                      ;;B42C|B40F+B40F/B40F\B40F; Setup sprite tables
                      JSR SubHorzPosBnk2                        ;;B430|B413+B413/B413\B413; \ Direction = Towards Mario
                      TYA                                       ;;B433|B416+B416/B416\B416;  |
                      STA.W !SpriteMisc157C,X                   ;;B434|B417+B417/B417\B417; /
                      STA.B !_0                                 ;;B437|B41A+B41A/B41A\B41A; $00 = sprite direction
                      LDA.B #$30                                ;;B439|B41C+B41C/B41C\B41C; \ Set time to stay behind objects
                      STA.W !SpriteMisc1540,X                   ;;B43B|B41E+B41E/B41E\B41E; /
                      PLX                                       ;;B43E|B421+B421/B421\B421; X = shooter index
                      LDY.B #$07                                ;;B43F|B422+B422/B422\B422; \ Find a free extended sprite slot
CODE_02B424:          LDA.W !ExtSpriteNumber,Y                  ;;B441|B424+B424/B424\B424;  |
                      BEQ CODE_02B42D                           ;;B444|B427+B427/B427\B427;  |
                      DEY                                       ;;B446|B429+B429/B429\B429;  |
                      BPL CODE_02B424                           ;;B447|B42A+B42A/B42A\B42A;  |
Return02B42C:         RTS                                       ;;B449|B42C+B42C/B42C\B42C; / Return if no free slots
                                                                ;;                        ;
CODE_02B42D:          LDA.B #$08                                ;;B44A|B42D+B42D/B42D\B42D; \ Extended sprite = Torpedo Ted arm
                      STA.W !ExtSpriteNumber,Y                  ;;B44C|B42F+B42F/B42F\B42F; /
                      LDA.W !ShooterXPosLow,X                   ;;B44F|B432+B432/B432\B432;
                      CLC                                       ;;B452|B435+B435/B435\B435;
                      ADC.B #$08                                ;;B453|B436+B436/B436\B436;
                      STA.W !ExtSpriteXPosLow,Y                 ;;B455|B438+B438/B438\B438;
                      LDA.W !ShooterXPosHigh,X                  ;;B458|B43B+B43B/B43B\B43B;
                      ADC.B #$00                                ;;B45B|B43E+B43E/B43E\B43E;
                      STA.W !ExtSpriteXPosHigh,Y                ;;B45D|B440+B440/B440\B440;
                      LDA.W !ShooterYPosLow,X                   ;;B460|B443+B443/B443\B443;
                      SEC                                       ;;B463|B446+B446/B446\B446;
                      SBC.B #$09                                ;;B464|B447+B447/B447\B447;
                      STA.W !ExtSpriteYPosLow,Y                 ;;B466|B449+B449/B449\B449;
                      LDA.W !ShooterYPosHigh,X                  ;;B469|B44C+B44C/B44C\B44C;
                      SBC.B #$00                                ;;B46C|B44F+B44F/B44F\B44F;
                      STA.W !ExtSpriteYPosHigh,Y                ;;B46E|B451+B451/B451\B451;
                      LDA.B #$90                                ;;B471|B454+B454/B454\B454;
                      STA.W !ExtSpriteMisc176F,Y                ;;B473|B456+B456/B456\B456;
                      PHX                                       ;;B476|B459+B459/B459\B459;
                      LDX.B !_0                                 ;;B477|B45A+B45A/B45A\B45A;
                      LDA.W DATA_02B464,X                       ;;B479|B45C+B45C/B45C\B45C;
                      STA.W !ExtSpriteXSpeed,Y                  ;;B47C|B45F+B45F/B45F\B45F;
                      PLX                                       ;;B47F|B462+B462/B462\B462;
                      RTS                                       ;;B480|B463+B463/B463\B463; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B464:          db $01,$FF                                ;;B481|B464+B464/B464\B464;
                                                                ;;                        ;
ShootBullet:          LDA.W !ShooterTimer,X                     ;;B483|B466+B466/B466\B466; \ Return if it's not time to generate
                      BNE +                                     ;;B486|B469+B469/B469\B469; /
                      LDA.B #$60                                ;;B488|B46B+B46B/B46B\B46B; \ Set time till next generation = 60
                      STA.W !ShooterTimer,X                     ;;B48A|B46D+B46D/B46D\B46D; /
                      LDA.W !ShooterYPosLow,X                   ;;B48D|B470+B470/B470\B470; \ Don't generate if off screen vertically
                      CMP.B !Layer1YPos                         ;;B490|B473+B473/B473\B473;  |
                      LDA.W !ShooterYPosHigh,X                  ;;B492|B475+B475/B475\B475;  |
                      SBC.B !Layer1YPos+1                       ;;B495|B478+B478/B478\B478;  |
                      BNE +                                     ;;B497|B47A+B47A/B47A\B47A; /
                      LDA.W !ShooterXPosLow,X                   ;;B499|B47C+B47C/B47C\B47C; \ Don't generate if off screen horizontally
                      CMP.B !Layer1XPos                         ;;B49C|B47F+B47F/B47F\B47F;  |
                      LDA.W !ShooterXPosHigh,X                  ;;B49E|B481+B481/B481\B481;  |
                      SBC.B !Layer1XPos+1                       ;;B4A1|B484+B484/B484\B484;  |
                      BNE +                                     ;;B4A3|B486+B486/B486\B486; /
                      LDA.W !ShooterXPosLow,X                   ;;B4A5|B488+B488/B488\B488; \ ?? something else related to x position of generator??
                      SEC                                       ;;B4A8|B48B+B48B/B48B\B48B;  |
                      SBC.B !Layer1XPos                         ;;B4A9|B48C+B48C/B48C\B48C;  |
                      CLC                                       ;;B4AB|B48E+B48E/B48E\B48E;  |
                      ADC.B #$10                                ;;B4AC|B48F+B48F/B48F\B48F;  |
                      CMP.B #$10                                ;;B4AE|B491+B491/B491\B491;  |
                      BCC +                                     ;;B4B0|B493+B493/B493\B493; /
                      LDA.B !PlayerXPosNext                     ;;B4B2|B495+B495/B495\B495; \ Don't fire if mario is next to generator
                      SBC.W !ShooterXPosLow,X                   ;;B4B4|B497+B497/B497\B497;  |
                      CLC                                       ;;B4B7|B49A+B49A/B49A\B49A;  |
                      ADC.B #$11                                ;;B4B8|B49B+B49B/B49B\B49B;  |
                      CMP.B #$22                                ;;B4BA|B49D+B49D/B49D\B49D;  |
                      BCC +                                     ;;B4BC|B49F+B49F/B49F\B49F; /
                      JSL FindFreeSlotLowPri                    ;;B4BE|B4A1+B4A1/B4A1\B4A1; \ Get an index to an unused sprite slot, return if all slots full
                      BMI +                                     ;;B4C2|B4A5+B4A5/B4A5\B4A5; / After: Y has index of sprite being generated
                      LDA.B #!SFX_KAPOW                         ;;B4C4|B4A7+B4A7/B4A7\B4A7; \ Only shoot every #$80 frames
                      STA.W !SPCIO3                             ;;B4C6|B4A9+B4A9/B4A9\B4A9; / Play sound effect
                      LDA.B #$01                                ;;B4C9|B4AC+B4AC/B4AC\B4AC; \ Sprite status = Initialization
                      STA.W !SpriteStatus,Y                     ;;B4CB|B4AE+B4AE/B4AE\B4AE; /
                      LDA.B #$1C                                ;;B4CE|B4B1+B4B1/B4B1\B4B1; \ New sprite = Bullet Bill
                      STA.W !SpriteNumber,Y                     ;;B4D0|B4B3+B4B3/B4B3\B4B3; /
                      LDA.W !ShooterXPosLow,X                   ;;B4D3|B4B6+B4B6/B4B6\B4B6; \ Set x position for new sprite
                      STA.W !SpriteXPosLow,Y                    ;;B4D6|B4B9+B4B9/B4B9\B4B9;  |
                      LDA.W !ShooterXPosHigh,X                  ;;B4D9|B4BC+B4BC/B4BC\B4BC;  |
                      STA.W !SpriteXPosHigh,Y                   ;;B4DC|B4BF+B4BF/B4BF\B4BF; /
                      LDA.W !ShooterYPosLow,X                   ;;B4DF|B4C2+B4C2/B4C2\B4C2; \ Set y position for new sprite
                      SEC                                       ;;B4E2|B4C5+B4C5/B4C5\B4C5;  | (y position of generator - 1)
                      SBC.B #$01                                ;;B4E3|B4C6+B4C6/B4C6\B4C6;  |
                      STA.W !SpriteYPosLow,Y                    ;;B4E5|B4C8+B4C8/B4C8\B4C8;  |
                      LDA.W !ShooterYPosHigh,X                  ;;B4E8|B4CB+B4CB/B4CB\B4CB;  |
                      SBC.B #$00                                ;;B4EB|B4CE+B4CE/B4CE\B4CE;  |
                      STA.W !SpriteYPosHigh,Y                   ;;B4ED|B4D0+B4D0/B4D0\B4D0; /
                      PHX                                       ;;B4F0|B4D3+B4D3/B4D3\B4D3; \ Before: X must have index of sprite being generated
                      TYX                                       ;;B4F1|B4D4+B4D4/B4D4\B4D4;  | Routine clears *all* old sprite values...
                      JSL InitSpriteTables                      ;;B4F2|B4D5+B4D5/B4D5\B4D5;  | ...and loads in new values for the 6 main sprite tables
                      PLX                                       ;;B4F6|B4D9+B4D9/B4D9\B4D9; /
                      JSR ShowShooterSmoke                      ;;B4F7|B4DA+B4DA/B4DA\B4DA; Display smoke graphic
                    + RTS                                       ;;B4FA|B4DD+B4DD/B4DD\B4DD; Return
                                                                ;;                        ;
ShowShooterSmoke:     LDY.B #$03                                ;;B4FB|B4DE+B4DE/B4DE\B4DE; \ Find a free slot to display effect
FindFreeSmokeSlot:    LDA.W !SmokeSpriteNumber,Y                ;;B4FD|B4E0+B4E0/B4E0\B4E0;  |
                      BEQ SetShooterSmoke                       ;;B500|B4E3+B4E3/B4E3\B4E3;  |
                      DEY                                       ;;B502|B4E5+B4E5/B4E5\B4E5;  |
                      BPL FindFreeSmokeSlot                     ;;B503|B4E6+B4E6/B4E6\B4E6;  |
                      RTS                                       ;;B505|B4E8+B4E8/B4E8\B4E8; / Return if no free slots
                                                                ;;                        ;
                                                                ;;                        ;
ShooterSmokeDispX:    db $F4,$0C                                ;;B506|B4E9+B4E9/B4E9\B4E9;
                                                                ;;                        ;
SetShooterSmoke:      LDA.B #$01                                ;;B508|B4EB+B4EB/B4EB\B4EB; \ Set effect graphic to smoke graphic
                      STA.W !SmokeSpriteNumber,Y                ;;B50A|B4ED+B4ED/B4ED\B4ED; /
                      LDA.W !ShooterYPosLow,X                   ;;B50D|B4F0+B4F0/B4F0\B4F0; \ Smoke y position = generator y position
                      STA.W !SmokeSpriteYPos,Y                  ;;B510|B4F3+B4F3/B4F3\B4F3; /
                      LDA.B #$1B                                ;;B513|B4F6+B4F6/B4F6\B4F6; \ Set time to show smoke
                      STA.W !SmokeSpriteTimer,Y                 ;;B515|B4F8+B4F8/B4F8\B4F8; /
                      LDA.W !ShooterXPosLow,X                   ;;B518|B4FB+B4FB/B4FB\B4FB; \ Load generator x position and store it for later
                      PHA                                       ;;B51B|B4FE+B4FE/B4FE\B4FE; /
                      LDA.B !PlayerXPosNext                     ;;B51C|B4FF+B4FF/B4FF\B4FF; \ Determine which side of the generator mario is on
                      CMP.W !ShooterXPosLow,X                   ;;B51E|B501+B501/B501\B501;  |
                      LDA.B !PlayerXPosNext+1                   ;;B521|B504+B504/B504\B504;  |
                      SBC.W !ShooterXPosHigh,X                  ;;B523|B506+B506/B506\B506;  |
                      LDX.B #$00                                ;;B526|B509+B509/B509\B509;  |
                      BCC +                                     ;;B528|B50B+B50B/B50B\B50B;  |
                      INX                                       ;;B52A|B50D+B50D/B50D\B50D; /
                    + PLA                                       ;;B52B|B50E+B50E/B50E\B50E; \ Set smoke x position from generator position
                      CLC                                       ;;B52C|B50F+B50F/B50F\B50F;  |
                      %LorW_X(ADC,ShooterSmokeDispX)            ;;B52D|B510+B510/B510\B510;  |
                      STA.W !SmokeSpriteXPos,Y                  ;;B531|B513+B513/B513\B513; /
                      LDX.W !CurSpriteProcess                   ;;B534|B516+B516/B516\B516; X = Sprite index
                      RTS                                       ;;B537|B519+B519/B519\B519; Return
                                                                ;;                        ;
CODE_02B51A:          TXA                                       ;;B538|B51A+B51A/B51A\B51A;
                      CLC                                       ;;B539|B51B+B51B/B51B\B51B;
                      ADC.B #$04                                ;;B53A|B51C+B51C/B51C\B51C;
                      TAX                                       ;;B53C|B51E+B51E/B51E\B51E;
                      JSR CODE_02B526                           ;;B53D|B51F+B51F/B51F\B51F;
                      LDX.W !MinorSpriteProcIndex               ;;B540|B522+B522/B522\B522;
                      RTS                                       ;;B543|B525+B525/B525\B525; Return
                                                                ;;                        ;
CODE_02B526:          LDA.W !BounceSpriteYSpeed,X               ;;B544|B526+B526/B526\B526;
                      ASL A                                     ;;B547|B529+B529/B529\B529;
                      ASL A                                     ;;B548|B52A+B52A/B52A\B52A;
                      ASL A                                     ;;B549|B52B+B52B/B52B\B52B;
                      ASL A                                     ;;B54A|B52C+B52C/B52C\B52C;
                      CLC                                       ;;B54B|B52D+B52D/B52D\B52D;
                      ADC.W !BounceSpriteXPosSpx,X              ;;B54C|B52E+B52E/B52E\B52E;
                      STA.W !BounceSpriteXPosSpx,X              ;;B54F|B531+B531/B531\B531;
                      PHP                                       ;;B552|B534+B534/B534\B534;
                      LDA.W !BounceSpriteYSpeed,X               ;;B553|B535+B535/B535\B535;
                      LSR A                                     ;;B556|B538+B538/B538\B538;
                      LSR A                                     ;;B557|B539+B539/B539\B539;
                      LSR A                                     ;;B558|B53A+B53A/B53A\B53A;
                      LSR A                                     ;;B559|B53B+B53B/B53B\B53B;
                      CMP.B #$08                                ;;B55A|B53C+B53C/B53C\B53C;
                      LDY.B #$00                                ;;B55C|B53E+B53E/B53E\B53E;
                      BCC +                                     ;;B55E|B540+B540/B540\B540;
                      ORA.B #$F0                                ;;B560|B542+B542/B542\B542;
                      DEY                                       ;;B562|B544+B544/B544\B544;
                    + PLP                                       ;;B563|B545+B545/B545\B545;
                      ADC.W !BounceSpriteYPosLow,X              ;;B564|B546+B546/B546\B546;
                      STA.W !BounceSpriteYPosLow,X              ;;B567|B549+B549/B549\B549;
                      TYA                                       ;;B56A|B54C+B54C/B54C\B54C;
                      ADC.W !BounceSpriteYPosHigh,X             ;;B56B|B54D+B54D/B54D\B54D;
                      STA.W !BounceSpriteYPosHigh,X             ;;B56E|B550+B550/B550\B550;
                      RTS                                       ;;B571|B553+B553/B553\B553; Return
                                                                ;;                        ;
CODE_02B554:          TXA                                       ;;B572|B554+B554/B554\B554;
                      CLC                                       ;;B573|B555+B555/B555\B555;
                      ADC.B #$0A                                ;;B574|B556+B556/B556\B556;
                      TAX                                       ;;B576|B558+B558/B558\B558;
                      JSR CODE_02B560                           ;;B577|B559+B559/B559\B559;
                      LDX.W !CurSpriteProcess                   ;;B57A|B55C+B55C/B55C\B55C; X = Sprite index
                      RTS                                       ;;B57D|B55F+B55F/B55F\B55F; Return
                                                                ;;                        ;
CODE_02B560:          LDA.W !ExtSpriteYSpeed,X                  ;;B57E|B560+B560/B560\B560;
                      ASL A                                     ;;B581|B563+B563/B563\B563;
                      ASL A                                     ;;B582|B564+B564/B564\B564;
                      ASL A                                     ;;B583|B565+B565/B565\B565;
                      ASL A                                     ;;B584|B566+B566/B566\B566;
                      CLC                                       ;;B585|B567+B567/B567\B567;
                      ADC.W !ExtSpriteYPosSpx,X                 ;;B586|B568+B568/B568\B568;
                      STA.W !ExtSpriteYPosSpx,X                 ;;B589|B56B+B56B/B56B\B56B;
                      PHP                                       ;;B58C|B56E+B56E/B56E\B56E;
                      LDY.B #$00                                ;;B58D|B56F+B56F/B56F\B56F;
                      LDA.W !ExtSpriteYSpeed,X                  ;;B58F|B571+B571/B571\B571;
                      LSR A                                     ;;B592|B574+B574/B574\B574;
                      LSR A                                     ;;B593|B575+B575/B575\B575;
                      LSR A                                     ;;B594|B576+B576/B576\B576;
                      LSR A                                     ;;B595|B577+B577/B577\B577;
                      CMP.B #$08                                ;;B596|B578+B578/B578\B578;
                      BCC +                                     ;;B598|B57A+B57A/B57A\B57A;
                      ORA.B #$F0                                ;;B59A|B57C+B57C/B57C\B57C;
                      DEY                                       ;;B59C|B57E+B57E/B57E\B57E;
                    + PLP                                       ;;B59D|B57F+B57F/B57F\B57F;
                      ADC.W !ExtSpriteYPosLow,X                 ;;B59E|B580+B580/B580\B580;
                      STA.W !ExtSpriteYPosLow,X                 ;;B5A1|B583+B583/B583\B583;
                      TYA                                       ;;B5A4|B586+B586/B586\B586;
                      ADC.W !ExtSpriteYPosHigh,X                ;;B5A5|B587+B587/B587\B587;
                      STA.W !ExtSpriteYPosHigh,X                ;;B5A8|B58A+B58A/B58A\B58A;
                      RTS                                       ;;B5AB|B58D+B58D/B58D\B58D; Return
                                                                ;;                        ;
CODE_02B58E:          LDA.W !CoinSpriteYSpeed,X                 ;;B5AC|B58E+B58E/B58E\B58E;
                      ASL A                                     ;;B5AF|B591+B591/B591\B591;
                      ASL A                                     ;;B5B0|B592+B592/B592\B592;
                      ASL A                                     ;;B5B1|B593+B593/B593\B593;
                      ASL A                                     ;;B5B2|B594+B594/B594\B594;
                      CLC                                       ;;B5B3|B595+B595/B595\B595;
                      ADC.W !CoinSpriteYPosSpx,X                ;;B5B4|B596+B596/B596\B596;
                      STA.W !CoinSpriteYPosSpx,X                ;;B5B7|B599+B599/B599\B599;
                      PHP                                       ;;B5BA|B59C+B59C/B59C\B59C;
                      LDY.B #$00                                ;;B5BB|B59D+B59D/B59D\B59D;
                      LDA.W !CoinSpriteYSpeed,X                 ;;B5BD|B59F+B59F/B59F\B59F;
                      LSR A                                     ;;B5C0|B5A2+B5A2/B5A2\B5A2;
                      LSR A                                     ;;B5C1|B5A3+B5A3/B5A3\B5A3;
                      LSR A                                     ;;B5C2|B5A4+B5A4/B5A4\B5A4;
                      LSR A                                     ;;B5C3|B5A5+B5A5/B5A5\B5A5;
                      CMP.B #$08                                ;;B5C4|B5A6+B5A6/B5A6\B5A6;
                      BCC +                                     ;;B5C6|B5A8+B5A8/B5A8\B5A8;
                      ORA.B #$F0                                ;;B5C8|B5AA+B5AA/B5AA\B5AA;
                      DEY                                       ;;B5CA|B5AC+B5AC/B5AC\B5AC;
                    + PLP                                       ;;B5CB|B5AD+B5AD/B5AD\B5AD;
                      ADC.W !CoinSpriteYPosLow,X                ;;B5CC|B5AE+B5AE/B5AE\B5AE;
                      STA.W !CoinSpriteYPosLow,X                ;;B5CF|B5B1+B5B1/B5B1\B5B1;
                      TYA                                       ;;B5D2|B5B4+B5B4/B5B4\B5B4;
                      ADC.W !CoinSpriteYPosHigh,X               ;;B5D3|B5B5+B5B5/B5B5\B5B5;
                      STA.W !CoinSpriteYPosHigh,X               ;;B5D6|B5B8+B5B8/B5B8\B5B8;
                      RTS                                       ;;B5D9|B5BB+B5BB/B5BB\B5BB; Return
                                                                ;;                        ;
CODE_02B5BC:          TXA                                       ;;B5DA|B5BC+B5BC/B5BC\B5BC;
                      CLC                                       ;;B5DB|B5BD+B5BD/B5BD\B5BD;
                      ADC.B #$0C                                ;;B5DC|B5BE+B5BE/B5BE\B5BE;
                      TAX                                       ;;B5DE|B5C0+B5C0/B5C0\B5C0;
                      JSR CODE_02B5C8                           ;;B5DF|B5C1+B5C1/B5C1\B5C1;
                      LDX.W !MinorSpriteProcIndex               ;;B5E2|B5C4+B5C4/B5C4\B5C4;
                      RTS                                       ;;B5E5|B5C7+B5C7/B5C7\B5C7; Return
                                                                ;;                        ;
CODE_02B5C8:          LDA.W !MinExtSpriteYSpeed,X               ;;B5E6|B5C8+B5C8/B5C8\B5C8;
                      ASL A                                     ;;B5E9|B5CB+B5CB/B5CB\B5CB;
                      ASL A                                     ;;B5EA|B5CC+B5CC/B5CC\B5CC;
                      ASL A                                     ;;B5EB|B5CD+B5CD/B5CD\B5CD;
                      ASL A                                     ;;B5EC|B5CE+B5CE/B5CE\B5CE;
                      CLC                                       ;;B5ED|B5CF+B5CF/B5CF\B5CF;
                      ADC.W !MinExtSpriteYPosSpx,X              ;;B5EE|B5D0+B5D0/B5D0\B5D0;
                      STA.W !MinExtSpriteYPosSpx,X              ;;B5F1|B5D3+B5D3/B5D3\B5D3;
                      PHP                                       ;;B5F4|B5D6+B5D6/B5D6\B5D6;
                      LDA.W !MinExtSpriteYSpeed,X               ;;B5F5|B5D7+B5D7/B5D7\B5D7;
                      LSR A                                     ;;B5F8|B5DA+B5DA/B5DA\B5DA;
                      LSR A                                     ;;B5F9|B5DB+B5DB/B5DB\B5DB;
                      LSR A                                     ;;B5FA|B5DC+B5DC/B5DC\B5DC;
                      LSR A                                     ;;B5FB|B5DD+B5DD/B5DD\B5DD;
                      CMP.B #$08                                ;;B5FC|B5DE+B5DE/B5DE\B5DE;
                      BCC +                                     ;;B5FE|B5E0+B5E0/B5E0\B5E0;
                      ORA.B #$F0                                ;;B600|B5E2+B5E2/B5E2\B5E2;
                    + PLP                                       ;;B602|B5E4+B5E4/B5E4\B5E4;
                      ADC.W !MinExtSpriteYPosLow,X              ;;B603|B5E5+B5E5/B5E5\B5E5;
                      STA.W !MinExtSpriteYPosLow,X              ;;B606|B5E8+B5E8/B5E8\B5E8;
                      RTS                                       ;;B609|B5EB+B5EB/B5EB\B5EB; Return
                                                                ;;                        ;
                      %insert_empty($26,$44,$44,$44,$44)        ;;B60A|B5EC+B5EC/B5EC\B5EC;
                                                                ;;                        ;
PokeyClipIndex:       db $1B,$1B,$1A,$19,$18,$17                ;;B630|B630+B630/B630\B630;
                                                                ;;                        ;
PokeyMain:            PHB                                       ;;B636|B636+B636/B636\B636;
                      PHK                                       ;;B637|B637+B637/B637\B637;
                      PLB                                       ;;B638|B638+B638/B638\B638;
                      JSR PokeyMainRt                           ;;B639|B639+B639/B639\B639;
                      LDA.B !SpriteTableC2,X                    ;;B63C|B63C+B63C/B63C\B63C; \ After: Y = number of segments
                      PHX                                       ;;B63E|B63E+B63E/B63E\B63E;  | $C2,x has a bit set for each segment remaining
                      LDX.B #$04                                ;;B63F|B63F+B63F/B63F\B63F;  | for X=0 to X=4...
                      LDY.B #$00                                ;;B641|B641+B641/B641\B641;  |
PokeyLoopStart:       LSR A                                     ;;B643|B643+B643/B643\B643;  |
                      BCC +                                     ;;B644|B644+B644/B644\B644;  |
                      INY                                       ;;B646|B646+B646/B646\B646;  | ...Increment Y if bit X is set
                    + DEX                                       ;;B647|B647+B647/B647\B647;  |
                      BPL PokeyLoopStart                        ;;B648|B648+B648/B648\B648;  |
                      PLX                                       ;;B64A|B64A+B64A/B64A\B64A; /
                      LDA.W PokeyClipIndex,Y                    ;;B64B|B64B+B64B/B64B\B64B; \ Update the index into the clipping table
                      STA.W !SpriteTweaker1662,X                ;;B64E|B64E+B64E/B64E\B64E; /
                      PLB                                       ;;B651|B651+B651/B651\B651;
                      RTL                                       ;;B652|B652+B652/B652\B652; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B653:          db $01,$02,$04,$08                        ;;B653|B653+B653/B653\B653;
                                                                ;;                        ;
DATA_02B657:          db $00,$01,$03,$07                        ;;B657|B657+B657/B657\B657;
                                                                ;;                        ;
DATA_02B65B:          db $FF,$FE,$FC,$F8                        ;;B65B|B65B+B65B/B65B\B65B;
                                                                ;;                        ;
PokeyTileDispX:       db $00,$01,$00,$FF                        ;;B65F|B65F+B65F/B65F\B65F;
                                                                ;;                        ;
PokeySpeed:           db $02,$FE                                ;;B663|B663+B663/B663\B663;
                                                                ;;                        ;
DATA_02B665:          db $00,$05,$09,$0C,$0E,$0F,$10,$10        ;;B665|B665+B665/B665\B665;
                      db $10,$10,$10,$10,$10                    ;;B66D|B66D+B66D/B66D\B66D;
                                                                ;;                        ;
PokeyMainRt:          LDA.W !SpriteMisc1534,X                   ;;B672|B672+B672/B672\B672;
                      BNE CODE_02B681                           ;;B675|B675+B675/B675\B675;
                      LDA.W !SpriteStatus,X                     ;;B677|B677+B677/B677\B677; \ Branch if Status == Normal
                      CMP.B #$08                                ;;B67A|B67A+B67A/B67A\B67A;  |
                      BEQ CODE_02B6A7                           ;;B67C|B67C+B67C/B67C\B67C; /
                      JMP PokeyGfxRt                            ;;B67E|B67E+B67E/B67E\B67E;
                                                                ;;                        ;
CODE_02B681:          JSL GenericSprGfxRt2                      ;;B681|B681+B681/B681\B681;
                      LDY.W !SpriteOAMIndex,X                   ;;B685|B685+B685/B685\B685; Y = Index into sprite OAM
                      LDA.B !SpriteTableC2,X                    ;;B688|B688+B688/B688\B688;
                      CMP.B #$01                                ;;B68A|B68A+B68A/B68A\B68A;
                      LDA.B #$8A                                ;;B68C|B68C+B68C/B68C\B68C;
                      BCC +                                     ;;B68E|B68E+B68E/B68E\B68E;
                      LDA.B #$E8                                ;;B690|B690+B690/B690\B690;
                    + STA.W !OAMTileNo+$100,Y                   ;;B692|B692+B692/B692\B692;
                      LDA.W !SpriteStatus,X                     ;;B695|B695+B695/B695\B695;
                      CMP.B #$08                                ;;B698|B698+B698/B698\B698;
                      BNE +                                     ;;B69A|B69A+B69A/B69A\B69A;
                      JSR UpdateYPosNoGrvty                     ;;B69C|B69C+B69C/B69C\B69C;
                      INC.B !SpriteYSpeed,X                     ;;B69F|B69F+B69F/B69F\B69F;
                      INC.B !SpriteYSpeed,X                     ;;B6A1|B6A1+B6A1/B6A1\B6A1;
                      JSR SubOffscreen0Bnk2                     ;;B6A3|B6A3+B6A3/B6A3\B6A3;
                    + RTS                                       ;;B6A6|B6A6+B6A6/B6A6\B6A6; Return
                                                                ;;                        ;
CODE_02B6A7:          LDA.B !SpriteTableC2,X                    ;;B6A7|B6A7+B6A7/B6A7\B6A7; \ Erase sprite if no segments remain
                      BNE +                                     ;;B6A9|B6A9+B6A9/B6A9\B6A9;  |
                    - STZ.W !SpriteStatus,X                     ;;B6AB|B6AB+B6AB/B6AB\B6AB;  |
                      RTS                                       ;;B6AE|B6AE+B6AE/B6AE\B6AE; Return
                                                                ;;                        ;
                    + CMP.B #$20                                ;;B6AF|B6AF+B6AF/B6AF\B6AF;
                      BCS -                                     ;;B6B1|B6B1+B6B1/B6B1\B6B1;
                      LDA.B !SpriteLock                         ;;B6B3|B6B3+B6B3/B6B3\B6B3;
                      BNE PokeyGfxRt                            ;;B6B5|B6B5+B6B5/B6B5\B6B5;
                      JSR SubOffscreen0Bnk2                     ;;B6B7|B6B7+B6B7/B6B7\B6B7;
                      JSL MarioSprInteract                      ;;B6BA|B6BA+B6BA/B6BA\B6BA;
                      INC.W !SpriteMisc1570,X                   ;;B6BE|B6BE+B6BE/B6BE\B6BE;
                      LDA.W !SpriteMisc1570,X                   ;;B6C1|B6C1+B6C1/B6C1\B6C1;
                      AND.B #$7F                                ;;B6C4|B6C4+B6C4/B6C4\B6C4;
                      BNE +                                     ;;B6C6|B6C6+B6C6/B6C6\B6C6;
                      JSR SubHorizPosBnk2                       ;;B6C8|B6C8+B6C8/B6C8\B6C8;
                      TYA                                       ;;B6CB|B6CB+B6CB/B6CB\B6CB;
                      STA.W !SpriteMisc157C,X                   ;;B6CC|B6CC+B6CC/B6CC\B6CC;
                    + LDY.W !SpriteMisc157C,X                   ;;B6CF|B6CF+B6CF/B6CF\B6CF;
                      LDA.W PokeySpeed,Y                        ;;B6D2|B6D2+B6D2/B6D2\B6D2;
                      STA.B !SpriteXSpeed,X                     ;;B6D5|B6D5+B6D5/B6D5\B6D5;
                      JSR UpdateXPosNoGrvty                     ;;B6D7|B6D7+B6D7/B6D7\B6D7;
                      JSR UpdateYPosNoGrvty                     ;;B6DA|B6DA+B6DA/B6DA\B6DA;
                      LDA.B !SpriteYSpeed,X                     ;;B6DD|B6DD+B6DD/B6DD\B6DD;
                      CMP.B #$40                                ;;B6DF|B6DF+B6DF/B6DF\B6DF;
                      BPL +                                     ;;B6E1|B6E1+B6E1/B6E1\B6E1;
                      CLC                                       ;;B6E3|B6E3+B6E3/B6E3\B6E3;
                      ADC.B #$02                                ;;B6E4|B6E4+B6E4/B6E4\B6E4;
                      STA.B !SpriteYSpeed,X                     ;;B6E6|B6E6+B6E6/B6E6\B6E6;
                    + JSL SprObjInteract                        ;;B6E8|B6E8+B6E8/B6E8\B6E8;
                      LDA.W !SpriteBlockedDirs,X                ;;B6EC|B6EC+B6EC/B6EC\B6EC; \ Branch if not on ground
                      AND.B #$04                                ;;B6EF|B6EF+B6EF/B6EF\B6EF;  |
                      BEQ +                                     ;;B6F1|B6F1+B6F1/B6F1\B6F1; /
                      STZ.B !SpriteYSpeed,X                     ;;B6F3|B6F3+B6F3/B6F3\B6F3; Sprite Y Speed = 0
                    + LDA.W !SpriteBlockedDirs,X                ;;B6F5|B6F5+B6F5/B6F5\B6F5;
                      AND.B #$03                                ;;B6F8|B6F8+B6F8/B6F8\B6F8;
                      BEQ +                                     ;;B6FA|B6FA+B6FA/B6FA\B6FA;
                      LDA.W !SpriteMisc157C,X                   ;;B6FC|B6FC+B6FC/B6FC\B6FC;
                      EOR.B #$01                                ;;B6FF|B6FF+B6FF/B6FF\B6FF;
                      STA.W !SpriteMisc157C,X                   ;;B701|B701+B701/B701\B701;
                    + JSR CODE_02B7AC                           ;;B704|B704+B704/B704\B704;
                      LDY.B #$00                                ;;B707|B707+B707/B707\B707;
CODE_02B709:          LDA.B !SpriteTableC2,X                    ;;B709|B709+B709/B709\B709;
                      AND.W DATA_02B653,Y                       ;;B70B|B70B+B70B/B70B\B70B;
                      BNE +                                     ;;B70E|B70E+B70E/B70E\B70E;
                      LDA.B !SpriteTableC2,X                    ;;B710|B710+B710/B710\B710;
                      PHA                                       ;;B712|B712+B712/B712\B712;
                      AND.W DATA_02B657,Y                       ;;B713|B713+B713/B713\B713;
                      STA.B !_0                                 ;;B716|B716+B716/B716\B716;
                      PLA                                       ;;B718|B718+B718/B718\B718;
                      LSR A                                     ;;B719|B719+B719/B719\B719;
                      AND.W DATA_02B65B,Y                       ;;B71A|B71A+B71A/B71A\B71A;
                      ORA.B !_0                                 ;;B71D|B71D+B71D/B71D\B71D;
                      STA.B !SpriteTableC2,X                    ;;B71F|B71F+B71F/B71F\B71F;
                    + INY                                       ;;B721|B721+B721/B721\B721;
                      CPY.B #$04                                ;;B722|B722+B722/B722\B722;
                      BNE CODE_02B709                           ;;B724|B724+B724/B724\B724;
PokeyGfxRt:           JSR GetDrawInfo2                          ;;B726|B726+B726/B726\B726;
                      LDA.B !_1                                 ;;B729|B729+B729/B729\B729;
                      CLC                                       ;;B72B|B72B+B72B/B72B\B72B;
                      ADC.B #$40                                ;;B72C|B72C+B72C/B72C\B72C;
                      STA.B !_1                                 ;;B72E|B72E+B72E/B72E\B72E;
                      LDA.B !SpriteTableC2,X                    ;;B730|B730+B730/B730\B730;
                      STA.B !_2                                 ;;B732|B732+B732/B732\B732;
                      STA.B !_7                                 ;;B734|B734+B734/B734\B734;
                      LDA.W !SpriteMisc151C,X                   ;;B736|B736+B736/B736\B736;
                      STA.B !_4                                 ;;B739|B739+B739/B739\B739;
                      LDY.W !SpriteMisc1540,X                   ;;B73B|B73B+B73B/B73B\B73B;
                      LDA.W DATA_02B665,Y                       ;;B73E|B73E+B73E/B73E\B73E;
                      STA.B !_3                                 ;;B741|B741+B741/B741\B741;
                      STZ.B !_5                                 ;;B743|B743+B743/B743\B743;
                      LDY.W !SpriteOAMIndex,X                   ;;B745|B745+B745/B745\B745; Y = Index into sprite OAM
                      PHX                                       ;;B748|B748+B748/B748\B748;
                      LDX.B #$04                                ;;B749|B749+B749/B749\B749;
CODE_02B74B:          STX.B !_6                                 ;;B74B|B74B+B74B/B74B\B74B;
                      LDA.B !EffFrame                           ;;B74D|B74D+B74D/B74D\B74D;
                      LSR A                                     ;;B74F|B74F+B74F/B74F\B74F;
                      LSR A                                     ;;B750|B750+B750/B750\B750;
                      LSR A                                     ;;B751|B751+B751/B751\B751;
                      CLC                                       ;;B752|B752+B752/B752\B752;
                      ADC.B !_6                                 ;;B753|B753+B753/B753\B753;
                      AND.B #$03                                ;;B755|B755+B755/B755\B755;
                      TAX                                       ;;B757|B757+B757/B757\B757;
                      LDA.B !_7                                 ;;B758|B758+B758/B758\B758;
                      CMP.B #$01                                ;;B75A|B75A+B75A/B75A\B75A;
                      BNE +                                     ;;B75C|B75C+B75C/B75C\B75C;
                      LDX.B #$00                                ;;B75E|B75E+B75E/B75E\B75E;
                    + LDA.B !_0                                 ;;B760|B760+B760/B760\B760;
                      CLC                                       ;;B762|B762+B762/B762\B762;
                      ADC.W PokeyTileDispX,X                    ;;B763|B763+B763/B763\B763;
                      STA.W !OAMTileXPos+$100,Y                 ;;B766|B766+B766/B766\B766;
                      LDX.B !_6                                 ;;B769|B769+B769/B769\B769;
                      LDA.B !_1                                 ;;B76B|B76B+B76B/B76B\B76B;
                      LSR.B !_2                                 ;;B76D|B76D+B76D/B76D\B76D;
                      BCC CODE_02B781                           ;;B76F|B76F+B76F/B76F\B76F;
                      LSR.B !_4                                 ;;B771|B771+B771/B771\B771;
                      BCS +                                     ;;B773|B773+B773/B773\B773;
                      PHA                                       ;;B775|B775+B775/B775\B775;
                      LDA.B !_3                                 ;;B776|B776+B776/B776\B776;
                      STA.B !_5                                 ;;B778|B778+B778/B778\B778;
                      PLA                                       ;;B77A|B77A+B77A/B77A\B77A;
                    + SEC                                       ;;B77B|B77B+B77B/B77B\B77B;
                      SBC.B !_5                                 ;;B77C|B77C+B77C/B77C\B77C;
                      STA.W !OAMTileYPos+$100,Y                 ;;B77E|B77E+B77E/B77E\B77E;
CODE_02B781:          LDA.B !_1                                 ;;B781|B781+B781/B781\B781;
                      SEC                                       ;;B783|B783+B783/B783\B783;
                      SBC.B #$10                                ;;B784|B784+B784/B784\B784;
                      STA.B !_1                                 ;;B786|B786+B786/B786\B786;
                      LDA.B !_2                                 ;;B788|B788+B788/B788\B788;
                      LSR A                                     ;;B78A|B78A+B78A/B78A\B78A;
                      LDA.B #$E8                                ;;B78B|B78B+B78B/B78B\B78B;
                      BCS +                                     ;;B78D|B78D+B78D/B78D\B78D;
                      LDA.B #$8A                                ;;B78F|B78F+B78F/B78F\B78F;
                    + STA.W !OAMTileNo+$100,Y                   ;;B791|B791+B791/B791\B791;
                      LDA.B #$05                                ;;B794|B794+B794/B794\B794;
                      ORA.B !SpriteProperties                   ;;B796|B796+B796/B796\B796;
                      STA.W !OAMTileAttr+$100,Y                 ;;B798|B798+B798/B798\B798;
                      INY                                       ;;B79B|B79B+B79B/B79B\B79B;
                      INY                                       ;;B79C|B79C+B79C/B79C\B79C;
                      INY                                       ;;B79D|B79D+B79D/B79D\B79D;
                      INY                                       ;;B79E|B79E+B79E/B79E\B79E;
                      DEX                                       ;;B79F|B79F+B79F/B79F\B79F;
                      BPL CODE_02B74B                           ;;B7A0|B7A0+B7A0/B7A0\B7A0;
                      PLX                                       ;;B7A2|B7A2+B7A2/B7A2\B7A2;
                      LDA.B #$04                                ;;B7A3|B7A3+B7A3/B7A3\B7A3;
                      LDY.B #$02                                ;;B7A5|B7A5+B7A5/B7A5\B7A5;
CallFinOAMWriteBank2: JSL FinishOAMWrite                        ;;B7A7|B7A7+B7A7/B7A7\B7A7;
                      RTS                                       ;;B7AB|B7AB+B7AB/B7AB\B7AB; Return
                                                                ;;                        ;
CODE_02B7AC:          LDY.B #$09                                ;;B7AC|B7AC+B7AC/B7AC\B7AC;
CODE_02B7AE:          TYA                                       ;;B7AE|B7AE+B7AE/B7AE\B7AE;
                      EOR.B !TrueFrame                          ;;B7AF|B7AF+B7AF/B7AF\B7AF;
                      LSR A                                     ;;B7B1|B7B1+B7B1/B7B1\B7B1;
                      BCS CODE_02B7D2                           ;;B7B2|B7B2+B7B2/B7B2\B7B2;
                      LDA.W !SpriteStatus,Y                     ;;B7B4|B7B4+B7B4/B7B4\B7B4;
                      CMP.B #$0A                                ;;B7B7|B7B7+B7B7/B7B7\B7B7;
                      BNE CODE_02B7D2                           ;;B7B9|B7B9+B7B9/B7B9\B7B9;
                      PHB                                       ;;B7BB|B7BB+B7BB/B7BB\B7BB;
                      LDA.B #$03                                ;;B7BC|B7BC+B7BC/B7BC\B7BC;
                      PHA                                       ;;B7BE|B7BE+B7BE/B7BE\B7BE;
                      PLB                                       ;;B7BF|B7BF+B7BF/B7BF\B7BF;
                      PHX                                       ;;B7C0|B7C0+B7C0/B7C0\B7C0;
                      TYX                                       ;;B7C1|B7C1+B7C1/B7C1\B7C1;
                      JSL GetSpriteClippingB                    ;;B7C2|B7C2+B7C2/B7C2\B7C2;
                      PLX                                       ;;B7C6|B7C6+B7C6/B7C6\B7C6;
                      JSL GetSpriteClippingA                    ;;B7C7|B7C7+B7C7/B7C7\B7C7;
                      JSL CheckForContact                       ;;B7CB|B7CB+B7CB/B7CB\B7CB;
                      PLB                                       ;;B7CF|B7CF+B7CF/B7CF\B7CF;
                      BCS CODE_02B7D6                           ;;B7D0|B7D0+B7D0/B7D0\B7D0;
CODE_02B7D2:          DEY                                       ;;B7D2|B7D2+B7D2/B7D2\B7D2;
                      BPL CODE_02B7AE                           ;;B7D3|B7D3+B7D3/B7D3\B7D3;
                    - RTS                                       ;;B7D5|B7D5+B7D5/B7D5\B7D5; Return
                                                                ;;                        ;
CODE_02B7D6:          LDA.W !SpriteMisc1558,X                   ;;B7D6|B7D6+B7D6/B7D6\B7D6;
                      BNE -                                     ;;B7D9|B7D9+B7D9/B7D9\B7D9;
                      LDA.W !SpriteYPosLow,Y                    ;;B7DB|B7DB+B7DB/B7DB\B7DB;
                      SEC                                       ;;B7DE|B7DE+B7DE/B7DE\B7DE;
                      SBC.B !SpriteYPosLow,X                    ;;B7DF|B7DF+B7DF/B7DF\B7DF;
                      PHY                                       ;;B7E1|B7E1+B7E1/B7E1\B7E1;
                      STY.W !SpriteInterIndex                   ;;B7E2|B7E2+B7E2/B7E2\B7E2;
                      JSR RemovePokeySgmntRt                    ;;B7E5|B7E5+B7E5/B7E5\B7E5;
                      PLY                                       ;;B7E8|B7E8+B7E8/B7E8\B7E8;
                      JSR CODE_02B82E                           ;;B7E9|B7E9+B7E9/B7E9\B7E9;
                      RTS                                       ;;B7EC|B7EC+B7EC/B7EC\B7EC; Return
                                                                ;;                        ;
RemovePokeySgmntRt:   LDY.B #$00                                ;;B7ED|B7ED+B7ED/B7ED\B7ED;
                      CMP.B #$09                                ;;B7EF|B7EF+B7EF/B7EF\B7EF;
                      BMI +                                     ;;B7F1|B7F1+B7F1/B7F1\B7F1;
                      INY                                       ;;B7F3|B7F3+B7F3/B7F3\B7F3;
                      CMP.B #$19                                ;;B7F4|B7F4+B7F4/B7F4\B7F4;
                      BMI +                                     ;;B7F6|B7F6+B7F6/B7F6\B7F6;
                      INY                                       ;;B7F8|B7F8+B7F8/B7F8\B7F8;
                      CMP.B #$29                                ;;B7F9|B7F9+B7F9/B7F9\B7F9;
                      BMI +                                     ;;B7FB|B7FB+B7FB/B7FB\B7FB;
                      INY                                       ;;B7FD|B7FD+B7FD/B7FD\B7FD;
                      CMP.B #$39                                ;;B7FE|B7FE+B7FE/B7FE\B7FE;
                      BMI +                                     ;;B800|B800+B800/B800\B800;
                      INY                                       ;;B802|B802+B802/B802\B802;
                    + LDA.B !SpriteTableC2,X                    ;;B803|B803+B803/B803\B803; \ Take away a segment by unsetting a bit
                      AND.W PokeyUnsetBit,Y                     ;;B805|B805+B805/B805\B805;  |
                      STA.B !SpriteTableC2,X                    ;;B808|B808+B808/B808\B808; /
                      STA.W !SpriteMisc151C,X                   ;;B80A|B80A+B80A/B80A\B80A;
                      LDA.W DATA_02B829,Y                       ;;B80D|B80D+B80D/B80D\B80D;
                      STA.B !_D                                 ;;B810|B810+B810/B810\B810;
                      LDA.B #$0C                                ;;B812|B812+B812/B812\B812;
                      STA.W !SpriteMisc1540,X                   ;;B814|B814+B814/B814\B814;
                      ASL A                                     ;;B817|B817+B817/B817\B817;
                      STA.W !SpriteMisc1558,X                   ;;B818|B818+B818/B818\B818;
                      RTS                                       ;;B81B|B81B+B81B/B81B\B81B; Return
                                                                ;;                        ;
RemovePokeySegment:   PHB                                       ;;B81C|B81C+B81C/B81C\B81C; Wrapper
                      PHK                                       ;;B81D|B81D+B81D/B81D\B81D;
                      PLB                                       ;;B81E|B81E+B81E/B81E\B81E;
                      JSR RemovePokeySgmntRt                    ;;B81F|B81F+B81F/B81F\B81F;
                      PLB                                       ;;B822|B822+B822/B822\B822;
                      RTL                                       ;;B823|B823+B823/B823\B823; Return
                                                                ;;                        ;
                                                                ;;                        ;
PokeyUnsetBit:        db $EF,$F7,$FB,$FD,$FE                    ;;B824|B824+B824/B824\B824;
                                                                ;;                        ;
DATA_02B829:          db $E0,$F0,$F8,$FC,$FE                    ;;B829|B829+B829/B829\B829;
                                                                ;;                        ;
CODE_02B82E:          JSL FindFreeSprSlot                       ;;B82E|B82E+B82E/B82E\B82E; \ Return if no free slots
                      BMI +                                     ;;B832|B832+B832/B832\B832; /
                      LDA.B #$02                                ;;B834|B834+B834/B834\B834; \ Sprite status = Killed
                      STA.W !SpriteStatus,Y                     ;;B836|B836+B836/B836\B836; /
                      LDA.B #$70                                ;;B839|B839+B839/B839\B839;
                      STA.W !SpriteNumber,Y                     ;;B83B|B83B+B83B/B83B\B83B;
                      LDA.B !SpriteXPosLow,X                    ;;B83E|B83E+B83E/B83E\B83E;
                      STA.W !SpriteXPosLow,Y                    ;;B840|B840+B840/B840\B840;
                      LDA.W !SpriteXPosHigh,X                   ;;B843|B843+B843/B843\B843;
                      STA.W !SpriteXPosHigh,Y                   ;;B846|B846+B846/B846\B846;
                      PHX                                       ;;B849|B849+B849/B849\B849;
                      TYX                                       ;;B84A|B84A+B84A/B84A\B84A;
                      JSL InitSpriteTables                      ;;B84B|B84B+B84B/B84B\B84B;
                      LDX.W !SpriteInterIndex                   ;;B84F|B84F+B84F/B84F\B84F;
                      LDA.B !SpriteYPosLow,X                    ;;B852|B852+B852/B852\B852;
                      STA.W !SpriteYPosLow,Y                    ;;B854|B854+B854/B854\B854;
                      LDA.W !SpriteYPosHigh,X                   ;;B857|B857+B857/B857\B857;
                      STA.W !SpriteYPosHigh,Y                   ;;B85A|B85A+B85A/B85A\B85A;
                      LDA.B !SpriteXSpeed,X                     ;;B85D|B85D+B85D/B85D\B85D;
                      STA.B !_0                                 ;;B85F|B85F+B85F/B85F\B85F;
                      ASL A                                     ;;B861|B861+B861/B861\B861;
                      ROR.B !_0                                 ;;B862|B862+B862/B862\B862;
                      LDA.B !_0                                 ;;B864|B864+B864/B864\B864;
                      STA.W !SpriteXSpeed,Y                     ;;B866|B866+B866/B866\B866;
                      LDA.B #$E0                                ;;B869|B869+B869/B869\B869;
                      STA.W !SpriteYSpeed,Y                     ;;B86B|B86B+B86B/B86B\B86B;
                      PLX                                       ;;B86E|B86E+B86E/B86E\B86E;
                      LDA.B !SpriteTableC2,X                    ;;B86F|B86F+B86F/B86F\B86F;
                      AND.B !_D                                 ;;B871|B871+B871/B871\B871;
                      STA.W !SpriteTableC2,Y                    ;;B873|B873+B873/B873\B873;
                      LDA.B #$01                                ;;B876|B876+B876/B876\B876;
                      STA.W !SpriteMisc1534,Y                   ;;B878|B878+B878/B878\B878;
                      LDA.B #$01                                ;;B87B|B87B+B87B/B87B\B87B;
                      JSL CODE_02ACE1                           ;;B87D|B87D+B87D/B87D\B87D;
                    + RTS                                       ;;B881|B881+B881/B881\B881; Return
                                                                ;;                        ;
TorpedoTedMain:       PHB                                       ;;B882|B882+B882/B882\B882;
                      PHK                                       ;;B883|B883+B883/B883\B883;
                      PLB                                       ;;B884|B884+B884/B884\B884;
                      JSR CODE_02B88A                           ;;B885|B885+B885/B885\B885;
                      PLB                                       ;;B888|B888+B888/B888\B888;
                      RTL                                       ;;B889|B889+B889/B889\B889; Return
                                                                ;;                        ;
CODE_02B88A:          LDA.B !SpriteProperties                   ;;B88A|B88A+B88A/B88A\B88A; \ Save $64
                      PHA                                       ;;B88C|B88C+B88C/B88C\B88C; /
                      LDA.W !SpriteMisc1540,X                   ;;B88D|B88D+B88D/B88D\B88D; \ If being launched...
                      BEQ +                                     ;;B890|B890+B890/B890\B890;  | ...set $64 = #$10...
                      LDA.B #$10                                ;;B892|B892+B892/B892\B892;  | ...so it will be drawn behind objects
                      STA.B !SpriteProperties                   ;;B894|B894+B894/B894\B894; /
                    + JSR TorpedoGfxRt                          ;;B896|B896+B896/B896\B896; Draw sprite
                      PLA                                       ;;B899|B899+B899/B899\B899; \ Restore $64
                      STA.B !SpriteProperties                   ;;B89A|B89A+B89A/B89A\B89A; /
                      LDA.B !SpriteLock                         ;;B89C|B89C+B89C/B89C\B89C; \ Return if sprites locked
                      BNE Return02B8B7                          ;;B89E|B89E+B89E/B89E\B89E; /
                      JSR SubOffscreen0Bnk2                     ;;B8A0|B8A0+B8A0/B8A0\B8A0;
                      JSL SprSpr_MarioSprRts                    ;;B8A3|B8A3+B8A3/B8A3\B8A3;
                      LDA.W !SpriteMisc1540,X                   ;;B8A7|B8A7+B8A7/B8A7\B8A7; \ Branch if not being launched
                      BEQ +                                     ;;B8AA|B8AA+B8AA/B8AA\B8AA; /
                      LDA.B #$08                                ;;B8AC|B8AC+B8AC/B8AC\B8AC; \ Sprite Y speed = #$08
                      STA.B !SpriteYSpeed,X                     ;;B8AE|B8AE+B8AE/B8AE\B8AE; /
                      JSR UpdateYPosNoGrvty                     ;;B8B0|B8B0+B8B0/B8B0\B8B0; Apply speed to position
                      LDA.B #$10                                ;;B8B3|B8B3+B8B3/B8B3\B8B3; \ Sprite Y speed = #$10
                      STA.B !SpriteYSpeed,X                     ;;B8B5|B8B5+B8B5/B8B5\B8B5; /
Return02B8B7:         RTS                                       ;;B8B7|B8B7+B8B7/B8B7\B8B7; Return
                                                                ;;                        ;
                                                                ;;                        ;
TorpedoMaxSpeed:      db $20,$F0                                ;;B8B8|B8B8+B8B8/B8B8\B8B8;
                                                                ;;                        ;
TorpedoAccel:         db $01,$FF                                ;;B8BA|B8BA+B8BA/B8BA\B8BA;
                                                                ;;                        ;
                    + LDA.B !TrueFrame                          ;;B8BC|B8BC+B8BC/B8BC\B8BC; \ Only increase X speed every 4 frames
                      AND.B #$03                                ;;B8BE|B8BE+B8BE/B8BE\B8BE;  |
                      BNE +                                     ;;B8C0|B8C0+B8C0/B8C0\B8C0; /
                      LDY.W !SpriteMisc157C,X                   ;;B8C2|B8C2+B8C2/B8C2\B8C2; \ If not at maximum, increase X speed
                      LDA.B !SpriteXSpeed,X                     ;;B8C5|B8C5+B8C5/B8C5\B8C5;  |
                      CMP.W TorpedoMaxSpeed,Y                   ;;B8C7|B8C7+B8C7/B8C7\B8C7;  |
                      BEQ +                                     ;;B8CA|B8CA+B8CA/B8CA\B8CA;  |
                      CLC                                       ;;B8CC|B8CC+B8CC/B8CC\B8CC;  |
                      ADC.W TorpedoAccel,Y                      ;;B8CD|B8CD+B8CD/B8CD\B8CD;  |
                      STA.B !SpriteXSpeed,X                     ;;B8D0|B8D0+B8D0/B8D0\B8D0; /
                    + JSR UpdateXPosNoGrvty                     ;;B8D2|B8D2+B8D2/B8D2\B8D2; \ Apply speed to position
                      JSR UpdateYPosNoGrvty                     ;;B8D5|B8D5+B8D5/B8D5\B8D5; /
                      LDA.B !SpriteYSpeed,X                     ;;B8D8|B8D8+B8D8/B8D8\B8D8; \ If sprite has Y speed...
                      BEQ +                                     ;;B8DA|B8DA+B8DA/B8DA\B8DA;  |
                      LDA.B !TrueFrame                          ;;B8DC|B8DC+B8DC/B8DC\B8DC;  | ...Decrease Y speed every other frame
                      AND.B #$01                                ;;B8DE|B8DE+B8DE/B8DE\B8DE;  |
                      BNE +                                     ;;B8E0|B8E0+B8E0/B8E0\B8E0;  |
                      DEC.B !SpriteYSpeed,X                     ;;B8E2|B8E2+B8E2/B8E2\B8E2; /
                    + TXA                                       ;;B8E4|B8E4+B8E4/B8E4\B8E4; \ Run $02B952 every 8 frames
                      CLC                                       ;;B8E5|B8E5+B8E5/B8E5\B8E5;  |
                      ADC.B !EffFrame                           ;;B8E6|B8E6+B8E6/B8E6\B8E6;  |
                      AND.B #$07                                ;;B8E8|B8E8+B8E8/B8E8\B8E8;  |
                      BNE +                                     ;;B8EA|B8EA+B8EA/B8EA\B8EA;  |
                      JSR CODE_02B952                           ;;B8EC|B8EC+B8EC/B8EC\B8EC; /
                    + RTS                                       ;;B8EF|B8EF+B8EF/B8EF\B8EF; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B8F0:          db $10                                    ;;B8F0|B8F0+B8F0/B8F0\B8F0;
                                                                ;;                        ;
DATA_02B8F1:          db $00,$10,$80,$82                        ;;B8F1|B8F1+B8F1/B8F1\B8F1;
                                                                ;;                        ;
DATA_02B8F5:          db $40,$00                                ;;B8F5|B8F5+B8F5/B8F5\B8F5;
                                                                ;;                        ;
TorpedoGfxRt:         JSR GetDrawInfo2                          ;;B8F7|B8F7+B8F7/B8F7\B8F7;
                      LDA.B !_1                                 ;;B8FA|B8FA+B8FA/B8FA\B8FA;
                      STA.W !OAMTileYPos+$100,Y                 ;;B8FC|B8FC+B8FC/B8FC\B8FC;
                      STA.W !OAMTileYPos+$104,Y                 ;;B8FF|B8FF+B8FF/B8FF\B8FF;
                      PHX                                       ;;B902|B902+B902/B902\B902;
                      LDA.W !SpriteOBJAttribute,X               ;;B903|B903+B903/B903\B903;
                      ORA.B !SpriteProperties                   ;;B906|B906+B906/B906\B906;
                      STA.B !_2                                 ;;B908|B908+B908/B908\B908;
                      LDA.W !SpriteMisc157C,X                   ;;B90A|B90A+B90A/B90A\B90A;
                      TAX                                       ;;B90D|B90D+B90D/B90D\B90D;
                      LDA.B !_0                                 ;;B90E|B90E+B90E/B90E\B90E;
                      CLC                                       ;;B910|B910+B910/B910\B910;
                      %LorW_X(ADC,DATA_02B8F0)                  ;;B911|B911+B911/B911\B911;
                      STA.W !OAMTileXPos+$100,Y                 ;;B915|B914+B914/B914\B914;
                      LDA.B !_0                                 ;;B918|B917+B917/B917\B917;
                      CLC                                       ;;B91A|B919+B919/B919\B919;
                      %LorW_X(ADC,DATA_02B8F1)                  ;;B91B|B91A+B91A/B91A\B91A;
                      STA.W !OAMTileXPos+$104,Y                 ;;B91F|B91D+B91D/B91D\B91D;
                      %LorW_X(LDA,DATA_02B8F5)                  ;;B922|B920+B920/B920\B920;
                      ORA.B !_2                                 ;;B926|B923+B923/B923\B923;
                      STA.W !OAMTileAttr+$100,Y                 ;;B928|B925+B925/B925\B925;
                      STA.W !OAMTileAttr+$104,Y                 ;;B92B|B928+B928/B928\B928;
                      PLX                                       ;;B92E|B92B+B92B/B92B\B92B;
                      LDA.B #$80                                ;;B92F|B92C+B92C/B92C\B92C;
                      STA.W !OAMTileNo+$100,Y                   ;;B931|B92E+B92E/B92E\B92E;
                      LDA.W !SpriteMisc1540,X                   ;;B934|B931+B931/B931\B931;
                      CMP.B #$01                                ;;B937|B934+B934/B934\B934;
                      LDA.B #$82                                ;;B939|B936+B936/B936\B936;
                      BCS +                                     ;;B93B|B938+B938/B938\B938;
                      LDA.B !EffFrame                           ;;B93D|B93A+B93A/B93A\B93A;
                      LSR A                                     ;;B93F|B93C+B93C/B93C\B93C;
                      LSR A                                     ;;B940|B93D+B93D/B93D\B93D;
                      LDA.B #$A0                                ;;B941|B93E+B93E/B93E\B93E;
                      BCC +                                     ;;B943|B940+B940/B940\B940;
                      LDA.B #$82                                ;;B945|B942+B942/B942\B942;
                    + STA.W !OAMTileNo+$104,Y                   ;;B947|B944+B944/B944\B944;
                      LDA.B #$01                                ;;B94A|B947+B947/B947\B947;
                      LDY.B #$02                                ;;B94C|B949+B949/B949\B949;
                      JMP CallFinOAMWriteBank2                  ;;B94E|B94B+B94B/B94B\B94B;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02B94E:          db $F4,$1C                                ;;B951|B94E+B94E/B94E\B94E;
                                                                ;;                        ;
DATA_02B950:          db $FF,$00                                ;;B953|B950+B950/B950\B950;
                                                                ;;                        ;
CODE_02B952:          LDY.B #$03                                ;;B955|B952+B952/B952\B952;
CODE_02B954:          LDA.W !SmokeSpriteNumber,Y                ;;B957|B954+B954/B954\B954;
                      BEQ CODE_02B969                           ;;B95A|B957+B957/B957\B957;
                      DEY                                       ;;B95C|B959+B959/B959\B959;
                      BPL CODE_02B954                           ;;B95D|B95A+B95A/B95A\B95A;
                      DEC.W !SmokeSpriteSlotFull                ;;B95F|B95C+B95C/B95C\B95C;
                      BPL +                                     ;;B962|B95F+B95F/B95F\B95F;
                      LDA.B #$03                                ;;B964|B961+B961/B961\B961;
                      STA.W !SmokeSpriteSlotFull                ;;B966|B963+B963/B963\B963;
                    + LDY.W !SmokeSpriteSlotFull                ;;B969|B966+B966/B966\B966;
CODE_02B969:          LDA.B !SpriteXPosLow,X                    ;;B96C|B969+B969/B969\B969;
                      STA.B !_0                                 ;;B96E|B96B+B96B/B96B\B96B;
                      LDA.W !SpriteXPosHigh,X                   ;;B970|B96D+B96D/B96D\B96D;
                      STA.B !_1                                 ;;B973|B970+B970/B970\B970;
                      PHX                                       ;;B975|B972+B972/B972\B972;
                      LDA.W !SpriteMisc157C,X                   ;;B976|B973+B973/B973\B973;
                      TAX                                       ;;B979|B976+B976/B976\B976;
                      LDA.B !_0                                 ;;B97A|B977+B977/B977\B977;
                      CLC                                       ;;B97C|B979+B979/B979\B979;
                      ADC.W DATA_02B94E,X                       ;;B97D|B97A+B97A/B97A\B97A;
                      STA.B !_2                                 ;;B980|B97D+B97D/B97D\B97D;
                      LDA.B !_1                                 ;;B982|B97F+B97F/B97F\B97F;
                      ADC.W DATA_02B950,X                       ;;B984|B981+B981/B981\B981;
                      PHA                                       ;;B987|B984+B984/B984\B984;
                      LDA.B !_2                                 ;;B988|B985+B985/B985\B985;
                      CMP.B !Layer1XPos                         ;;B98A|B987+B987/B987\B987;
                      PLA                                       ;;B98C|B989+B989/B989\B989;
                      PLX                                       ;;B98D|B98A+B98A/B98A\B98A;
                      SBC.B !Layer1XPos+1                       ;;B98E|B98B+B98B/B98B\B98B;
                      BNE +                                     ;;B990|B98D+B98D/B98D\B98D;
                      LDA.B #$01                                ;;B992|B98F+B98F/B98F\B98F;
                      STA.W !SmokeSpriteNumber,Y                ;;B994|B991+B991/B991\B991;
                      LDA.B !_2                                 ;;B997|B994+B994/B994\B994;
                      STA.W !SmokeSpriteXPos,Y                  ;;B999|B996+B996/B996\B996;
                      LDA.B !SpriteYPosLow,X                    ;;B99C|B999+B999/B999\B999;
                      STA.W !SmokeSpriteYPos,Y                  ;;B99E|B99B+B99B/B99B\B99B;
                      LDA.B #$0F                                ;;B9A1|B99E+B99E/B99E\B99E;
                      STA.W !SmokeSpriteTimer,Y                 ;;B9A3|B9A0+B9A0/B9A0\B9A0;
                    + RTS                                       ;;B9A6|B9A3+B9A3/B9A3\B9A3; Return
                                                                ;;                        ;
                      STA.B !Map16TileGenerate                  ;;B9A7|B9A4+B9A4/B9A4\B9A4; $9C = tile to generate
                      LDA.B !SpriteXPosLow,X                    ;;B9A9|B9A6+B9A6/B9A6\B9A6; \ $9A = Sprite X position
                      STA.B !TouchBlockXPos                     ;;B9AB|B9A8+B9A8/B9A8\B9A8;  | for block creation
                      LDA.W !SpriteXPosHigh,X                   ;;B9AD|B9AA+B9AA/B9AA\B9AA;  |
                      STA.B !TouchBlockXPos+1                   ;;B9B0|B9AD+B9AD/B9AD\B9AD; /
                      LDA.B !SpriteYPosLow,X                    ;;B9B2|B9AF+B9AF/B9AF\B9AF; \ $98 = Sprite Y position
                      STA.B !TouchBlockYPos                     ;;B9B4|B9B1+B9B1/B9B1\B9B1;  | for block creation
                      LDA.W !SpriteYPosHigh,X                   ;;B9B6|B9B3+B9B3/B9B3\B9B3;  |
                      STA.B !TouchBlockYPos+1                   ;;B9B9|B9B6+B9B6/B9B6\B9B6; /
                      JSL GenerateTile                          ;;B9BB|B9B8+B9B8/B9B8\B9B8; Generate the tile
                      RTL                                       ;;B9BF|B9BC+B9BC/B9BC\B9BC; Return
                                                                ;;                        ;
CODE_02B9BD:          LDA.B #$02                                ;;B9C0|B9BD+B9BD/B9BD\B9BD;
                      STA.W !SilverCoinsCollected               ;;B9C2|B9BF+B9BF/B9BF\B9BF;
                      LDY.B #$09                                ;;B9C5|B9C2+B9C2/B9C2\B9C2;
CODE_02B9C4:          LDA.W !SpriteStatus,Y                     ;;B9C7|B9C4+B9C4/B9C4\B9C4;
                      CMP.B #$08                                ;;B9CA|B9C7+B9C7/B9C7\B9C7;
                      BCC +                                     ;;B9CC|B9C9+B9C9/B9C9\B9C9;
                      LDA.W !SpriteTweaker190F,Y                ;;B9CE|B9CB+B9CB/B9CB\B9CB;
                      AND.B #$40                                ;;B9D1|B9CE+B9CE/B9CE\B9CE;
                      BNE +                                     ;;B9D3|B9D0+B9D0/B9D0\B9D0;
                      JSR CODE_02B9D9                           ;;B9D5|B9D2+B9D2/B9D2\B9D2;
                    + DEY                                       ;;B9D8|B9D5+B9D5/B9D5\B9D5;
                      BPL CODE_02B9C4                           ;;B9D9|B9D6+B9D6/B9D6\B9D6;
                      RTL                                       ;;B9DB|B9D8+B9D8/B9D8\B9D8; Return
                                                                ;;                        ;
CODE_02B9D9:          LDA.B #$21                                ;;B9DC|B9D9+B9D9/B9D9\B9D9;
                      STA.W !SpriteNumber,Y                     ;;B9DE|B9DB+B9DB/B9DB\B9DB;
                      LDA.B #$08                                ;;B9E1|B9DE+B9DE/B9DE\B9DE; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;B9E3|B9E0+B9E0/B9E0\B9E0; /
                      PHX                                       ;;B9E6|B9E3+B9E3/B9E3\B9E3;
                      TYX                                       ;;B9E7|B9E4+B9E4/B9E4\B9E4;
                      JSL InitSpriteTables                      ;;B9E8|B9E5+B9E5/B9E5\B9E5;
                      LDA.W !SpriteOBJAttribute,X               ;;B9EC|B9E9+B9E9/B9E9\B9E9;
                      AND.B #$F1                                ;;B9EF|B9EC+B9EC/B9EC\B9EC;
                      ORA.B #$02                                ;;B9F1|B9EE+B9EE/B9EE\B9EE;
                      STA.W !SpriteOBJAttribute,X               ;;B9F3|B9F0+B9F0/B9F0\B9F0;
                      LDA.B #$D8                                ;;B9F6|B9F3+B9F3/B9F3\B9F3;
                      STA.W !SpriteYSpeed,X                     ;;B9F8|B9F5+B9F5/B9F5\B9F5;
                      PLX                                       ;;B9FB|B9F8+B9F8/B9F8\B9F8;
                      RTS                                       ;;B9FC|B9F9+B9F9/B9F9\B9F9; Return
                                                                ;;                        ;
CODE_02B9FA:          STZ.B !_F                                 ;;B9FD|B9FA+B9FA/B9FA\B9FA;
                      BRA CODE_02BA48                           ;;B9FF|B9FC+B9FC/B9FC\B9FC;
                                                                ;;                        ;
                      LDA.B !_1                                 ;;BA01|B9FE+B9FE/B9FE\B9FE; \ Unreachable
                      AND.B #$F0                                ;;BA03|BA00+BA00/BA00\BA00;  | Very similar to code below
                      STA.B !_4                                 ;;BA05|BA02+BA02/BA02\BA02;
                      LDA.B !_9                                 ;;BA07|BA04+BA04/BA04\BA04;
                      CMP.B !LevelScrLength                     ;;BA09|BA06+BA06/BA06\BA06;
                      BCS Return02BA47                          ;;BA0B|BA08+BA08/BA08\BA08;
                      STA.B !_5                                 ;;BA0D|BA0A+BA0A/BA0A\BA0A;
                      LDA.B !_0                                 ;;BA0F|BA0C+BA0C/BA0C\BA0C;
                      STA.B !_7                                 ;;BA11|BA0E+BA0E/BA0E\BA0E;
                      LDA.B !_8                                 ;;BA13|BA10+BA10/BA10\BA10;
                      CMP.B #$02                                ;;BA15|BA12+BA12/BA12\BA12;
                      BCS Return02BA47                          ;;BA17|BA14+BA14/BA14\BA14;
                      STA.B !_A                                 ;;BA19|BA16+BA16/BA16\BA16;
                      LDA.B !_7                                 ;;BA1B|BA18+BA18/BA18\BA18;
                      LSR A                                     ;;BA1D|BA1A+BA1A/BA1A\BA1A;
                      LSR A                                     ;;BA1E|BA1B+BA1B/BA1B\BA1B;
                      LSR A                                     ;;BA1F|BA1C+BA1C/BA1C\BA1C;
                      LSR A                                     ;;BA20|BA1D+BA1D/BA1D\BA1D;
                      ORA.B !_4                                 ;;BA21|BA1E+BA1E/BA1E\BA1E;
                      STA.B !_4                                 ;;BA23|BA20+BA20/BA20\BA20;
                      LDX.B !_5                                 ;;BA25|BA22+BA22/BA22\BA22;
                      LDA.L DATA_00BA80,X                       ;;BA27|BA24+BA24/BA24\BA24;
                      LDY.B !_F                                 ;;BA2B|BA28+BA28/BA28\BA28;
                      BEQ +                                     ;;BA2D|BA2A+BA2A/BA2A\BA2A;
                      LDA.L DATA_00BA8E,X                       ;;BA2F|BA2C+BA2C/BA2C\BA2C;
                    + CLC                                       ;;BA33|BA30+BA30/BA30\BA30;
                      ADC.B !_4                                 ;;BA34|BA31+BA31/BA31\BA31;
                      STA.B !_5                                 ;;BA36|BA33+BA33/BA33\BA33;
                      LDA.L DATA_00BABC,X                       ;;BA38|BA35+BA35/BA35\BA35;
                      LDY.B !_F                                 ;;BA3C|BA39+BA39/BA39\BA39;
                      BEQ +                                     ;;BA3E|BA3B+BA3B/BA3B\BA3B;
                      LDA.L DATA_00BACA,X                       ;;BA40|BA3D+BA3D/BA3D\BA3D;
                    + ADC.B !_A                                 ;;BA44|BA41+BA41/BA41\BA41;
                      STA.B !_6                                 ;;BA46|BA43+BA43/BA43\BA43;
                      BRA CODE_02BA92                           ;;BA48|BA45+BA45/BA45\BA45;
                                                                ;;                        ;
Return02BA47:         RTL                                       ;;BA4A|BA47+BA47/BA47\BA47; Return
                                                                ;;                        ;
CODE_02BA48:          LDA.B !_1                                 ;;BA4B|BA48+BA48/BA48\BA48;
                      AND.B #$F0                                ;;BA4D|BA4A+BA4A/BA4A\BA4A;
                      STA.B !_4                                 ;;BA4F|BA4C+BA4C/BA4C\BA4C;
                      LDA.B !_9                                 ;;BA51|BA4E+BA4E/BA4E\BA4E;
                      CMP.B #$02                                ;;BA53|BA50+BA50/BA50\BA50;
                      BCS Return02BA47                          ;;BA55|BA52+BA52/BA52\BA52;
                      STA.B !_D                                 ;;BA57|BA54+BA54/BA54\BA54;
                      STA.W !YoshiYPos+1                        ;;BA59|BA56+BA56/BA56\BA56;
                      LDA.B !_0                                 ;;BA5C|BA59+BA59/BA59\BA59;
                      STA.B !_6                                 ;;BA5E|BA5B+BA5B/BA5B\BA5B;
                      LDA.B !_8                                 ;;BA60|BA5D+BA5D/BA5D\BA5D;
                      CMP.B !LevelScrLength                     ;;BA62|BA5F+BA5F/BA5F\BA5F;
                      BCS Return02BA47                          ;;BA64|BA61+BA61/BA61\BA61;
                      STA.B !_7                                 ;;BA66|BA63+BA63/BA63\BA63;
                      LDA.B !_6                                 ;;BA68|BA65+BA65/BA65\BA65;
                      LSR A                                     ;;BA6A|BA67+BA67/BA67\BA67;
                      LSR A                                     ;;BA6B|BA68+BA68/BA68\BA68;
                      LSR A                                     ;;BA6C|BA69+BA69/BA69\BA69;
                      LSR A                                     ;;BA6D|BA6A+BA6A/BA6A\BA6A;
                      ORA.B !_4                                 ;;BA6E|BA6B+BA6B/BA6B\BA6B;
                      STA.B !_4                                 ;;BA70|BA6D+BA6D/BA6D\BA6D;
                      LDX.B !_7                                 ;;BA72|BA6F+BA6F/BA6F\BA6F;
                      LDA.L DATA_00BA60,X                       ;;BA74|BA71+BA71/BA71\BA71;
                      LDY.B !_F                                 ;;BA78|BA75+BA75/BA75\BA75;
                      BEQ +                                     ;;BA7A|BA77+BA77/BA77\BA77;
                      LDA.L DATA_00BA70,X                       ;;BA7C|BA79+BA79/BA79\BA79;
                    + CLC                                       ;;BA80|BA7D+BA7D/BA7D\BA7D;
                      ADC.B !_4                                 ;;BA81|BA7E+BA7E/BA7E\BA7E;
                      STA.B !_5                                 ;;BA83|BA80+BA80/BA80\BA80;
                      LDA.L DATA_00BA9C,X                       ;;BA85|BA82+BA82/BA82\BA82;
                      LDY.B !_F                                 ;;BA89|BA86+BA86/BA86\BA86;
                      BEQ +                                     ;;BA8B|BA88+BA88/BA88\BA88;
                      LDA.L DATA_00BAAC,X                       ;;BA8D|BA8A+BA8A/BA8A\BA8A;
                    + ADC.B !_D                                 ;;BA91|BA8E+BA8E/BA8E\BA8E;
                      STA.B !_6                                 ;;BA93|BA90+BA90/BA90\BA90;
CODE_02BA92:          LDX.W !CurSpriteProcess                   ;;BA95|BA92+BA92/BA92\BA92; X = Sprite index
                      LDA.B #$7E                                ;;BA98|BA95+BA95/BA95\BA95;
                      STA.B !_7                                 ;;BA9A|BA97+BA97/BA97\BA97;
                      LDA.B [!_5]                               ;;BA9C|BA99+BA99/BA99\BA99;
                      STA.W !Map16TileNumber                    ;;BA9E|BA9B+BA9B/BA9B\BA9B;
                      INC.B !_7                                 ;;BAA1|BA9E+BA9E/BA9E\BA9E;
                      LDA.B [!_5]                               ;;BAA3|BAA0+BAA0/BAA0\BAA0;
                      BNE Return02BABF                          ;;BAA5|BAA2+BAA2/BAA2\BAA2;
                      LDA.W !Map16TileNumber                    ;;BAA7|BAA4+BAA4/BAA4\BAA4;
                      CMP.B #$45                                ;;BAAA|BAA7+BAA7/BAA7\BAA7;If it is <= the Red Berry map16 tile
                      BCC Return02BABF                          ;;BAAC|BAA9+BAA9/BAA9\BAA9;Return
                      CMP.B #$48                                ;;BAAE|BAAB+BAAB/BAAB\BAAB;If it is => Map16 always turning block
                      BCS Return02BABF                          ;;BAB0|BAAD+BAAD/BAAD\BAAD;Return
                      SEC                                       ;;BAB2|BAAF+BAAF/BAAF\BAAF;
                      SBC.B #$44                                ;;BAB3|BAB0+BAB0/BAB0\BAB0;
                      STA.W !EatenBerryType                     ;;BAB5|BAB2+BAB2/BAB2\BAB2;Berry Type
                      LDY.B #$0B                                ;;BAB8|BAB5+BAB5/BAB5\BAB5;
CODE_02BAB7:          LDA.W !SpriteStatus,Y                     ;;BABA|BAB7+BAB7/BAB7\BAB7; \ Find a free sprite slot and branch
                      BEQ CODE_02BAC0                           ;;BABD|BABA+BABA/BABA\BABA;  |
                      DEY                                       ;;BABF|BABC+BABC/BABC\BABC;  |
                      BPL CODE_02BAB7                           ;;BAC0|BABD+BABD/BABD\BABD; /
Return02BABF:         RTL                                       ;;BAC2|BABF+BABF/BABF\BABF; Return if no slots found
                                                                ;;                        ;
CODE_02BAC0:          LDA.B #$08                                ;;BAC3|BAC0+BAC0/BAC0\BAC0; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;BAC5|BAC2+BAC2/BAC2\BAC2; /
                      LDA.B #$74                                ;;BAC8|BAC5+BAC5/BAC5\BAC5; \ Sprite number = Mushroom
                      STA.W !SpriteNumber,Y                     ;;BACA|BAC7+BAC7/BAC7\BAC7; /
                      LDA.B !_0                                 ;;BACD|BACA+BACA/BACA\BACA; \ Sprite and block X position = $00,$08
                      STA.W !SpriteXPosLow,Y                    ;;BACF|BACC+BACC/BACC\BACC;  |
                      STA.B !TouchBlockXPos                     ;;BAD2|BACF+BACF/BACF\BACF;  |
                      LDA.B !_8                                 ;;BAD4|BAD1+BAD1/BAD1\BAD1;  |
                      STA.W !SpriteXPosHigh,Y                   ;;BAD6|BAD3+BAD3/BAD3\BAD3;  |
                      STA.B !TouchBlockXPos+1                   ;;BAD9|BAD6+BAD6/BAD6\BAD6; /
                      LDA.B !_1                                 ;;BADB|BAD8+BAD8/BAD8\BAD8; \ Sprite and block Y position = $01,$09
                      STA.W !SpriteYPosLow,Y                    ;;BADD|BADA+BADA/BADA\BADA;  |
                      STA.B !TouchBlockYPos                     ;;BAE0|BADD+BADD/BADD\BADD;  |
                      LDA.B !_9                                 ;;BAE2|BADF+BADF/BADF\BADF;  |
                      STA.W !SpriteYPosHigh,Y                   ;;BAE4|BAE1+BAE1/BAE1\BAE1;  |
                      STA.B !TouchBlockYPos+1                   ;;BAE7|BAE4+BAE4/BAE4\BAE4; /
                      PHX                                       ;;BAE9|BAE6+BAE6/BAE6\BAE6;
                      TYX                                       ;;BAEA|BAE7+BAE7/BAE7\BAE7;
                      JSL InitSpriteTables                      ;;BAEB|BAE8+BAE8/BAE8\BAE8; Reset sprite tables
                      INC.W !SpriteMisc160E,X                   ;;BAEF|BAEC+BAEC/BAEC\BAEC; ?
                      LDA.W !SpriteTweaker1662,X                ;;BAF2|BAEF+BAEF/BAEF\BAEF; \ Change the index into sprite clipping table
                      AND.B #$F0                                ;;BAF5|BAF2+BAF2/BAF2\BAF2;  | to "resize" the sprite
                      ORA.B #$0C                                ;;BAF7|BAF4+BAF4/BAF4\BAF4;  |
                      STA.W !SpriteTweaker1662,X                ;;BAF9|BAF6+BAF6/BAF6\BAF6; /
                      LDA.W !SpriteTweaker167A,X                ;;BAFC|BAF9+BAF9/BAF9\BAF9; \ No longer gives powerup when eaten
                      AND.B #$BF                                ;;BAFF|BAFC+BAFC/BAFC\BAFC;  |
                      STA.W !SpriteTweaker167A,X                ;;BB01|BAFE+BAFE/BAFE\BAFE; /
                      PLX                                       ;;BB04|BB01+BB01/BB01\BB01;
                      LDA.B #$04                                ;;BB05|BB02+BB02/BB02\BB02; \ Block to generate = Tree behind berry
                      STA.B !Map16TileGenerate                  ;;BB07|BB04+BB04/BB04\BB04; /
                      JSL GenerateTile                          ;;BB09|BB06+BB06/BB06\BB06; Generate the tile
                      RTL                                       ;;BB0D|BB0A+BB0A/BB0A\BB0A; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02BB0B:          db $02,$FA,$06,$06                        ;;BB0E|BB0B+BB0B/BB0B\BB0B;
                                                                ;;                        ;
DATA_02BB0F:          db $00,$FF,$00,$00                        ;;BB12|BB0F+BB0F/BB0F\BB0F;
                                                                ;;                        ;
DATA_02BB13:          db $10,$08,$10,$08                        ;;BB16|BB13+BB13/BB13\BB13;
                                                                ;;                        ;
YoshiWingsTiles:      db $5D,$C6,$5D,$C6                        ;;BB1A|BB17+BB17/BB17\BB17;
                                                                ;;                        ;
YoshiWingsGfxProp:    db $46,$46,$06,$06                        ;;BB1E|BB1B+BB1B/BB1B\BB1B;
                                                                ;;                        ;
YoshiWingsSize:       db $00,$02,$00,$02                        ;;BB22|BB1F+BB1F/BB1F\BB1F;
                                                                ;;                        ;
CODE_02BB23:          STA.B !_2                                 ;;BB26|BB23+BB23/BB23\BB23;
                      JSR IsSprOffScreenBnk2                    ;;BB28|BB25+BB25/BB25\BB25;
                      BNE Return02BB87                          ;;BB2B|BB28+BB28/BB28\BB28;
                      LDA.B !SpriteXPosLow,X                    ;;BB2D|BB2A+BB2A/BB2A\BB2A;
                      STA.B !_0                                 ;;BB2F|BB2C+BB2C/BB2C\BB2C;
                      LDA.W !SpriteXPosHigh,X                   ;;BB31|BB2E+BB2E/BB2E\BB2E;
                      STA.B !_4                                 ;;BB34|BB31+BB31/BB31\BB31;
                      LDA.B !SpriteYPosLow,X                    ;;BB36|BB33+BB33/BB33\BB33;
                      STA.B !_1                                 ;;BB38|BB35+BB35/BB35\BB35;
                      LDY.B #$F8                                ;;BB3A|BB37+BB37/BB37\BB37;
                      PHX                                       ;;BB3C|BB39+BB39/BB39\BB39;
                      LDA.W !SpriteMisc157C,X                   ;;BB3D|BB3A+BB3A/BB3A\BB3A;
                      ASL A                                     ;;BB40|BB3D+BB3D/BB3D\BB3D;
                      ADC.B !_2                                 ;;BB41|BB3E+BB3E/BB3E\BB3E;
                      TAX                                       ;;BB43|BB40+BB40/BB40\BB40;
                      LDA.B !_0                                 ;;BB44|BB41+BB41/BB41\BB41;
                      CLC                                       ;;BB46|BB43+BB43/BB43\BB43;
                      ADC.L DATA_02BB0B,X                       ;;BB47|BB44+BB44/BB44\BB44;
                      STA.B !_0                                 ;;BB4B|BB48+BB48/BB48\BB48;
                      LDA.B !_4                                 ;;BB4D|BB4A+BB4A/BB4A\BB4A;
                      ADC.L DATA_02BB0F,X                       ;;BB4F|BB4C+BB4C/BB4C\BB4C;
                      PHA                                       ;;BB53|BB50+BB50/BB50\BB50;
                      LDA.B !_0                                 ;;BB54|BB51+BB51/BB51\BB51;
                      SEC                                       ;;BB56|BB53+BB53/BB53\BB53;
                      SBC.B !Layer1XPos                         ;;BB57|BB54+BB54/BB54\BB54;
                      STA.W !OAMTileXPos,Y                      ;;BB59|BB56+BB56/BB56\BB56;
                      PLA                                       ;;BB5C|BB59+BB59/BB59\BB59;
                      SBC.B !Layer1XPos+1                       ;;BB5D|BB5A+BB5A/BB5A\BB5A;
                      BNE +                                     ;;BB5F|BB5C+BB5C/BB5C\BB5C;
                      LDA.B !_1                                 ;;BB61|BB5E+BB5E/BB5E\BB5E;
                      SEC                                       ;;BB63|BB60+BB60/BB60\BB60;
                      SBC.B !Layer1YPos                         ;;BB64|BB61+BB61/BB61\BB61;
                      CLC                                       ;;BB66|BB63+BB63/BB63\BB63;
                      ADC.L DATA_02BB13,X                       ;;BB67|BB64+BB64/BB64\BB64;
                      STA.W !OAMTileYPos,Y                      ;;BB6B|BB68+BB68/BB68\BB68;
                      LDA.L YoshiWingsTiles,X                   ;;BB6E|BB6B+BB6B/BB6B\BB6B;
                      STA.W !OAMTileNo,Y                        ;;BB72|BB6F+BB6F/BB6F\BB6F;
                      LDA.B !SpriteProperties                   ;;BB75|BB72+BB72/BB72\BB72;
                      ORA.L YoshiWingsGfxProp,X                 ;;BB77|BB74+BB74/BB74\BB74;
                      STA.W !OAMTileAttr,Y                      ;;BB7B|BB78+BB78/BB78\BB78;
                      TYA                                       ;;BB7E|BB7B+BB7B/BB7B\BB7B;
                      LSR A                                     ;;BB7F|BB7C+BB7C/BB7C\BB7C;
                      LSR A                                     ;;BB80|BB7D+BB7D/BB7D\BB7D;
                      TAY                                       ;;BB81|BB7E+BB7E/BB7E\BB7E;
                      LDA.L YoshiWingsSize,X                    ;;BB82|BB7F+BB7F/BB7F\BB7F;
                      STA.W !OAMTileSize,Y                      ;;BB86|BB83+BB83/BB83\BB83;
                    + PLX                                       ;;BB89|BB86+BB86/BB86\BB86;
Return02BB87:         RTL                                       ;;BB8A|BB87+BB87/BB87\BB87; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02BB88:          db $FF,$01,$FF,$01,$00,$00                ;;BB8B|BB88+BB88/BB88\BB88;
                                                                ;;                        ;
DATA_02BB8E:          db $E8,$18,$F8,$08,$00,$00                ;;BB91|BB8E+BB8E/BB8E\BB8E;
                                                                ;;                        ;
DolphinMain:          JSR DolphinGfx                            ;;BB97|BB94+BB94/BB94\BB94;
                      LDA.B !SpriteLock                         ;;BB9A|BB97+BB97/BB97\BB97;
                      BNE Return02BBFF                          ;;BB9C|BB99+BB99/BB99\BB99;
                      JSR SubOffscreen1Bnk2                     ;;BB9E|BB9B+BB9B/BB9B\BB9B;
                      JSR UpdateYPosNoGrvty                     ;;BBA1|BB9E+BB9E/BB9E\BB9E;
                      JSR UpdateXPosNoGrvty                     ;;BBA4|BBA1+BBA1/BBA1\BBA1;
                      STA.W !SpriteMisc1528,X                   ;;BBA7|BBA4+BBA4/BBA4\BBA4;
                      LDA.B !EffFrame                           ;;BBAA|BBA7+BBA7/BBA7\BBA7;
                      AND.B #$00                                ;;BBAC|BBA9+BBA9/BBA9\BBA9;
                      BNE CODE_02BBB7                           ;;BBAE|BBAB+BBAB/BBAB\BBAB;
                      LDA.B !SpriteYSpeed,X                     ;;BBB0|BBAD+BBAD/BBAD\BBAD;
                      BMI CODE_02BBB5                           ;;BBB2|BBAF+BBAF/BBAF\BBAF;
                      CMP.B #$3F                                ;;BBB4|BBB1+BBB1/BBB1\BBB1;
                      BCS CODE_02BBB7                           ;;BBB6|BBB3+BBB3/BBB3\BBB3;
CODE_02BBB5:          INC.B !SpriteYSpeed,X                     ;;BBB8|BBB5+BBB5/BBB5\BBB5;
CODE_02BBB7:          TXA                                       ;;BBBA|BBB7+BBB7/BBB7\BBB7;
                      EOR.B !TrueFrame                          ;;BBBB|BBB8+BBB8/BBB8\BBB8;
                      LSR A                                     ;;BBBD|BBBA+BBBA/BBBA\BBBA;
                      BCC +                                     ;;BBBE|BBBB+BBBB/BBBB\BBBB;
                      JSL SprObjInteract                        ;;BBC0|BBBD+BBBD/BBBD\BBBD;
                    + LDA.B !SpriteYSpeed,X                     ;;BBC4|BBC1+BBC1/BBC1\BBC1;
                      BMI CODE_02BBFB                           ;;BBC6|BBC3+BBC3/BBC3\BBC3;
                      LDA.W !SpriteInLiquid,X                   ;;BBC8|BBC5+BBC5/BBC5\BBC5;
                      BEQ CODE_02BBFB                           ;;BBCB|BBC8+BBC8/BBC8\BBC8;
                      LDA.B !SpriteYSpeed,X                     ;;BBCD|BBCA+BBCA/BBCA\BBCA;
                      BEQ +                                     ;;BBCF|BBCC+BBCC/BBCC\BBCC;
                      SEC                                       ;;BBD1|BBCE+BBCE/BBCE\BBCE;
                      SBC.B #$08                                ;;BBD2|BBCF+BBCF/BBCF\BBCF;
                      STA.B !SpriteYSpeed,X                     ;;BBD4|BBD1+BBD1/BBD1\BBD1;
                      BPL +                                     ;;BBD6|BBD3+BBD3/BBD3\BBD3;
                      STZ.B !SpriteYSpeed,X                     ;;BBD8|BBD5+BBD5/BBD5\BBD5; Sprite Y Speed = 0
                    + LDA.W !SpriteMisc151C,X                   ;;BBDA|BBD7+BBD7/BBD7\BBD7;
                      BNE CODE_02BBF7                           ;;BBDD|BBDA+BBDA/BBDA\BBDA;
                      LDA.B !SpriteTableC2,X                    ;;BBDF|BBDC+BBDC/BBDC\BBDC;
                      LSR A                                     ;;BBE1|BBDE+BBDE/BBDE\BBDE;
                      PHP                                       ;;BBE2|BBDF+BBDF/BBDF\BBDF;
                      LDA.B !SpriteNumber,X                     ;;BBE3|BBE0+BBE0/BBE0\BBE0;
                      SEC                                       ;;BBE5|BBE2+BBE2/BBE2\BBE2;
                      SBC.B #$41                                ;;BBE6|BBE3+BBE3/BBE3\BBE3;
                      PLP                                       ;;BBE8|BBE5+BBE5/BBE5\BBE5;
                      ROL A                                     ;;BBE9|BBE6+BBE6/BBE6\BBE6;
                      TAY                                       ;;BBEA|BBE7+BBE7/BBE7\BBE7;
                      LDA.B !SpriteXSpeed,X                     ;;BBEB|BBE8+BBE8/BBE8\BBE8;
                      CLC                                       ;;BBED|BBEA+BBEA/BBEA\BBEA;
                      ADC.W DATA_02BB88,Y                       ;;BBEE|BBEB+BBEB/BBEB\BBEB;
                      STA.B !SpriteXSpeed,X                     ;;BBF1|BBEE+BBEE/BBEE\BBEE;
                      CMP.W DATA_02BB8E,Y                       ;;BBF3|BBF0+BBF0/BBF0\BBF0;
                      BNE CODE_02BBFB                           ;;BBF6|BBF3+BBF3/BBF3\BBF3;
                      INC.B !SpriteTableC2,X                    ;;BBF8|BBF5+BBF5/BBF5\BBF5;
CODE_02BBF7:          LDA.B #$C0                                ;;BBFA|BBF7+BBF7/BBF7\BBF7;
                      STA.B !SpriteYSpeed,X                     ;;BBFC|BBF9+BBF9/BBF9\BBF9;
CODE_02BBFB:          JSL InvisBlkMainRt                        ;;BBFE|BBFB+BBFB/BBFB\BBFB;
Return02BBFF:         RTL                                       ;;BC02|BBFF+BBFF/BBFF\BBFF; Return
                                                                ;;                        ;
VertDolphinGfx:       LDA.B !EffFrame                           ;;BC03|BC00+BC00/BC00\BC00;
                      AND.B #$04                                ;;BC05|BC02+BC02/BC02\BC02;
                      LSR A                                     ;;BC07|BC04+BC04/BC04\BC04;
                      LSR A                                     ;;BC08|BC05+BC05/BC05\BC05;
                      STA.W !SpriteMisc157C,X                   ;;BC09|BC06+BC06/BC06\BC06;
                      JSL GenericSprGfxRt1                      ;;BC0C|BC09+BC09/BC09\BC09;
                      RTS                                       ;;BC10|BC0D+BC0D/BC0D\BC0D; Return
                                                                ;;                        ;
                                                                ;;                        ;
DolphinTiles1:        db $E2,$88                                ;;BC11|BC0E+BC0E/BC0E\BC0E;
                                                                ;;                        ;
DolphinTiles2:        db $E7,$A8                                ;;BC13|BC10+BC10/BC10\BC10;
                                                                ;;                        ;
DolphinTiles3:        db $E8,$A9                                ;;BC15|BC12+BC12/BC12\BC12;
                                                                ;;                        ;
DolphinGfx:           LDA.B !SpriteNumber,X                     ;;BC17|BC14+BC14/BC14\BC14;
                      CMP.B #$43                                ;;BC19|BC16+BC16/BC16\BC16;
                      BNE +                                     ;;BC1B|BC18+BC18/BC18\BC18;
                      JMP VertDolphinGfx                        ;;BC1D|BC1A+BC1A/BC1A\BC1A;
                                                                ;;                        ;
                    + JSR GetDrawInfo2                          ;;BC20|BC1D+BC1D/BC1D\BC1D;
                      LDA.B !SpriteXSpeed,X                     ;;BC23|BC20+BC20/BC20\BC20;
                      STA.B !_2                                 ;;BC25|BC22+BC22/BC22\BC22;
                      LDA.B !_0                                 ;;BC27|BC24+BC24/BC24\BC24;
                      ASL.B !_2                                 ;;BC29|BC26+BC26/BC26\BC26;
                      PHP                                       ;;BC2B|BC28+BC28/BC28\BC28; Store carry: (x speed is negative)
                      BCC CODE_02BC3C                           ;;BC2C|BC29+BC29/BC29\BC29;
                      STA.W !OAMTileXPos+$100,Y                 ;;BC2E|BC2B+BC2B/BC2B\BC2B;
                      CLC                                       ;;BC31|BC2E+BC2E/BC2E\BC2E;
                      ADC.B #$10                                ;;BC32|BC2F+BC2F/BC2F\BC2F;
                      STA.W !OAMTileXPos+$104,Y                 ;;BC34|BC31+BC31/BC31\BC31;
                      CLC                                       ;;BC37|BC34+BC34/BC34\BC34;
                      ADC.B #$08                                ;;BC38|BC35+BC35/BC35\BC35;
                      STA.W !OAMTileXPos+$108,Y                 ;;BC3A|BC37+BC37/BC37\BC37;
                      BRA +                                     ;;BC3D|BC3A+BC3A/BC3A\BC3A;
                                                                ;;                        ;
CODE_02BC3C:          CLC                                       ;;BC3F|BC3C+BC3C/BC3C\BC3C;
                      ADC.B #$18                                ;;BC40|BC3D+BC3D/BC3D\BC3D;
                      STA.W !OAMTileXPos+$100,Y                 ;;BC42|BC3F+BC3F/BC3F\BC3F;
                      SEC                                       ;;BC45|BC42+BC42/BC42\BC42;
                      SBC.B #$10                                ;;BC46|BC43+BC43/BC43\BC43;
                      STA.W !OAMTileXPos+$104,Y                 ;;BC48|BC45+BC45/BC45\BC45;
                      SEC                                       ;;BC4B|BC48+BC48/BC48\BC48;
                      SBC.B #$08                                ;;BC4C|BC49+BC49/BC49\BC49;
                      STA.W !OAMTileXPos+$108,Y                 ;;BC4E|BC4B+BC4B/BC4B\BC4B;
                    + LDA.B !_1                                 ;;BC51|BC4E+BC4E/BC4E\BC4E;
                      STA.W !OAMTileYPos+$100,Y                 ;;BC53|BC50+BC50/BC50\BC50;
                      STA.W !OAMTileYPos+$104,Y                 ;;BC56|BC53+BC53/BC53\BC53;
                      STA.W !OAMTileYPos+$108,Y                 ;;BC59|BC56+BC56/BC56\BC56;
                      PHX                                       ;;BC5C|BC59+BC59/BC59\BC59;
                      LDA.B !EffFrame                           ;;BC5D|BC5A+BC5A/BC5A\BC5A;
                      AND.B #$08                                ;;BC5F|BC5C+BC5C/BC5C\BC5C;
                      LSR A                                     ;;BC61|BC5E+BC5E/BC5E\BC5E;
                      LSR A                                     ;;BC62|BC5F+BC5F/BC5F\BC5F;
                      LSR A                                     ;;BC63|BC60+BC60/BC60\BC60;
                      TAX                                       ;;BC64|BC61+BC61/BC61\BC61;
                      LDA.W DolphinTiles1,X                     ;;BC65|BC62+BC62/BC62\BC62;
                      STA.W !OAMTileNo+$100,Y                   ;;BC68|BC65+BC65/BC65\BC65;
                      LDA.W DolphinTiles2,X                     ;;BC6B|BC68+BC68/BC68\BC68;
                      STA.W !OAMTileNo+$104,Y                   ;;BC6E|BC6B+BC6B/BC6B\BC6B;
                      LDA.W DolphinTiles3,X                     ;;BC71|BC6E+BC6E/BC6E\BC6E;
                      STA.W !OAMTileNo+$108,Y                   ;;BC74|BC71+BC71/BC71\BC71;
                      PLX                                       ;;BC77|BC74+BC74/BC74\BC74;
                      LDA.W !SpriteOBJAttribute,X               ;;BC78|BC75+BC75/BC75\BC75;
                      ORA.B !SpriteProperties                   ;;BC7B|BC78+BC78/BC78\BC78;
                      PLP                                       ;;BC7D|BC7A+BC7A/BC7A\BC7A;
                      BCS +                                     ;;BC7E|BC7B+BC7B/BC7B\BC7B;
                      ORA.B #$40                                ;;BC80|BC7D+BC7D/BC7D\BC7D;
                    + STA.W !OAMTileAttr+$100,Y                 ;;BC82|BC7F+BC7F/BC7F\BC7F;
                      STA.W !OAMTileAttr+$104,Y                 ;;BC85|BC82+BC82/BC82\BC82;
                      STA.W !OAMTileAttr+$108,Y                 ;;BC88|BC85+BC85/BC85\BC85;
                      LDA.B #$02                                ;;BC8B|BC88+BC88/BC88\BC88;
                      LDY.B #$02                                ;;BC8D|BC8A+BC8A/BC8A\BC8A;
                      JMP CallFinOAMWriteBank2                  ;;BC8F|BC8C+BC8C/BC8C\BC8C;
                                                                ;;                        ;
                                                                ;;                        ;
WallFollowXSpdTbl:    db $08,$00,$F8,$00,$F8,$00,$08,$00        ;;BC92|BC8F+BC8F/BC8F\BC8F;
WallFollowYSpdTbl:    db $00,$08,$00,$F8,$00,$08,$00,$F8        ;;BC9A|BC97+BC97/BC97\BC97;
DATA_02BC9F:          db $01,$FF,$FF,$01,$FF,$01,$01,$FF        ;;BCA2|BC9F+BC9F/BC9F\BC9F;
DATA_02BCA7:          db $01,$01,$FF,$FF,$01,$01,$FF,$FF        ;;BCAA|BCA7+BCA7/BCA7\BCA7;
DATA_02BCAF:          db $01,$04,$02,$08,$02,$04,$01,$08        ;;BCB2|BCAF+BCAF/BCAF\BCAF;
DATA_02BCB7:          db $00,$02,$00,$02,$00,$02,$00,$02        ;;BCBA|BCB7+BCB7/BCB7\BCB7;
                      db $05,$04,$05,$04,$05,$04,$05,$04        ;;BCC2|BCBF+BCBF/BCBF\BCBF;
DATA_02BCC7:          db $00,$C0,$C0,$00,$40,$80,$80,$40        ;;BCCA|BCC7+BCC7/BCC7\BCC7;
                      db $80,$C0,$40,$00,$C0,$80,$00,$40        ;;BCD2|BCCF+BCCF/BCCF\BCCF;
UrchinAniFrameIndex:  db $00,$01,$02,$01                        ;;BCDA|BCD7+BCD7/BCD7\BCD7;
                                                                ;;                        ;
WallFollowersMain:    JSL SprSprInteract                        ;;BCDE|BCDB+BCDB/BCDB\BCDB;
                      JSL GetRand                               ;;BCE2|BCDF+BCDF/BCDF\BCDF;
                      AND.B #$FF                                ;;BCE6|BCE3+BCE3/BCE3\BCE3;
                      ORA.B !SpriteLock                         ;;BCE8|BCE5+BCE5/BCE5\BCE5;
                      BNE +                                     ;;BCEA|BCE7+BCE7/BCE7\BCE7;
                      LDA.B #$0C                                ;;BCEC|BCE9+BCE9/BCE9\BCE9;
                      STA.W !SpriteMisc1558,X                   ;;BCEE|BCEB+BCEB/BCEB\BCEB;
                    + LDA.B !SpriteNumber,X                     ;;BCF1|BCEE+BCEE/BCEE\BCEE; \ Branch if not Spike Top
                      CMP.B #$2E                                ;;BCF3|BCF0+BCF0/BCF0\BCF0;  |
                      BNE CODE_02BD23                           ;;BCF5|BCF2+BCF2/BCF2\BCF2; /
                      LDY.B !SpriteTableC2,X                    ;;BCF7|BCF4+BCF4/BCF4\BCF4;
                      LDA.W !SpriteMisc1564,X                   ;;BCF9|BCF6+BCF6/BCF6\BCF6;
                      BEQ CODE_02BD04                           ;;BCFC|BCF9+BCF9/BCF9\BCF9;
                      TYA                                       ;;BCFE|BCFB+BCFB/BCFB\BCFB;
                      CLC                                       ;;BCFF|BCFC+BCFC/BCFC\BCFC;
                      ADC.B #$08                                ;;BD00|BCFD+BCFD/BCFD\BCFD;
                      TAY                                       ;;BD02|BCFF+BCFF/BCFF\BCFF;
                      LDA.B #$00                                ;;BD03|BD00+BD00/BD00\BD00;
                      BRA +                                     ;;BD05|BD02+BD02/BD02\BD02;
                                                                ;;                        ;
CODE_02BD04:          LDA.B !EffFrame                           ;;BD07|BD04+BD04/BD04\BD04;
                      LSR A                                     ;;BD09|BD06+BD06/BD06\BD06;
                      LSR A                                     ;;BD0A|BD07+BD07/BD07\BD07;
                      LSR A                                     ;;BD0B|BD08+BD08/BD08\BD08;
                      AND.B #$01                                ;;BD0C|BD09+BD09/BD09\BD09;
                    + CLC                                       ;;BD0E|BD0B+BD0B/BD0B\BD0B;
                      ADC.W DATA_02BCB7,Y                       ;;BD0F|BD0C+BD0C/BD0C\BD0C;
                      STA.W !SpriteMisc1602,X                   ;;BD12|BD0F+BD0F/BD0F\BD0F;
                      LDA.W !SpriteOBJAttribute,X               ;;BD15|BD12+BD12/BD12\BD12;
                      AND.B #$3F                                ;;BD18|BD15+BD15/BD15\BD15;
                      ORA.W DATA_02BCC7,Y                       ;;BD1A|BD17+BD17/BD17\BD17;
                      STA.W !SpriteOBJAttribute,X               ;;BD1D|BD1A+BD1A/BD1A\BD1A;
                      JSL GenericSprGfxRt2                      ;;BD20|BD1D+BD1D/BD1D\BD1D;
                      BRA CODE_02BD2F                           ;;BD24|BD21+BD21/BD21\BD21;
                                                                ;;                        ;
CODE_02BD23:          CMP.B #$A5                                ;;BD26|BD23+BD23/BD23\BD23;
                      BCC CODE_02BD2C                           ;;BD28|BD25+BD25/BD25\BD25; urchins?
                      JSR CODE_02BE4E                           ;;BD2A|BD27+BD27/BD27\BD27;
                      BRA CODE_02BD2F                           ;;BD2D|BD2A+BD2A/BD2A\BD2A;
                                                                ;;                        ;
CODE_02BD2C:          JSR UrchinGfxRt                           ;;BD2F|BD2C+BD2C/BD2C\BD2C;
CODE_02BD2F:          LDA.W !SpriteStatus,X                     ;;BD32|BD2F+BD2F/BD2F\BD2F;
                      CMP.B #$08                                ;;BD35|BD32+BD32/BD32\BD32;
                      BEQ +                                     ;;BD37|BD34+BD34/BD34\BD34;
                      STZ.W !SpriteMisc1528,X                   ;;BD39|BD36+BD36/BD36\BD36;
                      LDA.B #$FF                                ;;BD3C|BD39+BD39/BD39\BD39;
                      STA.W !SpriteMisc1558,X                   ;;BD3E|BD3B+BD3B/BD3B\BD3B;
                      RTL                                       ;;BD41|BD3E+BD3E/BD3E\BD3E; Return
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;BD42|BD3F+BD3F/BD3F\BD3F;
                      BNE Return02BD74                          ;;BD44|BD41+BD41/BD41\BD41;
                      JSR SubOffscreen3Bnk2                     ;;BD46|BD43+BD43/BD43\BD43;
                      JSL MarioSprInteract                      ;;BD49|BD46+BD46/BD46\BD46;
                      LDA.B !SpriteNumber,X                     ;;BD4D|BD4A+BD4A/BD4A\BD4A; \ Branch if Spike Top
                      CMP.B #$2E                                ;;BD4F|BD4C+BD4C/BD4C\BD4C;  |
                      BEQ CODE_02BDA7                           ;;BD51|BD4E+BD4E/BD4E\BD4E; /
                      CMP.B #$3C                                ;;BD53|BD50+BD50/BD50\BD50; \ Branch if Wall-follow Urchin
                      BEQ CODE_02BDB3                           ;;BD55|BD52+BD52/BD52\BD52; /
                      CMP.B #$A5                                ;;BD57|BD54+BD54/BD54\BD54; \ Branch if Ground-guided Fuzzball/Sparky
                      BEQ CODE_02BDB3                           ;;BD59|BD56+BD56/BD56\BD56; /
                      CMP.B #$A6                                ;;BD5B|BD58+BD58/BD58\BD58; \ Branch if Ground-guided Hothead
                      BEQ CODE_02BDB3                           ;;BD5D|BD5A+BD5A/BD5A\BD5A; /
                      LDA.B !SpriteTableC2,X                    ;;BD5F|BD5C+BD5C/BD5C\BD5C;
                      AND.B #$01                                ;;BD61|BD5E+BD5E/BD5E\BD5E;
                      JSL ExecutePtr                            ;;BD63|BD60+BD60/BD60\BD60;
                                                                ;;                        ;
                      dw CODE_02BD68                            ;;BD67|BD64+BD64/BD64\BD64;
                      dw CODE_02BD75                            ;;BD69|BD66+BD66/BD66\BD66;
                                                                ;;                        ;
CODE_02BD68:          LDA.W !SpriteMisc1540,X                   ;;BD6B|BD68+BD68/BD68\BD68;
                      BNE Return02BD74                          ;;BD6E|BD6B+BD6B/BD6B\BD6B;
                      LDA.B #$80                                ;;BD70|BD6D+BD6D/BD6D\BD6D;
                      STA.W !SpriteMisc1540,X                   ;;BD72|BD6F+BD6F/BD6F\BD6F;
                      INC.B !SpriteTableC2,X                    ;;BD75|BD72+BD72/BD72\BD72;
Return02BD74:         RTL                                       ;;BD77|BD74+BD74/BD74\BD74; Return
                                                                ;;                        ;
CODE_02BD75:          LDA.B !SpriteNumber,X                     ;;BD78|BD75+BD75/BD75\BD75; \ Branch if Wall-detect Urchin
                      CMP.B #$3B                                ;;BD7A|BD77+BD77/BD77\BD77;  |
                      BEQ CODE_02BD80                           ;;BD7C|BD79+BD79/BD79\BD79; /
                      LDA.W !SpriteMisc1540,X                   ;;BD7E|BD7B+BD7B/BD7B\BD7B;
                      BEQ CODE_02BD91                           ;;BD81|BD7E+BD7E/BD7E\BD7E;
CODE_02BD80:          JSR UpdateXPosNoGrvty                     ;;BD83|BD80+BD80/BD80\BD80;
                      JSR UpdateYPosNoGrvty                     ;;BD86|BD83+BD83/BD83\BD83;
                      JSL SprObjInteract                        ;;BD89|BD86+BD86/BD86\BD86;
                      LDA.W !SpriteBlockedDirs,X                ;;BD8D|BD8A+BD8A/BD8A\BD8A;
                      AND.B #$0F                                ;;BD90|BD8D+BD8D/BD8D\BD8D;
                      BEQ +                                     ;;BD92|BD8F+BD8F/BD8F\BD8F;
CODE_02BD91:          LDA.B !SpriteXSpeed,X                     ;;BD94|BD91+BD91/BD91\BD91;
                      EOR.B #$FF                                ;;BD96|BD93+BD93/BD93\BD93;
                      INC A                                     ;;BD98|BD95+BD95/BD95\BD95;
                      STA.B !SpriteXSpeed,X                     ;;BD99|BD96+BD96/BD96\BD96;
                      LDA.B !SpriteYSpeed,X                     ;;BD9B|BD98+BD98/BD98\BD98;
                      EOR.B #$FF                                ;;BD9D|BD9A+BD9A/BD9A\BD9A;
                      INC A                                     ;;BD9F|BD9C+BD9C/BD9C\BD9C;
                      STA.B !SpriteYSpeed,X                     ;;BDA0|BD9D+BD9D/BD9D\BD9D;
                      LDA.B #$40                                ;;BDA2|BD9F+BD9F/BD9F\BD9F;
                      STA.W !SpriteMisc1540,X                   ;;BDA4|BDA1+BDA1/BDA1\BDA1;
                      INC.B !SpriteTableC2,X                    ;;BDA7|BDA4+BDA4/BDA4\BDA4;
                    + RTL                                       ;;BDA9|BDA6+BDA6/BDA6\BDA6; Return
                                                                ;;                        ;
CODE_02BDA7:          LDA.B !SpriteYPosLow,X                    ;;BDAA|BDA7+BDA7/BDA7\BDA7;
                      SEC                                       ;;BDAC|BDA9+BDA9/BDA9\BDA9;
                      SBC.B !Layer1YPos                         ;;BDAD|BDAA+BDAA/BDAA\BDAA;
                      CMP.B #$E0                                ;;BDAF|BDAC+BDAC/BDAC\BDAC;
                      BCC CODE_02BDB3                           ;;BDB1|BDAE+BDAE/BDAE\BDAE;
                      STZ.W !SpriteStatus,X                     ;;BDB3|BDB0+BDB0/BDB0\BDB0;
CODE_02BDB3:          LDA.W !SpriteMisc1540,X                   ;;BDB6|BDB3+BDB3/BDB3\BDB3;
                      BNE CODE_02BDE7                           ;;BDB9|BDB6+BDB6/BDB6\BDB6;
                      LDY.B !SpriteTableC2,X                    ;;BDBB|BDB8+BDB8/BDB8\BDB8;
                      LDA.W DATA_02BCA7,Y                       ;;BDBD|BDBA+BDBA/BDBA\BDBA;
                      STA.B !SpriteYSpeed,X                     ;;BDC0|BDBD+BDBD/BDBD\BDBD;
                      LDA.W DATA_02BC9F,Y                       ;;BDC2|BDBF+BDBF/BDBF\BDBF;
                      STA.B !SpriteXSpeed,X                     ;;BDC5|BDC2+BDC2/BDC2\BDC2;
                      JSL SprObjInteract                        ;;BDC7|BDC4+BDC4/BDC4\BDC4;
                      LDA.W !SpriteBlockedDirs,X                ;;BDCB|BDC8+BDC8/BDC8\BDC8;
                      AND.B #$0F                                ;;BDCE|BDCB+BDCB/BDCB\BDCB;
                      BNE CODE_02BDE7                           ;;BDD0|BDCD+BDCD/BDCD\BDCD;
                      LDA.B #$08                                ;;BDD2|BDCF+BDCF/BDCF\BDCF;
                      STA.W !SpriteMisc1564,X                   ;;BDD4|BDD1+BDD1/BDD1\BDD1;
                      LDA.B #$38                                ;;BDD7|BDD4+BDD4/BDD4\BDD4;
                      LDY.B !SpriteNumber,X                     ;;BDD9|BDD6+BDD6/BDD6\BDD6; \ Branch if Wall-follow Urchin
                      CPY.B #$3C                                ;;BDDB|BDD8+BDD8/BDD8\BDD8;  |
                      BEQ +                                     ;;BDDD|BDDA+BDDA/BDDA\BDDA; /
                      LDA.B #$1A                                ;;BDDF|BDDC+BDDC/BDDC\BDDC;
                      CPY.B #$A5                                ;;BDE1|BDDE+BDDE/BDDE\BDDE;
                      BNE +                                     ;;BDE3|BDE0+BDE0/BDE0\BDE0;
                      LSR A                                     ;;BDE5|BDE2+BDE2/BDE2\BDE2;
                      NOP                                       ;;BDE6|BDE3+BDE3/BDE3\BDE3;
                    + STA.W !SpriteMisc1540,X                   ;;BDE7|BDE4+BDE4/BDE4\BDE4;
CODE_02BDE7:          LDA.B #$20                                ;;BDEA|BDE7+BDE7/BDE7\BDE7;
                      LDY.B !SpriteNumber,X                     ;;BDEC|BDE9+BDE9/BDE9\BDE9; \ Branch if Wall-follow Urchin
                      CPY.B #$3C                                ;;BDEE|BDEB+BDEB/BDEB\BDEB;  |
                      BEQ +                                     ;;BDF0|BDED+BDED/BDED\BDED; /
                      LDA.B #$10                                ;;BDF2|BDEF+BDEF/BDEF\BDEF;
                      CPY.B #$A5                                ;;BDF4|BDF1+BDF1/BDF1\BDF1;
                      BNE +                                     ;;BDF6|BDF3+BDF3/BDF3\BDF3;
                      LSR A                                     ;;BDF8|BDF5+BDF5/BDF5\BDF5;
                      NOP                                       ;;BDF9|BDF6+BDF6/BDF6\BDF6;
                    + CMP.W !SpriteMisc1540,X                   ;;BDFA|BDF7+BDF7/BDF7\BDF7;
                      BNE CODE_02BE0E                           ;;BDFD|BDFA+BDFA/BDFA\BDFA;
                      INC.B !SpriteTableC2,X                    ;;BDFF|BDFC+BDFC/BDFC\BDFC;
                      LDA.B !SpriteTableC2,X                    ;;BE01|BDFE+BDFE/BDFE\BDFE;
                      CMP.B #$04                                ;;BE03|BE00+BE00/BE00\BE00;
                      BNE +                                     ;;BE05|BE02+BE02/BE02\BE02;
                      STZ.B !SpriteTableC2,X                    ;;BE07|BE04+BE04/BE04\BE04;
                    + CMP.B #$08                                ;;BE09|BE06+BE06/BE06\BE06;
                      BNE CODE_02BE0E                           ;;BE0B|BE08+BE08/BE08\BE08;
                      LDA.B #$04                                ;;BE0D|BE0A+BE0A/BE0A\BE0A;
                      STA.B !SpriteTableC2,X                    ;;BE0F|BE0C+BE0C/BE0C\BE0C;
CODE_02BE0E:          LDY.B !SpriteTableC2,X                    ;;BE11|BE0E+BE0E/BE0E\BE0E;
                      LDA.W !SpriteBlockedDirs,X                ;;BE13|BE10+BE10/BE10\BE10;
                      AND.W DATA_02BCAF,Y                       ;;BE16|BE13+BE13/BE13\BE13;
                      BEQ CODE_02BE2F                           ;;BE19|BE16+BE16/BE16\BE16;
                      LDA.B #$08                                ;;BE1B|BE18+BE18/BE18\BE18;
                      STA.W !SpriteMisc1564,X                   ;;BE1D|BE1A+BE1A/BE1A\BE1A;
                      DEC.B !SpriteTableC2,X                    ;;BE20|BE1D+BE1D/BE1D\BE1D;
                      LDA.B !SpriteTableC2,X                    ;;BE22|BE1F+BE1F/BE1F\BE1F;
                      BPL CODE_02BE27                           ;;BE24|BE21+BE21/BE21\BE21;
                      LDA.B #$03                                ;;BE26|BE23+BE23/BE23\BE23;
                      BRA CODE_02BE2D                           ;;BE28|BE25+BE25/BE25\BE25;
                                                                ;;                        ;
CODE_02BE27:          CMP.B #$03                                ;;BE2A|BE27+BE27/BE27\BE27;
                      BNE CODE_02BE2F                           ;;BE2C|BE29+BE29/BE29\BE29;
                      LDA.B #$07                                ;;BE2E|BE2B+BE2B/BE2B\BE2B;
CODE_02BE2D:          STA.B !SpriteTableC2,X                    ;;BE30|BE2D+BE2D/BE2D\BE2D;
CODE_02BE2F:          LDY.B !SpriteTableC2,X                    ;;BE32|BE2F+BE2F/BE2F\BE2F;
                      LDA.W WallFollowYSpdTbl,Y                 ;;BE34|BE31+BE31/BE31\BE31;
                      STA.B !SpriteYSpeed,X                     ;;BE37|BE34+BE34/BE34\BE34;
                      LDA.W WallFollowXSpdTbl,Y                 ;;BE39|BE36+BE36/BE36\BE36;
                      STA.B !SpriteXSpeed,X                     ;;BE3C|BE39+BE39/BE39\BE39;
                      LDA.B !SpriteNumber,X                     ;;BE3E|BE3B+BE3B/BE3B\BE3B; \ Branch if not Ground-guided Fuzzball/Sparky
                      CMP.B #$A5                                ;;BE40|BE3D+BE3D/BE3D\BE3D;  |
                      BNE +                                     ;;BE42|BE3F+BE3F/BE3F\BE3F; /
                      ASL.B !SpriteXSpeed,X                     ;;BE44|BE41+BE41/BE41\BE41;
                      ASL.B !SpriteYSpeed,X                     ;;BE46|BE43+BE43/BE43\BE43;
                    + JSR UpdateXPosNoGrvty                     ;;BE48|BE45+BE45/BE45\BE45;
                      JSR UpdateYPosNoGrvty                     ;;BE4B|BE48+BE48/BE48\BE48;
                      RTL                                       ;;BE4E|BE4B+BE4B/BE4B\BE4B; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02BE4C:          db $05,$45                                ;;BE4F|BE4C+BE4C/BE4C\BE4C;
                                                                ;;                        ;
CODE_02BE4E:          LDA.B !SpriteNumber,X                     ;;BE51|BE4E+BE4E/BE4E\BE4E;
                      CMP.B #$A5                                ;;BE53|BE50+BE50/BE50\BE50;
                      BNE CODE_02BEB5                           ;;BE55|BE52+BE52/BE52\BE52; big hothead
                      JSL GenericSprGfxRt2                      ;;BE57|BE54+BE54/BE54\BE54;
                      LDY.W !SpriteOAMIndex,X                   ;;BE5B|BE58+BE58/BE58\BE58; Y = Index into sprite OAM
                      LDA.W !SpriteTileset                      ;;BE5E|BE5B+BE5B/BE5B\BE5B;
                      CMP.B #$02                                ;;BE61|BE5E+BE5E/BE5E\BE5E;
                      BNE +                                     ;;BE63|BE60+BE60/BE60\BE60;
                      PHX                                       ;;BE65|BE62+BE62/BE62\BE62;
                      LDA.B !EffFrame                           ;;BE66|BE63+BE63/BE63\BE63;
                      LSR A                                     ;;BE68|BE65+BE65/BE65\BE65;
                      LSR A                                     ;;BE69|BE66+BE66/BE66\BE66;
                      AND.B #$01                                ;;BE6A|BE67+BE67/BE67\BE67;
                      TAX                                       ;;BE6C|BE69+BE69/BE69\BE69;
                      LDA.B #$C8                                ;;BE6D|BE6A+BE6A/BE6A\BE6A;
                      STA.W !OAMTileNo+$100,Y                   ;;BE6F|BE6C+BE6C/BE6C\BE6C;
                      LDA.W DATA_02BE4C,X                       ;;BE72|BE6F+BE6F/BE6F\BE6F;
                      ORA.B !SpriteProperties                   ;;BE75|BE72+BE72/BE72\BE72;
                      STA.W !OAMTileAttr+$100,Y                 ;;BE77|BE74+BE74/BE74\BE74;
                      PLX                                       ;;BE7A|BE77+BE77/BE77\BE77;
                      RTS                                       ;;BE7B|BE78+BE78/BE78\BE78; Return
                                                                ;;                        ;
                    + LDA.B #$0A                                ;;BE7C|BE79+BE79/BE79\BE79;
                      STA.W !OAMTileNo+$100,Y                   ;;BE7E|BE7B+BE7B/BE7B\BE7B;
                      LDA.B !EffFrame                           ;;BE81|BE7E+BE7E/BE7E\BE7E;
                      AND.B #$0C                                ;;BE83|BE80+BE80/BE80\BE80;
                      ASL A                                     ;;BE85|BE82+BE82/BE82\BE82;
                      ASL A                                     ;;BE86|BE83+BE83/BE83\BE83;
                      ASL A                                     ;;BE87|BE84+BE84/BE84\BE84;
                      ASL A                                     ;;BE88|BE85+BE85/BE85\BE85;
                      EOR.W !OAMTileAttr+$100,Y                 ;;BE89|BE86+BE86/BE86\BE86;
                      STA.W !OAMTileAttr+$100,Y                 ;;BE8C|BE89+BE89/BE89\BE89;
                      RTS                                       ;;BE8F|BE8C+BE8C/BE8C\BE8C; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02BE8D:          db $F8,$08,$F8,$08                        ;;BE90|BE8D+BE8D/BE8D\BE8D;
                                                                ;;                        ;
DATA_02BE91:          db $F8,$F8,$08,$08                        ;;BE94|BE91+BE91/BE91\BE91;
                                                                ;;                        ;
HotheadTiles:         db $0C,$0E,$0E,$0C,$0E,$0C,$0C,$0E        ;;BE98|BE95+BE95/BE95\BE95;
DATA_02BE9D:          db $05,$05,$C5,$C5,$45,$45,$85,$85        ;;BEA0|BE9D+BE9D/BE9D\BE9D;
DATA_02BEA5:          db $07,$07,$01,$01,$01,$01,$07,$07        ;;BEA8|BEA5+BEA5/BEA5\BEA5;
DATA_02BEAD:          db $00,$08,$08,$00,$00,$08,$08,$00        ;;BEB0|BEAD+BEAD/BEAD\BEAD;
                                                                ;;                        ;
CODE_02BEB5:          JSR GetDrawInfo2                          ;;BEB8|BEB5+BEB5/BEB5\BEB5;
                      TYA                                       ;;BEBB|BEB8+BEB8/BEB8\BEB8;
                      CLC                                       ;;BEBC|BEB9+BEB9/BEB9\BEB9;
                      ADC.B #$04                                ;;BEBD|BEBA+BEBA/BEBA\BEBA;
                      STA.W !SpriteOAMIndex,X                   ;;BEBF|BEBC+BEBC/BEBC\BEBC;
                      TAY                                       ;;BEC2|BEBF+BEBF/BEBF\BEBF;
                      LDA.B !EffFrame                           ;;BEC3|BEC0+BEC0/BEC0\BEC0;
                      AND.B #$04                                ;;BEC5|BEC2+BEC2/BEC2\BEC2;
                      STA.B !_3                                 ;;BEC7|BEC4+BEC4/BEC4\BEC4;
                      PHX                                       ;;BEC9|BEC6+BEC6/BEC6\BEC6;
                      LDX.B #$03                                ;;BECA|BEC7+BEC7/BEC7\BEC7;
                    - LDA.B !_0                                 ;;BECC|BEC9+BEC9/BEC9\BEC9;
                      CLC                                       ;;BECE|BECB+BECB/BECB\BECB;
                      ADC.W DATA_02BE8D,X                       ;;BECF|BECC+BECC/BECC\BECC;
                      STA.W !OAMTileXPos+$100,Y                 ;;BED2|BECF+BECF/BECF\BECF;
                      LDA.B !_1                                 ;;BED5|BED2+BED2/BED2\BED2;
                      CLC                                       ;;BED7|BED4+BED4/BED4\BED4;
                      ADC.W DATA_02BE91,X                       ;;BED8|BED5+BED5/BED5\BED5;
                      STA.W !OAMTileYPos+$100,Y                 ;;BEDB|BED8+BED8/BED8\BED8;
                      PHX                                       ;;BEDE|BEDB+BEDB/BEDB\BEDB;
                      TXA                                       ;;BEDF|BEDC+BEDC/BEDC\BEDC;
                      ORA.B !_3                                 ;;BEE0|BEDD+BEDD/BEDD\BEDD;
                      TAX                                       ;;BEE2|BEDF+BEDF/BEDF\BEDF;
                      LDA.W HotheadTiles,X                      ;;BEE3|BEE0+BEE0/BEE0\BEE0;
                      STA.W !OAMTileNo+$100,Y                   ;;BEE6|BEE3+BEE3/BEE3\BEE3;
                      LDA.W DATA_02BE9D,X                       ;;BEE9|BEE6+BEE6/BEE6\BEE6;
                      ORA.B !SpriteProperties                   ;;BEEC|BEE9+BEE9/BEE9\BEE9;
                      STA.W !OAMTileAttr+$100,Y                 ;;BEEE|BEEB+BEEB/BEEB\BEEB;
                      PLX                                       ;;BEF1|BEEE+BEEE/BEEE\BEEE;
                      INY                                       ;;BEF2|BEEF+BEEF/BEEF\BEEF;
                      INY                                       ;;BEF3|BEF0+BEF0/BEF0\BEF0;
                      INY                                       ;;BEF4|BEF1+BEF1/BEF1\BEF1;
                      INY                                       ;;BEF5|BEF2+BEF2/BEF2\BEF2;
                      DEX                                       ;;BEF6|BEF3+BEF3/BEF3\BEF3;
                      BPL -                                     ;;BEF7|BEF4+BEF4/BEF4\BEF4;
                      PLX                                       ;;BEF9|BEF6+BEF6/BEF6\BEF6;
                      LDA.B !_0                                 ;;BEFA|BEF7+BEF7/BEF7\BEF7;
                      PHA                                       ;;BEFC|BEF9+BEF9/BEF9\BEF9;
                      LDA.B !_1                                 ;;BEFD|BEFA+BEFA/BEFA\BEFA;
                      PHA                                       ;;BEFF|BEFC+BEFC/BEFC\BEFC;
                      LDY.B #$02                                ;;BF00|BEFD+BEFD/BEFD\BEFD;
                      LDA.B #$03                                ;;BF02|BEFF+BEFF/BEFF\BEFF;
                      JSR CallFinOAMWriteBank2                  ;;BF04|BF01+BF01/BF01\BF01;
                      PLA                                       ;;BF07|BF04+BF04/BF04\BF04;
                      STA.B !_1                                 ;;BF08|BF05+BF05/BF05\BF05;
                      PLA                                       ;;BF0A|BF07+BF07/BF07\BF07;
                      STA.B !_0                                 ;;BF0B|BF08+BF08/BF08\BF08;
                      LDA.B #$09                                ;;BF0D|BF0A+BF0A/BF0A\BF0A;
                      LDY.W !SpriteMisc1558,X                   ;;BF0F|BF0C+BF0C/BF0C\BF0C;
                      BEQ +                                     ;;BF12|BF0F+BF0F/BF0F\BF0F;
                      LDA.B #$19                                ;;BF14|BF11+BF11/BF11\BF11;
                    + STA.B !_2                                 ;;BF16|BF13+BF13/BF13\BF13;
                      LDA.W !SpriteOAMIndex,X                   ;;BF18|BF15+BF15/BF15\BF15;
                      SEC                                       ;;BF1B|BF18+BF18/BF18\BF18;
                      SBC.B #$04                                ;;BF1C|BF19+BF19/BF19\BF19;
                      STA.W !SpriteOAMIndex,X                   ;;BF1E|BF1B+BF1B/BF1B\BF1B;
                      TAY                                       ;;BF21|BF1E+BF1E/BF1E\BF1E;
                      PHX                                       ;;BF22|BF1F+BF1F/BF1F\BF1F;
                      LDA.B !SpriteTableC2,X                    ;;BF23|BF20+BF20/BF20\BF20;
                      TAX                                       ;;BF25|BF22+BF22/BF22\BF22;
                      LDA.B !_0                                 ;;BF26|BF23+BF23/BF23\BF23;
                      CLC                                       ;;BF28|BF25+BF25/BF25\BF25;
                      ADC.W DATA_02BEA5,X                       ;;BF29|BF26+BF26/BF26\BF26;
                      STA.W !OAMTileXPos+$100,Y                 ;;BF2C|BF29+BF29/BF29\BF29;
                      LDA.B !_1                                 ;;BF2F|BF2C+BF2C/BF2C\BF2C;
                      CLC                                       ;;BF31|BF2E+BF2E/BF2E\BF2E;
                      ADC.W DATA_02BEAD,X                       ;;BF32|BF2F+BF2F/BF2F\BF2F;
                      STA.W !OAMTileYPos+$100,Y                 ;;BF35|BF32+BF32/BF32\BF32;
                      LDA.B !_2                                 ;;BF38|BF35+BF35/BF35\BF35;
                      STA.W !OAMTileNo+$100,Y                   ;;BF3A|BF37+BF37/BF37\BF37;
                      LDA.B #$05                                ;;BF3D|BF3A+BF3A/BF3A\BF3A;
                      ORA.B !SpriteProperties                   ;;BF3F|BF3C+BF3C/BF3C\BF3C;
                      STA.W !OAMTileAttr+$100,Y                 ;;BF41|BF3E+BF3E/BF3E\BF3E;
                      PLX                                       ;;BF44|BF41+BF41/BF41\BF41;
                      LDY.B #$00                                ;;BF45|BF42+BF42/BF42\BF42;
                      LDA.B #$00                                ;;BF47|BF44+BF44/BF44\BF44;
                      JMP CallFinOAMWriteBank2                  ;;BF49|BF46+BF46/BF46\BF46;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02BF49:          db $08,$00,$10,$00,$10                    ;;BF4C|BF49+BF49/BF49\BF49;
                                                                ;;                        ;
DATA_02BF4E:          db $08,$00,$00,$10,$10                    ;;BF51|BF4E+BF4E/BF4E\BF4E;
                                                                ;;                        ;
DATA_02BF53:          db $37,$37,$77,$B7,$F7                    ;;BF56|BF53+BF53/BF53\BF53;
                                                                ;;                        ;
UrchinTiles:          db $C4,$C6,$C8,$C6                        ;;BF5B|BF58+BF58/BF58\BF58;
                                                                ;;                        ;
UrchinGfxRt:          LDA.W !SpriteMisc163E,X                   ;;BF5F|BF5C+BF5C/BF5C\BF5C; > 'Auto-decrement' table
                      BNE +                                     ;;BF62|BF5F+BF5F/BF5F\BF5F;
                      INC.W !SpriteMisc1528,X                   ;;BF64|BF61+BF61/BF61\BF61; > Update body animation frame index
                      LDA.B #$0C                                ;;BF67|BF64+BF64/BF64\BF64; \ Update body animation every 14th frame
                      STA.W !SpriteMisc163E,X                   ;;BF69|BF66+BF66/BF66\BF66; /
                    + LDA.W !SpriteMisc1528,X                   ;;BF6C|BF69+BF69/BF69\BF69;
                      AND.B #$03                                ;;BF6F|BF6C+BF6C/BF6C\BF6C;
                      TAY                                       ;;BF71|BF6E+BF6E/BF6E\BF6E;
                      LDA.W UrchinAniFrameIndex,Y               ;;BF72|BF6F+BF6F/BF6F\BF6F; \ Update the actual animaition frame used
                      STA.W !SpriteMisc1602,X                   ;;BF75|BF72+BF72/BF72\BF72; /
                      JSR GetDrawInfo2                          ;;BF78|BF75+BF75/BF75\BF75;
                      STZ.B !_5                                 ;;BF7B|BF78+BF78/BF78\BF78;
                      LDA.W !SpriteMisc1602,X                   ;;BF7D|BF7A+BF7A/BF7A\BF7A;
                      STA.B !_2                                 ;;BF80|BF7D+BF7D/BF7D\BF7D;
                      LDA.W !SpriteMisc1558,X                   ;;BF82|BF7F+BF7F/BF7F\BF7F;
                      STA.B !_3                                 ;;BF85|BF82+BF82/BF82\BF82;
CODE_02BF84:          LDX.B !_5                                 ;;BF87|BF84+BF84/BF84\BF84;
                      LDA.B !_0                                 ;;BF89|BF86+BF86/BF86\BF86;
                      CLC                                       ;;BF8B|BF88+BF88/BF88\BF88;
                      %LorW_X(ADC,DATA_02BF49)                  ;;BF8C|BF89+BF89/BF89\BF89;
                      STA.W !OAMTileXPos+$100,Y                 ;;BF90|BF8C+BF8C/BF8C\BF8C;
                      LDA.B !_1                                 ;;BF93|BF8F+BF8F/BF8F\BF8F;
                      CLC                                       ;;BF95|BF91+BF91/BF91\BF91;
                      %LorW_X(ADC,DATA_02BF4E)                  ;;BF96|BF92+BF92/BF92\BF92;
                      STA.W !OAMTileYPos+$100,Y                 ;;BF9A|BF95+BF95/BF95\BF95;
                      %LorW_X(LDA,DATA_02BF53)                  ;;BF9D|BF98+BF98/BF98\BF98;
                      STA.W !OAMTileAttr+$100,Y                 ;;BFA1|BF9B+BF9B/BF9B\BF9B;
                      CPX.B #$00                                ;;BFA4|BF9E+BF9E/BF9E\BF9E; \ Check if we're drawing
                      BNE CODE_02BFAC                           ;;BFA6|BFA0+BFA0/BFA0\BFA0; / the eye tile.
                      LDA.B #$CA                                ;;BFA8|BFA2+BFA2/BFA2\BFA2;
                      LDX.B !_3                                 ;;BFAA|BFA4+BFA4/BFA4\BFA4;
                      BEQ +                                     ;;BFAC|BFA6+BFA6/BFA6\BFA6;
                      LDA.B #$CC                                ;;BFAE|BFA8+BFA8/BFA8\BFA8;
                    + BRA +                                     ;;BFB0|BFAA+BFAA/BFAA\BFAA;
                                                                ;;                        ;
CODE_02BFAC:          LDX.B !_2                                 ;;BFB2|BFAC+BFAC/BFAC\BFAC;
                      %LorW_X(LDA,UrchinTiles)                  ;;BFB4|BFAE+BFAE/BFAE\BFAE;
                    + STA.W !OAMTileNo+$100,Y                   ;;BFB8|BFB1+BFB1/BFB1\BFB1;
                      INY                                       ;;BFBB|BFB4+BFB4/BFB4\BFB4;
                      INY                                       ;;BFBC|BFB5+BFB5/BFB5\BFB5;
                      INY                                       ;;BFBD|BFB6+BFB6/BFB6\BFB6;
                      INY                                       ;;BFBE|BFB7+BFB7/BFB7\BFB7;
                      INC.B !_5                                 ;;BFBF|BFB8+BFB8/BFB8\BFB8;
                      LDA.B !_5                                 ;;BFC1|BFBA+BFBA/BFBA\BFBA;
                      CMP.B #$05                                ;;BFC3|BFBC+BFBC/BFBC\BFBC;
                      BNE CODE_02BF84                           ;;BFC5|BFBE+BFBE/BFBE\BFBE;
                      LDX.W !CurSpriteProcess                   ;;BFC7|BFC0+BFC0/BFC0\BFC0; X = Sprite index
                      LDY.B #$02                                ;;BFCA|BFC3+BFC3/BFC3\BFC3;
                      JMP CODE_02C82B                           ;;BFCC|BFC5+BFC5/BFC5\BFC5; Chargin' Chuck's FinishOAMWrite call (draws 5 tiles)
                                                                ;;                        ;
                                                                ;;                        ;
RipVanFishMaxSpeed:   db $10,$F0                                ;;BFCF|BFC8+BFC8/BFC8\BFC8;
                                                                ;;                        ;
RipVanFishAccel:      db $01,$FF                                ;;BFD1|BFCA+BFCA/BFCA\BFCA;
                                                                ;;                        ;
                    - RTL                                       ;;BFD3|BFCC+BFCC/BFCC\BFCC; Return
                                                                ;;                        ;
RipVanFishMain:       JSL GenericSprGfxRt2                      ;;BFD4|BFCD+BFCD/BFCD\BFCD;
                      LDA.B !SpriteLock                         ;;BFD8|BFD1+BFD1/BFD1\BFD1;
                      BNE -                                     ;;BFDA|BFD3+BFD3/BFD3\BFD3;
                      JSR SubOffscreen0Bnk2                     ;;BFDC|BFD5+BFD5/BFD5\BFD5;
                      JSL SprSpr_MarioSprRts                    ;;BFDF|BFD8+BFD8/BFD8\BFD8;
                      LDA.B !SpriteXSpeed,X                     ;;BFE3|BFDC+BFDC/BFDC\BFDC;
                      PHA                                       ;;BFE5|BFDE+BFDE/BFDE\BFDE;
                      LDA.B !SpriteYSpeed,X                     ;;BFE6|BFDF+BFDF/BFDF\BFDF;
                      PHA                                       ;;BFE8|BFE1+BFE1/BFE1\BFE1;
                      LDY.W !InvinsibilityTimer                 ;;BFE9|BFE2+BFE2/BFE2\BFE2; \ Branch if Mario doesn't have star
                      BEQ +                                     ;;BFEC|BFE5+BFE5/BFE5\BFE5; /
                      EOR.B #$FF                                ;;BFEE|BFE7+BFE7/BFE7\BFE7;
                      INC A                                     ;;BFF0|BFE9+BFE9/BFE9\BFE9;
                      STA.B !SpriteYSpeed,X                     ;;BFF1|BFEA+BFEA/BFEA\BFEA;
                      LDA.B !SpriteXSpeed,X                     ;;BFF3|BFEC+BFEC/BFEC\BFEC;
                      EOR.B #$FF                                ;;BFF5|BFEE+BFEE/BFEE\BFEE;
                      INC A                                     ;;BFF7|BFF0+BFF0/BFF0\BFF0;
                      STA.B !SpriteXSpeed,X                     ;;BFF8|BFF1+BFF1/BFF1\BFF1;
                    + JSR CODE_02C126                           ;;BFFA|BFF3+BFF3/BFF3\BFF3;
                      JSR UpdateXPosNoGrvty                     ;;BFFD|BFF6+BFF6/BFF6\BFF6;
                      JSR UpdateYPosNoGrvty                     ;;C000|BFF9+BFF9/BFF9\BFF9;
                      JSL SprObjInteract                        ;;C003|BFFC+BFFC/BFFC\BFFC;
                      PLA                                       ;;C007|C000+C000/C000\C000;
                      STA.B !SpriteYSpeed,X                     ;;C008|C001+C001/C001\C001;
                      PLA                                       ;;C00A|C003+C003/C003\C003;
                      STA.B !SpriteXSpeed,X                     ;;C00B|C004+C004/C004\C004;
                      INC.W !SpriteMisc1570,X                   ;;C00D|C006+C006/C006\C006;
                      LDA.W !SpriteBlockedDirs,X                ;;C010|C009+C009/C009\C009; \ Branch if not touching object
                      AND.B #$03                                ;;C013|C00C+C00C/C00C\C00C;  |
                      BEQ +                                     ;;C015|C00E+C00E/C00E\C00E; /
                      STZ.B !SpriteXSpeed,X                     ;;C017|C010+C010/C010\C010; Sprite X Speed = 0
                    + LDA.W !SpriteBlockedDirs,X                ;;C019|C012+C012/C012\C012;
                      AND.B #$0C                                ;;C01C|C015+C015/C015\C015;
                      BEQ +                                     ;;C01E|C017+C017/C017\C017;
                      STZ.B !SpriteYSpeed,X                     ;;C020|C019+C019/C019\C019; Sprite Y Speed = 0
                    + LDA.W !SpriteInLiquid,X                   ;;C022|C01B+C01B/C01B\C01B;
                      BNE +                                     ;;C025|C01E+C01E/C01E\C01E;
                      LDA.B #$10                                ;;C027|C020+C020/C020\C020;
                      STA.B !SpriteYSpeed,X                     ;;C029|C022+C022/C022\C022;
                    + LDA.B !SpriteTableC2,X                    ;;C02B|C024+C024/C024\C024;
                      JSL ExecutePtr                            ;;C02D|C026+C026/C026\C026;
                                                                ;;                        ;
                      dw CODE_02C02E                            ;;C031|C02A+C02A/C02A\C02A;
                      dw CODE_02C08A                            ;;C033|C02C+C02C/C02C\C02C;
                                                                ;;                        ;
CODE_02C02E:          LDA.B #$02                                ;;C035|C02E+C02E/C02E\C02E;
                      STA.B !SpriteYSpeed,X                     ;;C037|C030+C030/C030\C030;
                      LDA.B !TrueFrame                          ;;C039|C032+C032/C032\C032;
                      AND.B #$03                                ;;C03B|C034+C034/C034\C034;
                      BNE CODE_02C044                           ;;C03D|C036+C036/C036\C036;
                      LDA.B !SpriteXSpeed,X                     ;;C03F|C038+C038/C038\C038;
                      BEQ CODE_02C044                           ;;C041|C03A+C03A/C03A\C03A;
                      BPL CODE_02C042                           ;;C043|C03C+C03C/C03C\C03C;
                      INC.B !SpriteXSpeed,X                     ;;C045|C03E+C03E/C03E\C03E;
                      BRA CODE_02C044                           ;;C047|C040+C040/C040\C040;
                                                                ;;                        ;
CODE_02C042:          DEC.B !SpriteXSpeed,X                     ;;C049|C042+C042/C042\C042;
CODE_02C044:          LDA.W !SpriteBlockedDirs,X                ;;C04B|C044+C044/C044\C044; \ Branch if not on ground
                      AND.B #$04                                ;;C04E|C047+C047/C047\C047;  |
                      BEQ +                                     ;;C050|C049+C049/C049\C049; /
                      STZ.B !SpriteYSpeed,X                     ;;C052|C04B+C04B/C04B\C04B; Sprite Y Speed = 0
                      LDA.B !SpriteYPosLow,X                    ;;C054|C04D+C04D/C04D\C04D;
                      AND.B #$F0                                ;;C056|C04F+C04F/C04F\C04F;
                      STA.B !SpriteYPosLow,X                    ;;C058|C051+C051/C051\C051;
                    + JSL CODE_02C0D9                           ;;C05A|C053+C053/C053\C053;
                      LDA.W !ChuckIsWhistling                   ;;C05E|C057+C057/C057\C057;
                      BNE CODE_02C072                           ;;C061|C05A+C05A/C05A\C05A;
                      JSR SubHorizPosBnk2                       ;;C063|C05C+C05C/C05C\C05C;
                      LDA.B !_F                                 ;;C066|C05F+C05F/C05F\C05F;
                      ADC.B #$30                                ;;C068|C061+C061/C061\C061;
                      CMP.B #$60                                ;;C06A|C063+C063/C063\C063;
                      BCS CODE_02C07B                           ;;C06C|C065+C065/C065\C065;
                      JSR SubVertPosBnk2                        ;;C06E|C067+C067/C067\C067;
                      LDA.B !_E                                 ;;C071|C06A+C06A/C06A\C06A;
                      ADC.B #$30                                ;;C073|C06C+C06C/C06C\C06C;
                      CMP.B #$60                                ;;C075|C06E+C06E/C06E\C06E;
                      BCS CODE_02C07B                           ;;C077|C070+C070/C070\C070;
CODE_02C072:          INC.B !SpriteTableC2,X                    ;;C079|C072+C072/C072\C072;
                      LDA.B #$FF                                ;;C07B|C074+C074/C074\C074;
                      STA.W !SpriteMisc151C,X                   ;;C07D|C076+C076/C076\C076;
                      BRA CODE_02C08A                           ;;C080|C079+C079/C079\C079;
                                                                ;;                        ;
CODE_02C07B:          LDY.B #$02                                ;;C082|C07B+C07B/C07B\C07B;
                      LDA.W !SpriteMisc1570,X                   ;;C084|C07D+C07D/C07D\C07D;
                      AND.B #$30                                ;;C087|C080+C080/C080\C080;
                      BNE +                                     ;;C089|C082+C082/C082\C082;
                      INY                                       ;;C08B|C084+C084/C084\C084;
                    + TYA                                       ;;C08C|C085+C085/C085\C085;
                      STA.W !SpriteMisc1602,X                   ;;C08D|C086+C086/C086\C086;
                      RTL                                       ;;C090|C089+C089/C089\C089; Return
                                                                ;;                        ;
CODE_02C08A:          LDA.B !TrueFrame                          ;;C091|C08A+C08A/C08A\C08A;
                      AND.B #$01                                ;;C093|C08C+C08C/C08C\C08C;
                      BNE CODE_02C095                           ;;C095|C08E+C08E/C08E\C08E;
                      DEC.W !SpriteMisc151C,X                   ;;C097|C090+C090/C090\C090;
                      BEQ CODE_02C0CA                           ;;C09A|C093+C093/C093\C093;
CODE_02C095:          LDA.B !TrueFrame                          ;;C09C|C095+C095/C095\C095;
                      AND.B #$07                                ;;C09E|C097+C097/C097\C097;
                      BNE CODE_02C0BB                           ;;C0A0|C099+C099/C099\C099;
                      JSR SubHorizPosBnk2                       ;;C0A2|C09B+C09B/C09B\C09B;
                      LDA.B !SpriteXSpeed,X                     ;;C0A5|C09E+C09E/C09E\C09E;
                      CMP.W RipVanFishMaxSpeed,Y                ;;C0A7|C0A0+C0A0/C0A0\C0A0;
                      BEQ +                                     ;;C0AA|C0A3+C0A3/C0A3\C0A3;
                      CLC                                       ;;C0AC|C0A5+C0A5/C0A5\C0A5;
                      ADC.W RipVanFishAccel,Y                   ;;C0AD|C0A6+C0A6/C0A6\C0A6;
                      STA.B !SpriteXSpeed,X                     ;;C0B0|C0A9+C0A9/C0A9\C0A9;
                    + JSR SubVertPosBnk2                        ;;C0B2|C0AB+C0AB/C0AB\C0AB;
                      LDA.B !SpriteYSpeed,X                     ;;C0B5|C0AE+C0AE/C0AE\C0AE;
                      CMP.W RipVanFishMaxSpeed,Y                ;;C0B7|C0B0+C0B0/C0B0\C0B0;
                      BEQ CODE_02C0BB                           ;;C0BA|C0B3+C0B3/C0B3\C0B3;
                      CLC                                       ;;C0BC|C0B5+C0B5/C0B5\C0B5;
                      ADC.W RipVanFishAccel,Y                   ;;C0BD|C0B6+C0B6/C0B6\C0B6;
                      STA.B !SpriteYSpeed,X                     ;;C0C0|C0B9+C0B9/C0B9\C0B9;
CODE_02C0BB:          LDY.B #$00                                ;;C0C2|C0BB+C0BB/C0BB\C0BB;
                      LDA.W !SpriteMisc1570,X                   ;;C0C4|C0BD+C0BD/C0BD\C0BD;
                      AND.B #$04                                ;;C0C7|C0C0+C0C0/C0C0\C0C0;
                      BEQ +                                     ;;C0C9|C0C2+C0C2/C0C2\C0C2;
                      INY                                       ;;C0CB|C0C4+C0C4/C0C4\C0C4;
                    + TYA                                       ;;C0CC|C0C5+C0C5/C0C5\C0C5;
                      STA.W !SpriteMisc1602,X                   ;;C0CD|C0C6+C0C6/C0C6\C0C6;
                      RTL                                       ;;C0D0|C0C9+C0C9/C0C9\C0C9; Return
                                                                ;;                        ;
CODE_02C0CA:          STZ.B !SpriteTableC2,X                    ;;C0D1|C0CA+C0CA/C0CA\C0CA;
                      JMP CODE_02C02E                           ;;C0D3|C0CC+C0CC/C0CC\C0CC;
                                                                ;;                        ;
ADDR_02C0CF:          LDA.B #$08                                ;;C0D6|C0CF+C0CF/C0CF\C0CF; \ Unreachable
                      LDY.W !SpriteMisc157C,X                   ;;C0D8|C0D1+C0D1/C0D1\C0D1;  | A = #$08 or #$09 depending on sprite direction
                      BEQ +                                     ;;C0DB|C0D4+C0D4/C0D4\C0D4;  |
                      INC A                                     ;;C0DD|C0D6+C0D6/C0D6\C0D6; /
                    + BRA +                                     ;;C0DE|C0D7+C0D7/C0D7\C0D7;
                                                                ;;                        ;
CODE_02C0D9:          LDA.B #$06                                ;;C0E0|C0D9+C0D9/C0D9\C0D9;
                    + TAY                                       ;;C0E2|C0DB+C0DB/C0DB\C0DB;
                      LDA.W !SpriteOffscreenX,X                 ;;C0E3|C0DC+C0DC/C0DC\C0DC; \ Return if sprite is offscreen
                      ORA.W !SpriteOffscreenVert,X              ;;C0E6|C0DF+C0DF/C0DF\C0DF;  |
                      BNE Return02C125                          ;;C0E9|C0E2+C0E2/C0E2\C0E2; /
                      TYA                                       ;;C0EB|C0E4+C0E4/C0E4\C0E4;
                      DEC.W !SpriteMisc1528,X                   ;;C0EC|C0E5+C0E5/C0E5\C0E5;
                      BPL Return02C125                          ;;C0EF|C0E8+C0E8/C0E8\C0E8;
                      PHA                                       ;;C0F1|C0EA+C0EA/C0EA\C0EA;
                      LDA.B #$28                                ;;C0F2|C0EB+C0EB/C0EB\C0EB;
                      STA.W !SpriteMisc1528,X                   ;;C0F4|C0ED+C0ED/C0ED\C0ED;
                      LDY.B #$0B                                ;;C0F7|C0F0+C0F0/C0F0\C0F0;
CODE_02C0F2:          LDA.W !MinExtSpriteNumber,Y               ;;C0F9|C0F2+C0F2/C0F2\C0F2;
                      BEQ CODE_02C107                           ;;C0FC|C0F5+C0F5/C0F5\C0F5;
                      DEY                                       ;;C0FE|C0F7+C0F7/C0F7\C0F7;
                      BPL CODE_02C0F2                           ;;C0FF|C0F8+C0F8/C0F8\C0F8;
                      DEC.W !MinExtSpriteSlotIdx                ;;C101|C0FA+C0FA/C0FA\C0FA;
                      BPL +                                     ;;C104|C0FD+C0FD/C0FD\C0FD;
                      LDA.B #$0B                                ;;C106|C0FF+C0FF/C0FF\C0FF;
                      STA.W !MinExtSpriteSlotIdx                ;;C108|C101+C101/C101\C101;
                    + LDY.W !MinExtSpriteSlotIdx                ;;C10B|C104+C104/C104\C104;
CODE_02C107:          PLA                                       ;;C10E|C107+C107/C107\C107;
                      STA.W !MinExtSpriteNumber,Y               ;;C10F|C108+C108/C108\C108;
                      LDA.B !SpriteXPosLow,X                    ;;C112|C10B+C10B/C10B\C10B;
                      CLC                                       ;;C114|C10D+C10D/C10D\C10D;
                      ADC.B #$06                                ;;C115|C10E+C10E/C10E\C10E;
                      STA.W !MinExtSpriteXPosLow,Y              ;;C117|C110+C110/C110\C110;
                      LDA.B !SpriteYPosLow,X                    ;;C11A|C113+C113/C113\C113;
                      CLC                                       ;;C11C|C115+C115/C115\C115;
                      ADC.B #$00                                ;;C11D|C116+C116/C116\C116;
                      STA.W !MinExtSpriteYPosLow,Y              ;;C11F|C118+C118/C118\C118;
                      LDA.B #$7F                                ;;C122|C11B+C11B/C11B\C11B;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;C124|C11D+C11D/C11D\C11D;
                      LDA.B #$FA                                ;;C127|C120+C120/C120\C120;
                      STA.W !MinExtSpriteXSpeed,Y               ;;C129|C122+C122/C122\C122;
Return02C125:         RTL                                       ;;C12C|C125+C125/C125\C125; Return
                                                                ;;                        ;
CODE_02C126:          LDY.B #$00                                ;;C12D|C126+C126/C126\C126;
                      LDA.B !SpriteXSpeed,X                     ;;C12F|C128+C128/C128\C128;
                      BPL +                                     ;;C131|C12A+C12A/C12A\C12A;
                      INY                                       ;;C133|C12C+C12C/C12C\C12C;
                    + TYA                                       ;;C134|C12D+C12D/C12D\C12D;
                      STA.W !SpriteMisc157C,X                   ;;C135|C12E+C12E/C12E\C12E;
                      RTS                                       ;;C138|C131+C131/C131\C131; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C132:          db $30,$20,$0A,$30                        ;;C139|C132+C132/C132\C132;
                                                                ;;                        ;
DATA_02C136:          db $05,$0E,$0F,$10                        ;;C13D|C136+C136/C136\C136;
                                                                ;;                        ;
ChuckDiggin:          LDA.W !SpriteMisc1558,X                   ;;C141|C13A+C13A/C13A\C13A;
                      BEQ CODE_02C156                           ;;C144|C13D+C13D/C13D\C13D;
                      CMP.B #$01                                ;;C146|C13F+C13F/C13F\C13F;
                      BNE +                                     ;;C148|C141+C141/C141\C141;
                      LDA.B #$30                                ;;C14A|C143+C143/C143\C143;
                      STA.W !SpriteMisc1540,X                   ;;C14C|C145+C145/C145\C145;
                      LDA.B #$04                                ;;C14F|C148+C148/C148\C148;
                      STA.W !SpriteMisc1534,X                   ;;C151|C14A+C14A/C14A\C14A;
                      STZ.W !SpriteMisc1570,X                   ;;C154|C14D+C14D/C14D\C14D;
                    + LDA.B #$02                                ;;C157|C150+C150/C150\C150;
                      STA.W !SpriteMisc151C,X                   ;;C159|C152+C152/C152\C152;
                      RTS                                       ;;C15C|C155+C155/C155\C155; Return
                                                                ;;                        ;
CODE_02C156:          LDA.W !SpriteMisc1540,X                   ;;C15D|C156+C156/C156\C156;
                      BNE CODE_02C181                           ;;C160|C159+C159/C159\C159;
                      INC.W !SpriteMisc1534,X                   ;;C162|C15B+C15B/C15B\C15B;
                      LDA.W !SpriteMisc1534,X                   ;;C165|C15E+C15E/C15E\C15E;
                      AND.B #$03                                ;;C168|C161+C161/C161\C161;
                      STA.W !SpriteMisc1570,X                   ;;C16A|C163+C163/C163\C163;
                      TAY                                       ;;C16D|C166+C166/C166\C166;
                      LDA.W DATA_02C132,Y                       ;;C16E|C167+C167/C167\C167;
                      STA.W !SpriteMisc1540,X                   ;;C171|C16A+C16A/C16A\C16A;
                      CPY.B #$01                                ;;C174|C16D+C16D/C16D\C16D;
                      BNE CODE_02C181                           ;;C176|C16F+C16F/C16F\C16F;
                      LDA.W !SpriteMisc1534,X                   ;;C178|C171+C171/C171\C171;
                      AND.B #$0C                                ;;C17B|C174+C174/C174\C174;
                      BNE +                                     ;;C17D|C176+C176/C176\C176;
                      LDA.B #$40                                ;;C17F|C178+C178/C178\C178;
                      STA.W !SpriteMisc1558,X                   ;;C181|C17A+C17A/C17A\C17A;
                      RTS                                       ;;C184|C17D+C17D/C17D\C17D; Return
                                                                ;;                        ;
                    + JSR CODE_02C19A                           ;;C185|C17E+C17E/C17E\C17E;
CODE_02C181:          LDY.W !SpriteMisc1570,X                   ;;C188|C181+C181/C181\C181;
                      LDA.W DATA_02C136,Y                       ;;C18B|C184+C184/C184\C184;
                      STA.W !SpriteMisc1602,X                   ;;C18E|C187+C187/C187\C187;
                      LDY.W !SpriteMisc157C,X                   ;;C191|C18A+C18A/C18A\C18A;
                      LDA.W DATA_02C1F3,Y                       ;;C194|C18D+C18D/C18D\C18D;
                      STA.W !SpriteMisc151C,X                   ;;C197|C190+C190/C190\C190;
                      RTS                                       ;;C19A|C193+C193/C193\C193; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C194:          db $14,$EC                                ;;C19B|C194+C194/C194\C194;
                                                                ;;                        ;
DATA_02C196:          db $00,$FF                                ;;C19D|C196+C196/C196\C196;
                                                                ;;                        ;
DATA_02C198:          db $08,$F8                                ;;C19F|C198+C198/C198\C198;
                                                                ;;                        ;
CODE_02C19A:          JSL FindFreeSprSlot                       ;;C1A1|C19A+C19A/C19A\C19A; \ Return if no free slots
                      BMI +                                     ;;C1A5|C19E+C19E/C19E\C19E; /
                      LDA.B #$08                                ;;C1A7|C1A0+C1A0/C1A0\C1A0; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;C1A9|C1A2+C1A2/C1A2\C1A2; /
                      LDA.B #$48                                ;;C1AC|C1A5+C1A5/C1A5\C1A5;
                      STA.W !SpriteNumber,Y                     ;;C1AE|C1A7+C1A7/C1A7\C1A7;
                      LDA.W !SpriteMisc157C,X                   ;;C1B1|C1AA+C1AA/C1AA\C1AA;
                      STA.B !_2                                 ;;C1B4|C1AD+C1AD/C1AD\C1AD;
                      LDA.B !SpriteXPosLow,X                    ;;C1B6|C1AF+C1AF/C1AF\C1AF;
                      STA.B !_0                                 ;;C1B8|C1B1+C1B1/C1B1\C1B1;
                      LDA.W !SpriteXPosHigh,X                   ;;C1BA|C1B3+C1B3/C1B3\C1B3;
                      STA.B !_1                                 ;;C1BD|C1B6+C1B6/C1B6\C1B6;
                      PHX                                       ;;C1BF|C1B8+C1B8/C1B8\C1B8;
                      TYX                                       ;;C1C0|C1B9+C1B9/C1B9\C1B9;
                      JSL InitSpriteTables                      ;;C1C1|C1BA+C1BA/C1BA\C1BA;
                      LDX.B !_2                                 ;;C1C5|C1BE+C1BE/C1BE\C1BE;
                      LDA.B !_0                                 ;;C1C7|C1C0+C1C0/C1C0\C1C0;
                      CLC                                       ;;C1C9|C1C2+C1C2/C1C2\C1C2;
                      ADC.W DATA_02C194,X                       ;;C1CA|C1C3+C1C3/C1C3\C1C3;
                      STA.W !SpriteXPosLow,Y                    ;;C1CD|C1C6+C1C6/C1C6\C1C6;
                      LDA.B !_1                                 ;;C1D0|C1C9+C1C9/C1C9\C1C9;
                      ADC.W DATA_02C196,X                       ;;C1D2|C1CB+C1CB/C1CB\C1CB;
                      STA.W !SpriteXPosHigh,Y                   ;;C1D5|C1CE+C1CE/C1CE\C1CE;
                      LDA.W DATA_02C198,X                       ;;C1D8|C1D1+C1D1/C1D1\C1D1;
                      STA.W !SpriteXSpeed,Y                     ;;C1DB|C1D4+C1D4/C1D4\C1D4;
                      PLX                                       ;;C1DE|C1D7+C1D7/C1D7\C1D7;
                      LDA.B !SpriteYPosLow,X                    ;;C1DF|C1D8+C1D8/C1D8\C1D8;
                      CLC                                       ;;C1E1|C1DA+C1DA/C1DA\C1DA;
                      ADC.B #$0A                                ;;C1E2|C1DB+C1DB/C1DB\C1DB;
                      STA.W !SpriteYPosLow,Y                    ;;C1E4|C1DD+C1DD/C1DD\C1DD;
                      LDA.W !SpriteYPosHigh,X                   ;;C1E7|C1E0+C1E0/C1E0\C1E0;
                      ADC.B #$00                                ;;C1EA|C1E3+C1E3/C1E3\C1E3;
                      STA.W !SpriteYPosHigh,Y                   ;;C1EC|C1E5+C1E5/C1E5\C1E5;
                      LDA.B #$C0                                ;;C1EF|C1E8+C1E8/C1E8\C1E8;
                      STA.W !SpriteYSpeed,Y                     ;;C1F1|C1EA+C1EA/C1EA\C1EA;
                      LDA.B #$2C                                ;;C1F4|C1ED+C1ED/C1ED\C1ED;
                      STA.W !SpriteMisc1540,Y                   ;;C1F6|C1EF+C1EF/C1EF\C1EF;
                    + RTS                                       ;;C1F9|C1F2+C1F2/C1F2\C1F2; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C1F3:          db $01,$03                                ;;C1FA|C1F3+C1F3/C1F3\C1F3;
                                                                ;;                        ;
ChucksMain:           PHB                                       ;;C1FC|C1F5+C1F5/C1F5\C1F5;
                      PHK                                       ;;C1FD|C1F6+C1F6/C1F6\C1F6;
                      PLB                                       ;;C1FE|C1F7+C1F7/C1F7\C1F7;
                      LDA.W !SpriteMisc187B,X                   ;;C1FF|C1F8+C1F8/C1F8\C1F8;
                      PHA                                       ;;C202|C1FB+C1FB/C1FB\C1FB;
                      JSR ChucksMainRt                          ;;C203|C1FC+C1FC/C1FC\C1FC;
                      PLA                                       ;;C206|C1FF+C1FF/C1FF\C1FF;
                      BNE +                                     ;;C207|C200+C200/C200\C200;
                      CMP.W !SpriteMisc187B,X                   ;;C209|C202+C202/C202\C202;
                      BEQ +                                     ;;C20C|C205+C205/C205\C205;
                      LDA.W !SpriteMisc163E,X                   ;;C20E|C207+C207/C207\C207;
                      BNE +                                     ;;C211|C20A+C20A/C20A\C20A;
                      LDA.B #$28                                ;;C213|C20C+C20C/C20C\C20C;
                      STA.W !SpriteMisc163E,X                   ;;C215|C20E+C20E/C20E\C20E;
                    + PLB                                       ;;C218|C211+C211/C211\C211;
                      RTL                                       ;;C219|C212+C212/C212\C212; Return
                                                                ;;                        ;
                                                                ;;                        ;
ChuckDeadHeadFrame:   db $01,$02,$03,$02                        ;;C21A|C213+C213/C213\C213; 'slightly right', 'towards screen', 'slightly left', 'towards screen'
                                                                ;;                        ;
ChuckDead:            LDA.B !EffFrame                           ;;C21E|C217+C217/C217\C217; \ the 'head shake' death animation
                      LSR A                                     ;;C220|C219+C219/C219\C219; |
                      LSR A                                     ;;C221|C21A+C21A/C21A\C21A; |
                      AND.B #$03                                ;;C222|C21B+C21B/C21B\C21B; | Update once every 4 frames
                      TAY                                       ;;C224|C21D+C21D/C21D\C21D; |
                      LDA.W ChuckDeadHeadFrame,Y                ;;C225|C21E+C21E/C21E\C21E; /
                      STA.W !SpriteMisc151C,X                   ;;C228|C221+C221/C221\C221; > Head animation frame
                      JSR ChuckGraphics                         ;;C22B|C224+C224/C224\C224;
                      RTS                                       ;;C22E|C227+C227/C227\C227; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C228:          db $40,$10                                ;;C22F|C228+C228/C228\C228;
                                                                ;;                        ;
DATA_02C22A:          db $03,$01                                ;;C231|C22A+C22A/C22A\C22A;
                                                                ;;                        ;
ChucksMainRt:         LDA.W !SpriteStatus,X                     ;;C233|C22C+C22C/C22C\C22C; \ If sprite status not #$08
                      CMP.B #$08                                ;;C236|C22F+C22F/C22F\C22F; | Do the 'head shake falling
                      BNE ChuckDead                             ;;C238|C231+C231/C231\C231; / off screen' animation
                      LDA.W !SpriteMisc15AC,X                   ;;C23A|C233+C233/C233\C233;
                      BEQ +                                     ;;C23D|C236+C236/C236\C236;
                      LDA.B #$05                                ;;C23F|C238+C238/C238\C238;
                      STA.W !SpriteMisc1602,X                   ;;C241|C23A+C23A/C23A\C23A;
                    + LDA.W !SpriteBlockedDirs,X                ;;C244|C23D+C23D/C23D\C23D; \ Branch if on ground
                      AND.B #$04                                ;;C247|C240+C240/C240\C240;  |
                      BNE +                                     ;;C249|C242+C242/C242\C242; /
                      LDA.B !SpriteYSpeed,X                     ;;C24B|C244+C244/C244\C244;
                      BPL +                                     ;;C24D|C246+C246/C246\C246;
                      LDA.B !SpriteTableC2,X                    ;;C24F|C248+C248/C248\C248;
                      CMP.B #$05                                ;;C251|C24A+C24A/C24A\C24A;
                      BCS +                                     ;;C253|C24C+C24C/C24C\C24C;
                      LDA.B #$06                                ;;C255|C24E+C24E/C24E\C24E;
                      STA.W !SpriteMisc1602,X                   ;;C257|C250+C250/C250\C250;
                    + JSR ChuckGraphics                         ;;C25A|C253+C253/C253\C253;
                      LDA.B !SpriteLock                         ;;C25D|C256+C256/C256\C256;
                      BEQ +                                     ;;C25F|C258+C258/C258\C258;
                      RTS                                       ;;C261|C25A+C25A/C25A\C25A; Return
                                                                ;;                        ;
                    + JSR SubOffscreen0Bnk2                     ;;C262|C25B+C25B/C25B\C25B;
                      JSR ChuckInteract                         ;;C265|C25E+C25E/C25E\C25E;
                      JSL SprSprInteract                        ;;C268|C261+C261/C261\C261;
                      JSL SprObjInteract                        ;;C26C|C265+C265/C265\C265;
                      LDA.W !SpriteBlockedDirs,X                ;;C270|C269+C269/C269\C269;
                      AND.B #$08                                ;;C273|C26C+C26C/C26C\C26C;
                      BEQ +                                     ;;C275|C26E+C26E/C26E\C26E;
                      LDA.B #$10                                ;;C277|C270+C270/C270\C270;
                      STA.B !SpriteYSpeed,X                     ;;C279|C272+C272/C272\C272;
                    + LDA.W !SpriteBlockedDirs,X                ;;C27B|C274+C274/C274\C274; \ Branch if not touching object
                      AND.B #$03                                ;;C27E|C277+C277/C277\C277;  |
                      BEQ CODE_02C2F4                           ;;C280|C279+C279/C279\C279; /
                      LDA.W !SpriteOffscreenX,X                 ;;C282|C27B+C27B/C27B\C27B;
                      ORA.W !SpriteOffscreenVert,X              ;;C285|C27E+C27E/C27E\C27E;
                      BNE ChuckJumpIfOnGrnd                     ;;C288|C281+C281/C281\C281;
                      LDA.W !SpriteMisc187B,X                   ;;C28A|C283+C283/C283\C283;
                      BEQ ChuckJumpIfOnGrnd                     ;;C28D|C286+C286/C286\C286;
                      LDA.B !SpriteXPosLow,X                    ;;C28F|C288+C288/C288\C288;
                      SEC                                       ;;C291|C28A+C28A/C28A\C28A;
                      SBC.B !Layer1XPos                         ;;C292|C28B+C28B/C28B\C28B;
                      CLC                                       ;;C294|C28D+C28D/C28D\C28D;
                      ADC.B #$14                                ;;C295|C28E+C28E/C28E\C28E;
                      CMP.B #$1C                                ;;C297|C290+C290/C290\C290;
                      BCC ChuckJumpIfOnGrnd                     ;;C299|C292+C292/C292\C292;
                      LDA.W !SpriteBlockedDirs,X                ;;C29B|C294+C294/C294\C294; \ Branch if touching layer 2
                      AND.B #$40                                ;;C29E|C297+C297/C297\C297; | from the side
                      BNE ChuckJumpIfOnGrnd                     ;;C2A0|C299+C299/C299\C299; /
                      LDA.W !Map16TileDestroy                   ;;C2A2|C29B+C29B/C29B\C29B;
                      CMP.B #$2E                                ;;C2A5|C29E+C29E/C29E\C29E; Throw block tile number low byte
                      BEQ CODE_02C2A6                           ;;C2A7|C2A0+C2A0/C2A0\C2A0;
                      CMP.B #$1E                                ;;C2A9|C2A2+C2A2/C2A2\C2A2; Turn block tile number low byte
                      BNE ChuckJumpIfOnGrnd                     ;;C2AB|C2A4+C2A4/C2A4\C2A4;
CODE_02C2A6:          LDA.W !SpriteBlockedDirs,X                ;;C2AD|C2A6+C2A6/C2A6\C2A6; \ Branch if not on ground
                      AND.B #$04                                ;;C2B0|C2A9+C2A9/C2A9\C2A9;  |
                      BEQ CODE_02C2F7                           ;;C2B2|C2AB+C2AB/C2AB\C2AB; /
                      LDA.B !TouchBlockXPos+1                   ;;C2B4|C2AD+C2AD/C2AD\C2AD; \ Preserve block touch points
                      PHA                                       ;;C2B6|C2AF+C2AF/C2AF\C2AF; |
                      LDA.B !TouchBlockXPos                     ;;C2B7|C2B0+C2B0/C2B0\C2B0; |
                      PHA                                       ;;C2B9|C2B2+C2B2/C2B2\C2B2; |
                      LDA.B !TouchBlockYPos+1                   ;;C2BA|C2B3+C2B3/C2B3\C2B3; |
                      PHA                                       ;;C2BC|C2B5+C2B5/C2B5\C2B5; |
                      LDA.B !TouchBlockYPos                     ;;C2BD|C2B6+C2B6/C2B6\C2B6; |
                      PHA                                       ;;C2BF|C2B8+C2B8/C2B8\C2B8; /
                      JSL ShatterBlock                          ;;C2C0|C2B9+C2B9/C2B9\C2B9; Spawn the 'broken brick piece' minor extended sprites, with SFX
                      LDA.B #$02                                ;;C2C4|C2BD+C2BD/C2BD\C2BD; \ Generate an empty tile (Tile $25)
                      STA.B !Map16TileGenerate                  ;;C2C6|C2BF+C2BF/C2BF\C2BF; /
                      JSL GenerateTile                          ;;C2C8|C2C1+C2C1/C2C1\C2C1; \ The chuck's object clipping interacts,
                      PLA                                       ;;C2CC|C2C5+C2C5/C2C5\C2C5; | essentially, with the 'bottom' tile of
                      SEC                                       ;;C2CD|C2C6+C2C6/C2C6\C2C6; | a 32x16 column of blocks.
                      SBC.B #$10                                ;;C2CE|C2C7+C2C7/C2C7\C2C7; | As a result, this code
                      STA.B !TouchBlockYPos                     ;;C2D0|C2C9+C2C9/C2C9\C2C9; | Indiscriminately destroys the tile
                      PLA                                       ;;C2D2|C2CB+C2CB/C2CB\C2CB; | above the one the chuck interacted with,
                      SBC.B #$00                                ;;C2D3|C2CC+C2CC/C2CC\C2CC; | no matter what it is.
                      STA.B !TouchBlockYPos+1                   ;;C2D5|C2CE+C2CE/C2CE\C2CE; |
                      PLA                                       ;;C2D7|C2D0+C2D0/C2D0\C2D0; | In the original game, this is never a problem
                      STA.B !TouchBlockXPos                     ;;C2D8|C2D1+C2D1/C2D1\C2D1; | due to how the levels are set up, however.
                      PLA                                       ;;C2DA|C2D3+C2D3/C2D3\C2D3; |
                      STA.B !TouchBlockXPos+1                   ;;C2DB|C2D4+C2D4/C2D4\C2D4; /
                      JSL ShatterBlock                          ;;C2DD|C2D6+C2D6/C2D6\C2D6; Spawn the 'broken brick piece' minor extended sprites, with SFX
                      LDA.B #$02                                ;;C2E1|C2DA+C2DA/C2DA\C2DA; \ Generate an empty tile (Tile $25)
                      STA.B !Map16TileGenerate                  ;;C2E3|C2DC+C2DC/C2DC\C2DC; /
                      JSL GenerateTile                          ;;C2E5|C2DE+C2DE/C2DE\C2DE;
                      BRA CODE_02C2F4                           ;;C2E9|C2E2+C2E2/C2E2\C2E2;
                                                                ;;                        ;
ChuckJumpIfOnGrnd:    LDA.W !SpriteBlockedDirs,X                ;;C2EB|C2E4+C2E4/C2E4\C2E4; \ Branch if not on ground
                      AND.B #$04                                ;;C2EE|C2E7+C2E7/C2E7\C2E7;  |
                      BEQ CODE_02C2F7                           ;;C2F0|C2E9+C2E9/C2E9\C2E9; /
                      LDA.B #$C0                                ;;C2F2|C2EB+C2EB/C2EB\C2EB;
                      STA.B !SpriteYSpeed,X                     ;;C2F4|C2ED+C2ED/C2ED\C2ED;
                      JSR UpdateYPosNoGrvty                     ;;C2F6|C2EF+C2EF/C2EF\C2EF;
                      BRA +                                     ;;C2F9|C2F2+C2F2/C2F2\C2F2;
                                                                ;;                        ;
CODE_02C2F4:          JSR UpdateXPosNoGrvty                     ;;C2FB|C2F4+C2F4/C2F4\C2F4;
CODE_02C2F7:          LDA.W !SpriteBlockedDirs,X                ;;C2FE|C2F7+C2F7/C2F7\C2F7; \ Branch if not on ground
                      AND.B #$04                                ;;C301|C2FA+C2FA/C2FA\C2FA;  |
                      BEQ +                                     ;;C303|C2FC+C2FC/C2FC\C2FC; /
                      JSR CODE_02C579                           ;;C305|C2FE+C2FE/C2FE\C2FE;
                    + JSR UpdateYPosNoGrvty                     ;;C308|C301+C301/C301\C301;
                      LDY.W !SpriteInLiquid,X                   ;;C30B|C304+C304/C304\C304;
                      CPY.B #$01                                ;;C30E|C307+C307/C307\C307;
                      LDY.B #$00                                ;;C310|C309+C309/C309\C309;
                      LDA.B !SpriteYSpeed,X                     ;;C312|C30B+C30B/C30B\C30B;
                      BCC +                                     ;;C314|C30D+C30D/C30D\C30D;
                      INY                                       ;;C316|C30F+C30F/C30F\C30F;
                      CMP.B #$00                                ;;C317|C310+C310/C310\C310;
                      BPL +                                     ;;C319|C312+C312/C312\C312;
                      CMP.B #$E0                                ;;C31B|C314+C314/C314\C314;
                      BCS +                                     ;;C31D|C316+C316/C316\C316;
                      LDA.B #$E0                                ;;C31F|C318+C318/C318\C318;
                    + CLC                                       ;;C321|C31A+C31A/C31A\C31A;
                      ADC.W DATA_02C22A,Y                       ;;C322|C31B+C31B/C31B\C31B;
                      BMI +                                     ;;C325|C31E+C31E/C31E\C31E;
                      CMP.W DATA_02C228,Y                       ;;C327|C320+C320/C320\C320;
                      BCC +                                     ;;C32A|C323+C323/C323\C323;
                      LDA.W DATA_02C228,Y                       ;;C32C|C325+C325/C325\C325;
                    + TAY                                       ;;C32F|C328+C328/C328\C328;
                      BMI +                                     ;;C330|C329+C329/C329\C329;
                      LDY.B !SpriteTableC2,X                    ;;C332|C32B+C32B/C32B\C32B;
                      CPY.B #$07                                ;;C334|C32D+C32D/C32D\C32D;
                      BNE +                                     ;;C336|C32F+C32F/C32F\C32F;
                      CLC                                       ;;C338|C331+C331/C331\C331;
                      ADC.B #$03                                ;;C339|C332+C332/C332\C332;
                    + STA.B !SpriteYSpeed,X                     ;;C33B|C334+C334/C334\C334;
                      LDA.B !SpriteTableC2,X                    ;;C33D|C336+C336/C336\C336;
                      JSL ExecutePtr                            ;;C33F|C338+C338/C338\C338; Chargin' Chuck phase pointers
                                                                ;;                        ;
                      dw ChuckLookSideToSide                    ;;C343|C33C+C33C/C33C\C33C;
                      dw ChuckChargin                           ;;C345|C33E+C33E/C33E\C33E;
                      dw ChuckPrepareCharge                     ;;C347|C340+C340/C340\C340;
                      dw ChuckHurt                              ;;C349|C342+C342/C342\C342;
                      dw ChuckDiggin                            ;;C34B|C344+C344/C344\C344;
                      dw ChuckPrepareJump                       ;;C34D|C346+C346/C346\C346;
                      dw ChuckJump                              ;;C34F|C348+C348/C348\C348;
                      dw ChuckLand                              ;;C351|C34A+C34A/C34A\C34A;
                      dw ChuckClappin                           ;;C353|C34C+C34C/C34C\C34C;
                      dw ChuckPuntin                            ;;C355|C34E+C34E/C34E\C34E;
                      dw ChuckPitchin                           ;;C357|C350+C350/C350\C350;
                      dw ChuckPrepareWhistle                    ;;C359|C352+C352/C352\C352;
                      dw ChuckWhistlin                          ;;C35B|C354+C354/C354\C354;
                                                                ;;                        ;
ChuckPrepareWhistle:  LDA.B #$03                                ;;C35D|C356+C356/C356\C356;
                      STA.W !SpriteMisc1602,X                   ;;C35F|C358+C358/C358\C358;
                      LDA.W !SpriteInLiquid,X                   ;;C362|C35B+C35B/C35B\C35B;
                      BEQ +                                     ;;C365|C35E+C35E/C35E\C35E;
                      JSR SubHorizPosBnk2                       ;;C367|C360+C360/C360\C360;
                      LDA.B !_F                                 ;;C36A|C363+C363/C363\C363;
                      CLC                                       ;;C36C|C365+C365/C365\C365;
                      ADC.B #$30                                ;;C36D|C366+C366/C366\C366;
                      CMP.B #$60                                ;;C36F|C368+C368/C368\C368;
                      BCS +                                     ;;C371|C36A+C36A/C36A\C36A;
                      LDA.B #$0C                                ;;C373|C36C+C36C/C36C\C36C;
                      STA.B !SpriteTableC2,X                    ;;C375|C36E+C36E/C36E\C36E;
                    + JMP CODE_02C556                           ;;C377|C370+C370/C370\C370;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C373:          db $05,$05,$05,$02,$02,$06,$06,$06        ;;C37A|C373+C373/C373\C373;
                                                                ;;                        ;
ChuckWhistlin:        LDA.B !EffFrame                           ;;C382|C37B+C37B/C37B\C37B;
                      AND.B #$3F                                ;;C384|C37D+C37D/C37D\C37D;
                      BNE +                                     ;;C386|C37F+C37F/C37F\C37F;
                      LDA.B #!SFX_WHISTLE                       ;;C388|C381+C381/C381\C381; \ Play sound effect
                      STA.W !SPCIO3                             ;;C38A|C383+C383/C383\C383; /
                    + LDY.B #$03                                ;;C38D|C386+C386/C386\C386;
                      LDA.B !EffFrame                           ;;C38F|C388+C388/C388\C388;
                      AND.B #$30                                ;;C391|C38A+C38A/C38A\C38A;
                      BEQ +                                     ;;C393|C38C+C38C/C38C\C38C;
                      LDY.B #$06                                ;;C395|C38E+C38E/C38E\C38E;
                    + TYA                                       ;;C397|C390+C390/C390\C390;
                      STA.W !SpriteMisc1602,X                   ;;C398|C391+C391/C391\C391;
                      LDA.B !EffFrame                           ;;C39B|C394+C394/C394\C394;
                      LSR A                                     ;;C39D|C396+C396/C396\C396;
                      LSR A                                     ;;C39E|C397+C397/C397\C397;
                      AND.B #$07                                ;;C39F|C398+C398/C398\C398;
                      TAY                                       ;;C3A1|C39A+C39A/C39A\C39A;
                      LDA.W DATA_02C373,Y                       ;;C3A2|C39B+C39B/C39B\C39B;
                      STA.W !SpriteMisc151C,X                   ;;C3A5|C39E+C39E/C39E\C39E;
                      LDA.B !SpriteXPosLow,X                    ;;C3A8|C3A1+C3A1/C3A1\C3A1;
                      LSR A                                     ;;C3AA|C3A3+C3A3/C3A3\C3A3;
                      LSR A                                     ;;C3AB|C3A4+C3A4/C3A4\C3A4;
                      LSR A                                     ;;C3AC|C3A5+C3A5/C3A5\C3A5;
                      LSR A                                     ;;C3AD|C3A6+C3A6/C3A6\C3A6;
                      LSR A                                     ;;C3AE|C3A7+C3A7/C3A7\C3A7;
                      LDA.B #$09                                ;;C3AF|C3A8+C3A8/C3A8\C3A8;
                      BCC +                                     ;;C3B1|C3AA+C3AA/C3AA\C3AA;
                      STA.W !CurrentGenerator                   ;;C3B3|C3AC+C3AC/C3AC\C3AC;
                    + STA.W !ChuckIsWhistling                   ;;C3B6|C3AF+C3AF/C3AF\C3AF;
                      RTS                                       ;;C3B9|C3B2+C3B2/C3B2\C3B2; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C3B3:          db $7F,$BF,$FF,$DF                        ;;C3BA|C3B3+C3B3/C3B3\C3B3;
                                                                ;;                        ;
DATA_02C3B7:          db $18,$19,$14,$14                        ;;C3BE|C3B7+C3B7/C3B7\C3B7;
                                                                ;;                        ;
PChuckJumpAniFrame:   db $18,$18,$18,$18,$17,$17,$17,$17        ;;C3C2|C3BB+C3BB/C3BB\C3BB;
                      db $17,$17,$16,$15,$15,$16,$16,$16        ;;C3CA|C3C3+C3C3/C3C3\C3C3;
                                                                ;;                        ;
ChuckPitchin:         LDA.W !SpriteMisc1534,X                   ;;C3D2|C3CB+C3CB/C3CB\C3CB; Used as 'is jumping' flag
                      BNE PChuckJumpThrow                       ;;C3D5|C3CE+C3CE/C3CE\C3CE;
                      JSR SubVertPosBnk2                        ;;C3D7|C3D0+C3D0/C3D0\C3D0;
                      LDA.B !_E                                 ;;C3DA|C3D3+C3D3/C3D3\C3D3;
                      BPL +                                     ;;C3DC|C3D5+C3D5/C3D5\C3D5;
                      CMP.B #$D0                                ;;C3DE|C3D7+C3D7/C3D7\C3D7;
                      BCS +                                     ;;C3E0|C3D9+C3D9/C3D9\C3D9;
                      LDA.B #$C8                                ;;C3E2|C3DB+C3DB/C3DB\C3DB;
                      STA.B !SpriteYSpeed,X                     ;;C3E4|C3DD+C3DD/C3DD\C3DD;
                      LDA.B #$3E                                ;;C3E6|C3DF+C3DF/C3DF\C3DF;
                      STA.W !SpriteMisc1540,X                   ;;C3E8|C3E1+C3E1/C3E1\C3E1;
                      INC.W !SpriteMisc1534,X                   ;;C3EB|C3E4+C3E4/C3E4\C3E4;
                    + LDA.B !TrueFrame                          ;;C3EE|C3E7+C3E7/C3E7\C3E7;
                      AND.B #$07                                ;;C3F0|C3E9+C3E9/C3E9\C3E9;
                      BNE +                                     ;;C3F2|C3EB+C3EB/C3EB\C3EB;
                      LDA.W !SpriteMisc1540,X                   ;;C3F4|C3ED+C3ED/C3ED\C3ED;
                      BEQ +                                     ;;C3F7|C3F0+C3F0/C3F0\C3F0;
                      INC.W !SpriteMisc1540,X                   ;;C3F9|C3F2+C3F2/C3F2\C3F2;
                    + LDA.B !EffFrame                           ;;C3FC|C3F5+C3F5/C3F5\C3F5;
                      AND.B #$3F                                ;;C3FE|C3F7+C3F7/C3F7\C3F7;
                      BNE +                                     ;;C400|C3F9+C3F9/C3F9\C3F9;
                      JSR CODE_02C556                           ;;C402|C3FB+C3FB/C3FB\C3FB;
                    + LDA.W !SpriteMisc1540,X                   ;;C405|C3FE+C3FE/C3FE\C3FE;
                      BNE +                                     ;;C408|C401+C401/C401\C401;
                      LDY.W !SpriteMisc187B,X                   ;;C40A|C403+C403/C403\C403;
                      LDA.W DATA_02C3B3,Y                       ;;C40D|C406+C406/C406\C406;
                      STA.W !SpriteMisc1540,X                   ;;C410|C409+C409/C409\C409;
                    + LDA.W !SpriteMisc1540,X                   ;;C413|C40C+C40C/C40C\C40C;
                      CMP.B #$40                                ;;C416|C40F+C40F/C40F\C40F;
                      BCS +                                     ;;C418|C411+C411/C411\C411;
                      LDA.B #$00                                ;;C41A|C413+C413/C413\C413;
                      STA.W !SpriteMisc1602,X                   ;;C41C|C415+C415/C415\C415;
                      RTS                                       ;;C41F|C418+C418/C418\C418; Return
                                                                ;;                        ;
                    + SEC                                       ;;C420|C419+C419/C419\C419;
                      SBC.B #$40                                ;;C421|C41A+C41A/C41A\C41A;
                      LSR A                                     ;;C423|C41C+C41C/C41C\C41C;
                      LSR A                                     ;;C424|C41D+C41D/C41D\C41D;
                      LSR A                                     ;;C425|C41E+C41E/C41E\C41E;
                      AND.B #$03                                ;;C426|C41F+C41F/C41F\C41F;
                      TAY                                       ;;C428|C421+C421/C421\C421;
                      LDA.W DATA_02C3B7,Y                       ;;C429|C422+C422/C422\C422;
                      STA.W !SpriteMisc1602,X                   ;;C42C|C425+C425/C425\C425;
                      LDA.W !SpriteMisc1540,X                   ;;C42F|C428+C428/C428\C428; \
                      AND.B #$1F                                ;;C432|C42B+C42B/C42B\C42B; | Spawn a baseball every
                      CMP.B #$06                                ;;C434|C42D+C42D/C42D\C42D; | time the bottom 5 bits
                      BNE Return02C439                          ;;C436|C42F+C42F/C42F\C42F; | of the frame timer is 6
                      JSR SprSpawnExtBaseball                   ;;C438|C431+C431/C431\C431; / (once every 32 frames)
                      LDA.B #$08                                ;;C43B|C434+C434/C434\C434; \ Set 'thrown baseball' timer
                      STA.W !SpriteMisc1558,X                   ;;C43D|C436+C436/C436\C436; /
Return02C439:         RTS                                       ;;C440|C439+C439/C439\C439; Return
                                                                ;;                        ;
PChuckJumpThrow:      LDA.W !SpriteMisc1540,X                   ;;C441|C43A+C43A/C43A\C43A; \ If 'throw baseballs timer' is zero'..
                      BEQ .dontThrowNoJump                      ;;C444|C43D+C43D/C43D\C43D; / ..abort
                      PHA                                       ;;C446|C43F+C43F/C43F\C43F; > Backup throw baseballs timer value.
                      CMP.B #$20                                ;;C447|C440+C440/C440\C440;
                      BCC .dontZeroYSpeed                       ;;C449|C442+C442/C442\C442;
                      CMP.B #$30                                ;;C44B|C444+C444/C444\C444;
                      BCS .dontZeroYSpeed                       ;;C44D|C446+C446/C446\C446;
                      STZ.B !SpriteYSpeed,X                     ;;C44F|C448+C448/C448\C448; > Zero Y speed if pitch timer in [20,30].
.dontZeroYSpeed:      LSR A                                     ;;C451|C44A+C44A/C44A\C44A; \ Divide timer value by 4..
                      LSR A                                     ;;C452|C44B+C44B/C44B\C44B; /
                      TAY                                       ;;C453|C44C+C44C/C44C\C44C; \ ..and use as index to animation frame to use
                      LDA.W PChuckJumpAniFrame,Y                ;;C454|C44D+C44D/C44D\C44D; |
                      STA.W !SpriteMisc1602,X                   ;;C457|C450+C450/C450\C450; /
                      PLA                                       ;;C45A|C453+C453/C453\C453; \ Restore throw baseballs timer value.
                      CMP.B #$26                                ;;C45B|C454+C454/C454\C454; | Spawn a baseball..
                      BNE .dontThrow                            ;;C45D|C456+C456/C456\C456; | ..if timer value equals 26
                      JSR SprSpawnExtBaseball                   ;;C45F|C458+C458/C458\C458; /
.dontThrow:           RTS                                       ;;C462|C45B+C45B/C45B\C45B; Return
                                                                ;;                        ;
.dontThrowNoJump:     STZ.W !SpriteMisc1534,X                   ;;C463|C45C+C45C/C45C\C45C; Clear 'is jumping' flag...
                      RTS                                       ;;C466|C45F+C45F/C45F\C45F; Return
                                                                ;;                        ;
                                                                ;;                        ;
ExtBaseballDispXLo:   db $10,$F8                                ;;C467|C460+C460/C460\C460;
                                                                ;;                        ;
ExtBaseballDispXHi:   db $00,$FF                                ;;C469|C462+C462/C462\C462;
                                                                ;;                        ;
ExtBaseballSpeed:     db $18,$E8                                ;;C46B|C464+C464/C464\C464;
                                                                ;;                        ;
SprSpawnExtBaseball:  LDA.W !SpriteMisc1558,X                   ;;C46D|C466+C466/C466\C466;
                      ORA.W !SpriteOffscreenVert,X              ;;C470|C469+C469/C469\C469;
                      BNE Return02C439                          ;;C473|C46C+C46C/C46C\C46C;
                      LDY.B #$07                                ;;C475|C46E+C46E/C46E\C46E; \ Find a free extended sprite slot
.find_slot_loop:      LDA.W !ExtSpriteNumber,Y                  ;;C477|C470+C470/C470\C470;  |
                      BEQ .slot_found                           ;;C47A|C473+C473/C473\C473;  |
                      DEY                                       ;;C47C|C475+C475/C475\C475;  |
                      BPL .find_slot_loop                       ;;C47D|C476+C476/C476\C476;  |
                      RTS                                       ;;C47F|C478+C478/C478\C478; / Return if no free slots
                                                                ;;                        ;
.slot_found:          LDA.B #$0D                                ;;C480|C479+C479/C479\C479; \ Extended sprite = Baseball
                      STA.W !ExtSpriteNumber,Y                  ;;C482|C47B+C47B/C47B\C47B; /
                      LDA.B !SpriteXPosLow,X                    ;;C485|C47E+C47E/C47E\C47E;
                      STA.B !_0                                 ;;C487|C480+C480/C480\C480;
                      LDA.W !SpriteXPosHigh,X                   ;;C489|C482+C482/C482\C482;
                      STA.B !_1                                 ;;C48C|C485+C485/C485\C485;
                      LDA.B !SpriteYPosLow,X                    ;;C48E|C487+C487/C487\C487;
                      CLC                                       ;;C490|C489+C489/C489\C489;
                      ADC.B #$00                                ;;C491|C48A+C48A/C48A\C48A;
                      STA.W !ExtSpriteYPosLow,Y                 ;;C493|C48C+C48C/C48C\C48C;
                      LDA.W !SpriteYPosHigh,X                   ;;C496|C48F+C48F/C48F\C48F;
                      ADC.B #$00                                ;;C499|C492+C492/C492\C492;
                      STA.W !ExtSpriteYPosHigh,Y                ;;C49B|C494+C494/C494\C494;
                      PHX                                       ;;C49E|C497+C497/C497\C497;
                      LDA.W !SpriteMisc157C,X                   ;;C49F|C498+C498/C498\C498;
                      TAX                                       ;;C4A2|C49B+C49B/C49B\C49B;
                      LDA.B !_0                                 ;;C4A3|C49C+C49C/C49C\C49C;
                      CLC                                       ;;C4A5|C49E+C49E/C49E\C49E;
                      ADC.W ExtBaseballDispXLo,X                ;;C4A6|C49F+C49F/C49F\C49F;
                      STA.W !ExtSpriteXPosLow,Y                 ;;C4A9|C4A2+C4A2/C4A2\C4A2;
                      LDA.B !_1                                 ;;C4AC|C4A5+C4A5/C4A5\C4A5;
                      ADC.W ExtBaseballDispXHi,X                ;;C4AE|C4A7+C4A7/C4A7\C4A7;
                      STA.W !ExtSpriteXPosHigh,Y                ;;C4B1|C4AA+C4AA/C4AA\C4AA;
                      LDA.W ExtBaseballSpeed,X                  ;;C4B4|C4AD+C4AD/C4AD\C4AD;
                      STA.W !ExtSpriteXSpeed,Y                  ;;C4B7|C4B0+C4B0/C4B0\C4B0;
                      PLX                                       ;;C4BA|C4B3+C4B3/C4B3\C4B3;
                      RTS                                       ;;C4BB|C4B4+C4B4/C4B4\C4B4; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C4B5:          db $00,$00,$11,$11,$11,$11,$00,$00        ;;C4BC|C4B5+C4B5/C4B5\C4B5;
                                                                ;;                        ;
ChuckPuntin:          STZ.W !SpriteMisc1602,X                   ;;C4C4|C4BD+C4BD/C4BD\C4BD;
                      TXA                                       ;;C4C7|C4C0+C4C0/C4C0\C4C0;
                      ASL A                                     ;;C4C8|C4C1+C4C1/C4C1\C4C1;
                      ASL A                                     ;;C4C9|C4C2+C4C2/C4C2\C4C2;
                      ASL A                                     ;;C4CA|C4C3+C4C3/C4C3\C4C3;
                      ADC.B !TrueFrame                          ;;C4CB|C4C4+C4C4/C4C4\C4C4;
                      AND.B #$7F                                ;;C4CD|C4C6+C4C6/C4C6\C4C6;
                      CMP.B #$00                                ;;C4CF|C4C8+C4C8/C4C8\C4C8;
                      BNE +                                     ;;C4D1|C4CA+C4CA/C4CA\C4CA;
                      PHA                                       ;;C4D3|C4CC+C4CC/C4CC\C4CC;
                      JSR CODE_02C556                           ;;C4D4|C4CD+C4CD/C4CD\C4CD;
                      JSL CODE_03CBB3                           ;;C4D7|C4D0+C4D0/C4D0\C4D0;
                      PLA                                       ;;C4DB|C4D4+C4D4/C4D4\C4D4;
                    + CMP.B #$20                                ;;C4DC|C4D5+C4D5/C4D5\C4D5;
                      BCS +                                     ;;C4DE|C4D7+C4D7/C4D7\C4D7;
                      LSR A                                     ;;C4E0|C4D9+C4D9/C4D9\C4D9;
                      LSR A                                     ;;C4E1|C4DA+C4DA/C4DA\C4DA;
                      TAY                                       ;;C4E2|C4DB+C4DB/C4DB\C4DB;
                      LDA.W DATA_02C4B5,Y                       ;;C4E3|C4DC+C4DC/C4DC\C4DC;
                      STA.W !SpriteMisc1602,X                   ;;C4E6|C4DF+C4DF/C4DF\C4DF;
                    + RTS                                       ;;C4E9|C4E2+C4E2/C4E2\C4E2; Return
                                                                ;;                        ;
ChuckClappin:         JSR CODE_02C556                           ;;C4EA|C4E3+C4E3/C4E3\C4E3;
                      LDA.B #$06                                ;;C4ED|C4E6+C4E6/C4E6\C4E6;
                      LDY.B !SpriteYSpeed,X                     ;;C4EF|C4E8+C4E8/C4E8\C4E8;
                      CPY.B #$F0                                ;;C4F1|C4EA+C4EA/C4EA\C4EA;
                      BMI CODE_02C504                           ;;C4F3|C4EC+C4EC/C4EC\C4EC;
                      LDY.W !SpriteMisc160E,X                   ;;C4F5|C4EE+C4EE/C4EE\C4EE;
                      BEQ CODE_02C504                           ;;C4F8|C4F1+C4F1/C4F1\C4F1;
                      LDA.W !SpriteMisc1FE2,X                   ;;C4FA|C4F3+C4F3/C4F3\C4F3;
                      BNE +                                     ;;C4FD|C4F6+C4F6/C4F6\C4F6;
                      LDA.B #!SFX_CLAP                          ;;C4FF|C4F8+C4F8/C4F8\C4F8; \ Play sound effect
                      STA.W !SPCIO3                             ;;C501|C4FA+C4FA/C4FA\C4FA; /
                      LDA.B #$20                                ;;C504|C4FD+C4FD/C4FD\C4FD;
                      STA.W !SpriteMisc1FE2,X                   ;;C506|C4FF+C4FF/C4FF\C4FF;
                    + LDA.B #$07                                ;;C509|C502+C502/C502\C502;
CODE_02C504:          STA.W !SpriteMisc1602,X                   ;;C50B|C504+C504/C504\C504;
                      LDA.W !SpriteBlockedDirs,X                ;;C50E|C507+C507/C507\C507; \ Branch if not on ground
                      AND.B #$04                                ;;C511|C50A+C50A/C50A\C50A;  |
                      BEQ +                                     ;;C513|C50C+C50C/C50C\C50C; /
                      STZ.W !SpriteMisc160E,X                   ;;C515|C50E+C50E/C50E\C50E;
                      LDA.B #$04                                ;;C518|C511+C511/C511\C511;
                      STA.W !SpriteMisc1602,X                   ;;C51A|C513+C513/C513\C513;
                      LDA.W !SpriteMisc1540,X                   ;;C51D|C516+C516/C516\C516;
                      BNE +                                     ;;C520|C519+C519/C519\C519;
                      LDA.B #$20                                ;;C522|C51B+C51B/C51B\C51B;
                      STA.W !SpriteMisc1540,X                   ;;C524|C51D+C51D/C51D\C51D;
                      LDA.B #$F0                                ;;C527|C520+C520/C520\C520;
                      STA.B !SpriteYSpeed,X                     ;;C529|C522+C522/C522\C522;
                      JSR SubVertPosBnk2                        ;;C52B|C524+C524/C524\C524;
                      LDA.B !_E                                 ;;C52E|C527+C527/C527\C527;
                      BPL +                                     ;;C530|C529+C529/C529\C529;
                      CMP.B #$D0                                ;;C532|C52B+C52B/C52B\C52B;
                      BCS +                                     ;;C534|C52D+C52D/C52D\C52D;
                      LDA.B #$C0                                ;;C536|C52F+C52F/C52F\C52F;
                      STA.B !SpriteYSpeed,X                     ;;C538|C531+C531/C531\C531;
                      INC.W !SpriteMisc160E,X                   ;;C53A|C533+C533/C533\C533;
CODE_02C536:          LDA.B #!SFX_SPRING                        ;;C53D|C536+C536/C536\C536; \ Play sound effect
                      STA.W !SPCIO3                             ;;C53F|C538+C538/C538\C538; /
                    + RTS                                       ;;C542|C53B+C53B/C53B\C53B; Return
                                                                ;;                        ;
ChuckJump:            LDA.B #$06                                ;;C543|C53C+C53C/C53C\C53C;
                      STA.W !SpriteMisc1602,X                   ;;C545|C53E+C53E/C53E\C53E;
                      LDA.W !SpriteBlockedDirs,X                ;;C548|C541+C541/C541\C541; \ Branch if not on ground
                      AND.B #$04                                ;;C54B|C544+C544/C544\C544;  |
                      BEQ +                                     ;;C54D|C546+C546/C546\C546; /
                      JSR CODE_02C579                           ;;C54F|C548+C548/C548\C548;
                      JSR CODE_02C556                           ;;C552|C54B+C54B/C54B\C54B;
                      LDA.B #$08                                ;;C555|C54E+C54E/C54E\C54E;
                      STA.W !SpriteMisc1540,X                   ;;C557|C550+C550/C550\C550;
                      INC.B !SpriteTableC2,X                    ;;C55A|C553+C553/C553\C553;
                    + RTS                                       ;;C55C|C555+C555/C555\C555; Return
                                                                ;;                        ;
CODE_02C556:          JSR SubHorizPosBnk2                       ;;C55D|C556+C556/C556\C556;
                      TYA                                       ;;C560|C559+C559/C559\C559;
                      STA.W !SpriteMisc157C,X                   ;;C561|C55A+C55A/C55A\C55A;
                      LDA.W DATA_02C639,Y                       ;;C564|C55D+C55D/C55D\C55D;
                      STA.W !SpriteMisc151C,X                   ;;C567|C560+C560/C560\C560;
                      RTS                                       ;;C56A|C563+C563/C563\C563; Return
                                                                ;;                        ;
ChuckLand:            LDA.B #$03                                ;;C56B|C564+C564/C564\C564;
                      STA.W !SpriteMisc1602,X                   ;;C56D|C566+C566/C566\C566;
                      LDA.W !SpriteMisc1540,X                   ;;C570|C569+C569/C569\C569;
                      BNE CODE_02C579                           ;;C573|C56C+C56C/C56C\C56C;
                      LDA.W !SpriteBlockedDirs,X                ;;C575|C56E+C56E/C56E\C56E; \ Branch if not on ground
                      AND.B #$04                                ;;C578|C571+C571/C571\C571;  |
                      BEQ +                                     ;;C57A|C573+C573/C573\C573; /
                      LDA.B #$05                                ;;C57C|C575+C575/C575\C575;
                      STA.B !SpriteTableC2,X                    ;;C57E|C577+C577/C577\C577;
CODE_02C579:          STZ.B !SpriteXSpeed,X                     ;;C580|C579+C579/C579\C579; Sprite X Speed = 0
                      STZ.B !SpriteYSpeed,X                     ;;C582|C57B+C57B/C57B\C57B; Sprite Y Speed = 0
                    + RTS                                       ;;C584|C57D+C57D/C57D\C57D; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C57E:          db $10,$F0                                ;;C585|C57E+C57E/C57E\C57E;
                                                                ;;                        ;
DATA_02C580:          db $20,$E0                                ;;C587|C580+C580/C580\C580;
                                                                ;;                        ;
ChuckPrepareJump:     JSR CODE_02C556                           ;;C589|C582+C582/C582\C582;
                      LDA.W !SpriteMisc1540,X                   ;;C58C|C585+C585/C585\C585;
                      BEQ CODE_02C602                           ;;C58F|C588+C588/C588\C588;
                      CMP.B #$01                                ;;C591|C58A+C58A/C58A\C58A;
                      BNE CODE_02C5FC                           ;;C593|C58C+C58C/C58C\C58C;
                      LDA.B !SpriteNumber,X                     ;;C595|C58E+C58E/C58E\C58E;
                      CMP.B #$93                                ;;C597|C590+C590/C590\C590;
                      BNE +                                     ;;C599|C592+C592/C592\C592;
                      JSR SubHorizPosBnk2                       ;;C59B|C594+C594/C594\C594;
                      LDA.W DATA_02C580,Y                       ;;C59E|C597+C597/C597\C597;
                      STA.B !SpriteXSpeed,X                     ;;C5A1|C59A+C59A/C59A\C59A;
                      LDA.B #$B0                                ;;C5A3|C59C+C59C/C59C\C59C;
                      STA.B !SpriteYSpeed,X                     ;;C5A5|C59E+C59E/C59E\C59E;
                      LDA.B #$06                                ;;C5A7|C5A0+C5A0/C5A0\C5A0;
                      STA.B !SpriteTableC2,X                    ;;C5A9|C5A2+C5A2/C5A2\C5A2;
                      JMP CODE_02C536                           ;;C5AB|C5A4+C5A4/C5A4\C5A4;
                                                                ;;                        ;
                    + STZ.B !SpriteTableC2,X                    ;;C5AE|C5A7+C5A7/C5A7\C5A7;
                      LDA.B #$50                                ;;C5B0|C5A9+C5A9/C5A9\C5A9;
                      STA.W !SpriteMisc1540,X                   ;;C5B2|C5AB+C5AB/C5AB\C5AB;
                      LDA.B #!SFX_MAGIC                         ;;C5B5|C5AE+C5AE/C5AE\C5AE; \ Play sound effect
                      STA.W !SPCIO0                             ;;C5B7|C5B0+C5B0/C5B0\C5B0; /
                      STZ.W !TileGenerateTrackA                 ;;C5BA|C5B3+C5B3/C5B3\C5B3;
                      JSR CODE_02C5BC                           ;;C5BD|C5B6+C5B6/C5B6\C5B6;
                      INC.W !TileGenerateTrackA                 ;;C5C0|C5B9+C5B9/C5B9\C5B9;
CODE_02C5BC:          JSL FindFreeSprSlot                       ;;C5C3|C5BC+C5BC/C5BC\C5BC;
                      BMI CODE_02C5FC                           ;;C5C7|C5C0+C5C0/C5C0\C5C0;
                      LDA.B #$08                                ;;C5C9|C5C2+C5C2/C5C2\C5C2; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;C5CB|C5C4+C5C4/C5C4\C5C4; /
                      LDA.B #$91                                ;;C5CE|C5C7+C5C7/C5C7\C5C7;
                      STA.W !SpriteNumber,Y                     ;;C5D0|C5C9+C5C9/C5C9\C5C9;
                      LDA.B !SpriteXPosLow,X                    ;;C5D3|C5CC+C5CC/C5CC\C5CC;
                      STA.W !SpriteXPosLow,Y                    ;;C5D5|C5CE+C5CE/C5CE\C5CE;
                      LDA.W !SpriteXPosHigh,X                   ;;C5D8|C5D1+C5D1/C5D1\C5D1;
                      STA.W !SpriteXPosHigh,Y                   ;;C5DB|C5D4+C5D4/C5D4\C5D4;
                      LDA.B !SpriteYPosLow,X                    ;;C5DE|C5D7+C5D7/C5D7\C5D7;
                      STA.W !SpriteYPosLow,Y                    ;;C5E0|C5D9+C5D9/C5D9\C5D9;
                      LDA.W !SpriteYPosHigh,X                   ;;C5E3|C5DC+C5DC/C5DC\C5DC;
                      STA.W !SpriteYPosHigh,Y                   ;;C5E6|C5DF+C5DF/C5DF\C5DF;
                      PHX                                       ;;C5E9|C5E2+C5E2/C5E2\C5E2;
                      TYX                                       ;;C5EA|C5E3+C5E3/C5E3\C5E3;
                      JSL InitSpriteTables                      ;;C5EB|C5E4+C5E4/C5E4\C5E4;
                      LDX.W !TileGenerateTrackA                 ;;C5EF|C5E8+C5E8/C5E8\C5E8;
                      LDA.W DATA_02C57E,X                       ;;C5F2|C5EB+C5EB/C5EB\C5EB;
                      STA.W !SpriteXSpeed,Y                     ;;C5F5|C5EE+C5EE/C5EE\C5EE;
                      PLX                                       ;;C5F8|C5F1+C5F1/C5F1\C5F1;
                      LDA.B #$C8                                ;;C5F9|C5F2+C5F2/C5F2\C5F2;
                      STA.W !SpriteYSpeed,Y                     ;;C5FB|C5F4+C5F4/C5F4\C5F4;
                      LDA.B #$50                                ;;C5FE|C5F7+C5F7/C5F7\C5F7;
                      STA.W !SpriteMisc1540,Y                   ;;C600|C5F9+C5F9/C5F9\C5F9;
CODE_02C5FC:          LDA.B #$09                                ;;C603|C5FC+C5FC/C5FC\C5FC;
                      STA.W !SpriteMisc1602,X                   ;;C605|C5FE+C5FE/C5FE\C5FE;
                      RTS                                       ;;C608|C601+C601/C601\C601; Return
                                                                ;;                        ;
CODE_02C602:          JSR SubHorizPosBnk2                       ;;C609|C602+C602/C602\C602;
                      TYA                                       ;;C60C|C605+C605/C605\C605;
                      STA.W !SpriteMisc157C,X                   ;;C60D|C606+C606/C606\C606;
                      LDA.B !_F                                 ;;C610|C609+C609/C609\C609;
                      CLC                                       ;;C612|C60B+C60B/C60B\C60B;
                      ADC.B #$50                                ;;C613|C60C+C60C/C60C\C60C;
                      CMP.B #$A0                                ;;C615|C60E+C60E/C60E\C60E;
                      BCS +                                     ;;C617|C610+C610/C610\C610;
                      LDA.B #$40                                ;;C619|C612+C612/C612\C612;
                      STA.W !SpriteMisc1540,X                   ;;C61B|C614+C614/C614\C614;
                      RTS                                       ;;C61E|C617+C617/C617\C617; Return
                                                                ;;                        ;
                    + LDA.B #$03                                ;;C61F|C618+C618/C618\C618;
                      STA.W !SpriteMisc1602,X                   ;;C621|C61A+C61A/C61A\C61A;
                      LDA.B !TrueFrame                          ;;C624|C61D+C61D/C61D\C61D;
                      AND.B #$3F                                ;;C626|C61F+C61F/C61F\C61F;
                      BNE +                                     ;;C628|C621+C621/C621\C621;
                      LDA.B #$E0                                ;;C62A|C623+C623/C623\C623;
                      STA.B !SpriteYSpeed,X                     ;;C62C|C625+C625/C625\C625;
                    + RTS                                       ;;C62E|C627+C627/C627\C627; Return
                                                                ;;                        ;
CODE_02C628:          LDA.B #$08                                ;;C62F|C628+C628/C628\C628;
                      STA.W !SpriteMisc15AC,X                   ;;C631|C62A+C62A/C62A\C62A;
                      RTS                                       ;;C634|C62D+C62D/C62D\C62D; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C62E:          db $00,$00,$00,$00,$01,$02,$03,$04        ;;C635|C62E+C62E/C62E\C62E;
                      db $04,$04,$04                            ;;C63D|C636+C636/C636\C636;
                                                                ;;                        ;
DATA_02C639:          db $00,$04                                ;;C640|C639+C639/C639\C639;
                                                                ;;                        ;
ChuckLookSideToSide:  LDA.B #$03                                ;;C642|C63B+C63B/C63B\C63B;
                      STA.W !SpriteMisc1602,X                   ;;C644|C63D+C63D/C63D\C63D;
                      STZ.W !SpriteMisc187B,X                   ;;C647|C640+C640/C640\C640;
                      LDA.W !SpriteMisc1540,X                   ;;C64A|C643+C643/C643\C643;
                      AND.B #$0F                                ;;C64D|C646+C646/C646\C646;
                      BNE +                                     ;;C64F|C648+C648/C648\C648;
                      JSR SubVertPosBnk2                        ;;C651|C64A+C64A/C64A\C64A;
                      LDA.B !_E                                 ;;C654|C64D+C64D/C64D\C64D;
                      CLC                                       ;;C656|C64F+C64F/C64F\C64F;
                      ADC.B #$28                                ;;C657|C650+C650/C650\C650;
                      CMP.B #$50                                ;;C659|C652+C652/C652\C652;
                      BCS +                                     ;;C65B|C654+C654/C654\C654;
                      JSR CODE_02C556                           ;;C65D|C656+C656/C656\C656;
                      INC.W !SpriteMisc187B,X                   ;;C660|C659+C659/C659\C659;
CODE_02C65C:          LDA.B #$02                                ;;C663|C65C+C65C/C65C\C65C;
                      STA.B !SpriteTableC2,X                    ;;C665|C65E+C65E/C65E\C65E;
                      LDA.B #$18                                ;;C667|C660+C660/C660\C660;
                      STA.W !SpriteMisc1540,X                   ;;C669|C662+C662/C662\C662;
                      RTS                                       ;;C66C|C665+C665/C665\C665; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C666:          db $01,$FF                                ;;C66D|C666+C666/C666\C666;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,X                   ;;C66F|C668+C668/C668\C668;
                      BNE CODE_02C677                           ;;C672|C66B+C66B/C66B\C66B;
                      LDA.W !SpriteMisc157C,X                   ;;C674|C66D+C66D/C66D\C66D;
                      EOR.B #$01                                ;;C677|C670+C670/C670\C670;
                      STA.W !SpriteMisc157C,X                   ;;C679|C672+C672/C672\C672;
                      BRA CODE_02C65C                           ;;C67C|C675+C675/C675\C675;
                                                                ;;                        ;
CODE_02C677:          LDA.B !EffFrame                           ;;C67E|C677+C677/C677\C677;
                      AND.B #$03                                ;;C680|C679+C679/C679\C679;
                      BNE CODE_02C691                           ;;C682|C67B+C67B/C67B\C67B;
                      LDA.W !SpriteMisc1534,X                   ;;C684|C67D+C67D/C67D\C67D;
                      AND.B #$01                                ;;C687|C680+C680/C680\C680;
                      TAY                                       ;;C689|C682+C682/C682\C682;
                      LDA.W !SpriteMisc1594,X                   ;;C68A|C683+C683/C683\C683;
                      CLC                                       ;;C68D|C686+C686/C686\C686;
                      ADC.W DATA_02C666,Y                       ;;C68E|C687+C687/C687\C687;
                      CMP.B #$0B                                ;;C691|C68A+C68A/C68A\C68A;
                      BCS +                                     ;;C693|C68C+C68C/C68C\C68C;
                      STA.W !SpriteMisc1594,X                   ;;C695|C68E+C68E/C68E\C68E;
CODE_02C691:          LDY.W !SpriteMisc1594,X                   ;;C698|C691+C691/C691\C691;
                      LDA.W DATA_02C62E,Y                       ;;C69B|C694+C694/C694\C694;
                      STA.W !SpriteMisc151C,X                   ;;C69E|C697+C697/C697\C697;
                      RTS                                       ;;C6A1|C69A+C69A/C69A\C69A; Return
                                                                ;;                        ;
                    + INC.W !SpriteMisc1534,X                   ;;C6A2|C69B+C69B/C69B\C69B;
                      RTS                                       ;;C6A5|C69E+C69E/C69E\C69E; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C69F:          db $10,$F0,$18,$E8                        ;;C6A6|C69F+C69F/C69F\C69F;
                                                                ;;                        ;
DATA_02C6A3:          db $12,$13,$12,$13                        ;;C6AA|C6A3+C6A3/C6A3\C6A3;
                                                                ;;                        ;
ChuckChargin:         LDA.W !SpriteBlockedDirs,X                ;;C6AE|C6A7+C6A7/C6A7\C6A7; \ Branch if not on ground
                      AND.B #$04                                ;;C6B1|C6AA+C6AA/C6AA\C6AA;  |
                      BEQ +                                     ;;C6B3|C6AC+C6AC/C6AC\C6AC; /
                      LDA.W !SpriteMisc163E,X                   ;;C6B5|C6AE+C6AE/C6AE\C6AE;
                      CMP.B #$01                                ;;C6B8|C6B1+C6B1/C6B1\C6B1;
                      BRA +                                     ;;C6BA|C6B3+C6B3/C6B3\C6B3;
                                                                ;;                        ;
                      LDA.B #!SFX_NOTICEMESENPAI                ;;C6BC|C6B5+C6B5/C6B5\C6B5; \ Unreachable
                      STA.W !SPCIO0                             ;;C6BE|C6B7+C6B7/C6B7\C6B7; / Play sound effect
                    + JSR SubVertPosBnk2                        ;;C6C1|C6BA+C6BA/C6BA\C6BA;
                      LDA.B !_E                                 ;;C6C4|C6BD+C6BD/C6BD\C6BD;
                      CLC                                       ;;C6C6|C6BF+C6BF/C6BF\C6BF;
                      ADC.B #$30                                ;;C6C7|C6C0+C6C0/C6C0\C6C0;
                      CMP.B #$60                                ;;C6C9|C6C2+C6C2/C6C2\C6C2;
                      BCS +                                     ;;C6CB|C6C4+C6C4/C6C4\C6C4;
                      JSR SubHorizPosBnk2                       ;;C6CD|C6C6+C6C6/C6C6\C6C6;
                      TYA                                       ;;C6D0|C6C9+C6C9/C6C9\C6C9;
                      CMP.W !SpriteMisc157C,X                   ;;C6D1|C6CA+C6CA/C6CA\C6CA;
                      BNE +                                     ;;C6D4|C6CD+C6CD/C6CD\C6CD;
                      LDA.B #$20                                ;;C6D6|C6CF+C6CF/C6CF\C6CF;
                      STA.W !SpriteMisc1540,X                   ;;C6D8|C6D1+C6D1/C6D1\C6D1;
                      STA.W !SpriteMisc187B,X                   ;;C6DB|C6D4+C6D4/C6D4\C6D4;
                    + LDA.W !SpriteMisc1540,X                   ;;C6DE|C6D7+C6D7/C6D7\C6D7;
                      BNE +                                     ;;C6E1|C6DA+C6DA/C6DA\C6DA;
                      STZ.B !SpriteTableC2,X                    ;;C6E3|C6DC+C6DC/C6DC\C6DC;
                      JSR CODE_02C628                           ;;C6E5|C6DE+C6DE/C6DE\C6DE;
                      JSL GetRand                               ;;C6E8|C6E1+C6E1/C6E1\C6E1;
                      AND.B #$3F                                ;;C6EC|C6E5+C6E5/C6E5\C6E5;
                      ORA.B #$40                                ;;C6EE|C6E7+C6E7/C6E7\C6E7;
                      STA.W !SpriteMisc1540,X                   ;;C6F0|C6E9+C6E9/C6E9\C6E9;
                    + LDY.W !SpriteMisc157C,X                   ;;C6F3|C6EC+C6EC/C6EC\C6EC;
                      LDA.W DATA_02C639,Y                       ;;C6F6|C6EF+C6EF/C6EF\C6EF;
                      STA.W !SpriteMisc151C,X                   ;;C6F9|C6F2+C6F2/C6F2\C6F2;
                      LDA.W !SpriteBlockedDirs,X                ;;C6FC|C6F5+C6F5/C6F5\C6F5; \ Branch if not on ground
                      AND.B #$04                                ;;C6FF|C6F8+C6F8/C6F8\C6F8;  |
                      BEQ CODE_02C713                           ;;C701|C6FA+C6FA/C6FA\C6FA; /
                      LDA.W !SpriteMisc187B,X                   ;;C703|C6FC+C6FC/C6FC\C6FC;
                      BEQ CODE_02C70E                           ;;C706|C6FF+C6FF/C6FF\C6FF;
                      LDA.B !EffFrame                           ;;C708|C701+C701/C701\C701;
                      AND.B #$07                                ;;C70A|C703+C703/C703\C703;
                      BNE +                                     ;;C70C|C705+C705/C705\C705;
                      LDA.B #!SFX_BONK                          ;;C70E|C707+C707/C707\C707; \ Play sound effect
                      STA.W !SPCIO0                             ;;C710|C709+C709/C709\C709; /
                    + INY                                       ;;C713|C70C+C70C/C70C\C70C;
                      INY                                       ;;C714|C70D+C70D/C70D\C70D;
CODE_02C70E:          LDA.W DATA_02C69F,Y                       ;;C715|C70E+C70E/C70E\C70E;
                      STA.B !SpriteXSpeed,X                     ;;C718|C711+C711/C711\C711;
CODE_02C713:          LDA.B !TrueFrame                          ;;C71A|C713+C713/C713\C713;
                      LDY.W !SpriteMisc187B,X                   ;;C71C|C715+C715/C715\C715;
                      BNE +                                     ;;C71F|C718+C718/C718\C718;
                      LSR A                                     ;;C721|C71A+C71A/C71A\C71A;
                    + LSR A                                     ;;C722|C71B+C71B/C71B\C71B;
                      AND.B #$03                                ;;C723|C71C+C71C/C71C\C71C;
                      TAY                                       ;;C725|C71E+C71E/C71E\C71E;
                      LDA.W DATA_02C6A3,Y                       ;;C726|C71F+C71F/C71F\C71F;
                      STA.W !SpriteMisc1602,X                   ;;C729|C722+C722/C722\C722;
                      RTS                                       ;;C72C|C725+C725/C725\C725; Return
                                                                ;;                        ;
ChuckPrepareCharge:   LDA.B #$03                                ;;C72D|C726+C726/C726\C726;
                      STA.W !SpriteMisc1602,X                   ;;C72F|C728+C728/C728\C728;
                      LDA.W !SpriteMisc1540,X                   ;;C732|C72B+C72B/C72B\C72B;
                      BNE +                                     ;;C735|C72E+C72E/C72E\C72E;
                      JSR CODE_02C628                           ;;C737|C730+C730/C730\C730;
                      LDA.B #$01                                ;;C73A|C733+C733/C733\C733;
                      STA.B !SpriteTableC2,X                    ;;C73C|C735+C735/C735\C735;
                      LDA.B #$40                                ;;C73E|C737+C737/C737\C737;
                      STA.W !SpriteMisc1540,X                   ;;C740|C739+C739/C739\C739;
                    + RTS                                       ;;C743|C73C+C73C/C73C\C73C; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C73D:          db $0A,$0B,$0A,$0C,$0D,$0C                ;;C744|C73D+C73D/C73D\C73D;
                                                                ;;                        ;
DATA_02C743:          db $0C,$10,$10,$04,$08,$10,$18            ;;C74A|C743+C743/C743\C743;
                                                                ;;                        ;
ChuckHurt:            LDY.W !SpriteMisc1570,X                   ;;C751|C74A+C74A/C74A\C74A;
                      LDA.W !SpriteMisc1540,X                   ;;C754|C74D+C74D/C74D\C74D;
                      BNE CODE_02C760                           ;;C757|C750+C750/C750\C750;
                      INC.W !SpriteMisc1570,X                   ;;C759|C752+C752/C752\C752;
                      INY                                       ;;C75C|C755+C755/C755\C755;
                      CPY.B #$07                                ;;C75D|C756+C756/C756\C756;
                      BEQ CODE_02C777                           ;;C75F|C758+C758/C758\C758;
                      LDA.W DATA_02C743,Y                       ;;C761|C75A+C75A/C75A\C75A;
                      STA.W !SpriteMisc1540,X                   ;;C764|C75D+C75D/C75D\C75D;
CODE_02C760:          LDA.W DATA_02C73D,Y                       ;;C767|C760+C760/C760\C760;
                      STA.W !SpriteMisc1602,X                   ;;C76A|C763+C763/C763\C763;
                      LDA.B #$02                                ;;C76D|C766+C766/C766\C766;
                      CPY.B #$05                                ;;C76F|C768+C768/C768\C768;
                      BNE +                                     ;;C771|C76A+C76A/C76A\C76A;
                      LDA.B !EffFrame                           ;;C773|C76C+C76C/C76C\C76C;
                      LSR A                                     ;;C775|C76E+C76E/C76E\C76E;
                      NOP                                       ;;C776|C76F+C76F/C76F\C76F;
                      AND.B #$02                                ;;C777|C770+C770/C770\C770;
                      INC A                                     ;;C779|C772+C772/C772\C772;
                    + STA.W !SpriteMisc151C,X                   ;;C77A|C773+C773/C773\C773;
                      RTS                                       ;;C77D|C776+C776/C776\C776; Return
                                                                ;;                        ;
CODE_02C777:          LDA.B !SpriteNumber,X                     ;;C77E|C777+C777/C777\C777;
                      CMP.B #$94                                ;;C780|C779+C779/C779\C779;
                      BEQ CODE_02C794                           ;;C782|C77B+C77B/C77B\C77B;
                      CMP.B #$46                                ;;C784|C77D+C77D/C77D\C77D;
                      BNE +                                     ;;C786|C77F+C77F/C77F\C77F;
                      LDA.B #$91                                ;;C788|C781+C781/C781\C781;
                      STA.B !SpriteNumber,X                     ;;C78A|C783+C783/C783\C783;
                    + LDA.B #$30                                ;;C78C|C785+C785/C785\C785;
                      STA.W !SpriteMisc1540,X                   ;;C78E|C787+C787/C787\C787;
                      LDA.B #$02                                ;;C791|C78A+C78A/C78A\C78A;
                      STA.B !SpriteTableC2,X                    ;;C793|C78C+C78C/C78C\C78C;
                      INC.W !SpriteMisc187B,X                   ;;C795|C78E+C78E/C78E\C78E;
                      JMP CODE_02C556                           ;;C798|C791+C791/C791\C791;
                                                                ;;                        ;
CODE_02C794:          LDA.B #$0C                                ;;C79B|C794+C794/C794\C794;
                      STA.B !SpriteTableC2,X                    ;;C79D|C796+C796/C796\C796;
                      RTS                                       ;;C79F|C798+C798/C798\C798; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $F0,$10                                ;;C7A0|C799+C799/C799\C799;
                                                                ;;                        ;
ChuckPlayerBounceSpd: db $20,$E0                                ;;C7A2|C79B+C79B/C79B\C79B;
                                                                ;;                        ;
ChuckInteract:        LDA.W !SpriteMisc1564,X                   ;;C7A4|C79D+C79D/C79D\C79D;
                      BNE .return                               ;;C7A7|C7A0+C7A0/C7A0\C7A0;
                      JSL MarioSprInteract                      ;;C7A9|C7A2+C7A2/C7A2\C7A2;
                      BCC .return                               ;;C7AD|C7A6+C7A6/C7A6\C7A6;
                      LDA.W !InvinsibilityTimer                 ;;C7AF|C7A8+C7A8/C7A8\C7A8; \ Branch if Mario doesn't have star
                      BEQ .noStar                               ;;C7B2|C7AB+C7AB/C7AB\C7AB; /
                      LDA.B #$D0                                ;;C7B4|C7AD+C7AD/C7AD\C7AD;
                      STA.B !SpriteYSpeed,X                     ;;C7B6|C7AF+C7AF/C7AF\C7AF;
.killZeroXSpeed:      STZ.B !SpriteXSpeed,X                     ;;C7B8|C7B1+C7B1/C7B1\C7B1; Sprite X Speed = 0
                      LDA.B #$02                                ;;C7BA|C7B3+C7B3/C7B3\C7B3; \ Sprite status = Killed
                      STA.W !SpriteStatus,X                     ;;C7BC|C7B5+C7B5/C7B5\C7B5; /
                      LDA.B #!SFX_KICK                          ;;C7BF|C7B8+C7B8/C7B8\C7B8; \ Play sound effect
                      STA.W !SPCIO0                             ;;C7C1|C7BA+C7BA/C7BA\C7BA; /
                      LDA.B #$03                                ;;C7C4|C7BD+C7BD/C7BD\C7BD;
                      JSL GivePoints                            ;;C7C6|C7BF+C7BF/C7BF\C7BF;
                      RTS                                       ;;C7CA|C7C3+C7C3/C7C3\C7C3; Return
                                                                ;;                        ;
.noStar:              JSR SubVertPosBnk2                        ;;C7CB|C7C4+C7C4/C7C4\C7C4;
                      LDA.B !_E                                 ;;C7CE|C7C7+C7C7/C7C7\C7C7;
                      CMP.B #$EC                                ;;C7D0|C7C9+C7C9/C7C9\C7C9;
                      BPL .chuckWins                            ;;C7D2|C7CB+C7CB/C7CB\C7CB;
                      LDA.B #$05                                ;;C7D4|C7CD+C7CD/C7CD\C7CD;
                      STA.W !SpriteMisc1564,X                   ;;C7D6|C7CF+C7CF/C7CF\C7CF;
                      LDA.B #!SFX_SPLAT                         ;;C7D9|C7D2+C7D2/C7D2\C7D2; \ Play sound effect
                      STA.W !SPCIO0                             ;;C7DB|C7D4+C7D4/C7D4\C7D4; /
                      JSL DisplayContactGfxP                    ;;C7DE|C7D7+C7D7/C7D7\C7D7;
                      JSL BoostMarioSpeed                       ;;C7E2|C7DB+C7DB/C7DB\C7DB;
                      STZ.W !SpriteMisc163E,X                   ;;C7E6|C7DF+C7DF/C7DF\C7DF;
                      LDA.B !SpriteTableC2,X                    ;;C7E9|C7E2+C7E2/C7E2\C7E2;
                      CMP.B #$03                                ;;C7EB|C7E4+C7E4/C7E4\C7E4;
                      BEQ .return                               ;;C7ED|C7E6+C7E6/C7E6\C7E6;
                      INC.W !SpriteMisc1528,X                   ;;C7EF|C7E8+C7E8/C7E8\C7E8; Increase Chuck stomp count
                      LDA.W !SpriteMisc1528,X                   ;;C7F2|C7EB+C7EB/C7EB\C7EB; \ Kill Chuck if stomp count >= 3
                      CMP.B #$03                                ;;C7F5|C7EE+C7EE/C7EE\C7EE;  |
                      BCC .notDeadYet                           ;;C7F7|C7F0+C7F0/C7F0\C7F0;  |
                      STZ.B !SpriteYSpeed,X                     ;;C7F9|C7F2+C7F2/C7F2\C7F2;  | Sprite Y Speed = 0
                      BRA .killZeroXSpeed                       ;;C7FB|C7F4+C7F4/C7F4\C7F4; /
                                                                ;;                        ;
.notDeadYet:          LDA.B #!SFX_ENEMYHURT                     ;;C7FD|C7F6+C7F6/C7F6\C7F6; \ Play sound effect
                      STA.W !SPCIO3                             ;;C7FF|C7F8+C7F8/C7F8\C7F8; /
                      LDA.B #$03                                ;;C802|C7FB+C7FB/C7FB\C7FB;
                      STA.B !SpriteTableC2,X                    ;;C804|C7FD+C7FD/C7FD\C7FD;
                      LDA.B #$03                                ;;C806|C7FF+C7FF/C7FF\C7FF;
                      STA.W !SpriteMisc1540,X                   ;;C808|C801+C801/C801\C801;
                      STZ.W !SpriteMisc1570,X                   ;;C80B|C804+C804/C804\C804;
                      JSR SubHorizPosBnk2                       ;;C80E|C807+C807/C807\C807;
                      LDA.W ChuckPlayerBounceSpd,Y              ;;C811|C80A+C80A/C80A\C80A;
                      STA.B !PlayerXSpeed                       ;;C814|C80D+C80D/C80D\C80D;
.return:              RTS                                       ;;C816|C80F+C80F/C80F\C80F;
                                                                ;;                        ;
.chuckWins:           LDA.W !PlayerRidingYoshi                  ;;C817|C810+C810/C810\C810;
                      BNE .onYoshi                              ;;C81A|C813+C813/C813\C813;
                      JSL HurtMario                             ;;C81C|C815+C815/C815\C815;
.onYoshi:             RTS                                       ;;C820|C819+C819/C819\C819;
                                                                ;;                        ;
ChuckGraphics:        JSR GetDrawInfo2                          ;;C821|C81A+C81A/C81A\C81A;
                      JSR ChuckHeadGFXRt                        ;;C824|C81D+C81D/C81D\C81D;
                      JSR ChuckBodyGFXRt                        ;;C827|C820+C820/C820\C820;
                      JSR ChuckAncillaryGFXRt                   ;;C82A|C823+C823/C823\C823; Clappin' chuck's clappin' hands, Pitchin' chuck's baseball, Chargin' Chucks shoulder tile
                      JSR ChuckDigginGFXRt                      ;;C82D|C826+C826/C826\C826;
                      LDY.B #$FF                                ;;C830|C829+C829/C829\C829;
CODE_02C82B:          LDA.B #$04                                ;;C832|C82B+C82B/C82B\C82B;
                      JMP CallFinOAMWriteBank2                  ;;C834|C82D+C82D/C82D\C82D;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C830:          db $F8,$F8,$F8,$00,$00,$FE,$00,$00        ;;C837|C830+C830/C830\C830;
                      db $FA,$00,$00,$00,$00,$00,$00,$FD        ;;C83F|C838+C838/C838\C838;
                      db $FD,$F9,$F6,$F6,$F8,$FE,$FC,$FA        ;;C847|C840+C840/C840\C840;
                      db $F8,$FA                                ;;C84F|C848+C848/C848\C848;
                                                                ;;                        ;
DATA_02C84A:          db $F8,$F9,$F7,$F8,$FC,$F8,$F4,$F5        ;;C851|C84A+C84A/C84A\C84A;
                      db $F5,$FC,$FD,$00,$F9,$F5,$F8,$FA        ;;C859|C852+C852/C852\C852;
                      db $F6,$F6,$F4,$F4,$F8,$F6,$F6,$F8        ;;C861|C85A+C85A/C85A\C85A;
                      db $F8,$F5                                ;;C869|C862+C862/C862\C862;
                                                                ;;                        ;
DATA_02C864:          db $08,$08,$08,$00,$00,$00,$08,$08        ;;C86B|C864+C864/C864\C864;
                      db $08,$00,$08,$08,$00,$00,$00,$00        ;;C873|C86C+C86C/C86C\C86C;
                      db $00,$08,$10,$10,$0C,$0C,$0C,$0C        ;;C87B|C874+C874/C874\C874;
                      db $0C,$0C                                ;;C883|C87C+C87C/C87C\C87C;
                                                                ;;                        ;
ChuckHeadTiles:       db $06,$0A,$0E,$0A,$06,$4B,$4B            ;;C885|C87E+C87E/C87E\C87E;
                                                                ;;                        ;
DATA_02C885:          db $40,$40,$00,$00,$00,$00,$40            ;;C88C|C885+C885/C885\C885;
                                                                ;;                        ;
ChuckHeadGFXRt:       STZ.B !_7                                 ;;C893|C88C+C88C/C88C\C88C;
                      LDY.W !SpriteMisc1602,X                   ;;C895|C88E+C88E/C88E\C88E;
                      STY.B !_4                                 ;;C898|C891+C891/C891\C891;
                      CPY.B #$09                                ;;C89A|C893+C893/C893\C893;
                      CLC                                       ;;C89C|C895+C895/C895\C895;
                      BNE +                                     ;;C89D|C896+C896/C896\C896;
                      LDA.W !SpriteMisc1540,X                   ;;C89F|C898+C898/C898\C898; Chuck body animation frame
                      SEC                                       ;;C8A2|C89B+C89B/C89B\C89B;
                      SBC.B #$20                                ;;C8A3|C89C+C89C/C89C\C89C;
                      BCC +                                     ;;C8A5|C89E+C89E/C89E\C89E;
                      PHA                                       ;;C8A7|C8A0+C8A0/C8A0\C8A0;
                      LSR A                                     ;;C8A8|C8A1+C8A1/C8A1\C8A1;
                      LSR A                                     ;;C8A9|C8A2+C8A2/C8A2\C8A2;
                      LSR A                                     ;;C8AA|C8A3+C8A3/C8A3\C8A3;
                      LSR A                                     ;;C8AB|C8A4+C8A4/C8A4\C8A4;
                      LSR A                                     ;;C8AC|C8A5+C8A5/C8A5\C8A5;
                      STA.B !_7                                 ;;C8AD|C8A6+C8A6/C8A6\C8A6;
                      PLA                                       ;;C8AF|C8A8+C8A8/C8A8\C8A8;
                      LSR A                                     ;;C8B0|C8A9+C8A9/C8A9\C8A9;
                      LSR A                                     ;;C8B1|C8AA+C8AA/C8AA\C8AA;
                    + LDA.B !_0                                 ;;C8B2|C8AB+C8AB/C8AB\C8AB;
                      ADC.B #$00                                ;;C8B4|C8AD+C8AD/C8AD\C8AD;
                      STA.B !_0                                 ;;C8B6|C8AF+C8AF/C8AF\C8AF;
                      LDA.W !SpriteMisc151C,X                   ;;C8B8|C8B1+C8B1/C8B1\C8B1;
                      STA.B !_2                                 ;;C8BB|C8B4+C8B4/C8B4\C8B4;
                      LDA.W !SpriteMisc157C,X                   ;;C8BD|C8B6+C8B6/C8B6\C8B6;
                      STA.B !_3                                 ;;C8C0|C8B9+C8B9/C8B9\C8B9;
                      LDA.W !SpriteOBJAttribute,X               ;;C8C2|C8BB+C8BB/C8BB\C8BB;
                      ORA.B !SpriteProperties                   ;;C8C5|C8BE+C8BE/C8BE\C8BE;
                      STA.B !_8                                 ;;C8C7|C8C0+C8C0/C8C0\C8C0;
                      LDA.W !SpriteOAMIndex,X                   ;;C8C9|C8C2+C8C2/C8C2\C8C2;
                      STA.B !_5                                 ;;C8CC|C8C5+C8C5/C8C5\C8C5;
                      CLC                                       ;;C8CE|C8C7+C8C7/C8C7\C8C7;
                      ADC.W DATA_02C864,Y                       ;;C8CF|C8C8+C8C8/C8C8\C8C8;
                      TAY                                       ;;C8D2|C8CB+C8CB/C8CB\C8CB;
                      LDX.B !_4                                 ;;C8D3|C8CC+C8CC/C8CC\C8CC;
                      %LorW_X(LDA,DATA_02C830)                  ;;C8D5|C8CE+C8CE/C8CE\C8CE;
                      LDX.B !_3                                 ;;C8D9|C8D1+C8D1/C8D1\C8D1;
                      BNE +                                     ;;C8DB|C8D3+C8D3/C8D3\C8D3;
                      EOR.B #$FF                                ;;C8DD|C8D5+C8D5/C8D5\C8D5;
                      INC A                                     ;;C8DF|C8D7+C8D7/C8D7\C8D7;
                    + CLC                                       ;;C8E0|C8D8+C8D8/C8D8\C8D8;
                      ADC.B !_0                                 ;;C8E1|C8D9+C8D9/C8D9\C8D9;
                      STA.W !OAMTileXPos+$100,Y                 ;;C8E3|C8DB+C8DB/C8DB\C8DB;
                      LDX.B !_4                                 ;;C8E6|C8DE+C8DE/C8DE\C8DE;
                      LDA.B !_1                                 ;;C8E8|C8E0+C8E0/C8E0\C8E0;
                      CLC                                       ;;C8EA|C8E2+C8E2/C8E2\C8E2;
                      %LorW_X(ADC,DATA_02C84A)                  ;;C8EB|C8E3+C8E3/C8E3\C8E3;
                      SEC                                       ;;C8EF|C8E6+C8E6/C8E6\C8E6;
                      SBC.B !_7                                 ;;C8F0|C8E7+C8E7/C8E7\C8E7;
                      STA.W !OAMTileYPos+$100,Y                 ;;C8F2|C8E9+C8E9/C8E9\C8E9;
                      LDX.B !_2                                 ;;C8F5|C8EC+C8EC/C8EC\C8EC;
                      %LorW_X(LDA,DATA_02C885)                  ;;C8F7|C8EE+C8EE/C8EE\C8EE;
                      ORA.B !_8                                 ;;C8FB|C8F1+C8F1/C8F1\C8F1;
                      STA.W !OAMTileAttr+$100,Y                 ;;C8FD|C8F3+C8F3/C8F3\C8F3;
                      %LorW_X(LDA,ChuckHeadTiles)               ;;C900|C8F6+C8F6/C8F6\C8F6;
                      STA.W !OAMTileNo+$100,Y                   ;;C904|C8F9+C8F9/C8F9\C8F9;
                      TYA                                       ;;C907|C8FC+C8FC/C8FC\C8FC;
                      LSR A                                     ;;C908|C8FD+C8FD/C8FD\C8FD;
                      LSR A                                     ;;C909|C8FE+C8FE/C8FE\C8FE;
                      TAY                                       ;;C90A|C8FF+C8FF/C8FF\C8FF;
                      LDA.B #$02                                ;;C90B|C900+C900/C900\C900;
                      STA.W !OAMTileSize+$40,Y                  ;;C90D|C902+C902/C902\C902;
                      LDX.W !CurSpriteProcess                   ;;C910|C905+C905/C905\C905; X = Sprite index
                      RTS                                       ;;C913|C908+C908/C908\C908; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02C909:          db $F8,$F8,$F8,$FC,$FC,$FC,$FC,$F8        ;;C914|C909+C909/C909\C909;
                      db $01,$FC,$FC,$FC,$FC,$FC,$FC,$FC        ;;C91C|C911+C911/C911\C911;
                      db $FC,$F8,$F8,$F8,$F8,$08,$06,$F8        ;;C924|C919+C919/C919\C919;
                      db $F8,$01,$10,$10,$10,$04,$04,$04        ;;C92C|C921+C921/C921\C921;
                      db $04,$08,$07,$04,$04,$04,$04,$04        ;;C934|C929+C929/C929\C929;
                      db $04,$04,$04,$10,$08,$08,$10,$00        ;;C93C|C931+C931/C931\C931;
                      db $02,$10,$10,$07                        ;;C944|C939+C939/C939\C939;
                                                                ;;                        ;
DATA_02C93D:          db $00,$00,$00,$04,$04,$04,$04,$08        ;;C948|C93D+C93D/C93D\C93D;
                      db $00,$04,$04,$04,$04,$04,$04,$04        ;;C950|C945+C945/C945\C945;
                      db $04,$00,$00,$00,$00,$00,$00,$00        ;;C958|C94D+C94D/C94D\C94D;
                      db $00,$00,$00,$00,$00,$FC,$FC,$FC        ;;C960|C955+C955/C955\C955;
                      db $FC,$F8,$00,$FC,$FC,$FC,$FC,$FC        ;;C968|C95D+C95D/C95D\C95D;
                      db $FC,$FC,$FC,$00,$00,$00,$00,$00        ;;C970|C965+C965/C965\C965;
                      db $00,$00,$00,$00                        ;;C978|C96D+C96D/C96D\C96D;
                                                                ;;                        ;
DATA_02C971:          db $06,$06,$06,$00,$00,$00,$00,$00        ;;C97C|C971+C971/C971\C971;
                      db $F8,$00,$00,$00,$00,$00,$00,$00        ;;C984|C979+C979/C979\C979;
                      db $00,$03,$00,$00,$06,$F8,$F8,$00        ;;C98C|C981+C981/C981\C981;
                      db $00,$F8                                ;;C994|C989+C989/C989\C989;
                                                                ;;                        ;
ChuckBody1:           db $0D,$34,$35,$26,$2D,$28,$40,$42        ;;C996|C98B+C98B/C98B\C98B;
                      db $5D,$2D,$64,$64,$64,$64,$E7,$28        ;;C99E|C993+C993/C993\C993;
                      db $82,$CB,$23,$20,$0D,$0C,$5D,$BD        ;;C9A6|C99B+C99B/C99B\C99B;
                      db $BD,$5D                                ;;C9AE|C9A3+C9A3/C9A3\C9A3;
                                                                ;;                        ;
ChuckBody2:           db $4E,$0C,$22,$26,$2D,$29,$40,$42        ;;C9B0|C9A5+C9A5/C9A5\C9A5;
                      db $AE,$2D,$64,$64,$64,$64,$E8,$29        ;;C9B8|C9AD+C9AD/C9AD\C9AD;
                      db $83,$CC,$24,$21,$4E,$A0,$A0,$A2        ;;C9C0|C9B5+C9B5/C9B5\C9B5;
                      db $A4,$AE                                ;;C9C8|C9BD+C9BD/C9BD\C9BD;
                                                                ;;                        ;
DATA_02C9BF:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;C9CA|C9BF+C9BF/C9BF\C9BF;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;C9D2|C9C7+C9C7/C9C7\C9C7;
                      db $00,$00,$00,$00,$00,$40,$00,$00        ;;C9DA|C9CF+C9CF/C9CF\C9CF;
                      db $00,$00                                ;;C9E2|C9D7+C9D7/C9D7\C9D7;
                                                                ;;                        ;
DATA_02C9D9:          db $00,$00,$00,$40,$40,$00,$40,$40        ;;C9E4|C9D9+C9D9/C9D9\C9D9;
                      db $00,$40,$40,$40,$40,$40,$00,$00        ;;C9EC|C9E1+C9E1/C9E1\C9E1;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;C9F4|C9E9+C9E9/C9E9\C9E9;
                      db $00,$00                                ;;C9FC|C9F1+C9F1/C9F1\C9F1;
                                                                ;;                        ;
DATA_02C9F3:          db $00,$00,$00,$02,$02,$02,$02,$02        ;;C9FE|C9F3+C9F3/C9F3\C9F3;
                      db $00,$02,$02,$02,$02,$02,$02,$02        ;;CA06|C9FB+C9FB/C9FB\C9FB;
                      db $02,$00,$02,$02,$00,$00,$00,$00        ;;CA0E|CA03+CA03/CA03\CA03;
                      db $00,$00                                ;;CA16|CA0B+CA0B/CA0B\CA0B;
                                                                ;;                        ;
DATA_02CA0D:          db $00,$00,$00,$04,$04,$04,$0C,$0C        ;;CA18|CA0D+CA0D/CA0D\CA0D;
                      db $00,$08,$00,$00,$04,$04,$04,$04        ;;CA20|CA15+CA15/CA15\CA15;
                      db $04,$00,$08,$08,$00,$00,$00,$00        ;;CA28|CA1D+CA1D/CA1D\CA1D;
                      db $00,$00                                ;;CA30|CA25+CA25/CA25\CA25;
                                                                ;;                        ;
ChuckBodyGFXRt:       STZ.B !_6                                 ;;CA32|CA27+CA27/CA27\CA27;
                      LDA.B !_4                                 ;;CA34|CA29+CA29/CA29\CA29;
                      LDY.B !_3                                 ;;CA36|CA2B+CA2B/CA2B\CA2B;
                      BNE +                                     ;;CA38|CA2D+CA2D/CA2D\CA2D;
                      CLC                                       ;;CA3A|CA2F+CA2F/CA2F\CA2F;
                      ADC.B #$1A                                ;;CA3B|CA30+CA30/CA30\CA30;
                      LDX.B #$40                                ;;CA3D|CA32+CA32/CA32\CA32;
                      STX.B !_6                                 ;;CA3F|CA34+CA34/CA34\CA34;
                    + TAX                                       ;;CA41|CA36+CA36/CA36\CA36;
                      LDY.B !_4                                 ;;CA42|CA37+CA37/CA37\CA37;
                      LDA.W DATA_02CA0D,Y                       ;;CA44|CA39+CA39/CA39\CA39;
                      CLC                                       ;;CA47|CA3C+CA3C/CA3C\CA3C;
                      ADC.B !_5                                 ;;CA48|CA3D+CA3D/CA3D\CA3D;
                      TAY                                       ;;CA4A|CA3F+CA3F/CA3F\CA3F;
                      LDA.B !_0                                 ;;CA4B|CA40+CA40/CA40\CA40;
                      CLC                                       ;;CA4D|CA42+CA42/CA42\CA42;
                      %LorW_X(ADC,DATA_02C909)                  ;;CA4E|CA43+CA43/CA43\CA43;
                      STA.W !OAMTileXPos+$100,Y                 ;;CA52|CA46+CA46/CA46\CA46;
                      LDA.B !_0                                 ;;CA55|CA49+CA49/CA49\CA49;
                      CLC                                       ;;CA57|CA4B+CA4B/CA4B\CA4B;
                      %LorW_X(ADC,DATA_02C93D)                  ;;CA58|CA4C+CA4C/CA4C\CA4C;
                      STA.W !OAMTileXPos+$104,Y                 ;;CA5C|CA4F+CA4F/CA4F\CA4F;
                      LDX.B !_4                                 ;;CA5F|CA52+CA52/CA52\CA52;
                      LDA.B !_1                                 ;;CA61|CA54+CA54/CA54\CA54;
                      CLC                                       ;;CA63|CA56+CA56/CA56\CA56;
                      %LorW_X(ADC,DATA_02C971)                  ;;CA64|CA57+CA57/CA57\CA57;
                      STA.W !OAMTileYPos+$100,Y                 ;;CA68|CA5A+CA5A/CA5A\CA5A;
                      LDA.B !_1                                 ;;CA6B|CA5D+CA5D/CA5D\CA5D;
                      STA.W !OAMTileYPos+$104,Y                 ;;CA6D|CA5F+CA5F/CA5F\CA5F;
                      %LorW_X(LDA,ChuckBody1)                   ;;CA70|CA62+CA62/CA62\CA62;
                      STA.W !OAMTileNo+$100,Y                   ;;CA74|CA65+CA65/CA65\CA65;
                      %LorW_X(LDA,ChuckBody2)                   ;;CA77|CA68+CA68/CA68\CA68;
                      STA.W !OAMTileNo+$104,Y                   ;;CA7B|CA6B+CA6B/CA6B\CA6B;
                      LDA.B !_8                                 ;;CA7E|CA6E+CA6E/CA6E\CA6E;
                      ORA.B !_6                                 ;;CA80|CA70+CA70/CA70\CA70;
                      PHA                                       ;;CA82|CA72+CA72/CA72\CA72;
                      %LorW_X(EOR,DATA_02C9BF)                  ;;CA83|CA73+CA73/CA73\CA73;
                      STA.W !OAMTileAttr+$100,Y                 ;;CA87|CA76+CA76/CA76\CA76;
                      PLA                                       ;;CA8A|CA79+CA79/CA79\CA79;
                      %LorW_X(EOR,DATA_02C9D9)                  ;;CA8B|CA7A+CA7A/CA7A\CA7A;
                      STA.W !OAMTileAttr+$104,Y                 ;;CA8F|CA7D+CA7D/CA7D\CA7D;
                      TYA                                       ;;CA92|CA80+CA80/CA80\CA80;
                      LSR A                                     ;;CA93|CA81+CA81/CA81\CA81;
                      LSR A                                     ;;CA94|CA82+CA82/CA82\CA82;
                      TAY                                       ;;CA95|CA83+CA83/CA83\CA83;
                      %LorW_X(LDA,DATA_02C9F3)                  ;;CA96|CA84+CA84/CA84\CA84;
                      STA.W !OAMTileSize+$40,Y                  ;;CA9A|CA87+CA87/CA87\CA87;
                      LDA.B #$02                                ;;CA9D|CA8A+CA8A/CA8A\CA8A;
                      STA.W !OAMTileSize+$41,Y                  ;;CA9F|CA8C+CA8C/CA8C\CA8C;
                      LDX.W !CurSpriteProcess                   ;;CAA2|CA8F+CA8F/CA8F\CA8F; X = Sprite index
                      RTS                                       ;;CAA5|CA92+CA92/CA92\CA92; Return
                                                                ;;                        ;
                                                                ;;                        ;
ClappinHandsXOff1:    db $FA,$00                                ;;CAA6|CA93+CA93/CA93\CA93;
                                                                ;;                        ;
ClappinHandsXOff2:    db $0E,$00                                ;;CAA8|CA95+CA95/CA95\CA95;
                                                                ;;                        ;
ClappinHandsTiles:    db $0C,$44                                ;;CAAA|CA97+CA97/CA97\CA97;
                                                                ;;                        ;
ClappinHandsYOff:     db $F8,$F0                                ;;CAAC|CA99+CA99/CA99\CA99;
                                                                ;;                        ;
ClappinHandsTileSize: db $00,$02                                ;;CAAE|CA9B+CA9B/CA9B\CA9B;
                                                                ;;                        ;
ChuckAncillaryGFXRt:  LDA.B !_4                                 ;;CAB0|CA9D+CA9D/CA9D\CA9D;
                      CMP.B #$14                                ;;CAB2|CA9F+CA9F/CA9F\CA9F;
                      BCC ChuckDrawClapHands                    ;;CAB4|CAA1+CAA1/CAA1\CAA1;
                      JMP ChuckDrawBaseball                     ;;CAB6|CAA3+CAA3/CAA3\CAA3;
                                                                ;;                        ;
ChuckDrawClapHands:   CMP.B #$12                                ;;CAB9|CAA6+CAA6/CAA6\CAA6;
                      BEQ ChuckDrawShoulder                     ;;CABB|CAA8+CAA8/CAA8\CAA8;
                      CMP.B #$13                                ;;CABD|CAAA+CAAA/CAAA\CAAA;
                      BEQ ChuckDrawShoulder                     ;;CABF|CAAC+CAAC/CAAC\CAAC;
                      SEC                                       ;;CAC1|CAAE+CAAE/CAAE\CAAE;
                      SBC.B #$06                                ;;CAC2|CAAF+CAAF/CAAF\CAAF;
                      CMP.B #$02                                ;;CAC4|CAB1+CAB1/CAB1\CAB1;
                      BCS .noDrawClappinHands                   ;;CAC6|CAB3+CAB3/CAB3\CAB3;
                      TAX                                       ;;CAC8|CAB5+CAB5/CAB5\CAB5;
                      LDY.B !_5                                 ;;CAC9|CAB6+CAB6/CAB6\CAB6;
                      LDA.B !_0                                 ;;CACB|CAB8+CAB8/CAB8\CAB8;
                      CLC                                       ;;CACD|CABA+CABA/CABA\CABA;
                      %LorW_X(ADC,ClappinHandsXOff1)            ;;CACE|CABB+CABB/CABB\CABB;
                      STA.W !OAMTileXPos+$100,Y                 ;;CAD2|CABE+CABE/CABE\CABE;
                      LDA.B !_0                                 ;;CAD5|CAC1+CAC1/CAC1\CAC1;
                      CLC                                       ;;CAD7|CAC3+CAC3/CAC3\CAC3;
                      %LorW_X(ADC,ClappinHandsXOff2)            ;;CAD8|CAC4+CAC4/CAC4\CAC4;
                      STA.W !OAMTileXPos+$104,Y                 ;;CADC|CAC7+CAC7/CAC7\CAC7;
                      LDA.B !_1                                 ;;CADF|CACA+CACA/CACA\CACA;
                      CLC                                       ;;CAE1|CACC+CACC/CACC\CACC;
                      %LorW_X(ADC,ClappinHandsYOff)             ;;CAE2|CACD+CACD/CACD\CACD;
                      STA.W !OAMTileYPos+$100,Y                 ;;CAE6|CAD0+CAD0/CAD0\CAD0;
                      STA.W !OAMTileYPos+$104,Y                 ;;CAE9|CAD3+CAD3/CAD3\CAD3;
                      %LorW_X(LDA,ClappinHandsTiles)            ;;CAEC|CAD6+CAD6/CAD6\CAD6;
                      STA.W !OAMTileNo+$100,Y                   ;;CAF0|CAD9+CAD9/CAD9\CAD9;
                      STA.W !OAMTileNo+$104,Y                   ;;CAF3|CADC+CADC/CADC\CADC;
                      LDA.B !_8                                 ;;CAF6|CADF+CADF/CADF\CADF;
                      STA.W !OAMTileAttr+$100,Y                 ;;CAF8|CAE1+CAE1/CAE1\CAE1;
                      ORA.B #$40                                ;;CAFB|CAE4+CAE4/CAE4\CAE4;
                      STA.W !OAMTileAttr+$104,Y                 ;;CAFD|CAE6+CAE6/CAE6\CAE6;
                      TYA                                       ;;CB00|CAE9+CAE9/CAE9\CAE9;
                      LSR A                                     ;;CB01|CAEA+CAEA/CAEA\CAEA;
                      LSR A                                     ;;CB02|CAEB+CAEB/CAEB\CAEB;
                      TAY                                       ;;CB03|CAEC+CAEC/CAEC\CAEC;
                      %LorW_X(LDA,ClappinHandsTileSize)         ;;CB04|CAED+CAED/CAED\CAED;
                      STA.W !OAMTileSize+$40,Y                  ;;CB08|CAF0+CAF0/CAF0\CAF0;
                      STA.W !OAMTileSize+$41,Y                  ;;CB0B|CAF3+CAF3/CAF3\CAF3;
                      LDX.W !CurSpriteProcess                   ;;CB0E|CAF6+CAF6/CAF6\CAF6; X = Sprite index
.noDrawClappinHands:  RTS                                       ;;CB11|CAF9+CAF9/CAF9\CAF9; Return
                                                                ;;                        ;
                                                                ;;                        ;
ChuckShoulderProps:   db $47,$07                                ;;CB12|CAFA+CAFA/CAFA\CAFA;
                                                                ;;                        ;
ChuckDrawShoulder:    LDY.B !_5                                 ;;CB14|CAFC+CAFC/CAFC\CAFC;
                      LDA.W !SpriteMisc157C,X                   ;;CB16|CAFE+CAFE/CAFE\CAFE;
                      PHX                                       ;;CB19|CB01+CB01/CB01\CB01;
                      TAX                                       ;;CB1A|CB02+CB02/CB02\CB02;
                      ASL A                                     ;;CB1B|CB03+CB03/CB03\CB03;
                      ASL A                                     ;;CB1C|CB04+CB04/CB04\CB04;
                      ASL A                                     ;;CB1D|CB05+CB05/CB05\CB05;
                      PHA                                       ;;CB1E|CB06+CB06/CB06\CB06;
                      EOR.B #$08                                ;;CB1F|CB07+CB07/CB07\CB07;
                      CLC                                       ;;CB21|CB09+CB09/CB09\CB09;
                      ADC.B !_0                                 ;;CB22|CB0A+CB0A/CB0A\CB0A;
                      STA.W !OAMTileXPos+$100,Y                 ;;CB24|CB0C+CB0C/CB0C\CB0C;
                      PLA                                       ;;CB27|CB0F+CB0F/CB0F\CB0F;
                      CLC                                       ;;CB28|CB10+CB10/CB10\CB10;
                      ADC.B !_0                                 ;;CB29|CB11+CB11/CB11\CB11;
                      STA.W !OAMTileXPos+$104,Y                 ;;CB2B|CB13+CB13/CB13\CB13;
                      LDA.B #$1C                                ;;CB2E|CB16+CB16/CB16\CB16;
                      STA.W !OAMTileNo+$100,Y                   ;;CB30|CB18+CB18/CB18\CB18;
                      INC A                                     ;;CB33|CB1B+CB1B/CB1B\CB1B;
                      STA.W !OAMTileNo+$104,Y                   ;;CB34|CB1C+CB1C/CB1C\CB1C;
                      LDA.B !_1                                 ;;CB37|CB1F+CB1F/CB1F\CB1F;
                      SEC                                       ;;CB39|CB21+CB21/CB21\CB21;
                      SBC.B #$08                                ;;CB3A|CB22+CB22/CB22\CB22;
                      STA.W !OAMTileYPos+$100,Y                 ;;CB3C|CB24+CB24/CB24\CB24;
                      STA.W !OAMTileYPos+$104,Y                 ;;CB3F|CB27+CB27/CB27\CB27;
                      LDA.W ChuckShoulderProps,X                ;;CB42|CB2A+CB2A/CB2A\CB2A;
                      ORA.B !SpriteProperties                   ;;CB45|CB2D+CB2D/CB2D\CB2D;
                      STA.W !OAMTileAttr+$100,Y                 ;;CB47|CB2F+CB2F/CB2F\CB2F;
                      STA.W !OAMTileAttr+$104,Y                 ;;CB4A|CB32+CB32/CB32\CB32;
                      TYA                                       ;;CB4D|CB35+CB35/CB35\CB35;
                      LSR A                                     ;;CB4E|CB36+CB36/CB36\CB36;
                      LSR A                                     ;;CB4F|CB37+CB37/CB37\CB37;
                      TAX                                       ;;CB50|CB38+CB38/CB38\CB38;
                      STZ.W !OAMTileSize+$40,X                  ;;CB51|CB39+CB39/CB39\CB39;
                      STZ.W !OAMTileSize+$41,X                  ;;CB54|CB3C+CB3C/CB3C\CB3C;
                      PLX                                       ;;CB57|CB3F+CB3F/CB3F\CB3F;
                      RTS                                       ;;CB58|CB40+CB40/CB40\CB40; Return
                                                                ;;                        ;
                                                                ;;                        ;
ChuckBaseballYXOffs:  db $FA,$0A,$06,$00,$00,$01,$0E,$FE        ;;CB59|CB41+CB41/CB41\CB41; \ TODO this is actually two tables, an X-off
                      db $02,$00,$00,$09,$08,$F4,$F4,$00        ;;CB61|CB49+CB49/CB49\CB49; | table and a Y-off table.
                      db $00,$F4                                ;;CB69|CB51+CB51/CB51\CB51; /
                                                                ;;                        ;
ChuckDrawBaseball:    PHX                                       ;;CB6B|CB53+CB53/CB53\CB53;
                      STA.B !_2                                 ;;CB6C|CB54+CB54/CB54\CB54;
                      LDY.W !SpriteMisc157C,X                   ;;CB6E|CB56+CB56/CB56\CB56;
                      BNE +                                     ;;CB71|CB59+CB59/CB59\CB59;
                      CLC                                       ;;CB73|CB5B+CB5B/CB5B\CB5B;
                      ADC.B #$06                                ;;CB74|CB5C+CB5C/CB5C\CB5C;
                    + TAX                                       ;;CB76|CB5E+CB5E/CB5E\CB5E;
                      LDA.B !_5                                 ;;CB77|CB5F+CB5F/CB5F\CB5F;
                      CLC                                       ;;CB79|CB61+CB61/CB61\CB61;
                      ADC.B #$08                                ;;CB7A|CB62+CB62/CB62\CB62;
                      TAY                                       ;;CB7C|CB64+CB64/CB64\CB64;
                      LDA.B !_0                                 ;;CB7D|CB65+CB65/CB65\CB65;
                      CLC                                       ;;CB7F|CB67+CB67/CB67\CB67;
                      ADC.W ChuckBaseballYXOffs-$14,X           ;;CB80|CB68+CB68/CB68\CB68;
                      STA.W !OAMTileXPos+$100,Y                 ;;CB83|CB6B+CB6B/CB6B\CB6B;
                      LDX.B !_2                                 ;;CB86|CB6E+CB6E/CB6E\CB6E;
                      LDA.W ChuckBaseballYXOffs-$08,X           ;;CB88|CB70+CB70/CB70\CB70;
                      BEQ .noDrawBaseball                       ;;CB8B|CB73+CB73/CB73\CB73;
                      CLC                                       ;;CB8D|CB75+CB75/CB75\CB75;
                      ADC.B !_1                                 ;;CB8E|CB76+CB76/CB76\CB76;
                      STA.W !OAMTileYPos+$100,Y                 ;;CB90|CB78+CB78/CB78\CB78;
                      LDA.B #$AD                                ;;CB93|CB7B+CB7B/CB7B\CB7B;
                      STA.W !OAMTileNo+$100,Y                   ;;CB95|CB7D+CB7D/CB7D\CB7D;
                      LDA.B #$09                                ;;CB98|CB80+CB80/CB80\CB80;
                      ORA.B !SpriteProperties                   ;;CB9A|CB82+CB82/CB82\CB82;
                      STA.W !OAMTileAttr+$100,Y                 ;;CB9C|CB84+CB84/CB84\CB84;
                      TYA                                       ;;CB9F|CB87+CB87/CB87\CB87;
                      LSR A                                     ;;CBA0|CB88+CB88/CB88\CB88;
                      LSR A                                     ;;CBA1|CB89+CB89/CB89\CB89;
                      TAX                                       ;;CBA2|CB8A+CB8A/CB8A\CB8A;
                      STZ.W !OAMTileSize+$40,X                  ;;CBA3|CB8B+CB8B/CB8B\CB8B;
.noDrawBaseball       PLX                                       ;;CBA6|CB8E+CB8E/CB8E\CB8E;
                      RTS                                       ;;CBA7|CB8F+CB8F/CB8F\CB8F; Return
                                                                ;;                        ;
                                                                ;;                        ;
DigChuckTileDispX:    db $FC,$04,$10,$F0,$12,$EE                ;;CBA8|CB90+CB90/CB90\CB90;
                                                                ;;                        ;
DigChuckTileProp:     db $47,$07                                ;;CBAE|CB96+CB96/CB96\CB96;
                                                                ;;                        ;
DigChuckTileDispY:    db $F8,$00,$F8                            ;;CBB0|CB98+CB98/CB98\CB98;
                                                                ;;                        ;
DigChuckTiles:        db $CA,$E2,$A0                            ;;CBB3|CB9B+CB9B/CB9B\CB9B;
                                                                ;;                        ;
DigChuckTileSize:     db $00,$02,$02                            ;;CBB6|CB9E+CB9E/CB9E\CB9E;
                                                                ;;                        ;
ChuckDigginGFXRt:     LDA.B !SpriteNumber,X                     ;;CBB9|CBA1+CBA1/CBA1\CBA1;
                      CMP.B #$46                                ;;CBBB|CBA3+CBA3/CBA3\CBA3;
                      BNE Return02CBFB                          ;;CBBD|CBA5+CBA5/CBA5\CBA5;
                      LDA.W !SpriteMisc1602,X                   ;;CBBF|CBA7+CBA7/CBA7\CBA7;
                      CMP.B #$05                                ;;CBC2|CBAA+CBAA/CBAA\CBAA;
                      BNE CODE_02CBB2                           ;;CBC4|CBAC+CBAC/CBAC\CBAC;
                      LDA.B #$01                                ;;CBC6|CBAE+CBAE/CBAE\CBAE;
                      BRA CODE_02CBB9                           ;;CBC8|CBB0+CBB0/CBB0\CBB0;
                                                                ;;                        ;
CODE_02CBB2:          CMP.B #$0E                                ;;CBCA|CBB2+CBB2/CBB2\CBB2;
                      BCC Return02CBFB                          ;;CBCC|CBB4+CBB4/CBB4\CBB4;
                      SEC                                       ;;CBCE|CBB6+CBB6/CBB6\CBB6;
                      SBC.B #$0E                                ;;CBCF|CBB7+CBB7/CBB7\CBB7;
CODE_02CBB9:          STA.B !_2                                 ;;CBD1|CBB9+CBB9/CBB9\CBB9;
                      LDA.W !SpriteOAMIndex,X                   ;;CBD3|CBBB+CBBB/CBBB\CBBB;
                      CLC                                       ;;CBD6|CBBE+CBBE/CBBE\CBBE;
                      ADC.B #$0C                                ;;CBD7|CBBF+CBBF/CBBF\CBBF;
                      TAY                                       ;;CBD9|CBC1+CBC1/CBC1\CBC1;
                      PHX                                       ;;CBDA|CBC2+CBC2/CBC2\CBC2;
                      LDA.B !_2                                 ;;CBDB|CBC3+CBC3/CBC3\CBC3;
                      ASL A                                     ;;CBDD|CBC5+CBC5/CBC5\CBC5;
                      ORA.W !SpriteMisc157C,X                   ;;CBDE|CBC6+CBC6/CBC6\CBC6;
                      TAX                                       ;;CBE1|CBC9+CBC9/CBC9\CBC9;
                      LDA.B !_0                                 ;;CBE2|CBCA+CBCA/CBCA\CBCA;
                      CLC                                       ;;CBE4|CBCC+CBCC/CBCC\CBCC;
                      ADC.W DigChuckTileDispX,X                 ;;CBE5|CBCD+CBCD/CBCD\CBCD;
                      STA.W !OAMTileXPos+$100,Y                 ;;CBE8|CBD0+CBD0/CBD0\CBD0;
                      TXA                                       ;;CBEB|CBD3+CBD3/CBD3\CBD3;
                      AND.B #$01                                ;;CBEC|CBD4+CBD4/CBD4\CBD4;
                      TAX                                       ;;CBEE|CBD6+CBD6/CBD6\CBD6;
                      LDA.W DigChuckTileProp,X                  ;;CBEF|CBD7+CBD7/CBD7\CBD7;
                      ORA.B !SpriteProperties                   ;;CBF2|CBDA+CBDA/CBDA\CBDA;
                      STA.W !OAMTileAttr+$100,Y                 ;;CBF4|CBDC+CBDC/CBDC\CBDC;
                      LDX.B !_2                                 ;;CBF7|CBDF+CBDF/CBDF\CBDF;
                      LDA.B !_1                                 ;;CBF9|CBE1+CBE1/CBE1\CBE1;
                      CLC                                       ;;CBFB|CBE3+CBE3/CBE3\CBE3;
                      ADC.W DigChuckTileDispY,X                 ;;CBFC|CBE4+CBE4/CBE4\CBE4;
                      STA.W !OAMTileYPos+$100,Y                 ;;CBFF|CBE7+CBE7/CBE7\CBE7;
                      LDA.W DigChuckTiles,X                     ;;CC02|CBEA+CBEA/CBEA\CBEA;
                      STA.W !OAMTileNo+$100,Y                   ;;CC05|CBED+CBED/CBED\CBED;
                      TYA                                       ;;CC08|CBF0+CBF0/CBF0\CBF0;
                      LSR A                                     ;;CC09|CBF1+CBF1/CBF1\CBF1;
                      LSR A                                     ;;CC0A|CBF2+CBF2/CBF2\CBF2;
                      TAY                                       ;;CC0B|CBF3+CBF3/CBF3\CBF3;
                      LDA.W DigChuckTileSize,X                  ;;CC0C|CBF4+CBF4/CBF4\CBF4;
                      STA.W !OAMTileSize+$40,Y                  ;;CC0F|CBF7+CBF7/CBF7\CBF7;
                      PLX                                       ;;CC12|CBFA+CBFA/CBFA\CBFA;
Return02CBFB:         RTS                                       ;;CC13|CBFB+CBFB/CBFB\CBFB; Return
                                                                ;;                        ;
                      RTS                                       ;;CC14|CBFC+CBFC/CBFC\CBFC; Return
                                                                ;;                        ;
Return02CBFD:         RTL                                       ;;CC15|CBFD+CBFD/CBFD\CBFD; Return
                                                                ;;                        ;
WingedCageMain:       LDA.B !SpriteLock                         ;;CC16|CBFE+CBFE/CBFE\CBFE; \ If sprites not locked,
                      BNE +                                     ;;CC18|CC00+CC00/CC00\CC00;  | increment sprite frame counter
                      INC.W !SpriteMisc1570,X                   ;;CC1A|CC02+CC02/CC02\CC02; /
                    + JSR ADDR_02CCB9                           ;;CC1D|CC05+CC05/CC05\CC05;
                      PHX                                       ;;CC20|CC08+CC08/CC08\CC08;
                      JSL ADDR_00FF32                           ;;CC21|CC09+CC09/CC09\CC09;
                      PLX                                       ;;CC25|CC0D+CC0D/CC0D\CC0D;
                      LDA.B !SpriteXPosLow,X                    ;;CC26|CC0E+CC0E/CC0E\CC0E;
                      CLC                                       ;;CC28|CC10+CC10/CC10\CC10;
                      ADC.W !Layer1DXPos                        ;;CC29|CC11+CC11/CC11\CC11;
                      STA.B !SpriteXPosLow,X                    ;;CC2C|CC14+CC14/CC14\CC14;
                      LDA.W !SpriteXPosHigh,X                   ;;CC2E|CC16+CC16/CC16\CC16;
                      ADC.B #$00                                ;;CC31|CC19+CC19/CC19\CC19;
                      STA.W !SpriteXPosHigh,X                   ;;CC33|CC1B+CC1B/CC1B\CC1B;
                      LDA.B !PlayerAnimation                    ;;CC36|CC1E+CC1E/CC1E\CC1E; \ Return if Mario animation sequence active
                      CMP.B #$01                                ;;CC38|CC20+CC20/CC20\CC20;  |
                      BCS Return02CBFD                          ;;CC3A|CC22+CC22/CC22\CC22; /
                      LDA.W !StandingOnCage                     ;;CC3C|CC24+CC24/CC24\CC24;
                      BEQ +                                     ;;CC3F|CC27+CC27/CC27\CC27;
                      JSL ADDR_00FF07                           ;;CC41|CC29+CC29/CC29\CC29;
                    + LDY.B #$00                                ;;CC45|CC2D+CC2D/CC2D\CC2D;
                      LDA.W !Layer1DYPos                        ;;CC47|CC2F+CC2F/CC2F\CC2F;
                      BPL +                                     ;;CC4A|CC32+CC32/CC32\CC32;
                      DEY                                       ;;CC4C|CC34+CC34/CC34\CC34;
                    + CLC                                       ;;CC4D|CC35+CC35/CC35\CC35;
                      ADC.B !SpriteYPosLow,X                    ;;CC4E|CC36+CC36/CC36\CC36;
                      STA.B !SpriteYPosLow,X                    ;;CC50|CC38+CC38/CC38\CC38;
                      TYA                                       ;;CC52|CC3A+CC3A/CC3A\CC3A;
                      ADC.W !SpriteYPosHigh,X                   ;;CC53|CC3B+CC3B/CC3B\CC3B;
                      STA.W !SpriteYPosHigh,X                   ;;CC56|CC3E+CC3E/CC3E\CC3E;
                      LDA.B !SpriteXPosLow,X                    ;;CC59|CC41+CC41/CC41\CC41; \ $00 = Sprite X position
                      STA.B !_0                                 ;;CC5B|CC43+CC43/CC43\CC43;  |
                      LDA.W !SpriteXPosHigh,X                   ;;CC5D|CC45+CC45/CC45\CC45;  |
                      STA.B !_1                                 ;;CC60|CC48+CC48/CC48\CC48; /
                      LDA.B !SpriteYPosLow,X                    ;;CC62|CC4A+CC4A/CC4A\CC4A; \ $02 = Sprite Y position
                      STA.B !_2                                 ;;CC64|CC4C+CC4C/CC4C\CC4C;  |
                      LDA.W !SpriteYPosHigh,X                   ;;CC66|CC4E+CC4E/CC4E\CC4E;  |
                      STA.B !_3                                 ;;CC69|CC51+CC51/CC51\CC51; /
                      REP #$20                                  ;;CC6B|CC53+CC53/CC53\CC53; Accum (16 bit)
                      LDA.B !_0                                 ;;CC6D|CC55+CC55/CC55\CC55;
                      LDY.B !PlayerXSpeed                       ;;CC6F|CC57+CC57/CC57\CC57;
                      DEY                                       ;;CC71|CC59+CC59/CC59\CC59;
                      BPL ADDR_02CC6C                           ;;CC72|CC5A+CC5A/CC5A\CC5A;
                      CLC                                       ;;CC74|CC5C+CC5C/CC5C\CC5C;
                      ADC.W #$0000                              ;;CC75|CC5D+CC5D/CC5D\CC5D;
                      CMP.B !PlayerXPosNext                     ;;CC78|CC60+CC60/CC60\CC60;
                      BCC +                                     ;;CC7A|CC62+CC62/CC62\CC62;
                      STA.B !PlayerXPosNext                     ;;CC7C|CC64+CC64/CC64\CC64;
                      LDY.B #$00                                ;;CC7E|CC66+CC66/CC66\CC66; \ Mario's X speed = 0
                      STY.B !PlayerXSpeed                       ;;CC80|CC68+CC68/CC68\CC68; /
                      BRA +                                     ;;CC82|CC6A+CC6A/CC6A\CC6A;
                                                                ;;                        ;
ADDR_02CC6C:          CLC                                       ;;CC84|CC6C+CC6C/CC6C\CC6C;
                      ADC.W #$0090                              ;;CC85|CC6D+CC6D/CC6D\CC6D;
                      CMP.B !PlayerXPosNext                     ;;CC88|CC70+CC70/CC70\CC70;
                      BCS +                                     ;;CC8A|CC72+CC72/CC72\CC72;
                      LDA.B !_0                                 ;;CC8C|CC74+CC74/CC74\CC74;
                      ADC.W #$0091                              ;;CC8E|CC76+CC76/CC76\CC76;
                      STA.B !PlayerXPosNext                     ;;CC91|CC79+CC79/CC79\CC79;
                      LDY.B #$00                                ;;CC93|CC7B+CC7B/CC7B\CC7B;
                      STY.B !PlayerXSpeed                       ;;CC95|CC7D+CC7D/CC7D\CC7D;
                    + LDA.B !_2                                 ;;CC97|CC7F+CC7F/CC7F\CC7F;
                      LDY.B !PlayerYSpeed                       ;;CC99|CC81+CC81/CC81\CC81;
                      BPL ADDR_02CC93                           ;;CC9B|CC83+CC83/CC83\CC83;
                      CLC                                       ;;CC9D|CC85+CC85/CC85\CC85;
                      ADC.W #$0020                              ;;CC9E|CC86+CC86/CC86\CC86;
                      CMP.B !PlayerYPosNext                     ;;CCA1|CC89+CC89/CC89\CC89;
                      BCC +                                     ;;CCA3|CC8B+CC8B/CC8B\CC8B;
                      LDY.B #$00                                ;;CCA5|CC8D+CC8D/CC8D\CC8D;
                      STY.B !PlayerYSpeed                       ;;CCA7|CC8F+CC8F/CC8F\CC8F;
                      BRA +                                     ;;CCA9|CC91+CC91/CC91\CC91;
                                                                ;;                        ;
ADDR_02CC93:          CLC                                       ;;CCAB|CC93+CC93/CC93\CC93;
                      ADC.W #$0060                              ;;CCAC|CC94+CC94/CC94\CC94;
                      CMP.B !PlayerYPosNext                     ;;CCAF|CC97+CC97/CC97\CC97;
                      BCS +                                     ;;CCB1|CC99+CC99/CC99\CC99;
                      LDA.B !_2                                 ;;CCB3|CC9B+CC9B/CC9B\CC9B;
                      ADC.W #$0061                              ;;CCB5|CC9D+CC9D/CC9D\CC9D;
                      STA.B !PlayerYPosNext                     ;;CCB8|CCA0+CCA0/CCA0\CCA0;
                      LDY.B #$00                                ;;CCBA|CCA2+CCA2/CCA2\CCA2;
                      STY.B !PlayerYSpeed                       ;;CCBC|CCA4+CCA4/CCA4\CCA4;
                      LDY.B #$01                                ;;CCBE|CCA6+CCA6/CCA6\CCA6;
                      STY.W !StandOnSolidSprite                 ;;CCC0|CCA8+CCA8/CCA8\CCA8;
                      STY.W !StandingOnCage                     ;;CCC3|CCAB+CCAB/CCAB\CCAB;
                    + SEP #$20                                  ;;CCC6|CCAE+CCAE/CCAE\CCAE; Accum (8 bit)
                      RTL                                       ;;CCC8|CCB0+CCB0/CCB0\CCB0; Return
                                                                ;;                        ;
                                                                ;;                        ;
CageWingTileDispX:    db $00,$30,$60,$90                        ;;CCC9|CCB1+CCB1/CCB1\CCB1;
                                                                ;;                        ;
CageWingTileDispY:    db $F8,$00,$F8,$00                        ;;CCCD|CCB5+CCB5/CCB5\CCB5;
                                                                ;;                        ;
ADDR_02CCB9:          LDA.B #$03                                ;;CCD1|CCB9+CCB9/CCB9\CCB9;
                      STA.B !_8                                 ;;CCD3|CCBB+CCBB/CCBB\CCBB;
                      LDA.B !SpriteXPosLow,X                    ;;CCD5|CCBD+CCBD/CCBD\CCBD;
                      SEC                                       ;;CCD7|CCBF+CCBF/CCBF\CCBF;
                      SBC.B !Layer1XPos                         ;;CCD8|CCC0+CCC0/CCC0\CCC0;
                      STA.B !_0                                 ;;CCDA|CCC2+CCC2/CCC2\CCC2;
                      LDA.B !SpriteYPosLow,X                    ;;CCDC|CCC4+CCC4/CCC4\CCC4;
                      SEC                                       ;;CCDE|CCC6+CCC6/CCC6\CCC6;
                      SBC.B !Layer1YPos                         ;;CCDF|CCC7+CCC7/CCC7\CCC7;
                      STA.B !_1                                 ;;CCE1|CCC9+CCC9/CCC9\CCC9;
                      LDY.W !SpriteOAMIndex,X                   ;;CCE3|CCCB+CCCB/CCCB\CCCB; Y = Index into sprite OAM
                      STY.B !_2                                 ;;CCE6|CCCE+CCCE/CCCE\CCCE;
ADDR_02CCD0:          LDY.B !_2                                 ;;CCE8|CCD0+CCD0/CCD0\CCD0;
                      LDX.B !_8                                 ;;CCEA|CCD2+CCD2/CCD2\CCD2;
                      LDA.B !_0                                 ;;CCEC|CCD4+CCD4/CCD4\CCD4;
                      CLC                                       ;;CCEE|CCD6+CCD6/CCD6\CCD6;
                      %LorW_X(ADC,CageWingTileDispX)            ;;CCEF|CCD7+CCD7/CCD7\CCD7;
                      STA.W !OAMTileXPos+$100,Y                 ;;CCF3|CCDA+CCDA/CCDA\CCDA;
                      STA.W !OAMTileXPos+$104,Y                 ;;CCF6|CCDD+CCDD/CCDD\CCDD;
                      LDA.B !_1                                 ;;CCF9|CCE0+CCE0/CCE0\CCE0;
                      CLC                                       ;;CCFB|CCE2+CCE2/CCE2\CCE2;
                      %LorW_X(ADC,CageWingTileDispY)            ;;CCFC|CCE3+CCE3/CCE3\CCE3;
                      STA.W !OAMTileYPos+$100,Y                 ;;CD00|CCE6+CCE6/CCE6\CCE6;
                      CLC                                       ;;CD03|CCE9+CCE9/CCE9\CCE9;
                      ADC.B #$08                                ;;CD04|CCEA+CCEA/CCEA\CCEA;
                      STA.W !OAMTileYPos+$104,Y                 ;;CD06|CCEC+CCEC/CCEC\CCEC;
                      LDX.W !CurSpriteProcess                   ;;CD09|CCEF+CCEF/CCEF\CCEF; X = Sprite index
                      LDA.W !SpriteMisc1570,X                   ;;CD0C|CCF2+CCF2/CCF2\CCF2;
                      LSR A                                     ;;CD0F|CCF5+CCF5/CCF5\CCF5;
                      LSR A                                     ;;CD10|CCF6+CCF6/CCF6\CCF6;
                      LSR A                                     ;;CD11|CCF7+CCF7/CCF7\CCF7;
                      EOR.B !_8                                 ;;CD12|CCF8+CCF8/CCF8\CCF8;
                      LSR A                                     ;;CD14|CCFA+CCFA/CCFA\CCFA;
                      LDA.B #$C6                                ;;CD15|CCFB+CCFB/CCFB\CCFB;
                      BCC +                                     ;;CD17|CCFD+CCFD/CCFD\CCFD;
                      LDA.B #$81                                ;;CD19|CCFF+CCFF/CCFF\CCFF;
                    + STA.W !OAMTileNo+$100,Y                   ;;CD1B|CD01+CD01/CD01\CD01;
                      LDA.B #$D6                                ;;CD1E|CD04+CD04/CD04\CD04;
                      BCC +                                     ;;CD20|CD06+CD06/CD06\CD06;
                      LDA.B #$D7                                ;;CD22|CD08+CD08/CD08\CD08;
                    + STA.W !OAMTileNo+$104,Y                   ;;CD24|CD0A+CD0A/CD0A\CD0A;
                      LDA.B #$70                                ;;CD27|CD0D+CD0D/CD0D\CD0D;
                      STA.W !OAMTileAttr+$100,Y                 ;;CD29|CD0F+CD0F/CD0F\CD0F;
                      STA.W !OAMTileAttr+$104,Y                 ;;CD2C|CD12+CD12/CD12\CD12;
                      TYA                                       ;;CD2F|CD15+CD15/CD15\CD15;
                      LSR A                                     ;;CD30|CD16+CD16/CD16\CD16;
                      LSR A                                     ;;CD31|CD17+CD17/CD17\CD17;
                      TAY                                       ;;CD32|CD18+CD18/CD18\CD18;
                      LDA.B #$00                                ;;CD33|CD19+CD19/CD19\CD19;
                      STA.W !OAMTileSize+$40,Y                  ;;CD35|CD1B+CD1B/CD1B\CD1B;
                      STA.W !OAMTileSize+$41,Y                  ;;CD38|CD1E+CD1E/CD1E\CD1E;
                      LDA.B !_2                                 ;;CD3B|CD21+CD21/CD21\CD21;
                      CLC                                       ;;CD3D|CD23+CD23/CD23\CD23;
                      ADC.B #$08                                ;;CD3E|CD24+CD24/CD24\CD24;
                      STA.B !_2                                 ;;CD40|CD26+CD26/CD26\CD26;
                      DEC.B !_8                                 ;;CD42|CD28+CD28/CD28\CD28;
                      BPL ADDR_02CCD0                           ;;CD44|CD2A+CD2A/CD2A\CD2A;
                      RTS                                       ;;CD46|CD2C+CD2C/CD2C\CD2C; Return
                                                                ;;                        ;
CODE_02CD2D:          PHB                                       ;;CD47|CD2D+CD2D/CD2D\CD2D; Wrapper
                      PHK                                       ;;CD48|CD2E+CD2E/CD2E\CD2E;
                      PLB                                       ;;CD49|CD2F+CD2F/CD2F\CD2F;
                      JSR CODE_02CD59                           ;;CD4A|CD30+CD30/CD30\CD30;
                      PLB                                       ;;CD4D|CD33+CD33/CD33\CD33;
                      RTL                                       ;;CD4E|CD34+CD34/CD34\CD34; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02CD35:          db $00,$08,$10,$18,$00,$08,$10,$18        ;;CD4F|CD35+CD35/CD35\CD35;
DATA_02CD3D:          db $00,$00,$00,$00,$08,$08,$08,$08        ;;CD57|CD3D+CD3D/CD3D\CD3D;
DATA_02CD45:          db $00,$01,$01,$00,$10,$11,$11,$10        ;;CD5F|CD45+CD45/CD45\CD45;
DATA_02CD4D:          db $31,$31,$71,$71,$31,$31,$71,$71        ;;CD67|CD4D+CD4D/CD4D\CD4D;
DATA_02CD55:          db $0A,$04,$06,$08                        ;;CD6F|CD55+CD55/CD55\CD55;
                                                                ;;                        ;
CODE_02CD59:          LDA.W !SpriteMisc1540,X                   ;;CD73|CD59+CD59/CD59\CD59;
                      CMP.B #$5E                                ;;CD76|CD5C+CD5C/CD5C\CD5C;
                      BNE +                                     ;;CD78|CD5E+CD5E/CD5E\CD5E;
                      LDA.B #$1B                                ;;CD7A|CD60+CD60/CD60\CD60; \ Block to generate = #$1B
                      STA.B !Map16TileGenerate                  ;;CD7C|CD62+CD62/CD62\CD62; /
                      LDA.B !SpriteXPosLow,X                    ;;CD7E|CD64+CD64/CD64\CD64;
                      STA.B !TouchBlockXPos                     ;;CD80|CD66+CD66/CD66\CD66;
                      LDA.W !SpriteXPosHigh,X                   ;;CD82|CD68+CD68/CD68\CD68;
                      STA.B !TouchBlockXPos+1                   ;;CD85|CD6B+CD6B/CD6B\CD6B;
                      LDA.B !SpriteYPosLow,X                    ;;CD87|CD6D+CD6D/CD6D\CD6D;
                      SEC                                       ;;CD89|CD6F+CD6F/CD6F\CD6F;
                      SBC.B #$10                                ;;CD8A|CD70+CD70/CD70\CD70;
                      STA.B !TouchBlockYPos                     ;;CD8C|CD72+CD72/CD72\CD72;
                      LDA.W !SpriteYPosHigh,X                   ;;CD8E|CD74+CD74/CD74\CD74;
                      SBC.B #$00                                ;;CD91|CD77+CD77/CD77\CD77;
                      STA.B !TouchBlockYPos+1                   ;;CD93|CD79+CD79/CD79\CD79;
                      JSL GenerateTile                          ;;CD95|CD7B+CD7B/CD7B\CD7B;
                    + JSL InvisBlkMainRt                        ;;CD99|CD7F+CD7F/CD7F\CD7F;
                      JSR GetDrawInfo2                          ;;CD9D|CD83+CD83/CD83\CD83;
                      PHX                                       ;;CDA0|CD86+CD86/CD86\CD86;
                      LDX.W !BigSwitchPressTimer                ;;CDA1|CD87+CD87/CD87\CD87;
                      LDA.W DATA_02CD55,X                       ;;CDA4|CD8A+CD8A/CD8A\CD8A;
                      STA.B !_2                                 ;;CDA7|CD8D+CD8D/CD8D\CD8D;
                      LDX.B #$07                                ;;CDA9|CD8F+CD8F/CD8F\CD8F;
CODE_02CD91:          LDA.B !_0                                 ;;CDAB|CD91+CD91/CD91\CD91;
                      CLC                                       ;;CDAD|CD93+CD93/CD93\CD93;
                      ADC.W DATA_02CD35,X                       ;;CDAE|CD94+CD94/CD94\CD94;
                      STA.W !OAMTileXPos+$100,Y                 ;;CDB1|CD97+CD97/CD97\CD97;
                      LDA.B !_1                                 ;;CDB4|CD9A+CD9A/CD9A\CD9A;
                      CLC                                       ;;CDB6|CD9C+CD9C/CD9C\CD9C;
                      ADC.W DATA_02CD3D,X                       ;;CDB7|CD9D+CD9D/CD9D\CD9D;
                      STA.W !OAMTileYPos+$100,Y                 ;;CDBA|CDA0+CDA0/CDA0\CDA0;
                      LDA.W DATA_02CD45,X                       ;;CDBD|CDA3+CDA3/CDA3\CDA3;
                      STA.W !OAMTileNo+$100,Y                   ;;CDC0|CDA6+CDA6/CDA6\CDA6;
                      LDA.W DATA_02CD4D,X                       ;;CDC3|CDA9+CDA9/CDA9\CDA9;
                      CPX.B #$04                                ;;CDC6|CDAC+CDAC/CDAC\CDAC;
                      BCS +                                     ;;CDC8|CDAE+CDAE/CDAE\CDAE;
                      ORA.B !_2                                 ;;CDCA|CDB0+CDB0/CDB0\CDB0;
                    + STA.W !OAMTileAttr+$100,Y                 ;;CDCC|CDB2+CDB2/CDB2\CDB2;
                      INY                                       ;;CDCF|CDB5+CDB5/CDB5\CDB5;
                      INY                                       ;;CDD0|CDB6+CDB6/CDB6\CDB6;
                      INY                                       ;;CDD1|CDB7+CDB7/CDB7\CDB7;
                      INY                                       ;;CDD2|CDB8+CDB8/CDB8\CDB8;
                      DEX                                       ;;CDD3|CDB9+CDB9/CDB9\CDB9;
                      BPL CODE_02CD91                           ;;CDD4|CDBA+CDBA/CDBA\CDBA;
                      PLX                                       ;;CDD6|CDBC+CDBC/CDBC\CDBC;
                      LDY.B #$00                                ;;CDD7|CDBD+CDBD/CDBD\CDBD;
                      LDA.B #$07                                ;;CDD9|CDBF+CDBF/CDBF\CDBF;
                      JMP CallFinOAMWriteBank2                  ;;CDDB|CDC1+CDC1/CDC1\CDC1;
                                                                ;;                        ;
                      RTS                                       ;;CDDE|CDC4+CDC4/CDC4\CDC4; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $00,$07,$F9,$00,$01,$FF                ;;CDDF|CDC5+CDC5/CDC5\CDC5;
                                                                ;;                        ;
PeaBouncerMain:       JSR SubOffscreen0Bnk2                     ;;CDE5|CDCB+CDCB/CDCB\CDCB;
                      JSR CODE_02CEE0                           ;;CDE8|CDCE+CDCE/CDCE\CDCE;
                      LDA.B !SpriteLock                         ;;CDEB|CDD1+CDD1/CDD1\CDD1;
                      BNE Return02CDFE                          ;;CDED|CDD3+CDD3/CDD3\CDD3;
                      LDA.W !SpriteMisc1534,X                   ;;CDEF|CDD5+CDD5/CDD5\CDD5;
                      BEQ +                                     ;;CDF2|CDD8+CDD8/CDD8\CDD8;
                      DEC.W !SpriteMisc1534,X                   ;;CDF4|CDDA+CDDA/CDDA\CDDA;
                      BIT.B !byetudlrHold                       ;;CDF7|CDDD+CDDD/CDDD\CDDD;
                      BPL +                                     ;;CDF9|CDDF+CDDF/CDDF\CDDF;
                      STZ.W !SpriteMisc1534,X                   ;;CDFB|CDE1+CDE1/CDE1\CDE1;
                      LDY.W !SpriteMisc151C,X                   ;;CDFE|CDE4+CDE4/CDE4\CDE4;
                      LDA.W DATA_02CDFF,Y                       ;;CE01|CDE7+CDE7/CDE7\CDE7;
                      STA.B !PlayerYSpeed                       ;;CE04|CDEA+CDEA/CDEA\CDEA;
                      LDA.B #!SFX_SPRING                        ;;CE06|CDEC+CDEC/CDEC\CDEC; \ Play sound effect
                      STA.W !SPCIO3                             ;;CE08|CDEE+CDEE/CDEE\CDEE; /
                    + LDA.W !SpriteMisc1528,X                   ;;CE0B|CDF1+CDF1/CDF1\CDF1;
                      JSL ExecutePtr                            ;;CE0E|CDF4+CDF4/CDF4\CDF4;
                                                                ;;                        ;
                      dw Return02CDFE                           ;;CE12|CDF8+CDF8/CDF8\CDF8;
                      dw CODE_02CE0F                            ;;CE14|CDFA+CDFA/CDFA\CDFA;
                      dw CODE_02CE3A                            ;;CE16|CDFC+CDFC/CDFC\CDFC;
                                                                ;;                        ;
Return02CDFE:         RTL                                       ;;CE18|CDFE+CDFE/CDFE\CDFE; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02CDFF:          db $B6,$B4,$B0,$A8,$A0,$98,$90,$88        ;;CE19|CDFF+CDFF/CDFF\CDFF;
DATA_02CE07:          db $00,$00,$E8,$E0,$D0,$C8,$C0,$B8        ;;CE21|CE07+CE07/CE07\CE07;
                                                                ;;                        ;
CODE_02CE0F:          LDA.W !SpriteMisc1540,X                   ;;CE29|CE0F+CE0F/CE0F\CE0F;
                      BEQ CODE_02CE20                           ;;CE2C|CE12+CE12/CE12\CE12;
                      DEC A                                     ;;CE2E|CE14+CE14/CE14\CE14;
                      BNE +                                     ;;CE2F|CE15+CE15/CE15\CE15;
                      INC.W !SpriteMisc1528,X                   ;;CE31|CE17+CE17/CE17\CE17;
                      LDA.B #$01                                ;;CE34|CE1A+CE1A/CE1A\CE1A;
                      STA.W !SpriteMisc157C,X                   ;;CE36|CE1C+CE1C/CE1C\CE1C;
                    + RTL                                       ;;CE39|CE1F+CE1F/CE1F\CE1F; Return
                                                                ;;                        ;
CODE_02CE20:          LDA.B !SpriteTableC2,X                    ;;CE3A|CE20+CE20/CE20\CE20;
                      BMI CODE_02CE29                           ;;CE3C|CE22+CE22/CE22\CE22;
                      CMP.W !SpriteMisc151C,X                   ;;CE3E|CE24+CE24/CE24\CE24;
                      BCS +                                     ;;CE41|CE27+CE27/CE27\CE27;
CODE_02CE29:          CLC                                       ;;CE43|CE29+CE29/CE29\CE29;
                      ADC.B #$01                                ;;CE44|CE2A+CE2A/CE2A\CE2A;
                      STA.B !SpriteTableC2,X                    ;;CE46|CE2C+CE2C/CE2C\CE2C;
                      RTL                                       ;;CE48|CE2E+CE2E/CE2E\CE2E; Return
                                                                ;;                        ;
                    + LDA.W !SpriteMisc151C,X                   ;;CE49|CE2F+CE2F/CE2F\CE2F;
                      STA.B !SpriteTableC2,X                    ;;CE4C|CE32+CE32/CE32\CE32;
                      LDA.B #$08                                ;;CE4E|CE34+CE34/CE34\CE34;
                      STA.W !SpriteMisc1540,X                   ;;CE50|CE36+CE36/CE36\CE36;
                      RTL                                       ;;CE53|CE39+CE39/CE39\CE39; Return
                                                                ;;                        ;
CODE_02CE3A:          INC.W !SpriteMisc1570,X                   ;;CE54|CE3A+CE3A/CE3A\CE3A;
                      LDA.W !SpriteMisc1570,X                   ;;CE57|CE3D+CE3D/CE3D\CE3D;
                      AND.B #$03                                ;;CE5A|CE40+CE40/CE40\CE40;
                      BNE CODE_02CE49                           ;;CE5C|CE42+CE42/CE42\CE42;
                      DEC.W !SpriteMisc151C,X                   ;;CE5E|CE44+CE44/CE44\CE44;
                      BEQ CODE_02CE86                           ;;CE61|CE47+CE47/CE47\CE47;
CODE_02CE49:          LDA.W !SpriteMisc151C,X                   ;;CE63|CE49+CE49/CE49\CE49;
                      EOR.B #$FF                                ;;CE66|CE4C+CE4C/CE4C\CE4C;
                      INC A                                     ;;CE68|CE4E+CE4E/CE4E\CE4E;
                      STA.B !_0                                 ;;CE69|CE4F+CE4F/CE4F\CE4F;
                      LDA.W !SpriteMisc157C,X                   ;;CE6B|CE51+CE51/CE51\CE51;
                      AND.B #$01                                ;;CE6E|CE54+CE54/CE54\CE54;
                      BNE CODE_02CE70                           ;;CE70|CE56+CE56/CE56\CE56;
                      LDA.B !SpriteTableC2,X                    ;;CE72|CE58+CE58/CE58\CE58;
                      CLC                                       ;;CE74|CE5A+CE5A/CE5A\CE5A;
                      ADC.B #$04                                ;;CE75|CE5B+CE5B/CE5B\CE5B;
                      STA.B !SpriteTableC2,X                    ;;CE77|CE5D+CE5D/CE5D\CE5D;
                      BMI Return02CE66                          ;;CE79|CE5F+CE5F/CE5F\CE5F;
                      CMP.W !SpriteMisc151C,X                   ;;CE7B|CE61+CE61/CE61\CE61;
                      BCS +                                     ;;CE7E|CE64+CE64/CE64\CE64;
Return02CE66:         RTL                                       ;;CE80|CE66+CE66/CE66\CE66; Return
                                                                ;;                        ;
                    + LDA.W !SpriteMisc151C,X                   ;;CE81|CE67+CE67/CE67\CE67;
                      STA.B !SpriteTableC2,X                    ;;CE84|CE6A+CE6A/CE6A\CE6A;
                      INC.W !SpriteMisc157C,X                   ;;CE86|CE6C+CE6C/CE6C\CE6C;
                      RTL                                       ;;CE89|CE6F+CE6F/CE6F\CE6F; Return
                                                                ;;                        ;
CODE_02CE70:          LDA.B !SpriteTableC2,X                    ;;CE8A|CE70+CE70/CE70\CE70;
                      SEC                                       ;;CE8C|CE72+CE72/CE72\CE72;
                      SBC.B #$04                                ;;CE8D|CE73+CE73/CE73\CE73;
                      STA.B !SpriteTableC2,X                    ;;CE8F|CE75+CE75/CE75\CE75;
                      BPL Return02CE7D                          ;;CE91|CE77+CE77/CE77\CE77;
                      CMP.B !_0                                 ;;CE93|CE79+CE79/CE79\CE79;
                      BCC +                                     ;;CE95|CE7B+CE7B/CE7B\CE7B;
Return02CE7D:         RTL                                       ;;CE97|CE7D+CE7D/CE7D\CE7D; Return
                                                                ;;                        ;
                    + LDA.B !_0                                 ;;CE98|CE7E+CE7E/CE7E\CE7E;
                      STA.B !SpriteTableC2,X                    ;;CE9A|CE80+CE80/CE80\CE80;
                      INC.W !SpriteMisc157C,X                   ;;CE9C|CE82+CE82/CE82\CE82;
                      RTL                                       ;;CE9F|CE85+CE85/CE85\CE85; Return
                                                                ;;                        ;
CODE_02CE86:          STZ.B !SpriteTableC2,X                    ;;CEA0|CE86+CE86/CE86\CE86;
                      STZ.W !SpriteMisc1528,X                   ;;CEA2|CE88+CE88/CE88\CE88;
                      RTL                                       ;;CEA5|CE8B+CE8B/CE8B\CE8B; Return
                                                                ;;                        ;
                      JSR CODE_02CEE0                           ;;CEA6|CE8C+CE8C/CE8C\CE8C; \ Unreachable
                      RTL                                       ;;CEA9|CE8F+CE8F/CE8F\CE8F; / Wrapper for Pea Bouncer gfx routine
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02CE90:          db $00,$08,$10,$18,$20,$00,$08,$10        ;;CEAA|CE90+CE90/CE90\CE90;
                      db $18,$20,$00,$08,$10,$18,$20,$00        ;;CEB2|CE98+CE98/CE98\CE98;
                      db $08,$10,$18,$1F,$00,$08,$10,$17        ;;CEBA|CEA0+CEA0/CEA0\CEA0;
                      db $1E,$00,$08,$0F,$16,$1D,$00,$07        ;;CEC2|CEA8+CEA8/CEA8\CEA8;
                      db $0F,$16,$1C,$00,$07,$0E,$15,$1B        ;;CECA|CEB0+CEB0/CEB0\CEB0;
DATA_02CEB8:          db $00,$00,$00,$00,$00,$00,$01,$01        ;;CED2|CEB8+CEB8/CEB8\CEB8;
                      db $01,$02,$00,$00,$01,$02,$04,$00        ;;CEDA|CEC0+CEC0/CEC0\CEC0;
                      db $01,$02,$04,$06,$00,$01,$03,$06        ;;CEE2|CEC8+CEC8/CEC8\CEC8;
                      db $08,$00,$02,$04,$08,$0A,$00,$02        ;;CEEA|CED0+CED0/CED0\CED0;
                      db $05,$07,$0C,$00,$02,$05,$09,$0E        ;;CEF2|CED8+CED8/CED8\CED8;
                                                                ;;                        ;
CODE_02CEE0:          JSR GetDrawInfo2                          ;;CEFA|CEE0+CEE0/CEE0\CEE0;
                      LDA.B #$04                                ;;CEFD|CEE3+CEE3/CEE3\CEE3;
                      STA.B !_2                                 ;;CEFF|CEE5+CEE5/CEE5\CEE5;
                      LDA.B !SpriteNumber,X                     ;;CF01|CEE7+CEE7/CEE7\CEE7;
                      SEC                                       ;;CF03|CEE9+CEE9/CEE9\CEE9;
                      SBC.B #$6B                                ;;CF04|CEEA+CEEA/CEEA\CEEA;
                      STA.B !_5                                 ;;CF06|CEEC+CEEC/CEEC\CEEC;
                      LDA.B !SpriteTableC2,X                    ;;CF08|CEEE+CEEE/CEEE\CEEE;
                      STA.B !_3                                 ;;CF0A|CEF0+CEF0/CEF0\CEF0;
                      BPL +                                     ;;CF0C|CEF2+CEF2/CEF2\CEF2;
                      EOR.B #$FF                                ;;CF0E|CEF4+CEF4/CEF4\CEF4;
                      INC A                                     ;;CF10|CEF6+CEF6/CEF6\CEF6;
                    + STA.B !_4                                 ;;CF11|CEF7+CEF7/CEF7\CEF7;
                      LDY.W !SpriteOAMIndex,X                   ;;CF13|CEF9+CEF9/CEF9\CEF9; Y = Index into sprite OAM
CODE_02CEFC:          LDA.B !_4                                 ;;CF16|CEFC+CEFC/CEFC\CEFC;
                      ASL A                                     ;;CF18|CEFE+CEFE/CEFE\CEFE;
                      ASL A                                     ;;CF19|CEFF+CEFF/CEFF\CEFF;
                      ADC.B !_4                                 ;;CF1A|CF00+CF00/CF00\CF00;
                      ADC.B !_2                                 ;;CF1C|CF02+CF02/CF02\CF02;
                      TAX                                       ;;CF1E|CF04+CF04/CF04\CF04;
                      LDA.B !_5                                 ;;CF1F|CF05+CF05/CF05\CF05;
                      LSR A                                     ;;CF21|CF07+CF07/CF07\CF07;
                      %LorW_X(LDA,DATA_02CE90)                  ;;CF22|CF08+CF08/CF08\CF08;
                      BCC +                                     ;;CF26|CF0B+CF0B/CF0B\CF0B;
                      EOR.B #$FF                                ;;CF28|CF0D+CF0D/CF0D\CF0D;
                      INC A                                     ;;CF2A|CF0F+CF0F/CF0F\CF0F;
                    + STA.B !_8                                 ;;CF2B|CF10+CF10/CF10\CF10;
                      CLC                                       ;;CF2D|CF12+CF12/CF12\CF12;
                      ADC.B !_0                                 ;;CF2E|CF13+CF13/CF13\CF13;
                      STA.W !OAMTileXPos+$100,Y                 ;;CF30|CF15+CF15/CF15\CF15;
                      LDA.B !_3                                 ;;CF33|CF18+CF18/CF18\CF18;
                      ASL A                                     ;;CF35|CF1A+CF1A/CF1A\CF1A;
                      %LorW_X(LDA,DATA_02CEB8)                  ;;CF36|CF1B+CF1B/CF1B\CF1B;
                      BCC +                                     ;;CF3A|CF1E+CF1E/CF1E\CF1E;
                      EOR.B #$FF                                ;;CF3C|CF20+CF20/CF20\CF20;
                      INC A                                     ;;CF3E|CF22+CF22/CF22\CF22;
                    + STA.B !_9                                 ;;CF3F|CF23+CF23/CF23\CF23;
                      CLC                                       ;;CF41|CF25+CF25/CF25\CF25;
                      ADC.B !_1                                 ;;CF42|CF26+CF26/CF26\CF26;
                      STA.W !OAMTileYPos+$100,Y                 ;;CF44|CF28+CF28/CF28\CF28;
                      LDA.B #$3D                                ;;CF47|CF2B+CF2B/CF2B\CF2B;
                      STA.W !OAMTileNo+$100,Y                   ;;CF49|CF2D+CF2D/CF2D\CF2D;
                      LDA.B !SpriteProperties                   ;;CF4C|CF30+CF30/CF30\CF30;
                      ORA.B #$0A                                ;;CF4E|CF32+CF32/CF32\CF32;
                      STA.W !OAMTileAttr+$100,Y                 ;;CF50|CF34+CF34/CF34\CF34;
                      LDX.W !CurSpriteProcess                   ;;CF53|CF37+CF37/CF37\CF37; X = Sprite index
                      PHY                                       ;;CF56|CF3A+CF3A/CF3A\CF3A;
                      JSR CODE_02CF52                           ;;CF57|CF3B+CF3B/CF3B\CF3B;
                      PLY                                       ;;CF5A|CF3E+CF3E/CF3E\CF3E;
                      INY                                       ;;CF5B|CF3F+CF3F/CF3F\CF3F;
                      INY                                       ;;CF5C|CF40+CF40/CF40\CF40;
                      INY                                       ;;CF5D|CF41+CF41/CF41\CF41;
                      INY                                       ;;CF5E|CF42+CF42/CF42\CF42;
                      DEC.B !_2                                 ;;CF5F|CF43+CF43/CF43\CF43;
                      BMI +                                     ;;CF61|CF45+CF45/CF45\CF45;
                      JMP CODE_02CEFC                           ;;CF63|CF47+CF47/CF47\CF47;
                                                                ;;                        ;
                    + LDY.B #$00                                ;;CF66|CF4A+CF4A/CF4A\CF4A;
                      LDA.B #$04                                ;;CF68|CF4C+CF4C/CF4C\CF4C;
                      JMP CallFinOAMWriteBank2                  ;;CF6A|CF4E+CF4E/CF4E\CF4E;
                                                                ;;                        ;
                    - RTS                                       ;;CF6D|CF51+CF51/CF51\CF51; Return
                                                                ;;                        ;
CODE_02CF52:          LDA.B !PlayerAnimation                    ;;CF6E|CF52+CF52/CF52\CF52;
                      CMP.B #$01                                ;;CF70|CF54+CF54/CF54\CF54;
                      BCS -                                     ;;CF72|CF56+CF56/CF56\CF56;
                      LDA.B !PlayerYPosScrRel+1                 ;;CF74|CF58+CF58/CF58\CF58;
                      ORA.B !PlayerXPosScrRel+1                 ;;CF76|CF5A+CF5A/CF5A\CF5A;
                      ORA.W !SpriteOffscreenX,X                 ;;CF78|CF5C+CF5C/CF5C\CF5C;
                      ORA.W !SpriteOffscreenVert,X              ;;CF7B|CF5F+CF5F/CF5F\CF5F;
                      BNE -                                     ;;CF7E|CF62+CF62/CF62\CF62;
                      LDA.B !PlayerXPosScrRel                   ;;CF80|CF64+CF64/CF64\CF64;
                      CLC                                       ;;CF82|CF66+CF66/CF66\CF66;
                      ADC.B #$02                                ;;CF83|CF67+CF67/CF67\CF67;
                      STA.B !_A                                 ;;CF85|CF69+CF69/CF69\CF69;
                      LDA.W !PlayerRidingYoshi                  ;;CF87|CF6B+CF6B/CF6B\CF6B;
                      CMP.B #$01                                ;;CF8A|CF6E+CF6E/CF6E\CF6E;
                      LDA.B #$10                                ;;CF8C|CF70+CF70/CF70\CF70;
                      BCC +                                     ;;CF8E|CF72+CF72/CF72\CF72;
                      LDA.B #$20                                ;;CF90|CF74+CF74/CF74\CF74;
                    + CLC                                       ;;CF92|CF76+CF76/CF76\CF76;
                      ADC.B !PlayerYPosScrRel                   ;;CF93|CF77+CF77/CF77\CF77;
                      STA.B !_B                                 ;;CF95|CF79+CF79/CF79\CF79;
                      LDA.W !OAMTileXPos+$100,Y                 ;;CF97|CF7B+CF7B/CF7B\CF7B;
                      SEC                                       ;;CF9A|CF7E+CF7E/CF7E\CF7E;
                      SBC.B !_A                                 ;;CF9B|CF7F+CF7F/CF7F\CF7F;
                      CLC                                       ;;CF9D|CF81+CF81/CF81\CF81;
                      ADC.B #$08                                ;;CF9E|CF82+CF82/CF82\CF82;
                      CMP.B #$14                                ;;CFA0|CF84+CF84/CF84\CF84;
                      BCS Return02CFFD                          ;;CFA2|CF86+CF86/CF86\CF86;
                      LDA.B !Powerup                            ;;CFA4|CF88+CF88/CF88\CF88;
                      CMP.B #$01                                ;;CFA6|CF8A+CF8A/CF8A\CF8A;
                      LDA.B #$1A                                ;;CFA8|CF8C+CF8C/CF8C\CF8C;
                      BCS +                                     ;;CFAA|CF8E+CF8E/CF8E\CF8E;
                      LDA.B #$1C                                ;;CFAC|CF90+CF90/CF90\CF90;
                    + STA.B !_F                                 ;;CFAE|CF92+CF92/CF92\CF92;
                      LDA.W !OAMTileYPos+$100,Y                 ;;CFB0|CF94+CF94/CF94\CF94;
                      SEC                                       ;;CFB3|CF97+CF97/CF97\CF97;
                      SBC.B !_B                                 ;;CFB4|CF98+CF98/CF98\CF98;
                      CLC                                       ;;CFB6|CF9A+CF9A/CF9A\CF9A;
                      ADC.B #$08                                ;;CFB7|CF9B+CF9B/CF9B\CF9B;
                      CMP.B !_F                                 ;;CFB9|CF9D+CF9D/CF9D\CF9D;
                      BCS Return02CFFD                          ;;CFBB|CF9F+CF9F/CF9F\CF9F;
                      LDA.B !PlayerYSpeed                       ;;CFBD|CFA1+CFA1/CFA1\CFA1;
                      BMI Return02CFFD                          ;;CFBF|CFA3+CFA3/CFA3\CFA3;
                      LDA.B #$1F                                ;;CFC1|CFA5+CFA5/CFA5\CFA5;
                      PHX                                       ;;CFC3|CFA7+CFA7/CFA7\CFA7;
                      LDX.W !PlayerRidingYoshi                  ;;CFC4|CFA8+CFA8/CFA8\CFA8;
                      BEQ +                                     ;;CFC7|CFAB+CFAB/CFAB\CFAB;
                      LDA.B #$2F                                ;;CFC9|CFAD+CFAD/CFAD\CFAD;
                    + STA.B !_F                                 ;;CFCB|CFAF+CFAF/CFAF\CFAF;
                      PLX                                       ;;CFCD|CFB1+CFB1/CFB1\CFB1;
                      LDA.W !OAMTileYPos+$100,Y                 ;;CFCE|CFB2+CFB2/CFB2\CFB2;
                      SEC                                       ;;CFD1|CFB5+CFB5/CFB5\CFB5;
                      SBC.B !_F                                 ;;CFD2|CFB6+CFB6/CFB6\CFB6;
                      PHP                                       ;;CFD4|CFB8+CFB8/CFB8\CFB8;
                      CLC                                       ;;CFD5|CFB9+CFB9/CFB9\CFB9;
                      ADC.B !Layer1YPos                         ;;CFD6|CFBA+CFBA/CFBA\CFBA;
                      STA.B !PlayerYPosNext                     ;;CFD8|CFBC+CFBC/CFBC\CFBC;
                      LDA.B !Layer1YPos+1                       ;;CFDA|CFBE+CFBE/CFBE\CFBE;
                      ADC.B #$00                                ;;CFDC|CFC0+CFC0/CFC0\CFC0;
                      PLP                                       ;;CFDE|CFC2+CFC2/CFC2\CFC2;
                      SBC.B #$00                                ;;CFDF|CFC3+CFC3/CFC3\CFC3;
                      STA.B !PlayerYPosNext+1                   ;;CFE1|CFC5+CFC5/CFC5\CFC5;
                      STZ.B !PlayerInAir                        ;;CFE3|CFC7+CFC7/CFC7\CFC7;
                      LDA.B #$02                                ;;CFE5|CFC9+CFC9/CFC9\CFC9;
                      STA.W !StandOnSolidSprite                 ;;CFE7|CFCB+CFCB/CFCB\CFCB;
                      LDA.W !SpriteMisc1528,X                   ;;CFEA|CFCE+CFCE/CFCE\CFCE;
                      BEQ CODE_02CFEB                           ;;CFED|CFD1+CFD1/CFD1\CFD1;
                      CMP.B #$02                                ;;CFEF|CFD3+CFD3/CFD3\CFD3;
                      BEQ CODE_02CFEB                           ;;CFF1|CFD5+CFD5/CFD5\CFD5;
                      LDA.W !SpriteMisc1540,X                   ;;CFF3|CFD7+CFD7/CFD7\CFD7;
                      CMP.B #$01                                ;;CFF6|CFDA+CFDA/CFDA\CFDA;
                      BNE +                                     ;;CFF8|CFDC+CFDC/CFDC\CFDC;
                      LDA.B #$08                                ;;CFFA|CFDE+CFDE/CFDE\CFDE;
                      STA.W !SpriteMisc1534,X                   ;;CFFC|CFE0+CFE0/CFE0\CFE0;
                      LDY.B !SpriteTableC2,X                    ;;CFFF|CFE3+CFE3/CFE3\CFE3;
                      LDA.W DATA_02CE07,Y                       ;;D001|CFE5+CFE5/CFE5\CFE5;
                      STA.B !PlayerYSpeed                       ;;D004|CFE8+CFE8/CFE8\CFE8;
                    + RTS                                       ;;D006|CFEA+CFEA/CFEA\CFEA; Return
                                                                ;;                        ;
CODE_02CFEB:          STZ.B !PlayerXSpeed                       ;;D007|CFEB+CFEB/CFEB\CFEB;
                      LDY.B !_2                                 ;;D009|CFED+CFED/CFED\CFED;
                      LDA.W PeaBouncerPhysics,Y                 ;;D00B|CFEF+CFEF/CFEF\CFEF;
                      STA.W !SpriteMisc151C,X                   ;;D00E|CFF2+CFF2/CFF2\CFF2;
                      LDA.B #$01                                ;;D011|CFF5+CFF5/CFF5\CFF5;
                      STA.W !SpriteMisc1528,X                   ;;D013|CFF7+CFF7/CFF7\CFF7;
                      STZ.W !SpriteMisc1570,X                   ;;D016|CFFA+CFFA/CFFA\CFFA;
Return02CFFD:         RTS                                       ;;D019|CFFD+CFFD/CFFD\CFFD; Return
                                                                ;;                        ;
                                                                ;;                        ;
PeaBouncerPhysics:    db $01,$01,$03,$05,$07                    ;;D01A|CFFE+CFFE/CFFE\CFFE;
                                                                ;;                        ;
DATA_02D003:          db $40,$B0                                ;;D01F|D003+D003/D003\D003;
                                                                ;;                        ;
DATA_02D005:          db $01,$FF                                ;;D021|D005+D005/D005\D005;
                                                                ;;                        ;
DATA_02D007:          db $30,$C0,$A0,$C0,$A0,$70,$60,$B0        ;;D023|D007+D007/D007\D007;
DATA_02D00F:          db $01,$FF,$01,$FF,$01,$FF,$01,$FF        ;;D02B|D00F+D00F/D00F\D00F;
                                                                ;;                        ;
SubOffscreen3Bnk2:    LDA.B #$06                                ;;D033|D017+D017/D017\D017; \ Entry point of routine determines value of $03
                      BRA +                                     ;;D035|D019+D019/D019\D019;  |
                                                                ;;                        ;
SubOffscreen2Bnk2:    LDA.B #$04                                ;;D037|D01B+D01B/D01B\D01B;  |
                      BRA +                                     ;;D039|D01D+D01D/D01D\D01D;  |
                                                                ;;                        ;
SubOffscreen1Bnk2:    LDA.B #$02                                ;;D03B|D01F+D01F/D01F\D01F;  |
                    + STA.B !_3                                 ;;D03D|D021+D021/D021\D021;  |
                      BRA +                                     ;;D03F|D023+D023/D023\D023;  |
                                                                ;;                        ;
SubOffscreen0Bnk2:    STZ.B !_3                                 ;;D041|D025+D025/D025\D025; /
                    + JSR IsSprOffScreenBnk2                    ;;D043|D027+D027/D027\D027; \ if sprite is not off screen, return
                      BEQ Return02D090                          ;;D046|D02A+D02A/D02A\D02A; /
                      LDA.B !ScreenMode                         ;;D048|D02C+D02C/D02C\D02C; \  vertical level
                      AND.B #$01                                ;;D04A|D02E+D02E/D02E\D02E;  |
                      BNE VerticalLevelBnk2                     ;;D04C|D030+D030/D030\D030; /
                      LDA.B !_3                                 ;;D04E|D032+D032/D032\D032;
                      CMP.B #$04                                ;;D050|D034+D034/D034\D034;
                      BEQ CODE_02D04D                           ;;D052|D036+D036/D036\D036;
                      LDA.B !SpriteYPosLow,X                    ;;D054|D038+D038/D038\D038; \
                      CLC                                       ;;D056|D03A+D03A/D03A\D03A;  |
                      ADC.B #$50                                ;;D057|D03B+D03B/D03B\D03B;  | if the sprite has gone off the bottom of the level...
                      LDA.W !SpriteYPosHigh,X                   ;;D059|D03D+D03D/D03D\D03D;  | (if adding 0x50 to the sprite y position would make the high byte >= 2)
                      ADC.B #$00                                ;;D05C|D040+D040/D040\D040;  |
                      CMP.B #$02                                ;;D05E|D042+D042/D042\D042;  |
                      BPL OffScrEraseSprBnk2                    ;;D060|D044+D044/D044\D044; /    ...erase the sprite
                      LDA.W !SpriteTweaker167A,X                ;;D062|D046+D046/D046\D046; \ if "process offscreen" flag is set, return
                      AND.B #$04                                ;;D065|D049+D049/D049\D049;  |
                      BNE Return02D090                          ;;D067|D04B+D04B/D04B\D04B; /
CODE_02D04D:          LDA.B !TrueFrame                          ;;D069|D04D+D04D/D04D\D04D;
                      AND.B #$01                                ;;D06B|D04F+D04F/D04F\D04F;
                      ORA.B !_3                                 ;;D06D|D051+D051/D051\D051;
                      STA.B !_1                                 ;;D06F|D053+D053/D053\D053;
                      TAY                                       ;;D071|D055+D055/D055\D055;
                      LDA.B !Layer1XPos                         ;;D072|D056+D056/D056\D056;
                      CLC                                       ;;D074|D058+D058/D058\D058;
                      ADC.W DATA_02D007,Y                       ;;D075|D059+D059/D059\D059;
                      ROL.B !_0                                 ;;D078|D05C+D05C/D05C\D05C;
                      CMP.B !SpriteXPosLow,X                    ;;D07A|D05E+D05E/D05E\D05E;
                      PHP                                       ;;D07C|D060+D060/D060\D060;
                      LDA.B !Layer1XPos+1                       ;;D07D|D061+D061/D061\D061;
                      LSR.B !_0                                 ;;D07F|D063+D063/D063\D063;
                      ADC.W DATA_02D00F,Y                       ;;D081|D065+D065/D065\D065;
                      PLP                                       ;;D084|D068+D068/D068\D068;
                      SBC.W !SpriteXPosHigh,X                   ;;D085|D069+D069/D069\D069;
                      STA.B !_0                                 ;;D088|D06C+D06C/D06C\D06C;
                      LSR.B !_1                                 ;;D08A|D06E+D06E/D06E\D06E;
                      BCC +                                     ;;D08C|D070+D070/D070\D070;
                      EOR.B #$80                                ;;D08E|D072+D072/D072\D072;
                      STA.B !_0                                 ;;D090|D074+D074/D074\D074;
                    + LDA.B !_0                                 ;;D092|D076+D076/D076\D076;
                      BPL Return02D090                          ;;D094|D078+D078/D078\D078;
OffScrEraseSprBnk2:   LDA.W !SpriteStatus,X                     ;;D096|D07A+D07A/D07A\D07A; \ If sprite status < 8, permanently erase sprite
                      CMP.B #$08                                ;;D099|D07D+D07D/D07D\D07D;  |
                      BCC +                                     ;;D09B|D07F+D07F/D07F\D07F; /
                      LDY.W !SpriteLoadIndex,X                  ;;D09D|D081+D081/D081\D081; \ Branch if should permanently erase sprite
                      CPY.B #$FF                                ;;D0A0|D084+D084/D084\D084;  |
                      BEQ +                                     ;;D0A2|D086+D086/D086\D086; /
                      LDA.B #$00                                ;;D0A4|D088+D088/D088\D088; \ Allow sprite to be reloaded by level loading routine
                      STA.W !SpriteLoadStatus,Y                 ;;D0A6|D08A+D08A/D08A\D08A; /
                    + STZ.W !SpriteStatus,X                     ;;D0A9|D08D+D08D/D08D\D08D; Erase sprite
Return02D090:         RTS                                       ;;D0AC|D090+D090/D090\D090; Return
                                                                ;;                        ;
VerticalLevelBnk2:    LDA.W !SpriteTweaker167A,X                ;;D0AD|D091+D091/D091\D091; \ If "process offscreen" flag is set, return
                      AND.B #$04                                ;;D0B0|D094+D094/D094\D094;  |
                      BNE Return02D090                          ;;D0B2|D096+D096/D096\D096; /
                      LDA.B !TrueFrame                          ;;D0B4|D098+D098/D098\D098; \ Return every other frame
                      LSR A                                     ;;D0B6|D09A+D09A/D09A\D09A;  |
                      BCS Return02D090                          ;;D0B7|D09B+D09B/D09B\D09B; /
                      AND.B #$01                                ;;D0B9|D09D+D09D/D09D\D09D;
                      STA.B !_1                                 ;;D0BB|D09F+D09F/D09F\D09F;
                      TAY                                       ;;D0BD|D0A1+D0A1/D0A1\D0A1;
                      LDA.B !Layer1YPos                         ;;D0BE|D0A2+D0A2/D0A2\D0A2;
                      CLC                                       ;;D0C0|D0A4+D0A4/D0A4\D0A4;
                      ADC.W DATA_02D003,Y                       ;;D0C1|D0A5+D0A5/D0A5\D0A5;
                      ROL.B !_0                                 ;;D0C4|D0A8+D0A8/D0A8\D0A8;
                      CMP.B !SpriteYPosLow,X                    ;;D0C6|D0AA+D0AA/D0AA\D0AA;
                      PHP                                       ;;D0C8|D0AC+D0AC/D0AC\D0AC;
                      LDA.W !Layer1YPos+1                       ;;D0C9|D0AD+D0AD/D0AD\D0AD;
                      LSR.B !_0                                 ;;D0CC|D0B0+D0B0/D0B0\D0B0;
                      ADC.W DATA_02D005,Y                       ;;D0CE|D0B2+D0B2/D0B2\D0B2;
                      PLP                                       ;;D0D1|D0B5+D0B5/D0B5\D0B5;
                      SBC.W !SpriteYPosHigh,X                   ;;D0D2|D0B6+D0B6/D0B6\D0B6;
                      STA.B !_0                                 ;;D0D5|D0B9+D0B9/D0B9\D0B9;
                      LDY.B !_1                                 ;;D0D7|D0BB+D0BB/D0BB\D0BB;
                      BEQ +                                     ;;D0D9|D0BD+D0BD/D0BD\D0BD;
                      EOR.B #$80                                ;;D0DB|D0BF+D0BF/D0BF\D0BF;
                      STA.B !_0                                 ;;D0DD|D0C1+D0C1/D0C1\D0C1;
                    + LDA.B !_0                                 ;;D0DF|D0C3+D0C3/D0C3\D0C3;
                      BPL Return02D090                          ;;D0E1|D0C5+D0C5/D0C5\D0C5;
                      BMI OffScrEraseSprBnk2                    ;;D0E3|D0C7+D0C7/D0C7\D0C7;
IsSprOffScreenBnk2:   LDA.W !SpriteOffscreenX,X                 ;;D0E5|D0C9+D0C9/D0C9\D0C9;
                      ORA.W !SpriteOffscreenVert,X              ;;D0E8|D0CC+D0CC/D0CC\D0CC;
                      RTS                                       ;;D0EB|D0CF+D0CF/D0CF\D0CF; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02D0D0:          db $14,$FC                                ;;D0EC|D0D0+D0D0/D0D0\D0D0;
                                                                ;;                        ;
DATA_02D0D2:          db $00,$FF                                ;;D0EE|D0D2+D0D2/D0D2\D0D2;
                                                                ;;                        ;
CODE_02D0D4:          LDA.W !SpriteMisc1564,X                   ;;D0F0|D0D4+D0D4/D0D4\D0D4;
                      BNE +                                     ;;D0F3|D0D7+D0D7/D0D7\D0D7;
                      LDA.W !SpriteMisc160E,X                   ;;D0F5|D0D9+D0D9/D0D9\D0D9;
                      BPL +                                     ;;D0F8|D0DC+D0DC/D0DC\D0DC;
                      PHB                                       ;;D0FA|D0DE+D0DE/D0DE\D0DE;
                      PHK                                       ;;D0FB|D0DF+D0DF/D0DF\D0DF;
                      PLB                                       ;;D0FC|D0E0+D0E0/D0E0\D0E0;
                      JSR CODE_02D0E6                           ;;D0FD|D0E1+D0E1/D0E1\D0E1;
                      PLB                                       ;;D100|D0E4+D0E4/D0E4\D0E4;
                    + RTL                                       ;;D101|D0E5+D0E5/D0E5\D0E5; Return
                                                                ;;                        ;
CODE_02D0E6:          STZ.B !_F                                 ;;D102|D0E6+D0E6/D0E6\D0E6;
                      BRA CODE_02D149                           ;;D104|D0E8+D0E8/D0E8\D0E8;
                                                                ;;                        ;
                      LDA.B !SpriteYPosLow,X                    ;;D106|D0EA+D0EA/D0EA\D0EA; \ Unreachable
                      CLC                                       ;;D108|D0EC+D0EC/D0EC\D0EC;  | Something to do with Yoshi?
                      ADC.B #$08                                ;;D109|D0ED+D0ED/D0ED\D0ED;
                      AND.B #$F0                                ;;D10B|D0EF+D0EF/D0EF\D0EF;
                      STA.B !_0                                 ;;D10D|D0F1+D0F1/D0F1\D0F1;
                      LDA.W !SpriteYPosHigh,X                   ;;D10F|D0F3+D0F3/D0F3\D0F3;
                      ADC.B #$00                                ;;D112|D0F6+D0F6/D0F6\D0F6;
                      CMP.B !LevelScrLength                     ;;D114|D0F8+D0F8/D0F8\D0F8;
                      BCS Return02D148                          ;;D116|D0FA+D0FA/D0FA\D0FA;
                      STA.B !_3                                 ;;D118|D0FC+D0FC/D0FC\D0FC;
                      AND.B #$10                                ;;D11A|D0FE+D0FE/D0FE\D0FE;
                      STA.B !_8                                 ;;D11C|D100+D100/D100\D100;
                      LDY.W !SpriteMisc157C,X                   ;;D11E|D102+D102/D102\D102;
                      LDA.B !SpriteXPosLow,X                    ;;D121|D105+D105/D105\D105;
                      CLC                                       ;;D123|D107+D107/D107\D107;
                      ADC.W DATA_02D0D0,Y                       ;;D124|D108+D108/D108\D108;
                      STA.B !_1                                 ;;D127|D10B+D10B/D10B\D10B;
                      LDA.W !SpriteXPosHigh,X                   ;;D129|D10D+D10D/D10D\D10D;
                      ADC.W DATA_02D0D2,Y                       ;;D12C|D110+D110/D110\D110;
                      CMP.B #$02                                ;;D12F|D113+D113/D113\D113;
                      BCS Return02D148                          ;;D131|D115+D115/D115\D115;
                      STA.B !_2                                 ;;D133|D117+D117/D117\D117;
                      LDA.B !_1                                 ;;D135|D119+D119/D119\D119;
                      LSR A                                     ;;D137|D11B+D11B/D11B\D11B;
                      LSR A                                     ;;D138|D11C+D11C/D11C\D11C;
                      LSR A                                     ;;D139|D11D+D11D/D11D\D11D;
                      LSR A                                     ;;D13A|D11E+D11E/D11E\D11E;
                      ORA.B !_0                                 ;;D13B|D11F+D11F/D11F\D11F;
                      STA.B !_0                                 ;;D13D|D121+D121/D121\D121;
                      LDX.B !_3                                 ;;D13F|D123+D123/D123\D123;
                      LDA.L DATA_00BA80,X                       ;;D141|D125+D125/D125\D125;
                      LDY.B !_F                                 ;;D145|D129+D129/D129\D129;
                      BEQ +                                     ;;D147|D12B+D12B/D12B\D12B;
                      LDA.L DATA_00BA8E,X                       ;;D149|D12D+D12D/D12D\D12D;
                    + CLC                                       ;;D14D|D131+D131/D131\D131;
                      ADC.B !_0                                 ;;D14E|D132+D132/D132\D132;
                      STA.B !_5                                 ;;D150|D134+D134/D134\D134;
                      LDA.L DATA_00BABC,X                       ;;D152|D136+D136/D136\D136;
                      LDY.B !_F                                 ;;D156|D13A+D13A/D13A\D13A;
                      BEQ +                                     ;;D158|D13C+D13C/D13C\D13C;
                      LDA.L DATA_00BACA,X                       ;;D15A|D13E+D13E/D13E\D13E;
                    + ADC.B !_2                                 ;;D15E|D142+D142/D142\D142;
                      STA.B !_6                                 ;;D160|D144+D144/D144\D144;
                      BRA CODE_02D1AD                           ;;D162|D146+D146/D146\D146;
                                                                ;;                        ;
Return02D148:         RTS                                       ;;D164|D148+D148/D148\D148; Return
                                                                ;;                        ;
CODE_02D149:          LDA.B !SpriteYPosLow,X                    ;;D165|D149+D149/D149\D149; \ $18B2 = Sprite Y position + #$08
                      CLC                                       ;;D167|D14B+D14B/D14B\D14B;  |
                      ADC.B #$08                                ;;D168|D14C+D14C/D14C\D14C;  |
                      STA.W !YoshiYPos                          ;;D16A|D14E+D14E/D14E\D14E; /
                      AND.B #$F0                                ;;D16D|D151+D151/D151\D151; \ $00 = (Sprite Y position + #$08) rounded down to closest #$10 low byte
                      STA.B !_0                                 ;;D16F|D153+D153/D153\D153; /
                      LDA.W !SpriteYPosHigh,X                   ;;D171|D155+D155/D155\D155; \
                      ADC.B #$00                                ;;D174|D158+D158/D158\D158;  | Return if off screen
                      CMP.B #$02                                ;;D176|D15A+D15A/D15A\D15A;  |
                      BCS Return02D148                          ;;D178|D15C+D15C/D15C\D15C;  |
                      STA.B !_2                                 ;;D17A|D15E+D15E/D15E\D15E;  | $02 = (Sprite Y position + #$08) High byte
                      STA.W !YoshiYPos+1                        ;;D17C|D160+D160/D160\D160; /
                      LDY.W !SpriteMisc157C,X                   ;;D17F|D163+D163/D163\D163; \ $18B0 = Sprite X position + $0014/$FFFC
                      LDA.B !SpriteXPosLow,X                    ;;D182|D166+D166/D166\D166;  |
                      CLC                                       ;;D184|D168+D168/D168\D168;  |
                      ADC.W DATA_02D0D0,Y                       ;;D185|D169+D169/D169\D169;  |
                      STA.B !_1                                 ;;D188|D16C+D16C/D16C\D16C;  | $01 = (Sprite X position + $0014/$FFFC) Low byte
                      STA.W !YoshiXPos                          ;;D18A|D16E+D16E/D16E\D16E;  |
                      LDA.W !SpriteXPosHigh,X                   ;;D18D|D171+D171/D171\D171;  |
                      ADC.W DATA_02D0D2,Y                       ;;D190|D174+D174/D174\D174;  |
                      CMP.B !LevelScrLength                     ;;D193|D177+D177/D177\D177;  | Return if past end of level
                      BCS Return02D148                          ;;D195|D179+D179/D179\D179;  |
                      STA.W !YoshiXPos+1                        ;;D197|D17B+D17B/D17B\D17B;  |
                      STA.B !_3                                 ;;D19A|D17E+D17E/D17E\D17E; / $03 = (Sprite X position + $0014/$FFFC) High byte
                      LDA.B !_1                                 ;;D19C|D180+D180/D180\D180; \ $00 = bits 4-7 of Y position, bits 4-7 of X position
                      LSR A                                     ;;D19E|D182+D182/D182\D182;  |
                      LSR A                                     ;;D19F|D183+D183/D183\D183;  |
                      LSR A                                     ;;D1A0|D184+D184/D184\D184;  |
                      LSR A                                     ;;D1A1|D185+D185/D185\D185;  |
                      ORA.B !_0                                 ;;D1A2|D186+D186/D186\D186;  |
                      STA.B !_0                                 ;;D1A4|D188+D188/D188\D188; /
                      LDX.B !_3                                 ;;D1A6|D18A+D18A/D18A\D18A;
                      LDA.L DATA_00BA60,X                       ;;D1A8|D18C+D18C/D18C\D18C;
                      LDY.B !_F                                 ;;D1AC|D190+D190/D190\D190;
                      BEQ +                                     ;;D1AE|D192+D192/D192\D192;
                      LDA.L DATA_00BA70,X                       ;;D1B0|D194+D194/D194\D194;
                    + CLC                                       ;;D1B4|D198+D198/D198\D198;
                      ADC.B !_0                                 ;;D1B5|D199+D199/D199\D199;
                      STA.B !_5                                 ;;D1B7|D19B+D19B/D19B\D19B;
                      LDA.L DATA_00BA9C,X                       ;;D1B9|D19D+D19D/D19D\D19D;
                      LDY.B !_F                                 ;;D1BD|D1A1+D1A1/D1A1\D1A1;
                      BEQ +                                     ;;D1BF|D1A3+D1A3/D1A3\D1A3;
                      LDA.L DATA_00BAAC,X                       ;;D1C1|D1A5+D1A5/D1A5\D1A5;
                    + ADC.B !_2                                 ;;D1C5|D1A9+D1A9/D1A9\D1A9;
                      STA.B !_6                                 ;;D1C7|D1AB+D1AB/D1AB\D1AB;
CODE_02D1AD:          LDA.B #$7E                                ;;D1C9|D1AD+D1AD/D1AD\D1AD;
                      STA.B !_7                                 ;;D1CB|D1AF+D1AF/D1AF\D1AF;
                      LDX.W !CurSpriteProcess                   ;;D1CD|D1B1+D1B1/D1B1\D1B1; X = Sprite index
                      LDA.B [!_5]                               ;;D1D0|D1B4+D1B4/D1B4\D1B4;
                      STA.W !Map16TileNumber                    ;;D1D2|D1B6+D1B6/D1B6\D1B6;
                      INC.B !_7                                 ;;D1D5|D1B9+D1B9/D1B9\D1B9;
                      LDA.B [!_5]                               ;;D1D7|D1BB+D1BB/D1BB\D1BB;
                      BNE +                                     ;;D1D9|D1BD+D1BD/D1BD\D1BD;
                      LDA.W !Map16TileNumber                    ;;D1DB|D1BF+D1BF/D1BF\D1BF;
                      CMP.B #$45                                ;;D1DE|D1C2+D1C2/D1C2\D1C2;
                      BCC +                                     ;;D1E0|D1C4+D1C4/D1C4\D1C4;
                      CMP.B #$48                                ;;D1E2|D1C6+D1C6/D1C6\D1C6;
                      BCS +                                     ;;D1E4|D1C8+D1C8/D1C8\D1C8;
                      SEC                                       ;;D1E6|D1CA+D1CA/D1CA\D1CA;
                      SBC.B #$44                                ;;D1E7|D1CB+D1CB/D1CB\D1CB;
                      STA.W !EatenBerryType                     ;;D1E9|D1CD+D1CD/D1CD\D1CD;
                      STZ.W !YoshiTongueTimer                   ;;D1EC|D1D0+D1D0/D1D0\D1D0;
                      LDY.W !PlayerDuckingOnYoshi               ;;D1EF|D1D3+D1D3/D1D3\D1D3;
                      LDA.W DATA_02D1F1,Y                       ;;D1F2|D1D6+D1D6/D1D6\D1D6;
                      STA.W !SpriteMisc1602,X                   ;;D1F5|D1D9+D1D9/D1D9\D1D9;
                      LDA.B #$22                                ;;D1F8|D1DC+D1DC/D1DC\D1DC;
                      STA.W !SpriteMisc1564,X                   ;;D1FA|D1DE+D1DE/D1DE\D1DE;
                      LDA.B !PlayerYPosNext                     ;;D1FD|D1E1+D1E1/D1E1\D1E1;
                      CLC                                       ;;D1FF|D1E3+D1E3/D1E3\D1E3;
                      ADC.B #$08                                ;;D200|D1E4+D1E4/D1E4\D1E4;
                      AND.B #$F0                                ;;D202|D1E6+D1E6/D1E6\D1E6;
                      STA.B !PlayerYPosNext                     ;;D204|D1E8+D1E8/D1E8\D1E8;
                      LDA.B !PlayerYPosNext+1                   ;;D206|D1EA+D1EA/D1EA\D1EA;
                      ADC.B #$00                                ;;D208|D1EC+D1EC/D1EC\D1EC;
                      STA.B !PlayerYPosNext+1                   ;;D20A|D1EE+D1EE/D1EE\D1EE;
                    + RTS                                       ;;D20C|D1F0+D1F0/D1F0\D1F0; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02D1F1:          db $00,$04                                ;;D20D|D1F1+D1F1/D1F1\D1F1;
                                                                ;;                        ;
SetTreeTile:          LDA.W !YoshiXPos                          ;;D20F|D1F3+D1F3/D1F3\D1F3; \ Set X position of block
                      STA.B !TouchBlockXPos                     ;;D212|D1F6+D1F6/D1F6\D1F6;  |
                      LDA.W !YoshiXPos+1                        ;;D214|D1F8+D1F8/D1F8\D1F8;  |
                      STA.B !TouchBlockXPos+1                   ;;D217|D1FB+D1FB/D1FB\D1FB; /
                      LDA.W !YoshiYPos                          ;;D219|D1FD+D1FD/D1FD\D1FD; \ Set Y position of block
                      STA.B !TouchBlockYPos                     ;;D21C|D200+D200/D200\D200;  |
                      LDA.W !YoshiYPos+1                        ;;D21E|D202+D202/D202\D202;  |
                      STA.B !TouchBlockYPos+1                   ;;D221|D205+D205/D205\D205; /
                      LDA.B #$04                                ;;D223|D207+D207/D207\D207; \ Block to generate = Tree behind berry
                      STA.B !Map16TileGenerate                  ;;D225|D209+D209/D209\D209; /
                      JSL GenerateTile                          ;;D227|D20B+D20B/D20B\D20B;
Return02D20F:         RTL                                       ;;D22B|D20F+D20F/D20F\D20F; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $01                                    ;;D22C|D210+D210/D210\D210;
                                                                ;;                        ;
DATA_02D211:          db $FF,$10,$F0                            ;;D22D|D211+D211/D211\D211;
                                                                ;;                        ;
CODE_02D214:          LDA.B !byetudlrHold                       ;;D230|D214+D214/D214\D214;
                      AND.B #$03                                ;;D232|D216+D216/D216\D216;
                      BNE CODE_02D228                           ;;D234|D218+D218/D218\D218;
CODE_02D21A:          LDA.B !SpriteXSpeed,X                     ;;D236|D21A+D21A/D21A\D21A;
                      BEQ CODE_02D226                           ;;D238|D21C+D21C/D21C\D21C;
                      BPL +                                     ;;D23A|D21E+D21E/D21E\D21E;
                      INC.B !SpriteXSpeed,X                     ;;D23C|D220+D220/D220\D220;
                      INC.B !SpriteXSpeed,X                     ;;D23E|D222+D222/D222\D222;
                    + DEC.B !SpriteXSpeed,X                     ;;D240|D224+D224/D224\D224;
CODE_02D226:          BRA CODE_02D247                           ;;D242|D226+D226/D226\D226;
                                                                ;;                        ;
CODE_02D228:          TAY                                       ;;D244|D228+D228/D228\D228;
                      CPY.B #$01                                ;;D245|D229+D229/D229\D229;
                      BNE CODE_02D238                           ;;D247|D22B+D22B/D22B\D22B;
                      LDA.B !SpriteXSpeed,X                     ;;D249|D22D+D22D/D22D\D22D;
                      CMP.W DATA_02D211,Y                       ;;D24B|D22F+D22F/D22F\D22F;
                      BEQ CODE_02D247                           ;;D24E|D232+D232/D232\D232;
                      BPL CODE_02D21A                           ;;D250|D234+D234/D234\D234;
                      BRA CODE_02D241                           ;;D252|D236+D236/D236\D236;
                                                                ;;                        ;
CODE_02D238:          LDA.B !SpriteXSpeed,X                     ;;D254|D238+D238/D238\D238;
                      CMP.W DATA_02D211,Y                       ;;D256|D23A+D23A/D23A\D23A;
                      BEQ CODE_02D247                           ;;D259|D23D+D23D/D23D\D23D;
                      BMI CODE_02D21A                           ;;D25B|D23F+D23F/D23F\D23F;
CODE_02D241:          CLC                                       ;;D25D|D241+D241/D241\D241;
                      ADC.W Return02D20F,Y                      ;;D25E|D242+D242/D242\D242;
                      STA.B !SpriteXSpeed,X                     ;;D261|D245+D245/D245\D245;
CODE_02D247:          LDY.B #$00                                ;;D263|D247+D247/D247\D247;
                      LDA.B !SpriteNumber,X                     ;;D265|D249+D249/D249\D249;
                      CMP.B #$87                                ;;D267|D24B+D24B/D24B\D24B;
                      BNE CODE_02D25F                           ;;D269|D24D+D24D/D24D\D24D;
                      LDA.B !byetudlrHold                       ;;D26B|D24F+D24F/D24F\D24F;
                      AND.B #$0C                                ;;D26D|D251+D251/D251\D251;
                      BEQ +                                     ;;D26F|D253+D253/D253\D253;
                      LDY.B #$10                                ;;D271|D255+D255/D255\D255;
                      AND.B #$08                                ;;D273|D257+D257/D257\D257;
                      BEQ +                                     ;;D275|D259+D259/D259\D259;
                      LDY.B #$F0                                ;;D277|D25B+D25B/D25B\D25B;
                      BRA +                                     ;;D279|D25D+D25D/D25D\D25D;
                                                                ;;                        ;
CODE_02D25F:          LDY.B #$F8                                ;;D27B|D25F+D25F/D25F\D25F;
                      LDA.B !byetudlrHold                       ;;D27D|D261+D261/D261\D261;
                      AND.B #$0C                                ;;D27F|D263+D263/D263\D263;
                      BEQ +                                     ;;D281|D265+D265/D265\D265;
                      LDY.B #$F0                                ;;D283|D267+D267/D267\D267;
                      AND.B #$08                                ;;D285|D269+D269/D269\D269;
                      BNE +                                     ;;D287|D26B+D26B/D26B\D26B;
                      LDY.B #$08                                ;;D289|D26D+D26D/D26D\D26D;
                    + STY.B !_0                                 ;;D28B|D26F+D26F/D26F\D26F;
                      LDA.B !SpriteYSpeed,X                     ;;D28D|D271+D271/D271\D271;
                      CMP.B !_0                                 ;;D28F|D273+D273/D273\D273;
                      BEQ CODE_02D27F                           ;;D291|D275+D275/D275\D275;
                      BPL +                                     ;;D293|D277+D277/D277\D277;
                      INC.B !SpriteYSpeed,X                     ;;D295|D279+D279/D279\D279;
                      INC.B !SpriteYSpeed,X                     ;;D297|D27B+D27B/D27B\D27B;
                    + DEC.B !SpriteYSpeed,X                     ;;D299|D27D+D27D/D27D\D27D;
CODE_02D27F:          LDA.B !SpriteXSpeed,X                     ;;D29B|D27F+D27F/D27F\D27F;
                      STA.B !PlayerXSpeed                       ;;D29D|D281+D281/D281\D281;
                      LDA.B !SpriteYSpeed,X                     ;;D29F|D283+D283/D283\D283;
                      STA.B !PlayerYSpeed                       ;;D2A1|D285+D285/D285\D285;
                      RTL                                       ;;D2A3|D287+D287/D287\D287; Return
                                                                ;;                        ;
UpdateXPosNoGrvty:    TXA                                       ;;D2A4|D288+D288/D288\D288; \ Adjust index so we use X values rather than Y
                      CLC                                       ;;D2A5|D289+D289/D289\D289;  |
                      ADC.B #$0C                                ;;D2A6|D28A+D28A/D28A\D28A;  |
                      TAX                                       ;;D2A8|D28C+D28C/D28C\D28C; /
                      JSR UpdateYPosNoGrvty                     ;;D2A9|D28D+D28D/D28D\D28D;
                      LDX.W !CurSpriteProcess                   ;;D2AC|D290+D290/D290\D290; X = sprite index
                      RTS                                       ;;D2AF|D293+D293/D293\D293; Return
                                                                ;;                        ;
UpdateYPosNoGrvty:    LDA.B !SpriteYSpeed,X                     ;;D2B0|D294+D294/D294\D294; \ $14EC or $14F8 += 16 * speed
                      ASL A                                     ;;D2B2|D296+D296/D296\D296;  |
                      ASL A                                     ;;D2B3|D297+D297/D297\D297;  |
                      ASL A                                     ;;D2B4|D298+D298/D298\D298;  |
                      ASL A                                     ;;D2B5|D299+D299/D299\D299;  |
                      CLC                                       ;;D2B6|D29A+D29A/D29A\D29A;  |
                      ADC.W !SpriteYPosSpx,X                    ;;D2B7|D29B+D29B/D29B\D29B;  |
                      STA.W !SpriteYPosSpx,X                    ;;D2BA|D29E+D29E/D29E\D29E; /
                      PHP                                       ;;D2BD|D2A1+D2A1/D2A1\D2A1;
                      PHP                                       ;;D2BE|D2A2+D2A2/D2A2\D2A2;
                      LDY.B #$00                                ;;D2BF|D2A3+D2A3/D2A3\D2A3;
                      LDA.B !SpriteYSpeed,X                     ;;D2C1|D2A5+D2A5/D2A5\D2A5; \ Amount to move sprite = speed / 16
                      LSR A                                     ;;D2C3|D2A7+D2A7/D2A7\D2A7;  |
                      LSR A                                     ;;D2C4|D2A8+D2A8/D2A8\D2A8;  |
                      LSR A                                     ;;D2C5|D2A9+D2A9/D2A9\D2A9;  |
                      LSR A                                     ;;D2C6|D2AA+D2AA/D2AA\D2AA; /
                      CMP.B #$08                                ;;D2C7|D2AB+D2AB/D2AB\D2AB; \ If speed was negative...
                      BCC +                                     ;;D2C9|D2AD+D2AD/D2AD\D2AD;  |
                      ORA.B #$F0                                ;;D2CB|D2AF+D2AF/D2AF\D2AF;  | ...set high bits
                      DEY                                       ;;D2CD|D2B1+D2B1/D2B1\D2B1; /
                    + PLP                                       ;;D2CE|D2B2+D2B2/D2B2\D2B2;
                      PHA                                       ;;D2CF|D2B3+D2B3/D2B3\D2B3; \ Add to position
                      ADC.B !SpriteYPosLow,X                    ;;D2D0|D2B4+D2B4/D2B4\D2B4;  |
                      STA.B !SpriteYPosLow,X                    ;;D2D2|D2B6+D2B6/D2B6\D2B6;  |
                      TYA                                       ;;D2D4|D2B8+D2B8/D2B8\D2B8;  |
                      ADC.W !SpriteYPosHigh,X                   ;;D2D5|D2B9+D2B9/D2B9\D2B9;  |
                      STA.W !SpriteYPosHigh,X                   ;;D2D8|D2BC+D2BC/D2BC\D2BC;  |
                      PLA                                       ;;D2DB|D2BF+D2BF/D2BF\D2BF; /
                      PLP                                       ;;D2DC|D2C0+D2C0/D2C0\D2C0;
                      ADC.B #$00                                ;;D2DD|D2C1+D2C1/D2C1\D2C1;
                      STA.W !SpriteXMovement                    ;;D2DF|D2C3+D2C3/D2C3\D2C3; $1491 = amount sprite was moved
                      RTS                                       ;;D2E2|D2C6+D2C6/D2C6\D2C6; Return
                                                                ;;                        ;
                      STA.B !_0                                 ;;D2E3|D2C7+D2C7/D2C7\D2C7; Unreachable
                      LDA.B !PlayerXPosNext                     ;;D2E5|D2C9+D2C9/D2C9\D2C9; \ Save Mario's position
                      PHA                                       ;;D2E7|D2CB+D2CB/D2CB\D2CB;  |
                      LDA.B !PlayerXPosNext+1                   ;;D2E8|D2CC+D2CC/D2CC\D2CC;  |
                      PHA                                       ;;D2EA|D2CE+D2CE/D2CE\D2CE;  |
                      LDA.B !PlayerYPosNext                     ;;D2EB|D2CF+D2CF/D2CF\D2CF;  |
                      PHA                                       ;;D2ED|D2D1+D2D1/D2D1\D2D1;  |
                      LDA.B !PlayerYPosNext+1                   ;;D2EE|D2D2+D2D2/D2D2\D2D2;  |
                      PHA                                       ;;D2F0|D2D4+D2D4/D2D4\D2D4; /
                      LDA.W !SpriteXPosLow,Y                    ;;D2F1|D2D5+D2D5/D2D5\D2D5; \ Mario's position = Sprite position
                      STA.B !PlayerXPosNext                     ;;D2F4|D2D8+D2D8/D2D8\D2D8;  |
                      LDA.W !SpriteXPosHigh,Y                   ;;D2F6|D2DA+D2DA/D2DA\D2DA;  |
                      STA.B !PlayerXPosNext+1                   ;;D2F9|D2DD+D2DD/D2DD\D2DD;  |
                      LDA.W !SpriteYPosLow,Y                    ;;D2FB|D2DF+D2DF/D2DF\D2DF;  |
                      STA.B !PlayerYPosNext                     ;;D2FE|D2E2+D2E2/D2E2\D2E2;  |
                      LDA.W !SpriteYPosHigh,Y                   ;;D300|D2E4+D2E4/D2E4\D2E4;  |
                      STA.B !PlayerYPosNext+1                   ;;D303|D2E7+D2E7/D2E7\D2E7; /
                      LDA.B !_0                                 ;;D305|D2E9+D2E9/D2E9\D2E9;
                      JSR CODE_02D2FB                           ;;D307|D2EB+D2EB/D2EB\D2EB;
                      PLA                                       ;;D30A|D2EE+D2EE/D2EE\D2EE; \ Restore Mario's position
                      STA.B !PlayerYPosNext+1                   ;;D30B|D2EF+D2EF/D2EF\D2EF;  |
                      PLA                                       ;;D30D|D2F1+D2F1/D2F1\D2F1;  |
                      STA.B !PlayerYPosNext                     ;;D30E|D2F2+D2F2/D2F2\D2F2;  |
                      PLA                                       ;;D310|D2F4+D2F4/D2F4\D2F4;  |
                      STA.B !PlayerXPosNext+1                   ;;D311|D2F5+D2F5/D2F5\D2F5;  |
                      PLA                                       ;;D313|D2F7+D2F7/D2F7\D2F7;  |
                      STA.B !PlayerXPosNext                     ;;D314|D2F8+D2F8/D2F8\D2F8; /
                      RTS                                       ;;D316|D2FA+D2FA/D2FA\D2FA; Return
                                                                ;;                        ;
CODE_02D2FB:          STA.B !_1                                 ;;D317|D2FB+D2FB/D2FB\D2FB;
                      PHX                                       ;;D319|D2FD+D2FD/D2FD\D2FD;
                      PHY                                       ;;D31A|D2FE+D2FE/D2FE\D2FE;
                      JSR SubVertPosBnk2                        ;;D31B|D2FF+D2FF/D2FF\D2FF;
                      STY.B !_2                                 ;;D31E|D302+D302/D302\D302;
                      LDA.B !_E                                 ;;D320|D304+D304/D304\D304;
                      BPL +                                     ;;D322|D306+D306/D306\D306;
                      EOR.B #$FF                                ;;D324|D308+D308/D308\D308;
                      CLC                                       ;;D326|D30A+D30A/D30A\D30A;
                      ADC.B #$01                                ;;D327|D30B+D30B/D30B\D30B;
                    + STA.B !_C                                 ;;D329|D30D+D30D/D30D\D30D;
                      JSR SubHorizPosBnk2                       ;;D32B|D30F+D30F/D30F\D30F;
                      STY.B !_3                                 ;;D32E|D312+D312/D312\D312;
                      LDA.B !_F                                 ;;D330|D314+D314/D314\D314;
                      BPL +                                     ;;D332|D316+D316/D316\D316;
                      EOR.B #$FF                                ;;D334|D318+D318/D318\D318;
                      CLC                                       ;;D336|D31A+D31A/D31A\D31A;
                      ADC.B #$01                                ;;D337|D31B+D31B/D31B\D31B;
                    + STA.B !_D                                 ;;D339|D31D+D31D/D31D\D31D;
                      LDY.B #$00                                ;;D33B|D31F+D31F/D31F\D31F;
                      LDA.B !_D                                 ;;D33D|D321+D321/D321\D321;
                      CMP.B !_C                                 ;;D33F|D323+D323/D323\D323;
                      BCS +                                     ;;D341|D325+D325/D325\D325;
                      INY                                       ;;D343|D327+D327/D327\D327;
                      PHA                                       ;;D344|D328+D328/D328\D328;
                      LDA.B !_C                                 ;;D345|D329+D329/D329\D329;
                      STA.B !_D                                 ;;D347|D32B+D32B/D32B\D32B;
                      PLA                                       ;;D349|D32D+D32D/D32D\D32D;
                      STA.B !_C                                 ;;D34A|D32E+D32E/D32E\D32E;
                    + LDA.B #$00                                ;;D34C|D330+D330/D330\D330;
                      STA.B !_B                                 ;;D34E|D332+D332/D332\D332;
                      STA.B !_0                                 ;;D350|D334+D334/D334\D334;
                      LDX.B !_1                                 ;;D352|D336+D336/D336\D336;
CODE_02D338:          LDA.B !_B                                 ;;D354|D338+D338/D338\D338;
                      CLC                                       ;;D356|D33A+D33A/D33A\D33A;
                      ADC.B !_C                                 ;;D357|D33B+D33B/D33B\D33B;
                      CMP.B !_D                                 ;;D359|D33D+D33D/D33D\D33D;
                      BCC +                                     ;;D35B|D33F+D33F/D33F\D33F;
                      SBC.B !_D                                 ;;D35D|D341+D341/D341\D341;
                      INC.B !_0                                 ;;D35F|D343+D343/D343\D343;
                    + STA.B !_B                                 ;;D361|D345+D345/D345\D345;
                      DEX                                       ;;D363|D347+D347/D347\D347;
                      BNE CODE_02D338                           ;;D364|D348+D348/D348\D348;
                      TYA                                       ;;D366|D34A+D34A/D34A\D34A;
                      BEQ +                                     ;;D367|D34B+D34B/D34B\D34B;
                      LDA.B !_0                                 ;;D369|D34D+D34D/D34D\D34D;
                      PHA                                       ;;D36B|D34F+D34F/D34F\D34F;
                      LDA.B !_1                                 ;;D36C|D350+D350/D350\D350;
                      STA.B !_0                                 ;;D36E|D352+D352/D352\D352;
                      PLA                                       ;;D370|D354+D354/D354\D354;
                      STA.B !_1                                 ;;D371|D355+D355/D355\D355;
                    + LDA.B !_0                                 ;;D373|D357+D357/D357\D357;
                      LDY.B !_2                                 ;;D375|D359+D359/D359\D359;
                      BEQ +                                     ;;D377|D35B+D35B/D35B\D35B;
                      EOR.B #$FF                                ;;D379|D35D+D35D/D35D\D35D;
                      CLC                                       ;;D37B|D35F+D35F/D35F\D35F;
                      ADC.B #$01                                ;;D37C|D360+D360/D360\D360;
                      STA.B !_0                                 ;;D37E|D362+D362/D362\D362;
                    + LDA.B !_1                                 ;;D380|D364+D364/D364\D364;
                      LDY.B !_3                                 ;;D382|D366+D366/D366\D366;
                      BEQ +                                     ;;D384|D368+D368/D368\D368;
                      EOR.B #$FF                                ;;D386|D36A+D36A/D36A\D36A;
                      CLC                                       ;;D388|D36C+D36C/D36C\D36C;
                      ADC.B #$01                                ;;D389|D36D+D36D/D36D\D36D;
                      STA.B !_1                                 ;;D38B|D36F+D36F/D36F\D36F;
                    + PLY                                       ;;D38D|D371+D371/D371\D371;
                      PLX                                       ;;D38E|D372+D372/D372\D372;
                      RTS                                       ;;D38F|D373+D373/D373\D373; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02D374:          db $0C,$1C                                ;;D390|D374+D374/D374\D374;
                                                                ;;                        ;
DATA_02D376:          db $01,$02                                ;;D392|D376+D376/D376\D376;
                                                                ;;                        ;
GetDrawInfo2:         STZ.W !SpriteOffscreenVert,X              ;;D394|D378+D378/D378\D378;
                      STZ.W !SpriteOffscreenX,X                 ;;D397|D37B+D37B/D37B\D37B;
                      LDA.B !SpriteXPosLow,X                    ;;D39A|D37E+D37E/D37E\D37E;
                      CMP.B !Layer1XPos                         ;;D39C|D380+D380/D380\D380;
                      LDA.W !SpriteXPosHigh,X                   ;;D39E|D382+D382/D382\D382;
                      SBC.B !Layer1XPos+1                       ;;D3A1|D385+D385/D385\D385;
                      BEQ +                                     ;;D3A3|D387+D387/D387\D387;
                      INC.W !SpriteOffscreenX,X                 ;;D3A5|D389+D389/D389\D389;
                    + LDA.W !SpriteXPosHigh,X                   ;;D3A8|D38C+D38C/D38C\D38C;
                      XBA                                       ;;D3AB|D38F+D38F/D38F\D38F;
                      LDA.B !SpriteXPosLow,X                    ;;D3AC|D390+D390/D390\D390;
                      REP #$20                                  ;;D3AE|D392+D392/D392\D392; Accum (16 bit)
                      SEC                                       ;;D3B0|D394+D394/D394\D394;
                      SBC.B !Layer1XPos                         ;;D3B1|D395+D395/D395\D395;
                      CLC                                       ;;D3B3|D397+D397/D397\D397;
                      ADC.W #$0040                              ;;D3B4|D398+D398/D398\D398;
                      CMP.W #$0180                              ;;D3B7|D39B+D39B/D39B\D39B;
                      SEP #$20                                  ;;D3BA|D39E+D39E/D39E\D39E; Accum (8 bit)
                      ROL A                                     ;;D3BC|D3A0+D3A0/D3A0\D3A0;
                      AND.B #$01                                ;;D3BD|D3A1+D3A1/D3A1\D3A1;
                      STA.W !SpriteWayOffscreenX,X              ;;D3BF|D3A3+D3A3/D3A3\D3A3;
                      BNE CODE_02D3E7                           ;;D3C2|D3A6+D3A6/D3A6\D3A6;
                      LDY.B #$00                                ;;D3C4|D3A8+D3A8/D3A8\D3A8;
                      LDA.W !SpriteTweaker1662,X                ;;D3C6|D3AA+D3AA/D3AA\D3AA;
                      AND.B #$20                                ;;D3C9|D3AD+D3AD/D3AD\D3AD;
                      BEQ CODE_02D3B2                           ;;D3CB|D3AF+D3AF/D3AF\D3AF;
                      INY                                       ;;D3CD|D3B1+D3B1/D3B1\D3B1;
CODE_02D3B2:          LDA.B !SpriteYPosLow,X                    ;;D3CE|D3B2+D3B2/D3B2\D3B2;
                      CLC                                       ;;D3D0|D3B4+D3B4/D3B4\D3B4;
                      ADC.W DATA_02D374,Y                       ;;D3D1|D3B5+D3B5/D3B5\D3B5;
                      PHP                                       ;;D3D4|D3B8+D3B8/D3B8\D3B8;
                      CMP.B !Layer1YPos                         ;;D3D5|D3B9+D3B9/D3B9\D3B9;
                      ROL.B !_0                                 ;;D3D7|D3BB+D3BB/D3BB\D3BB;
                      PLP                                       ;;D3D9|D3BD+D3BD/D3BD\D3BD;
                      LDA.W !SpriteYPosHigh,X                   ;;D3DA|D3BE+D3BE/D3BE\D3BE;
                      ADC.B #$00                                ;;D3DD|D3C1+D3C1/D3C1\D3C1;
                      LSR.B !_0                                 ;;D3DF|D3C3+D3C3/D3C3\D3C3;
                      SBC.B !Layer1YPos+1                       ;;D3E1|D3C5+D3C5/D3C5\D3C5;
                      BEQ +                                     ;;D3E3|D3C7+D3C7/D3C7\D3C7;
                      LDA.W !SpriteOffscreenVert,X              ;;D3E5|D3C9+D3C9/D3C9\D3C9;
                      ORA.W DATA_02D376,Y                       ;;D3E8|D3CC+D3CC/D3CC\D3CC;
                      STA.W !SpriteOffscreenVert,X              ;;D3EB|D3CF+D3CF/D3CF\D3CF;
                    + DEY                                       ;;D3EE|D3D2+D3D2/D3D2\D3D2;
                      BPL CODE_02D3B2                           ;;D3EF|D3D3+D3D3/D3D3\D3D3;
                      LDY.W !SpriteOAMIndex,X                   ;;D3F1|D3D5+D3D5/D3D5\D3D5; Y = Index into sprite OAM
                      LDA.B !SpriteXPosLow,X                    ;;D3F4|D3D8+D3D8/D3D8\D3D8;
                      SEC                                       ;;D3F6|D3DA+D3DA/D3DA\D3DA;
                      SBC.B !Layer1XPos                         ;;D3F7|D3DB+D3DB/D3DB\D3DB;
                      STA.B !_0                                 ;;D3F9|D3DD+D3DD/D3DD\D3DD;
                      LDA.B !SpriteYPosLow,X                    ;;D3FB|D3DF+D3DF/D3DF\D3DF;
                      SEC                                       ;;D3FD|D3E1+D3E1/D3E1\D3E1;
                      SBC.B !Layer1YPos                         ;;D3FE|D3E2+D3E2/D3E2\D3E2;
                      STA.B !_1                                 ;;D400|D3E4+D3E4/D3E4\D3E4;
                      RTS                                       ;;D402|D3E6+D3E6/D3E6\D3E6; Return
                                                                ;;                        ;
CODE_02D3E7:          PLA                                       ;;D403|D3E7+D3E7/D3E7\D3E7;
                      PLA                                       ;;D404|D3E8+D3E8/D3E8\D3E8;
                      RTS                                       ;;D405|D3E9+D3E9/D3E9\D3E9; Return
                                                                ;;                        ;
Layer3SmashMain:      JSL CODE_00FF61                           ;;D406|D3EA+D3EA/D3EA\D3EA;
                      LDA.B !SpriteLock                         ;;D40A|D3EE+D3EE/D3EE\D3EE;
                      BNE Return02D444                          ;;D40C|D3F0+D3F0/D3F0\D3F0;
                      JSR CODE_02D49C                           ;;D40E|D3F2+D3F2/D3F2\D3F2;
                      LDY.B #$00                                ;;D411|D3F5+D3F5/D3F5\D3F5;
                      LDA.W !Layer1DXPos                        ;;D413|D3F7+D3F7/D3F7\D3F7;
                      BPL +                                     ;;D416|D3FA+D3FA/D3FA\D3FA;
                      DEY                                       ;;D418|D3FC+D3FC/D3FC\D3FC;
                    + CLC                                       ;;D419|D3FD+D3FD/D3FD\D3FD;
                      ADC.B !SpriteXPosLow,X                    ;;D41A|D3FE+D3FE/D3FE\D3FE;
                      STA.B !SpriteXPosLow,X                    ;;D41C|D400+D400/D400\D400;
                      TYA                                       ;;D41E|D402+D402/D402\D402;
                      ADC.W !SpriteXPosHigh,X                   ;;D41F|D403+D403/D403\D403;
                      STA.W !SpriteXPosHigh,X                   ;;D422|D406+D406/D406\D406;
                      LDA.B !SpriteTableC2,X                    ;;D425|D409+D409/D409\D409;
                      JSL ExecutePtr                            ;;D427|D40B+D40B/D40B\D40B;
                                                                ;;                        ;
                      dw CODE_02D419                            ;;D42B|D40F+D40F/D40F\D40F;
                      dw CODE_02D445                            ;;D42D|D411+D411/D411\D411;
                      dw CODE_02D455                            ;;D42F|D413+D413/D413\D413;
                      dw CODE_02D481                            ;;D431|D415+D415/D415\D415;
                      dw CODE_02D489                            ;;D433|D417+D417/D417\D417;
                                                                ;;                        ;
CODE_02D419:          LDA.W !SpriteWillAppear                   ;;D435|D419+D419/D419\D419;
                      BEQ +                                     ;;D438|D41C+D41C/D41C\D41C;
                      JSR OffScrEraseSprBnk2                    ;;D43A|D41E+D41E/D41E\D41E;
                      RTS                                       ;;D43D|D421+D421/D421\D421; Return
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,X                   ;;D43E|D422+D422/D422\D422;
                      BNE Return02D444                          ;;D441|D425+D425/D425\D425;
                      INC.B !SpriteTableC2,X                    ;;D443|D427+D427/D427\D427;
                      LDA.B #con($80,$80,$80,$68,$68)           ;;D445|D429+D429/D429\D429;
                      STA.W !SpriteMisc1540,X                   ;;D447|D42B+D42B/D42B\D42B;
                      JSL GetRand                               ;;D44A|D42E+D42E/D42E\D42E;
                      AND.B #$3F                                ;;D44E|D432+D432/D432\D432;
                      ORA.B #$80                                ;;D450|D434+D434/D434\D434;
                      STA.B !SpriteXPosLow,X                    ;;D452|D436+D436/D436\D436;
                      LDA.B #$FF                                ;;D454|D438+D438/D438\D438;
                      STA.W !SpriteXPosHigh,X                   ;;D456|D43A+D43A/D43A\D43A;
                      STZ.B !SpriteYPosLow,X                    ;;D459|D43D+D43D/D43D\D43D;
                      STZ.W !SpriteYPosHigh,X                   ;;D45B|D43F+D43F/D43F\D43F;
                      STZ.B !SpriteYSpeed,X                     ;;D45E|D442+D442/D442\D442; Sprite Y Speed = 0
Return02D444:         RTL                                       ;;D460|D444+D444/D444\D444; Return
                                                                ;;                        ;
CODE_02D445:          LDA.W !SpriteMisc1540,X                   ;;D461|D445+D445/D445\D445;
                      BEQ +                                     ;;D464|D448+D448/D448\D448;
                      LDA.B #con($04,$04,$04,$06,$06)           ;;D466|D44A+D44A/D44A\D44A;
                      STA.B !SpriteYSpeed,X                     ;;D468|D44C+D44C/D44C\D44C;
                      JSR UpdateYPosNoGrvty                     ;;D46A|D44E+D44E/D44E\D44E;
                      RTL                                       ;;D46D|D451+D451/D451\D451; Return
                                                                ;;                        ;
                    + INC.B !SpriteTableC2,X                    ;;D46E|D452+D452/D452\D452;
                      RTL                                       ;;D470|D454+D454/D454\D454; Return
                                                                ;;                        ;
CODE_02D455:          JSR UpdateYPosNoGrvty                     ;;D471|D455+D455/D455\D455;
                      LDA.B !SpriteYSpeed,X                     ;;D474|D458+D458/D458\D458;
                      BMI CODE_02D460                           ;;D476|D45A+D45A/D45A\D45A;
                      CMP.B #con($40,$40,$40,$70,$70)           ;;D478|D45C+D45C/D45C\D45C;
                      BCS +                                     ;;D47A|D45E+D45E/D45E\D45E;
CODE_02D460:          CLC                                       ;;D47C|D460+D460/D460\D460;
                      ADC.B #con($07,$07,$07,$0A,$0A)           ;;D47D|D461+D461/D461\D461;
                      STA.B !SpriteYSpeed,X                     ;;D47F|D463+D463/D463\D463;
                    + LDA.B !SpriteYPosLow,X                    ;;D481|D465+D465/D465\D465;
                      CMP.B #$A0                                ;;D483|D467+D467/D467\D467;
                      BCC +                                     ;;D485|D469+D469/D469\D469;
                      AND.B #$F0                                ;;D487|D46B+D46B/D46B\D46B;
                      STA.B !SpriteYPosLow,X                    ;;D489|D46D+D46D/D46D\D46D;
                      LDA.B #$50                                ;;D48B|D46F+D46F/D46F\D46F; \ Set ground shake timer
                      STA.W !ScreenShakeTimer                   ;;D48D|D471+D471/D471\D471; /
                      LDA.B #!SFX_KAPOW                         ;;D490|D474+D474/D474\D474; \ Play sound effect
                      STA.W !SPCIO3                             ;;D492|D476+D476/D476\D476; /
                      LDA.B #$30                                ;;D495|D479+D479/D479\D479;
                      STA.W !SpriteMisc1540,X                   ;;D497|D47B+D47B/D47B\D47B;
                      INC.B !SpriteTableC2,X                    ;;D49A|D47E+D47E/D47E\D47E;
                    + RTL                                       ;;D49C|D480+D480/D480\D480; Return
                                                                ;;                        ;
CODE_02D481:          LDA.W !SpriteMisc1540,X                   ;;D49D|D481+D481/D481\D481;
                      BNE +                                     ;;D4A0|D484+D484/D484\D484;
                      INC.B !SpriteTableC2,X                    ;;D4A2|D486+D486/D486\D486;
                    + RTL                                       ;;D4A4|D488+D488/D488\D488; Return
                                                                ;;                        ;
CODE_02D489:          LDA.B #con($E0,$E0,$E0,$D8,$D8)           ;;D4A5|D489+D489/D489\D489;
                      STA.B !SpriteYSpeed,X                     ;;D4A7|D48B+D48B/D48B\D48B;
                      JSR UpdateYPosNoGrvty                     ;;D4A9|D48D+D48D/D48D\D48D;
                      LDA.B !SpriteYPosLow,X                    ;;D4AC|D490+D490/D490\D490;
                      BNE +                                     ;;D4AE|D492+D492/D492\D492;
                      STZ.B !SpriteTableC2,X                    ;;D4B0|D494+D494/D494\D494;
                      LDA.B #con($A0,$A0,$A0,$88,$88)           ;;D4B2|D496+D496/D496\D496;
                      STA.W !SpriteMisc1540,X                   ;;D4B4|D498+D498/D498\D498;
                    + RTL                                       ;;D4B7|D49B+D49B/D49B\D49B; Return
                                                                ;;                        ;
CODE_02D49C:          LDA.B #$00                                ;;D4B8|D49C+D49C/D49C\D49C;
                      LDY.B !Powerup                            ;;D4BA|D49E+D49E/D49E\D49E;
                      BEQ +                                     ;;D4BC|D4A0+D4A0/D4A0\D4A0;
                      LDY.B !PlayerIsDucking                    ;;D4BE|D4A2+D4A2/D4A2\D4A2;
                      BNE +                                     ;;D4C0|D4A4+D4A4/D4A4\D4A4;
                      LDA.B #$10                                ;;D4C2|D4A6+D4A6/D4A6\D4A6;
                    + CLC                                       ;;D4C4|D4A8+D4A8/D4A8\D4A8;
                      ADC.B !SpriteYPosLow,X                    ;;D4C5|D4A9+D4A9/D4A9\D4A9;
                      CMP.B !PlayerYPosScrRel                   ;;D4C7|D4AB+D4AB/D4AB\D4AB;
                      BCC CODE_02D4EF                           ;;D4C9|D4AD+D4AD/D4AD\D4AD;
                      LDA.B !SpriteXPosLow,X                    ;;D4CB|D4AF+D4AF/D4AF\D4AF;
                      STA.B !_0                                 ;;D4CD|D4B1+D4B1/D4B1\D4B1;
                      LDA.W !SpriteXPosHigh,X                   ;;D4CF|D4B3+D4B3/D4B3\D4B3;
                      STA.B !_1                                 ;;D4D2|D4B6+D4B6/D4B6\D4B6;
                      REP #$20                                  ;;D4D4|D4B8+D4B8/D4B8\D4B8; Accum (16 bit)
                      LDA.B !PlayerXPosScrRel                   ;;D4D6|D4BA+D4BA/D4BA\D4BA;
                      CLC                                       ;;D4D8|D4BC+D4BC/D4BC\D4BC;
                      ADC.B !_0                                 ;;D4D9|D4BD+D4BD/D4BD\D4BD;
                      SEC                                       ;;D4DB|D4BF+D4BF/D4BF\D4BF;
                      SBC.W #$0030                              ;;D4DC|D4C0+D4C0/D4C0\D4C0;
                      CMP.W #$0090                              ;;D4DF|D4C3+D4C3/D4C3\D4C3;
                      BCS CODE_02D4EF                           ;;D4E2|D4C6+D4C6/D4C6\D4C6;
                      SEC                                       ;;D4E4|D4C8+D4C8/D4C8\D4C8;
                      SBC.W #$0008                              ;;D4E5|D4C9+D4C9/D4C9\D4C9;
                      CMP.W #$0080                              ;;D4E8|D4CC+D4CC/D4CC\D4CC;
                      SEP #$20                                  ;;D4EB|D4CF+D4CF/D4CF\D4CF; Accum (8 bit)
                      BCS CODE_02D4E5                           ;;D4ED|D4D1+D4D1/D4D1\D4D1;
                      LDA.B !PlayerInAir                        ;;D4EF|D4D3+D4D3/D4D3\D4D3;
                      BNE +                                     ;;D4F1|D4D5+D4D5/D4D5\D4D5;
                      JSL HurtMario                             ;;D4F3|D4D7+D4D7/D4D7\D4D7;
                      RTS                                       ;;D4F7|D4DB+D4DB/D4DB\D4DB; Return
                                                                ;;                        ;
                    + STZ.B !PlayerYSpeed                       ;;D4F8|D4DC+D4DC/D4DC\D4DC;
                      LDA.B !SpriteYSpeed,X                     ;;D4FA|D4DE+D4DE/D4DE\D4DE;
                      BMI +                                     ;;D4FC|D4E0+D4E0/D4E0\D4E0;
                      STA.B !PlayerYSpeed                       ;;D4FE|D4E2+D4E2/D4E2\D4E2;
                    + RTS                                       ;;D500|D4E4+D4E4/D4E4\D4E4; Return
                                                                ;;                        ;
CODE_02D4E5:          PHP                                       ;;D501|D4E5+D4E5/D4E5\D4E5;
                      LDA.B #$08                                ;;D502|D4E6+D4E6/D4E6\D4E6;
                      PLP                                       ;;D504|D4E8+D4E8/D4E8\D4E8;
                      BPL +                                     ;;D505|D4E9+D4E9/D4E9\D4E9;
                      LDA.B #$F8                                ;;D507|D4EB+D4EB/D4EB\D4EB;
                    + STA.B !PlayerXSpeed                       ;;D509|D4ED+D4ED/D4ED\D4ED;
CODE_02D4EF:          SEP #$20                                  ;;D50B|D4EF+D4EF/D4EF\D4EF; Accum (8 bit)
                      RTS                                       ;;D50D|D4F1+D4F1/D4F1\D4F1; Return
                                                                ;;                        ;
                                                                ;;                        ;
                      db $80,$40,$20,$10,$08,$04,$02,$01        ;;D50E|D4F2+D4F2/D4F2\D4F2;
                                                                ;;                        ;
SubHorizPosBnk2:      LDY.B #$00                                ;;D516|D4FA+D4FA/D4FA\D4FA;
                      LDA.B !PlayerXPosNext                     ;;D518|D4FC+D4FC/D4FC\D4FC;
                      SEC                                       ;;D51A|D4FE+D4FE/D4FE\D4FE;
                      SBC.B !SpriteXPosLow,X                    ;;D51B|D4FF+D4FF/D4FF\D4FF;
                      STA.B !_F                                 ;;D51D|D501+D501/D501\D501;
                      LDA.B !PlayerXPosNext+1                   ;;D51F|D503+D503/D503\D503;
                      SBC.W !SpriteXPosHigh,X                   ;;D521|D505+D505/D505\D505;
                      BPL +                                     ;;D524|D508+D508/D508\D508;
                      INY                                       ;;D526|D50A+D50A/D50A\D50A;
                    + RTS                                       ;;D527|D50B+D50B/D50B\D50B; Return
                                                                ;;                        ;
SubVertPosBnk2:       LDY.B #$00                                ;;D528|D50C+D50C/D50C\D50C;
                      LDA.B !PlayerYPosNext                     ;;D52A|D50E+D50E/D50E\D50E;
                      SEC                                       ;;D52C|D510+D510/D510\D510;
                      SBC.B !SpriteYPosLow,X                    ;;D52D|D511+D511/D511\D511;
                      STA.B !_E                                 ;;D52F|D513+D513/D513\D513;
                      LDA.B !PlayerYPosNext+1                   ;;D531|D515+D515/D515\D515;
                      SBC.W !SpriteYPosHigh,X                   ;;D533|D517+D517/D517\D517;
                      BPL +                                     ;;D536|D51A+D51A/D51A\D51A;
                      INY                                       ;;D538|D51C+D51C/D51C\D51C;
                    + RTS                                       ;;D539|D51D+D51D/D51D\D51D; Return
                                                                ;;                        ;
                      %insert_empty($46,$62,$62,$62,$62)        ;;D53A|D51E+D51E/D51E\D51E;
                                                                ;;                        ;
StompSFX2:            db !SFX_STOMP1                            ;;D580|D580+D580/D580\D580;
                      db !SFX_STOMP2                            ;;D581|D581+D581/D581\D581;
                      db !SFX_STOMP3                            ;;D582|D582+D582/D582\D582;
                      db !SFX_STOMP4                            ;;D583|D583+D583/D583\D583;
                      db !SFX_STOMP5                            ;;D584|D584+D584/D584\D584;
                      db !SFX_STOMP6                            ;;D585|D585+D585/D585\D585;
                      db !SFX_STOMP7                            ;;D586|D586+D586/D586\D586;
                                                                ;;                        ;
BanzaiBillRt:         JSR BanzaiBillGfxRt                       ;;D587|D587+D587/D587\D587;
                      LDA.W !SpriteStatus,X                     ;;D58A|D58A+D58A/D58A\D58A;
                      CMP.B #$02                                ;;D58D|D58D+D58D/D58D\D58D;
                      BEQ +                                     ;;D58F|D58F+D58F/D58F\D58F;
                      LDA.B !SpriteLock                         ;;D591|D591+D591/D591\D591;
                      BNE +                                     ;;D593|D593+D593/D593\D593;
                      JSR SubOffscreen0Bnk2                     ;;D595|D595+D595/D595\D595;
                      LDA.B #$E8                                ;;D598|D598+D598/D598\D598;
                      STA.B !SpriteXSpeed,X                     ;;D59A|D59A+D59A/D59A\D59A;
                      JSR UpdateXPosNoGrvty                     ;;D59C|D59C+D59C/D59C\D59C;
                      JSL MarioSprInteract                      ;;D59F|D59F+D59F/D59F\D59F;
                    + RTS                                       ;;D5A3|D5A3+D5A3/D5A3\D5A3; Return
                                                                ;;                        ;
                                                                ;;                        ;
BanzaiBillTileXOff:   db $00,$10,$20,$30,$00,$10,$20,$30        ;;D5A4|D5A4+D5A4/D5A4\D5A4;
                      db $00,$10,$20,$30,$00,$10,$20,$30        ;;D5AC|D5AC+D5AC/D5AC\D5AC;
BanzaiBillTileYOff:   db $00,$00,$00,$00,$10,$10,$10,$10        ;;D5B4|D5B4+D5B4/D5B4\D5B4;
                      db $20,$20,$20,$20,$30,$30,$30,$30        ;;D5BC|D5BC+D5BC/D5BC\D5BC;
BanzaiBillTiles:      db $80,$82,$84,$86,$A0,$88,$CE,$EE        ;;D5C4|D5C4+D5C4/D5C4\D5C4;
                      db $C0,$C2,$CE,$EE,$8E,$AE,$84,$86        ;;D5CC|D5CC+D5CC/D5CC\D5CC;
BanzaiBillTileProps:  db $33,$33,$33,$33,$33,$33,$33,$33        ;;D5D4|D5D4+D5D4/D5D4\D5D4;
                      db $33,$33,$33,$33,$33,$33,$B3,$B3        ;;D5DC|D5DC+D5DC/D5DC\D5DC;
                                                                ;;                        ;
BanzaiBillGfxRt:      JSR GetDrawInfo2                          ;;D5E4|D5E4+D5E4/D5E4\D5E4;
                      PHX                                       ;;D5E7|D5E7+D5E7/D5E7\D5E7;
                      LDX.B #$0F                                ;;D5E8|D5E8+D5E8/D5E8\D5E8;
                    - LDA.B !_0                                 ;;D5EA|D5EA+D5EA/D5EA\D5EA;
                      CLC                                       ;;D5EC|D5EC+D5EC/D5EC\D5EC;
                      ADC.W BanzaiBillTileXOff,X                ;;D5ED|D5ED+D5ED/D5ED\D5ED;
                      STA.W !OAMTileXPos+$100,Y                 ;;D5F0|D5F0+D5F0/D5F0\D5F0;
                      LDA.B !_1                                 ;;D5F3|D5F3+D5F3/D5F3\D5F3;
                      CLC                                       ;;D5F5|D5F5+D5F5/D5F5\D5F5;
                      ADC.W BanzaiBillTileYOff,X                 ;;D5F6|D5F6+D5F6/D5F6\D5F6;
                      STA.W !OAMTileYPos+$100,Y                 ;;D5F9|D5F9+D5F9/D5F9\D5F9;
                      LDA.W BanzaiBillTiles,X                   ;;D5FC|D5FC+D5FC/D5FC\D5FC;
                      STA.W !OAMTileNo+$100,Y                   ;;D5FF|D5FF+D5FF/D5FF\D5FF;
                      LDA.W BanzaiBillTileProps,X               ;;D602|D602+D602/D602\D602;
                      STA.W !OAMTileAttr+$100,Y                 ;;D605|D605+D605/D605\D605;
                      INY                                       ;;D608|D608+D608/D608\D608;
                      INY                                       ;;D609|D609+D609/D609\D609;
                      INY                                       ;;D60A|D60A+D60A/D60A\D60A;
                      INY                                       ;;D60B|D60B+D60B/D60B\D60B;
                      DEX                                       ;;D60C|D60C+D60C/D60C\D60C;
                      BPL -                                     ;;D60D|D60D+D60D/D60D\D60D;
                      PLX                                       ;;D60F|D60F+D60F/D60F\D60F;
                      LDY.B #$02                                ;;D610|D610+D610/D610\D610;
                      LDA.B #$0F                                ;;D612|D612+D612/D612\D612;
                      JMP CallFinOAMWriteBank2                  ;;D614|D614+D614/D614\D614;
                                                                ;;                        ;
Banzai_Rotating:      PHB                                       ;;D617|D617+D617/D617\D617;
                      PHK                                       ;;D618|D618+D618/D618\D618;
                      PLB                                       ;;D619|D619+D619/D619\D619;
                      LDA.B !SpriteNumber,X                     ;;D61A|D61A+D61A/D61A\D61A;
                      CMP.B #$9F                                ;;D61C|D61C+D61C/D61C\D61C;
                      BNE GreySpinPlatBnC                       ;;D61E|D61E+D61E/D61E\D61E;
                      JSR BanzaiBillRt                          ;;D620|D620+D620/D620\D620;
                      BRA +                                     ;;D623|D623+D623/D623\D623;
                                                                ;;                        ;
GreySpinPlatBnC:      JSR GreySpinPlatBnCRt                     ;;D625|D625+D625/D625\D625;
                    + PLB                                       ;;D628|D628+D628/D628\D628;
                      RTL                                       ;;D629|D629+D629/D629\D629; Return
                                                                ;;                        ;
GreySpinPlatBnCRt:    JSR SubOffscreen3Bnk2                     ;;D62A|D62A+D62A/D62A\D62A;
                      LDA.B !SpriteLock                         ;;D62D|D62D+D62D/D62D\D62D;
                      BNE CODE_02D653                           ;;D62F|D62F+D62F/D62F\D62F;
                      LDA.B !SpriteXPosLow,X                    ;;D631|D631+D631/D631\D631;
                      LDY.B #$02                                ;;D633|D633+D633/D633\D633;
                      AND.B #$10                                ;;D635|D635+D635/D635\D635;
                      BNE +                                     ;;D637|D637+D637/D637\D637;
                      LDY.B #$FE                                ;;D639|D639+D639/D639\D639;
                    + TYA                                       ;;D63B|D63B+D63B/D63B\D63B;
                      LDY.B #$00                                ;;D63C|D63C+D63C/D63C\D63C;
                      CMP.B #$00                                ;;D63E|D63E+D63E/D63E\D63E;
                      BPL +                                     ;;D640|D640+D640/D640\D640;
                      DEY                                       ;;D642|D642+D642/D642\D642;
                    + CLC                                       ;;D643|D643+D643/D643\D643;
                      ADC.W !SpriteMisc1602,X                   ;;D644|D644+D644/D644\D644;
                      STA.W !SpriteMisc1602,X                   ;;D647|D647+D647/D647\D647;
                      TYA                                       ;;D64A|D64A+D64A/D64A\D64A;
                      ADC.W !SpriteMisc151C,X                   ;;D64B|D64B+D64B/D64B\D64B;
                      AND.B #$01                                ;;D64E|D64E+D64E/D64E\D64E;
                      STA.W !SpriteMisc151C,X                   ;;D650|D650+D650/D650\D650;
CODE_02D653:          LDA.W !SpriteMisc151C,X                   ;;D653|D653+D653/D653\D653;
                      STA.B !_1                                 ;;D656|D656+D656/D656\D656;
                      LDA.W !SpriteMisc1602,X                   ;;D658|D658+D658/D658\D658;
                      STA.B !_0                                 ;;D65B|D65B+D65B/D65B\D65B;
                      REP #$30                                  ;;D65D|D65D+D65D/D65D\D65D; Index (16 bit) Accum (16 bit)
                      LDA.B !_0                                 ;;D65F|D65F+D65F/D65F\D65F;
                      CLC                                       ;;D661|D661+D661/D661\D661;
                      ADC.W #$0080                              ;;D662|D662+D662/D662\D662;
                      AND.W #$01FF                              ;;D665|D665+D665/D665\D665;
                      STA.B !_2                                 ;;D668|D668+D668/D668\D668;
                      LDA.B !_0                                 ;;D66A|D66A+D66A/D66A\D66A;
                      AND.W #$00FF                              ;;D66C|D66C+D66C/D66C\D66C;
                      ASL A                                     ;;D66F|D66F+D66F/D66F\D66F;
                      TAX                                       ;;D670|D670+D670/D670\D670;
                      LDA.L CircleCoords,X                      ;;D671|D671+D671/D671\D671;
                      STA.B !_4                                 ;;D675|D675+D675/D675\D675;
                      LDA.B !_2                                 ;;D677|D677+D677/D677\D677;
                      AND.W #$00FF                              ;;D679|D679+D679/D679\D679;
                      ASL A                                     ;;D67C|D67C+D67C/D67C\D67C;
                      TAX                                       ;;D67D|D67D+D67D/D67D\D67D;
                      LDA.L CircleCoords,X                      ;;D67E|D67E+D67E/D67E\D67E;
                      STA.B !_6                                 ;;D682|D682+D682/D682\D682;
                      SEP #$30                                  ;;D684|D684+D684/D684\D684; Index (8 bit) Accum (8 bit)
                      LDX.W !CurSpriteProcess                   ;;D686|D686+D686/D686\D686; X = Sprite index
                      LDA.B !_4                                 ;;D689|D689+D689/D689\D689;
                      STA.W !HW_WRMPYA                          ;;D68B|D68B+D68B/D68B\D68B; Multiplicand A
                      LDA.W !SpriteMisc187B,X                   ;;D68E|D68E+D68E/D68E\D68E;
                      LDY.B !_5                                 ;;D691|D691+D691/D691\D691;
                      BNE +                                     ;;D693|D693+D693/D693\D693;
                      STA.W !HW_WRMPYB                          ;;D695|D695+D695/D695\D695; Multplier B
                      JSR DoNothingBank2                        ;;D698|D698+D698/D698\D698;
                      ASL.W !HW_RDMPY                           ;;D69B|D69B+D69B/D69B\D69B; Product/Remainder Result (Low Byte)
                      LDA.W !HW_RDMPY+1                         ;;D69E|D69E+D69E/D69E\D69E; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;D6A1|D6A1+D6A1/D6A1\D6A1;
                    + LSR.B !_1                                 ;;D6A3|D6A3+D6A3/D6A3\D6A3;
                      BCC +                                     ;;D6A5|D6A5+D6A5/D6A5\D6A5;
                      EOR.B #$FF                                ;;D6A7|D6A7+D6A7/D6A7\D6A7;
                      INC A                                     ;;D6A9|D6A9+D6A9/D6A9\D6A9;
                    + STA.B !_4                                 ;;D6AA|D6AA+D6AA/D6AA\D6AA;
                      LDA.B !_6                                 ;;D6AC|D6AC+D6AC/D6AC\D6AC;
                      STA.W !HW_WRMPYA                          ;;D6AE|D6AE+D6AE/D6AE\D6AE; Multiplicand A
                      LDA.W !SpriteMisc187B,X                   ;;D6B1|D6B1+D6B1/D6B1\D6B1;
                      LDY.B !_7                                 ;;D6B4|D6B4+D6B4/D6B4\D6B4;
                      BNE +                                     ;;D6B6|D6B6+D6B6/D6B6\D6B6;
                      STA.W !HW_WRMPYB                          ;;D6B8|D6B8+D6B8/D6B8\D6B8; Multplier B
                      JSR DoNothingBank2                        ;;D6BB|D6BB+D6BB/D6BB\D6BB;
                      ASL.W !HW_RDMPY                           ;;D6BE|D6BE+D6BE/D6BE\D6BE; Product/Remainder Result (Low Byte)
                      LDA.W !HW_RDMPY+1                         ;;D6C1|D6C1+D6C1/D6C1\D6C1; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;D6C4|D6C4+D6C4/D6C4\D6C4;
                    + LSR.B !_3                                 ;;D6C6|D6C6+D6C6/D6C6\D6C6;
                      BCC +                                     ;;D6C8|D6C8+D6C8/D6C8\D6C8;
                      EOR.B #$FF                                ;;D6CA|D6CA+D6CA/D6CA\D6CA;
                      INC A                                     ;;D6CC|D6CC+D6CC/D6CC\D6CC;
                    + STA.B !_6                                 ;;D6CD|D6CD+D6CD/D6CD\D6CD;
                      LDA.B !SpriteXPosLow,X                    ;;D6CF|D6CF+D6CF/D6CF\D6CF;
                      PHA                                       ;;D6D1|D6D1+D6D1/D6D1\D6D1;
                      LDA.W !SpriteXPosHigh,X                   ;;D6D2|D6D2+D6D2/D6D2\D6D2;
                      PHA                                       ;;D6D5|D6D5+D6D5/D6D5\D6D5;
                      LDA.B !SpriteYPosLow,X                    ;;D6D6|D6D6+D6D6/D6D6\D6D6;
                      PHA                                       ;;D6D8|D6D8+D6D8/D6D8\D6D8;
                      LDA.W !SpriteYPosHigh,X                   ;;D6D9|D6D9+D6D9/D6D9\D6D9;
                      PHA                                       ;;D6DC|D6DC+D6DC/D6DC\D6DC;
                      LDY.W !ClusterSpriteMisc0F86,X            ;;D6DD|D6DD+D6DD/D6DD\D6DD;
                      STZ.B !_0                                 ;;D6E0|D6E0+D6E0/D6E0\D6E0;
                      LDA.B !_4                                 ;;D6E2|D6E2+D6E2/D6E2\D6E2;
                      BPL +                                     ;;D6E4|D6E4+D6E4/D6E4\D6E4;
                      DEC.B !_0                                 ;;D6E6|D6E6+D6E6/D6E6\D6E6;
                    + CLC                                       ;;D6E8|D6E8+D6E8/D6E8\D6E8;
                      ADC.B !SpriteXPosLow,X                    ;;D6E9|D6E9+D6E9/D6E9\D6E9;
                      STA.B !SpriteXPosLow,X                    ;;D6EB|D6EB+D6EB/D6EB\D6EB;
                      PHP                                       ;;D6ED|D6ED+D6ED/D6ED\D6ED;
                      PHA                                       ;;D6EE|D6EE+D6EE/D6EE\D6EE;
                      SEC                                       ;;D6EF|D6EF+D6EF/D6EF\D6EF;
                      SBC.W !SpriteMisc1534,X                   ;;D6F0|D6F0+D6F0/D6F0\D6F0;
                      STA.W !SpriteMisc1528,X                   ;;D6F3|D6F3+D6F3/D6F3\D6F3;
                      PLA                                       ;;D6F6|D6F6+D6F6/D6F6\D6F6;
                      STA.W !SpriteMisc1534,X                   ;;D6F7|D6F7+D6F7/D6F7\D6F7;
                      PLP                                       ;;D6FA|D6FA+D6FA/D6FA\D6FA;
                      LDA.W !SpriteXPosHigh,X                   ;;D6FB|D6FB+D6FB/D6FB\D6FB;
                      ADC.B !_0                                 ;;D6FE|D6FE+D6FE/D6FE\D6FE;
                      STA.W !SpriteXPosHigh,X                   ;;D700|D700+D700/D700\D700;
                      STZ.B !_1                                 ;;D703|D703+D703/D703\D703;
                      LDA.B !_6                                 ;;D705|D705+D705/D705\D705;
                      BPL +                                     ;;D707|D707+D707/D707\D707;
                      DEC.B !_1                                 ;;D709|D709+D709/D709\D709;
                    + CLC                                       ;;D70B|D70B+D70B/D70B\D70B;
                      ADC.B !SpriteYPosLow,X                    ;;D70C|D70C+D70C/D70C\D70C;
                      STA.B !SpriteYPosLow,X                    ;;D70E|D70E+D70E/D70E\D70E;
                      LDA.W !SpriteYPosHigh,X                   ;;D710|D710+D710/D710\D710;
                      ADC.B !_1                                 ;;D713|D713+D713/D713\D713;
                      STA.W !SpriteYPosHigh,X                   ;;D715|D715+D715/D715\D715;
                      LDA.B !SpriteNumber,X                     ;;D718|D718+D718/D718\D718;
                      CMP.B #$9E                                ;;D71A|D71A+D71A/D71A\D71A;
                      BEQ CODE_02D750                           ;;D71C|D71C+D71C/D71C\D71C;
                      JSL InvisBlkMainRt                        ;;D71E|D71E+D71E/D71E\D71E;
                      BCC CODE_02D73D                           ;;D722|D722+D722/D722\D722;
                      LDA.B #$03                                ;;D724|D724+D724/D724\D724;
                      STA.W !SpriteMisc160E,X                   ;;D726|D726+D726/D726\D726;
                      STA.W !StandOnSolidSprite                 ;;D729|D729+D729/D729\D729;
                      LDA.W !PlayerRidingYoshi                  ;;D72C|D72C+D72C/D72C\D72C;
                      BNE +                                     ;;D72F|D72F+D72F/D72F\D72F;
                      PHX                                       ;;D731|D731+D731/D731\D731;
                      JSL CODE_00E2BD                           ;;D732|D732+D732/D732\D732;
                      PLX                                       ;;D736|D736+D736/D736\D736;
                      LDA.B #$FF                                ;;D737|D737+D737/D737\D737;
                      STA.B !PlayerHiddenTiles                  ;;D739|D739+D739/D739\D739;
                      BRA +                                     ;;D73B|D73B+D73B/D73B\D73B;
                                                                ;;                        ;
CODE_02D73D:          LDA.W !SpriteMisc160E,X                   ;;D73D|D73D+D73D/D73D\D73D;
                      BEQ +                                     ;;D740|D740+D740/D740\D740;
                      STZ.W !SpriteMisc160E,X                   ;;D742|D742+D742/D742\D742;
                      PHX                                       ;;D745|D745+D745/D745\D745;
                      JSL CODE_00E2BD                           ;;D746|D746+D746/D746\D746;
                      PLX                                       ;;D74A|D74A+D74A/D74A\D74A;
                    + JSR GreyRotPlatGfx                        ;;D74B|D74B+D74B/D74B\D74B;
                      BRA +                                     ;;D74E|D74E+D74E/D74E\D74E;
                                                                ;;                        ;
CODE_02D750:          JSL MarioSprInteract                      ;;D750|D750+D750/D750\D750;
                      JSR CODE_02D813                           ;;D754|D754+D754/D754\D754;
                    + PLA                                       ;;D757|D757+D757/D757\D757;
                      STA.W !SpriteYPosHigh,X                   ;;D758|D758+D758/D758\D758;
                      PLA                                       ;;D75B|D75B+D75B/D75B\D75B;
                      STA.B !SpriteYPosLow,X                    ;;D75C|D75C+D75C/D75C\D75C;
                      PLA                                       ;;D75E|D75E+D75E/D75E\D75E;
                      STA.W !SpriteXPosHigh,X                   ;;D75F|D75F+D75F/D75F\D75F;
                      PLA                                       ;;D762|D762+D762/D762\D762;
                      STA.B !SpriteXPosLow,X                    ;;D763|D763+D763/D763\D763;
                      LDA.B !_0                                 ;;D765|D765+D765/D765\D765;
                      CLC                                       ;;D767|D767+D767/D767\D767;
                      ADC.B !Layer1XPos                         ;;D768|D768+D768/D768\D768;
                      SEC                                       ;;D76A|D76A+D76A/D76A\D76A;
                      SBC.B !SpriteXPosLow,X                    ;;D76B|D76B+D76B/D76B\D76B;
                      JSR CODE_02D870                           ;;D76D|D76D+D76D/D76D\D76D;
                      CLC                                       ;;D770|D770+D770/D770\D770;
                      ADC.B !SpriteXPosLow,X                    ;;D771|D771+D771/D771\D771;
                      SEC                                       ;;D773|D773+D773/D773\D773;
                      SBC.B !Layer1XPos                         ;;D774|D774+D774/D774\D774;
                      STA.B !_0                                 ;;D776|D776+D776/D776\D776;
                      LDA.B !_1                                 ;;D778|D778+D778/D778\D778;
                      CLC                                       ;;D77A|D77A+D77A/D77A\D77A;
                      ADC.B !Layer1YPos                         ;;D77B|D77B+D77B/D77B\D77B;
                      SEC                                       ;;D77D|D77D+D77D/D77D\D77D;
                      SBC.B !SpriteYPosLow,X                    ;;D77E|D77E+D77E/D77E\D77E;
                      JSR CODE_02D870                           ;;D780|D780+D780/D780\D780;
                      CLC                                       ;;D783|D783+D783/D783\D783;
                      ADC.B !SpriteYPosLow,X                    ;;D784|D784+D784/D784\D784;
                      SEC                                       ;;D786|D786+D786/D786\D786;
                      SBC.B !Layer1YPos                         ;;D787|D787+D787/D787\D787;
                      STA.B !_1                                 ;;D789|D789+D789/D789\D789;
                      LDA.W !SpriteWayOffscreenX,X              ;;D78B|D78B+D78B/D78B\D78B;
                      BNE Return02D806                          ;;D78E|D78E+D78E/D78E\D78E;
                      LDA.W !SpriteOAMIndex,X                   ;;D790|D790+D790/D790\D790;
                      CLC                                       ;;D793|D793+D793/D793\D793;
                      ADC.B #$10                                ;;D794|D794+D794/D794\D794;
                      TAY                                       ;;D796|D796+D796/D796\D796;
                      PHX                                       ;;D797|D797+D797/D797\D797;
                      LDA.B !SpriteXPosLow,X                    ;;D798|D798+D798/D798\D798;
                      STA.B !_A                                 ;;D79A|D79A+D79A/D79A\D79A;
                      LDA.B !SpriteYPosLow,X                    ;;D79C|D79C+D79C/D79C\D79C;
                      STA.B !_B                                 ;;D79E|D79E+D79E/D79E\D79E;
                      LDA.B !SpriteNumber,X                     ;;D7A0|D7A0+D7A0/D7A0\D7A0;
                      TAX                                       ;;D7A2|D7A2+D7A2/D7A2\D7A2;
                      LDA.B #$E8                                ;;D7A3|D7A3+D7A3/D7A3\D7A3;
                      CPX.B #$9E                                ;;D7A5|D7A5+D7A5/D7A5\D7A5; \ Check if we're the rotating platform (sprite A0)
                      BEQ +                                     ;;D7A7|D7A7+D7A7/D7A7\D7A7; / or the ball 'n' chain
                      LDA.B #$A2                                ;;D7A9|D7A9+D7A9/D7A9\D7A9;
                    + STA.B !_8                                 ;;D7AB|D7AB+D7AB/D7AB\D7AB;
                      LDX.B #$01                                ;;D7AD|D7AD+D7AD/D7AD\D7AD;
                    - LDA.B !_0                                 ;;D7AF|D7AF+D7AF/D7AF\D7AF;
                      STA.W !OAMTileXPos+$100,Y                 ;;D7B1|D7B1+D7B1/D7B1\D7B1;
                      LDA.B !_1                                 ;;D7B4|D7B4+D7B4/D7B4\D7B4;
                      STA.W !OAMTileYPos+$100,Y                 ;;D7B6|D7B6+D7B6/D7B6\D7B6;
                      LDA.B !_8                                 ;;D7B9|D7B9+D7B9/D7B9\D7B9;
                      STA.W !OAMTileNo+$100,Y                   ;;D7BB|D7BB+D7BB/D7BB\D7BB;
                      LDA.B #$33                                ;;D7BE|D7BE+D7BE/D7BE\D7BE;
                      STA.W !OAMTileAttr+$100,Y                 ;;D7C0|D7C0+D7C0/D7C0\D7C0;
                      LDA.B !_0                                 ;;D7C3|D7C3+D7C3/D7C3\D7C3;
                      CLC                                       ;;D7C5|D7C5+D7C5/D7C5\D7C5;
                      ADC.B !Layer1XPos                         ;;D7C6|D7C6+D7C6/D7C6\D7C6;
                      SEC                                       ;;D7C8|D7C8+D7C8/D7C8\D7C8;
                      SBC.B !_A                                 ;;D7C9|D7C9+D7C9/D7C9\D7C9;
                      STA.B !_0                                 ;;D7CB|D7CB+D7CB/D7CB\D7CB;
                      ASL A                                     ;;D7CD|D7CD+D7CD/D7CD\D7CD;
                      ROR.B !_0                                 ;;D7CE|D7CE+D7CE/D7CE\D7CE;
                      LDA.B !_0                                 ;;D7D0|D7D0+D7D0/D7D0\D7D0;
                      SEC                                       ;;D7D2|D7D2+D7D2/D7D2\D7D2;
                      SBC.B !Layer1XPos                         ;;D7D3|D7D3+D7D3/D7D3\D7D3;
                      CLC                                       ;;D7D5|D7D5+D7D5/D7D5\D7D5;
                      ADC.B !_A                                 ;;D7D6|D7D6+D7D6/D7D6\D7D6;
                      STA.B !_0                                 ;;D7D8|D7D8+D7D8/D7D8\D7D8;
                      LDA.B !_1                                 ;;D7DA|D7DA+D7DA/D7DA\D7DA;
                      CLC                                       ;;D7DC|D7DC+D7DC/D7DC\D7DC;
                      ADC.B !Layer1YPos                         ;;D7DD|D7DD+D7DD/D7DD\D7DD;
                      SEC                                       ;;D7DF|D7DF+D7DF/D7DF\D7DF;
                      SBC.B !_B                                 ;;D7E0|D7E0+D7E0/D7E0\D7E0;
                      STA.B !_1                                 ;;D7E2|D7E2+D7E2/D7E2\D7E2;
                      ASL A                                     ;;D7E4|D7E4+D7E4/D7E4\D7E4;
                      ROR.B !_1                                 ;;D7E5|D7E5+D7E5/D7E5\D7E5;
                      LDA.B !_1                                 ;;D7E7|D7E7+D7E7/D7E7\D7E7;
                      SEC                                       ;;D7E9|D7E9+D7E9/D7E9\D7E9;
                      SBC.B !Layer1YPos                         ;;D7EA|D7EA+D7EA/D7EA\D7EA;
                      CLC                                       ;;D7EC|D7EC+D7EC/D7EC\D7EC;
                      ADC.B !_B                                 ;;D7ED|D7ED+D7ED/D7ED\D7ED;
                      STA.B !_1                                 ;;D7EF|D7EF+D7EF/D7EF\D7EF;
                      INY                                       ;;D7F1|D7F1+D7F1/D7F1\D7F1;
                      INY                                       ;;D7F2|D7F2+D7F2/D7F2\D7F2;
                      INY                                       ;;D7F3|D7F3+D7F3/D7F3\D7F3;
                      INY                                       ;;D7F4|D7F4+D7F4/D7F4\D7F4;
                      DEX                                       ;;D7F5|D7F5+D7F5/D7F5\D7F5;
                      BPL -                                     ;;D7F6|D7F6+D7F6/D7F6\D7F6;
                      PLX                                       ;;D7F8|D7F8+D7F8/D7F8\D7F8;
                      LDY.B #$02                                ;;D7F9|D7F9+D7F9/D7F9\D7F9;
                      LDA.B #$05                                ;;D7FB|D7FB+D7FB/D7FB\D7FB;
                      JMP CallFinOAMWriteBank2                  ;;D7FD|D7FD+D7FD/D7FD\D7FD;
                                                                ;;                        ;
DoNothingBank2:       NOP                                       ;;D800|D800+D800/D800\D800; This routine is used to waste time
                      NOP                                       ;;D801|D801+D801/D801\D801; for mult/div registers. Interestingly.
                      NOP                                       ;;D802|D802+D802/D802\D802; it's a lot longer than it needs to be.
                      NOP                                       ;;D803|D803+D803/D803\D803;
                      NOP                                       ;;D804|D804+D804/D804\D804;
                      NOP                                       ;;D805|D805+D805/D805\D805;
Return02D806:         RTS                                       ;;D806|D806+D806/D806\D806; Return
                                                                ;;                        ;
                                                                ;;                        ;
BallnChainBallXOffs:  db $F8,$08,$F8,$08                        ;;D807|D807+D807/D807\D807;
                                                                ;;                        ;
BallnChainBallYOffs:  db $F8,$F8,$08,$08                        ;;D80B|D80B+D80B/D80B\D80B;
                                                                ;;                        ;
BallnChainBallProps:  db $33,$73,$B3,$F3                        ;;D80F|D80F+D80F/D80F\D80F;
                                                                ;;                        ;
CODE_02D813:          JSR GetDrawInfo2                          ;;D813|D813+D813/D813\D813;
                      PHX                                       ;;D816|D816+D816/D816\D816;
                      LDX.B #$03                                ;;D817|D817+D817/D817\D817;
                    - LDA.B !_0                                 ;;D819|D819+D819/D819\D819;
                      CLC                                       ;;D81B|D81B+D81B/D81B\D81B;
                      ADC.W BallnChainBallXOffs,X               ;;D81C|D81C+D81C/D81C\D81C;
                      STA.W !OAMTileXPos+$100,Y                 ;;D81F|D81F+D81F/D81F\D81F;
                      LDA.B !_1                                 ;;D822|D822+D822/D822\D822;
                      CLC                                       ;;D824|D824+D824/D824\D824;
                      ADC.W BallnChainBallYOffs,X               ;;D825|D825+D825/D825\D825;
                      STA.W !OAMTileYPos+$100,Y                 ;;D828|D828+D828/D828\D828;
                      LDA.W DoNothingBank2,X                    ;;D82B|D82B+D82B/D82B\D82B; NOP opcode is EA, the tile number of the ball
                      STA.W !OAMTileNo+$100,Y                   ;;D82E|D82E+D82E/D82E\D82E;
                      LDA.W BallnChainBallProps,X               ;;D831|D831+D831/D831\D831;
                      STA.W !OAMTileAttr+$100,Y                 ;;D834|D834+D834/D834\D834;
                      INY                                       ;;D837|D837+D837/D837\D837;
                      INY                                       ;;D838|D838+D838/D838\D838;
                      INY                                       ;;D839|D839+D839/D839\D839;
                      INY                                       ;;D83A|D83A+D83A/D83A\D83A;
                      DEX                                       ;;D83B|D83B+D83B/D83B\D83B;
                      BPL -                                     ;;D83C|D83C+D83C/D83C\D83C;
                      PLX                                       ;;D83E|D83E+D83E/D83E\D83E;
                      RTS                                       ;;D83F|D83F+D83F/D83F\D83F; Return
                                                                ;;                        ;
                                                                ;;                        ;
WoodPlatformXOffs:    db $00,$F0,$00,$10                        ;;D840|D840+D840/D840\D840;
                                                                ;;                        ;
WoodPlatformTiles:    db $A2,$60,$61,$62                        ;;D844|D844+D844/D844\D844;
                                                                ;;                        ;
GreyRotPlatGfx:       JSR GetDrawInfo2                          ;;D848|D848+D848/D848\D848;
                      PHX                                       ;;D84B|D84B+D84B/D84B\D84B;
                      LDX.B #$03                                ;;D84C|D84C+D84C/D84C\D84C;
                    - LDA.B !_0                                 ;;D84E|D84E+D84E/D84E\D84E;
                      CLC                                       ;;D850|D850+D850/D850\D850;
                      ADC.W WoodPlatformXOffs,X                 ;;D851|D851+D851/D851\D851;
                      STA.W !OAMTileXPos+$100,Y                 ;;D854|D854+D854/D854\D854;
                      LDA.B !_1                                 ;;D857|D857+D857/D857\D857;
                      STA.W !OAMTileYPos+$100,Y                 ;;D859|D859+D859/D859\D859;
                      LDA.W WoodPlatformTiles,X                 ;;D85C|D85C+D85C/D85C\D85C;
                      STA.W !OAMTileNo+$100,Y                   ;;D85F|D85F+D85F/D85F\D85F;
                      LDA.B #$33                                ;;D862|D862+D862/D862\D862;
                      STA.W !OAMTileAttr+$100,Y                 ;;D864|D864+D864/D864\D864;
                      INY                                       ;;D867|D867+D867/D867\D867;
                      INY                                       ;;D868|D868+D868/D868\D868;
                      INY                                       ;;D869|D869+D869/D869\D869;
                      INY                                       ;;D86A|D86A+D86A/D86A\D86A;
                      DEX                                       ;;D86B|D86B+D86B/D86B\D86B;
                      BPL -                                     ;;D86C|D86C+D86C/D86C\D86C;
                      PLX                                       ;;D86E|D86E+D86E/D86E\D86E;
                      RTS                                       ;;D86F|D86F+D86F/D86F\D86F; Return
                                                                ;;                        ;
CODE_02D870:          PHP                                       ;;D870|D870+D870/D870\D870;
                      BPL +                                     ;;D871|D871+D871/D871\D871;
                      EOR.B #$FF                                ;;D873|D873+D873/D873\D873;
                      INC A                                     ;;D875|D875+D875/D875\D875;
                    + STA.W !HW_WRDIV+1                         ;;D876|D876+D876/D876\D876; Dividend (High-Byte)
                      STZ.W !HW_WRDIV                           ;;D879|D879+D879/D879\D879; Dividend (Low Byte)
                      LDA.W !SpriteMisc187B,X                   ;;D87C|D87C+D87C/D87C\D87C;
                      LSR A                                     ;;D87F|D87F+D87F/D87F\D87F;
                      STA.W !HW_WRDIV+2                         ;;D880|D880+D880/D880\D880; Divisor B
                      JSR DoNothingBank2                        ;;D883|D883+D883/D883\D883;
                      LDA.W !HW_RDDIV                           ;;D886|D886+D886/D886\D886; Quotient of Divide Result (Low Byte)
                      STA.B !_E                                 ;;D889|D889+D889/D889\D889;
                      LDA.W !HW_RDDIV+1                         ;;D88B|D88B+D88B/D88B\D88B; Quotient of Divide Result (High Byte)
                      ASL.B !_E                                 ;;D88E|D88E+D88E/D88E\D88E;
                      ROL A                                     ;;D890|D890+D890/D890\D890;
                      ASL.B !_E                                 ;;D891|D891+D891/D891\D891;
                      ROL A                                     ;;D893|D893+D893/D893\D893;
                      ASL.B !_E                                 ;;D894|D894+D894/D894\D894;
                      ROL A                                     ;;D896|D896+D896/D896\D896;
                      ASL.B !_E                                 ;;D897|D897+D897/D897\D897;
                      ROL A                                     ;;D899|D899+D899/D899\D899;
                      PLP                                       ;;D89A|D89A+D89A/D89A\D89A;
                      BPL +                                     ;;D89B|D89B+D89B/D89B\D89B;
                      EOR.B #$FF                                ;;D89D|D89D+D89D/D89D\D89D;
                      INC A                                     ;;D89F|D89F+D89F/D89F\D89F;
                    + RTS                                       ;;D8A0|D8A0+D8A0/D8A0\D8A0; Return
                                                                ;;                        ;
                                                                ;;                        ;
BubbleSprTiles1:      db $A8,$CA,$67,$24                        ;;D8A1|D8A1+D8A1/D8A1\D8A1;
                                                                ;;                        ;
BubbleSprTiles2:      db $AA,$CC,$69,$24                        ;;D8A5|D8A5+D8A5/D8A5\D8A5;
                                                                ;;                        ;
BubbleSprGfxProp1:    db $84,$85,$05,$08                        ;;D8A9|D8A9+D8A9/D8A9\D8A9;
                                                                ;;                        ;
BubbleSpriteMain:     PHB                                       ;;D8AD|D8AD+D8AD/D8AD\D8AD;
                      PHK                                       ;;D8AE|D8AE+D8AE/D8AE\D8AE;
                      PLB                                       ;;D8AF|D8AF+D8AF/D8AF\D8AF;
                      JSR CODE_02D8BB                           ;;D8B0|D8B0+D8B0/D8B0\D8B0;
                      PLB                                       ;;D8B3|D8B3+D8B3/D8B3\D8B3;
                      RTL                                       ;;D8B4|D8B4+D8B4/D8B4\D8B4; Return
                                                                ;;                        ;
                                                                ;;                        ;
BubbleSprGfxProp2:    db $08,$F8                                ;;D8B5|D8B5+D8B5/D8B5\D8B5;
                                                                ;;                        ;
BubbleSprGfxProp3:    db $01,$FF                                ;;D8B7|D8B7+D8B7/D8B7\D8B7;
                                                                ;;                        ;
BubbleSprGfxProp4:    db $0C,$F4                                ;;D8B9|D8B9+D8B9/D8B9\D8B9;
                                                                ;;                        ;
CODE_02D8BB:          LDA.W !SpriteOAMIndex,X                   ;;D8BB|D8BB+D8BB/D8BB\D8BB;
                      CLC                                       ;;D8BE|D8BE+D8BE/D8BE\D8BE;
                      ADC.B #$14                                ;;D8BF|D8BF+D8BF/D8BF\D8BF;
                      STA.W !SpriteOAMIndex,X                   ;;D8C1|D8C1+D8C1/D8C1\D8C1;
                      JSL GenericSprGfxRt2                      ;;D8C4|D8C4+D8C4/D8C4\D8C4;
                      PHX                                       ;;D8C8|D8C8+D8C8/D8C8\D8C8;
                      LDA.B !SpriteTableC2,X                    ;;D8C9|D8C9+D8C9/D8C9\D8C9;
                      LDY.W !SpriteOAMIndex,X                   ;;D8CB|D8CB+D8CB/D8CB\D8CB; Y = Index into sprite OAM
                      TAX                                       ;;D8CE|D8CE+D8CE/D8CE\D8CE;
                      LDA.W BubbleSprGfxProp1,X                 ;;D8CF|D8CF+D8CF/D8CF\D8CF;
                      ORA.B !SpriteProperties                   ;;D8D2|D8D2+D8D2/D8D2\D8D2;
                      STA.W !OAMTileAttr+$100,Y                 ;;D8D4|D8D4+D8D4/D8D4\D8D4;
                      LDA.B !EffFrame                           ;;D8D7|D8D7+D8D7/D8D7\D8D7;
                      ASL A                                     ;;D8D9|D8D9+D8D9/D8D9\D8D9;
                      ASL A                                     ;;D8DA|D8DA+D8DA/D8DA\D8DA;
                      ASL A                                     ;;D8DB|D8DB+D8DB/D8DB\D8DB;
                      LDA.W BubbleSprTiles1,X                   ;;D8DC|D8DC+D8DC/D8DC\D8DC;
                      BCC +                                     ;;D8DF|D8DF+D8DF/D8DF\D8DF;
                      LDA.W BubbleSprTiles2,X                   ;;D8E1|D8E1+D8E1/D8E1\D8E1;
                    + STA.W !OAMTileNo+$100,Y                   ;;D8E4|D8E4+D8E4/D8E4\D8E4;
                      PLX                                       ;;D8E7|D8E7+D8E7/D8E7\D8E7;
                      LDA.W !SpriteMisc1534,X                   ;;D8E8|D8E8+D8E8/D8E8\D8E8;
                      CMP.B #$60                                ;;D8EB|D8EB+D8EB/D8EB\D8EB;
                      BCS CODE_02D8F3                           ;;D8ED|D8ED+D8ED/D8ED\D8ED;
                      AND.B #$02                                ;;D8EF|D8EF+D8EF/D8EF\D8EF;
                      BEQ +                                     ;;D8F1|D8F1+D8F1/D8F1\D8F1;
CODE_02D8F3:          JSR CODE_02D9D6                           ;;D8F3|D8F3+D8F3/D8F3\D8F3;
                    + LDA.W !SpriteStatus,X                     ;;D8F6|D8F6+D8F6/D8F6\D8F6;
                      CMP.B #$02                                ;;D8F9|D8F9+D8F9/D8F9\D8F9;
                      BNE CODE_02D904                           ;;D8FB|D8FB+D8FB/D8FB\D8FB;
                      LDA.B #$08                                ;;D8FD|D8FD+D8FD/D8FD\D8FD; \ Sprite status = Normal
                      STA.W !SpriteStatus,X                     ;;D8FF|D8FF+D8FF/D8FF\D8FF; /
                      BRA CODE_02D96B                           ;;D902|D902+D902/D902\D902;
                                                                ;;                        ;
CODE_02D904:          LDA.B !SpriteLock                         ;;D904|D904+D904/D904\D904;
                      BNE Return02D977                          ;;D906|D906+D906/D906\D906;
                      LDA.B !TrueFrame                          ;;D908|D908+D908/D908\D908;
                      AND.B #$01                                ;;D90A|D90A+D90A/D90A\D90A;
                      BNE +                                     ;;D90C|D90C+D90C/D90C\D90C;
                      DEC.W !SpriteMisc1534,X                   ;;D90E|D90E+D90E/D90E\D90E;
                      LDA.W !SpriteMisc1534,X                   ;;D911|D911+D911/D911\D911;
                      CMP.B #$04                                ;;D914|D914+D914/D914\D914;
                      BNE +                                     ;;D916|D916+D916/D916\D916;
                      LDA.B #!SFX_CLAP                          ;;D918|D918+D918/D918\D918; \ Play sound effect
                      STA.W !SPCIO3                             ;;D91A|D91A+D91A/D91A\D91A; /
                    + LDA.W !SpriteMisc1534,X                   ;;D91D|D91D+D91D/D91D\D91D;
                      DEC A                                     ;;D920|D920+D920/D920\D920;
                      BEQ CODE_02D978                           ;;D921|D921+D921/D921\D921;
                      CMP.B #$07                                ;;D923|D923+D923/D923\D923;
                      BCC Return02D977                          ;;D925|D925+D925/D925\D925;
                      JSR SubOffscreen0Bnk2                     ;;D927|D927+D927/D927\D927;
                      JSR UpdateXPosNoGrvty                     ;;D92A|D92A+D92A/D92A\D92A;
                      JSR UpdateYPosNoGrvty                     ;;D92D|D92D+D92D/D92D\D92D;
                      JSL SprObjInteract                        ;;D930|D930+D930/D930\D930;
                      LDY.W !SpriteMisc157C,X                   ;;D934|D934+D934/D934\D934;
                      LDA.W BubbleSprGfxProp2,Y                 ;;D937|D937+D937/D937\D937;
                      STA.B !SpriteXSpeed,X                     ;;D93A|D93A+D93A/D93A\D93A;
                      LDA.B !TrueFrame                          ;;D93C|D93C+D93C/D93C\D93C;
                      AND.B #$01                                ;;D93E|D93E+D93E/D93E\D93E;
                      BNE +                                     ;;D940|D940+D940/D940\D940;
                      LDA.W !SpriteMisc151C,X                   ;;D942|D942+D942/D942\D942;
                      AND.B #$01                                ;;D945|D945+D945/D945\D945;
                      TAY                                       ;;D947|D947+D947/D947\D947;
                      LDA.B !SpriteYSpeed,X                     ;;D948|D948+D948/D948\D948;
                      CLC                                       ;;D94A|D94A+D94A/D94A\D94A;
                      ADC.W BubbleSprGfxProp3,Y                 ;;D94B|D94B+D94B/D94B\D94B;
                      STA.B !SpriteYSpeed,X                     ;;D94E|D94E+D94E/D94E\D94E;
                      CMP.W BubbleSprGfxProp4,Y                 ;;D950|D950+D950/D950\D950;
                      BNE +                                     ;;D953|D953+D953/D953\D953;
                      INC.W !SpriteMisc151C,X                   ;;D955|D955+D955/D955\D955;
                    + LDA.W !SpriteBlockedDirs,X                ;;D958|D958+D958/D958\D958;
                      BNE CODE_02D96B                           ;;D95B|D95B+D95B/D95B\D95B;
                      JSL SprSprInteract                        ;;D95D|D95D+D95D/D95D\D95D;
                      JSL MarioSprInteract                      ;;D961|D961+D961/D961\D961;
                      BCC Return02D9A0                          ;;D965|D965+D965/D965\D965;
                      STZ.B !PlayerYSpeed                       ;;D967|D967+D967/D967\D967;
                      STZ.B !PlayerXSpeed                       ;;D969|D969+D969/D969\D969;
CODE_02D96B:          LDA.W !SpriteMisc1534,X                   ;;D96B|D96B+D96B/D96B\D96B;
                      CMP.B #$07                                ;;D96E|D96E+D96E/D96E\D96E;
                      BCC Return02D977                          ;;D970|D970+D970/D970\D970;
                      LDA.B #$06                                ;;D972|D972+D972/D972\D972;
                      STA.W !SpriteMisc1534,X                   ;;D974|D974+D974/D974\D974;
Return02D977:         RTS                                       ;;D977|D977+D977/D977\D977; Return
                                                                ;;                        ;
CODE_02D978:          LDY.B !SpriteTableC2,X                    ;;D978|D978+D978/D978\D978;
                      LDA.W BubbleSprites,Y                     ;;D97A|D97A+D97A/D97A\D97A;
                      STA.B !SpriteNumber,X                     ;;D97D|D97D+D97D/D97D\D97D;
                      PHA                                       ;;D97F|D97F+D97F/D97F\D97F;
                      JSL InitSpriteTables                      ;;D980|D980+D980/D980\D980;
                      PLY                                       ;;D984|D984+D984/D984\D984;
                      LDA.B #$20                                ;;D985|D985+D985/D985\D985;
                      CPY.B #$74                                ;;D987|D987+D987/D987\D987;
                      BNE +                                     ;;D989|D989+D989/D989\D989;
                      LDA.B #$04                                ;;D98B|D98B+D98B/D98B\D98B;
                    + STA.W !SpriteMisc154C,X                   ;;D98D|D98D+D98D/D98D\D98D;
                      LDA.B !SpriteNumber,X                     ;;D990|D990+D990/D990\D990;
                      CMP.B #$0D                                ;;D992|D992+D992/D992\D992;
                      BNE +                                     ;;D994|D994+D994/D994\D994;
                      DEC.W !SpriteMisc1540,X                   ;;D996|D996+D996/D996\D996;
                    + JSR SubHorizPosBnk2                       ;;D999|D999+D999/D999\D999;
                      TYA                                       ;;D99C|D99C+D99C/D99C\D99C;
                      STA.W !SpriteMisc157C,X                   ;;D99D|D99D+D99D/D99D\D99D;
Return02D9A0:         RTS                                       ;;D9A0|D9A0+D9A0/D9A0\D9A0; Return
                                                                ;;                        ;
                                                                ;;                        ;
BubbleSprites:        db $0F,$0D,$15,$74                        ;;D9A1|D9A1+D9A1/D9A1\D9A1;
                                                                ;;                        ;
BubbleTileDispX:      db $F8,$08,$F8,$08,$FF,$F9,$07,$F9        ;;D9A5|D9A5+D9A5/D9A5\D9A5;
                      db $07,$00,$FA,$06,$FA,$06,$00            ;;D9AD|D9AD+D9AD/D9AD\D9AD;
                                                                ;;                        ;
BubbleTileDispY:      db $F6,$F6,$02,$02,$FC,$F5,$F5,$03        ;;D9B4|D9B4+D9B4/D9B4\D9B4;
                      db $03,$FC,$F4,$F4,$04,$04,$FB            ;;D9BC|D9BC+D9BC/D9BC\D9BC;
                                                                ;;                        ;
BubbleTiles:          db $A0,$A0,$A0,$A0,$99                    ;;D9C3|D9C3+D9C3/D9C3\D9C3;
                                                                ;;                        ;
BubbleGfxProp:        db $07,$47,$87,$C7,$03                    ;;D9C8|D9C8+D9C8/D9C8\D9C8;
                                                                ;;                        ;
BubbleSize:           db $02,$02,$02,$02,$00                    ;;D9CD|D9CD+D9CD/D9CD\D9CD;
                                                                ;;                        ;
DATA_02D9D2:          db $00,$05,$0A,$05                        ;;D9D2|D9D2+D9D2/D9D2\D9D2;
                                                                ;;                        ;
CODE_02D9D6:          JSR GetDrawInfo2                          ;;D9D6|D9D6+D9D6/D9D6\D9D6;
                      LDA.B !EffFrame                           ;;D9D9|D9D9+D9D9/D9D9\D9D9;
                      LSR A                                     ;;D9DB|D9DB+D9DB/D9DB\D9DB;
                      LSR A                                     ;;D9DC|D9DC+D9DC/D9DC\D9DC;
                      LSR A                                     ;;D9DD|D9DD+D9DD/D9DD\D9DD;
                      AND.B #$03                                ;;D9DE|D9DE+D9DE/D9DE\D9DE;
                      TAY                                       ;;D9E0|D9E0+D9E0/D9E0\D9E0;
                      LDA.W DATA_02D9D2,Y                       ;;D9E1|D9E1+D9E1/D9E1\D9E1;
                      STA.B !_2                                 ;;D9E4|D9E4+D9E4/D9E4\D9E4;
                      LDA.W !SpriteOAMIndex,X                   ;;D9E6|D9E6+D9E6/D9E6\D9E6;
                      SEC                                       ;;D9E9|D9E9+D9E9/D9E9\D9E9;
                      SBC.B #$14                                ;;D9EA|D9EA+D9EA/D9EA\D9EA;
                      STA.W !SpriteOAMIndex,X                   ;;D9EC|D9EC+D9EC/D9EC\D9EC;
                      TAY                                       ;;D9EF|D9EF+D9EF/D9EF\D9EF;
                      PHX                                       ;;D9F0|D9F0+D9F0/D9F0\D9F0;
                      LDA.W !SpriteMisc1534,X                   ;;D9F1|D9F1+D9F1/D9F1\D9F1;
                      STA.B !_3                                 ;;D9F4|D9F4+D9F4/D9F4\D9F4;
                      LDX.B #$04                                ;;D9F6|D9F6+D9F6/D9F6\D9F6;
CODE_02D9F8:          PHX                                       ;;D9F8|D9F8+D9F8/D9F8\D9F8;
                      TXA                                       ;;D9F9|D9F9+D9F9/D9F9\D9F9;
                      CLC                                       ;;D9FA|D9FA+D9FA/D9FA\D9FA;
                      ADC.B !_2                                 ;;D9FB|D9FB+D9FB/D9FB\D9FB;
                      TAX                                       ;;D9FD|D9FD+D9FD/D9FD\D9FD;
                      LDA.B !_0                                 ;;D9FE|D9FE+D9FE/D9FE\D9FE;
                      CLC                                       ;;DA00|DA00+DA00/DA00\DA00;
                      ADC.W BubbleTileDispX,X                   ;;DA01|DA01+DA01/DA01\DA01;
                      STA.W !OAMTileXPos+$100,Y                 ;;DA04|DA04+DA04/DA04\DA04;
                      LDA.B !_1                                 ;;DA07|DA07+DA07/DA07\DA07;
                      CLC                                       ;;DA09|DA09+DA09/DA09\DA09;
                      ADC.W BubbleTileDispY,X                   ;;DA0A|DA0A+DA0A/DA0A\DA0A;
                      STA.W !OAMTileYPos+$100,Y                 ;;DA0D|DA0D+DA0D/DA0D\DA0D;
                      PLX                                       ;;DA10|DA10+DA10/DA10\DA10;
                      LDA.W BubbleTiles,X                       ;;DA11|DA11+DA11/DA11\DA11;
                      STA.W !OAMTileNo+$100,Y                   ;;DA14|DA14+DA14/DA14\DA14;
                      LDA.W BubbleGfxProp,X                     ;;DA17|DA17+DA17/DA17\DA17;
                      ORA.B !SpriteProperties                   ;;DA1A|DA1A+DA1A/DA1A\DA1A;
                      STA.W !OAMTileAttr+$100,Y                 ;;DA1C|DA1C+DA1C/DA1C\DA1C;
                      LDA.B !_3                                 ;;DA1F|DA1F+DA1F/DA1F\DA1F;
                      CMP.B #$06                                ;;DA21|DA21+DA21/DA21\DA21;
                      BCS CODE_02DA37                           ;;DA23|DA23+DA23/DA23\DA23;
                      CMP.B #$03                                ;;DA25|DA25+DA25/DA25\DA25;
                      LDA.B #$02                                ;;DA27|DA27+DA27/DA27\DA27;
                      ORA.B !SpriteProperties                   ;;DA29|DA29+DA29/DA29\DA29;
                      STA.W !OAMTileAttr+$100,Y                 ;;DA2B|DA2B+DA2B/DA2B\DA2B;
                      LDA.B #$64                                ;;DA2E|DA2E+DA2E/DA2E\DA2E;
                      BCS +                                     ;;DA30|DA30+DA30/DA30\DA30;
                      LDA.B #$66                                ;;DA32|DA32+DA32/DA32\DA32;
                    + STA.W !OAMTileNo+$100,Y                   ;;DA34|DA34+DA34/DA34\DA34;
CODE_02DA37:          PHY                                       ;;DA37|DA37+DA37/DA37\DA37;
                      TYA                                       ;;DA38|DA38+DA38/DA38\DA38;
                      LSR A                                     ;;DA39|DA39+DA39/DA39\DA39;
                      LSR A                                     ;;DA3A|DA3A+DA3A/DA3A\DA3A;
                      TAY                                       ;;DA3B|DA3B+DA3B/DA3B\DA3B;
                      LDA.W BubbleSize,X                        ;;DA3C|DA3C+DA3C/DA3C\DA3C;
                      STA.W !OAMTileSize+$40,Y                  ;;DA3F|DA3F+DA3F/DA3F\DA3F;
                      PLY                                       ;;DA42|DA42+DA42/DA42\DA42;
                      INY                                       ;;DA43|DA43+DA43/DA43\DA43;
                      INY                                       ;;DA44|DA44+DA44/DA44\DA44;
                      INY                                       ;;DA45|DA45+DA45/DA45\DA45;
                      INY                                       ;;DA46|DA46+DA46/DA46\DA46;
                      DEX                                       ;;DA47|DA47+DA47/DA47\DA47;
                      BPL CODE_02D9F8                           ;;DA48|DA48+DA48/DA48\DA48;
                      PLX                                       ;;DA4A|DA4A+DA4A/DA4A\DA4A;
                      LDY.B #$FF                                ;;DA4B|DA4B+DA4B/DA4B\DA4B;
                      LDA.B #$04                                ;;DA4D|DA4D+DA4D/DA4D\DA4D;
                      JMP CallFinOAMWriteBank2                  ;;DA4F|DA4F+DA4F/DA4F\DA4F;
                                                                ;;                        ;
HammerBrotherMain:    PHB                                       ;;DA52|DA52+DA52/DA52\DA52;
                      PHK                                       ;;DA53|DA53+DA53/DA53\DA53;
                      PLB                                       ;;DA54|DA54+DA54/DA54\DA54;
                      JSR HammerBrotherMainRt                   ;;DA55|DA55+DA55/DA55\DA55;
                      PLB                                       ;;DA58|DA58+DA58/DA58\DA58;
Return02DA59:         RTL                                       ;;DA59|DA59+DA59/DA59\DA59; Return
                                                                ;;                        ;
HammerBrotherMainRt:  STZ.W !SpriteMisc157C,X                   ;;DA5A|DA5A+DA5A/DA5A\DA5A;
                      LDA.W !SpriteStatus,X                     ;;DA5D|DA5D+DA5D/DA5D\DA5D;
                      CMP.B #$02                                ;;DA60|DA60+DA60/DA60\DA60;
                      BNE +                                     ;;DA62|DA62+DA62/DA62\DA62;
                      JMP HammerBroGfx                          ;;DA64|DA64+DA64/DA64\DA64;
                                                                ;;                        ;
                                                                ;;                        ;
HammerFreq:           db $1F,$0F,$0F,$0F,$0F,$0F,$0F            ;;DA67|DA67+DA67/DA67\DA67;
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;DA6E|DA6E+DA6E/DA6E\DA6E;
                      BNE Return02DAE8                          ;;DA70|DA70+DA70/DA70\DA70;
                      JSL SprSpr_MarioSprRts                    ;;DA72|DA72+DA72/DA72\DA72;
                      JSR SubOffscreen1Bnk2                     ;;DA76|DA76+DA76/DA76\DA76;
                      LDY.W !PlayerTurnLvl                      ;;DA79|DA79+DA79/DA79\DA79;
                      LDA.W !OWPlayerSubmap,Y                   ;;DA7C|DA7C+DA7C/DA7C\DA7C;
                      TAY                                       ;;DA7F|DA7F+DA7F/DA7F\DA7F;
                      LDA.B !TrueFrame                          ;;DA80|DA80+DA80/DA80\DA80; \ Increment $1570,x 3 out of every 4 frames
                      AND.B #$03                                ;;DA82|DA82+DA82/DA82\DA82;  |
                      BEQ +                                     ;;DA84|DA84+DA84/DA84\DA84;  |
                      INC.W !SpriteMisc1570,X                   ;;DA86|DA86+DA86/DA86\DA86; /
                    + LDA.W !SpriteMisc1570,X                   ;;DA89|DA89+DA89/DA89\DA89;
                      ASL A                                     ;;DA8C|DA8C+DA8C/DA8C\DA8C;
                      CPY.B #$00                                ;;DA8D|DA8D+DA8D/DA8D\DA8D;
                      BEQ +                                     ;;DA8F|DA8F+DA8F/DA8F\DA8F;
                      ASL A                                     ;;DA91|DA91+DA91/DA91\DA91;
                    + AND.B #$40                                ;;DA92|DA92+DA92/DA92\DA92;
                      STA.W !SpriteMisc157C,X                   ;;DA94|DA94+DA94/DA94\DA94;
                      LDA.W !SpriteMisc1570,X                   ;;DA97|DA97+DA97/DA97\DA97; \ Don't throw if...
                      AND.W HammerFreq,Y                        ;;DA9A|DA9A+DA9A/DA9A\DA9A;  | ...not yet time
                      ORA.W !SpriteOffscreenX,X                 ;;DA9D|DA9D+DA9D/DA9D\DA9D;  | ...sprite offscreen
                      ORA.W !SpriteOffscreenVert,X              ;;DAA0|DAA0+DAA0/DAA0\DAA0;  |
                      ORA.W !SpriteMisc1540,X                   ;;DAA3|DAA3+DAA3/DAA3\DAA3;  | ...we just threw one
                      BNE Return02DAE8                          ;;DAA6|DAA6+DAA6/DAA6\DAA6; /
                      LDA.B #$03                                ;;DAA8|DAA8+DAA8/DAA8\DAA8; \ Set minimum time in between throws
                      STA.W !SpriteMisc1540,X                   ;;DAAA|DAAA+DAAA/DAAA\DAAA; /
                      LDY.B #$10                                ;;DAAD|DAAD+DAAD/DAAD\DAAD; \ $00 = Hammer X speed,
                      LDA.W !SpriteMisc157C,X                   ;;DAAF|DAAF+DAAF/DAAF\DAAF;  | based on sprite's direction
                      BNE +                                     ;;DAB2|DAB2+DAB2/DAB2\DAB2;  |
                      LDY.B #$F0                                ;;DAB4|DAB4+DAB4/DAB4\DAB4;  |
                    + STY.B !_0                                 ;;DAB6|DAB6+DAB6/DAB6\DAB6; /
                      LDY.B #$07                                ;;DAB8|DAB8+DAB8/DAB8\DAB8; \ Find a free extended sprite slots
CODE_02DABA:          LDA.W !ExtSpriteNumber,Y                  ;;DABA|DABA+DABA/DABA\DABA;  |
                      BEQ GenerateHammer                        ;;DABD|DABD+DABD/DABD\DABD;  |
                      DEY                                       ;;DABF|DABF+DABF/DABF\DABF;  |
                      BPL CODE_02DABA                           ;;DAC0|DAC0+DAC0/DAC0\DAC0;  |
                      RTS                                       ;;DAC2|DAC2+DAC2/DAC2\DAC2; / Return if no free slots
                                                                ;;                        ;
GenerateHammer:       LDA.B #$04                                ;;DAC3|DAC3+DAC3/DAC3\DAC3; \ Extended sprite = Hammer
                      STA.W !ExtSpriteNumber,Y                  ;;DAC5|DAC5+DAC5/DAC5\DAC5; /
                      LDA.B !SpriteXPosLow,X                    ;;DAC8|DAC8+DAC8/DAC8\DAC8; \ Hammer X pos = sprite X pos
                      STA.W !ExtSpriteXPosLow,Y                 ;;DACA|DACA+DACA/DACA\DACA;  |
                      LDA.W !SpriteXPosHigh,X                   ;;DACD|DACD+DACD/DACD\DACD;  |
                      STA.W !ExtSpriteXPosHigh,Y                ;;DAD0|DAD0+DAD0/DAD0\DAD0; /
                      LDA.B !SpriteYPosLow,X                    ;;DAD3|DAD3+DAD3/DAD3\DAD3; \ Hammer Y pos = sprite Y pos
                      STA.W !ExtSpriteYPosLow,Y                 ;;DAD5|DAD5+DAD5/DAD5\DAD5;  |
                      LDA.W !SpriteYPosHigh,X                   ;;DAD8|DAD8+DAD8/DAD8\DAD8;  |
                      STA.W !ExtSpriteYPosHigh,Y                ;;DADB|DADB+DADB/DADB\DADB; /
                      LDA.B #$D0                                ;;DADE|DADE+DADE/DADE\DADE; \ Hammer Y speed = #$D0
                      STA.W !ExtSpriteYSpeed,Y                  ;;DAE0|DAE0+DAE0/DAE0\DAE0; /
                      LDA.B !_0                                 ;;DAE3|DAE3+DAE3/DAE3\DAE3; \ Hammer X speed = $00
                      STA.W !ExtSpriteXSpeed,Y                  ;;DAE5|DAE5+DAE5/DAE5\DAE5; /
Return02DAE8:         RTS                                       ;;DAE8|DAE8+DAE8/DAE8\DAE8; Return
                                                                ;;                        ;
                                                                ;;                        ;
HammerBroDispX:       db $08,$10,$00,$10                        ;;DAE9|DAE9+DAE9/DAE9\DAE9;
                                                                ;;                        ;
HammerBroDispY:       db $F8,$F8,$00,$00                        ;;DAED|DAED+DAED/DAED\DAED;
                                                                ;;                        ;
HammerBroTiles:       db $5A,$4A,$46,$48,$4A,$5A,$48,$46        ;;DAF1|DAF1+DAF1/DAF1\DAF1;
HammerBroTileSize:    db $00,$00,$02,$02                        ;;DAF9|DAF9+DAF9/DAF9\DAF9;
                                                                ;;                        ;
HammerBroGfx:         JSR GetDrawInfo2                          ;;DAFD|DAFD+DAFD/DAFD\DAFD;
                      LDA.W !SpriteMisc157C,X                   ;;DB00|DB00+DB00/DB00\DB00;
                      STA.B !_2                                 ;;DB03|DB03+DB03/DB03\DB03;
                      PHX                                       ;;DB05|DB05+DB05/DB05\DB05;
                      LDX.B #$03                                ;;DB06|DB06+DB06/DB06\DB06;
CODE_02DB08:          LDA.B !_0                                 ;;DB08|DB08+DB08/DB08\DB08;
                      CLC                                       ;;DB0A|DB0A+DB0A/DB0A\DB0A;
                      ADC.W HammerBroDispX,X                    ;;DB0B|DB0B+DB0B/DB0B\DB0B;
                      STA.W !OAMTileXPos+$100,Y                 ;;DB0E|DB0E+DB0E/DB0E\DB0E;
                      LDA.B !_1                                 ;;DB11|DB11+DB11/DB11\DB11;
                      CLC                                       ;;DB13|DB13+DB13/DB13\DB13;
                      ADC.W HammerBroDispY,X                    ;;DB14|DB14+DB14/DB14\DB14;
                      STA.W !OAMTileYPos+$100,Y                 ;;DB17|DB17+DB17/DB17\DB17;
                      PHX                                       ;;DB1A|DB1A+DB1A/DB1A\DB1A;
                      LDA.B !_2                                 ;;DB1B|DB1B+DB1B/DB1B\DB1B;
                      PHA                                       ;;DB1D|DB1D+DB1D/DB1D\DB1D;
                      ORA.B #$37                                ;;DB1E|DB1E+DB1E/DB1E\DB1E;
                      STA.W !OAMTileAttr+$100,Y                 ;;DB20|DB20+DB20/DB20\DB20;
                      PLA                                       ;;DB23|DB23+DB23/DB23\DB23;
                      BEQ +                                     ;;DB24|DB24+DB24/DB24\DB24;
                      INX                                       ;;DB26|DB26+DB26/DB26\DB26;
                      INX                                       ;;DB27|DB27+DB27/DB27\DB27;
                      INX                                       ;;DB28|DB28+DB28/DB28\DB28;
                      INX                                       ;;DB29|DB29+DB29/DB29\DB29;
                    + LDA.W HammerBroTiles,X                    ;;DB2A|DB2A+DB2A/DB2A\DB2A;
                      STA.W !OAMTileNo+$100,Y                   ;;DB2D|DB2D+DB2D/DB2D\DB2D;
                      PLX                                       ;;DB30|DB30+DB30/DB30\DB30;
                      PHY                                       ;;DB31|DB31+DB31/DB31\DB31;
                      TYA                                       ;;DB32|DB32+DB32/DB32\DB32;
                      LSR A                                     ;;DB33|DB33+DB33/DB33\DB33;
                      LSR A                                     ;;DB34|DB34+DB34/DB34\DB34;
                      TAY                                       ;;DB35|DB35+DB35/DB35\DB35;
                      LDA.W HammerBroTileSize,X                 ;;DB36|DB36+DB36/DB36\DB36;
                      STA.W !OAMTileSize+$40,Y                  ;;DB39|DB39+DB39/DB39\DB39;
                      PLY                                       ;;DB3C|DB3C+DB3C/DB3C\DB3C;
                      INY                                       ;;DB3D|DB3D+DB3D/DB3D\DB3D;
                      INY                                       ;;DB3E|DB3E+DB3E/DB3E\DB3E;
                      INY                                       ;;DB3F|DB3F+DB3F/DB3F\DB3F;
                      INY                                       ;;DB40|DB40+DB40/DB40\DB40;
                      DEX                                       ;;DB41|DB41+DB41/DB41\DB41;
                      BPL CODE_02DB08                           ;;DB42|DB42+DB42/DB42\DB42;
CODE_02DB44:          PLX                                       ;;DB44|DB44+DB44/DB44\DB44;
                      LDY.B #$FF                                ;;DB45|DB45+DB45/DB45\DB45;
                      LDA.B #$03                                ;;DB47|DB47+DB47/DB47\DB47;
                      JMP CallFinOAMWriteBank2                  ;;DB49|DB49+DB49/DB49\DB49;
                                                                ;;                        ;
FlyingPlatformMain:   PHB                                       ;;DB4C|DB4C+DB4C/DB4C\DB4C;
                      PHK                                       ;;DB4D|DB4D+DB4D/DB4D\DB4D;
                      PLB                                       ;;DB4E|DB4E+DB4E/DB4E\DB4E;
                      JSR CODE_02DB5C                           ;;DB4F|DB4F+DB4F/DB4F\DB4F;
                      PLB                                       ;;DB52|DB52+DB52/DB52\DB52;
                      RTL                                       ;;DB53|DB53+DB53/DB53\DB53; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02DB54:          db $01,$FF                                ;;DB54|DB54+DB54/DB54\DB54;
                                                                ;;                        ;
DATA_02DB56:          db $20,$E0                                ;;DB56|DB56+DB56/DB56\DB56;
                                                                ;;                        ;
DATA_02DB58:          db $02,$FE                                ;;DB58|DB58+DB58/DB58\DB58;
                                                                ;;                        ;
DATA_02DB5A:          db $20,$E0                                ;;DB5A|DB5A+DB5A/DB5A\DB5A;
                                                                ;;                        ;
CODE_02DB5C:          JSR FlyingPlatformGfx                     ;;DB5C|DB5C+DB5C/DB5C\DB5C; Draw sprite
                      LDA.B #$FF                                ;;DB5F|DB5F+DB5F/DB5F\DB5F; \ $1594 = #$FF
                      STA.W !SpriteMisc1594,X                   ;;DB61|DB61+DB61/DB61\DB61; /
                      LDY.B #$09                                ;;DB64|DB64+DB64/DB64\DB64; \ Check sprite slots 0-9 for Hammer Brother
CODE_02DB66:          LDA.W !SpriteStatus,Y                     ;;DB66|DB66+DB66/DB66\DB66;  |
                      CMP.B #$08                                ;;DB69|DB69+DB69/DB69\DB69;  |
                      BNE CODE_02DB74                           ;;DB6B|DB6B+DB6B/DB6B\DB6B;  |
                      LDA.W !SpriteNumber,Y                     ;;DB6D|DB6D+DB6D/DB6D\DB6D;  |
                      CMP.B #$9B                                ;;DB70|DB70+DB70/DB70\DB70;  |
                      BEQ PutHammerBroOnPlat                    ;;DB72|DB72+DB72/DB72\DB72;  |
CODE_02DB74:          DEY                                       ;;DB74|DB74+DB74/DB74\DB74;  |
                      BPL CODE_02DB66                           ;;DB75|DB75+DB75/DB75\DB75;  |
                      BRA +                                     ;;DB77|DB77+DB77/DB77\DB77; / Branch if no Hammer Brother
                                                                ;;                        ;
PutHammerBroOnPlat:   TYA                                       ;;DB79|DB79+DB79/DB79\DB79; \ $1594 = index of Hammer Bro
                      STA.W !SpriteMisc1594,X                   ;;DB7A|DB7A+DB7A/DB7A\DB7A; /
                      LDA.B !SpriteXPosLow,X                    ;;DB7D|DB7D+DB7D/DB7D\DB7D; \ Hammer Bro X postion = Platform X position
                      STA.W !SpriteXPosLow,Y                    ;;DB7F|DB7F+DB7F/DB7F\DB7F;  |
                      LDA.W !SpriteXPosHigh,X                   ;;DB82|DB82+DB82/DB82\DB82;  |
                      STA.W !SpriteXPosHigh,Y                   ;;DB85|DB85+DB85/DB85\DB85; /
                      LDA.B !SpriteYPosLow,X                    ;;DB88|DB88+DB88/DB88\DB88; \ Hammer Bro Y position = Platform Y position - #$10
                      SEC                                       ;;DB8A|DB8A+DB8A/DB8A\DB8A;  |
                      SBC.B #$10                                ;;DB8B|DB8B+DB8B/DB8B\DB8B;  |
                      STA.W !SpriteYPosLow,Y                    ;;DB8D|DB8D+DB8D/DB8D\DB8D;  |
                      LDA.W !SpriteYPosHigh,X                   ;;DB90|DB90+DB90/DB90\DB90;  |
                      SBC.B #$00                                ;;DB93|DB93+DB93/DB93\DB93;  |
                      STA.W !SpriteYPosHigh,Y                   ;;DB95|DB95+DB95/DB95\DB95; /
                      PHX                                       ;;DB98|DB98+DB98/DB98\DB98; \ Draw Hammer Bro
                      TYX                                       ;;DB99|DB99+DB99/DB99\DB99;  |
                      JSR HammerBroGfx                          ;;DB9A|DB9A+DB9A/DB9A\DB9A;  |
                      PLX                                       ;;DB9D|DB9D+DB9D/DB9D\DB9D; /
                    + LDA.B !SpriteLock                         ;;DB9E|DB9E+DB9E/DB9E\DB9E;
                      BNE Return02DC0E                          ;;DBA0|DBA0+DBA0/DBA0\DBA0;
                      JSR SubOffscreen1Bnk2                     ;;DBA2|DBA2+DBA2/DBA2\DBA2;
                      LDA.B !TrueFrame                          ;;DBA5|DBA5+DBA5/DBA5\DBA5;
                      AND.B #$01                                ;;DBA7|DBA7+DBA7/DBA7\DBA7;
                      BNE CODE_02DBD7                           ;;DBA9|DBA9+DBA9/DBA9\DBA9;
                      LDA.W !SpriteMisc1534,X                   ;;DBAB|DBAB+DBAB/DBAB\DBAB;
                      AND.B #$01                                ;;DBAE|DBAE+DBAE/DBAE\DBAE;
                      TAY                                       ;;DBB0|DBB0+DBB0/DBB0\DBB0;
                      LDA.B !SpriteXSpeed,X                     ;;DBB1|DBB1+DBB1/DBB1\DBB1;
                      CLC                                       ;;DBB3|DBB3+DBB3/DBB3\DBB3;
                      ADC.W DATA_02DB54,Y                       ;;DBB4|DBB4+DBB4/DBB4\DBB4;
                      STA.B !SpriteXSpeed,X                     ;;DBB7|DBB7+DBB7/DBB7\DBB7;
                      CMP.W DATA_02DB56,Y                       ;;DBB9|DBB9+DBB9/DBB9\DBB9;
                      BNE +                                     ;;DBBC|DBBC+DBBC/DBBC\DBBC;
                      INC.W !SpriteMisc1534,X                   ;;DBBE|DBBE+DBBE/DBBE\DBBE;
                    + LDA.W !SpriteMisc151C,X                   ;;DBC1|DBC1+DBC1/DBC1\DBC1;
                      AND.B #$01                                ;;DBC4|DBC4+DBC4/DBC4\DBC4;
                      TAY                                       ;;DBC6|DBC6+DBC6/DBC6\DBC6;
                      LDA.B !SpriteYSpeed,X                     ;;DBC7|DBC7+DBC7/DBC7\DBC7;
                      CLC                                       ;;DBC9|DBC9+DBC9/DBC9\DBC9;
                      ADC.W DATA_02DB58,Y                       ;;DBCA|DBCA+DBCA/DBCA\DBCA;
                      STA.B !SpriteYSpeed,X                     ;;DBCD|DBCD+DBCD/DBCD\DBCD;
                      CMP.W DATA_02DB5A,Y                       ;;DBCF|DBCF+DBCF/DBCF\DBCF;
                      BNE CODE_02DBD7                           ;;DBD2|DBD2+DBD2/DBD2\DBD2;
                      INC.W !SpriteMisc151C,X                   ;;DBD4|DBD4+DBD4/DBD4\DBD4;
CODE_02DBD7:          JSR UpdateYPosNoGrvty                     ;;DBD7|DBD7+DBD7/DBD7\DBD7;
                      JSR UpdateXPosNoGrvty                     ;;DBDA|DBDA+DBDA/DBDA\DBDA;
                      STA.W !SpriteMisc1528,X                   ;;DBDD|DBDD+DBDD/DBDD\DBDD;
                      JSL InvisBlkMainRt                        ;;DBE0|DBE0+DBE0/DBE0\DBE0;
                      LDA.W !SpriteMisc1558,X                   ;;DBE4|DBE4+DBE4/DBE4\DBE4;
                      BEQ Return02DC0E                          ;;DBE7|DBE7+DBE7/DBE7\DBE7;
                      LDA.B #$01                                ;;DBE9|DBE9+DBE9/DBE9\DBE9;
                      STA.B !SpriteTableC2,X                    ;;DBEB|DBEB+DBEB/DBEB\DBEB;
                      JSR SubHorizPosBnk2                       ;;DBED|DBED+DBED/DBED\DBED;
                      LDA.B !_F                                 ;;DBF0|DBF0+DBF0/DBF0\DBF0;
                      CMP.B #$08                                ;;DBF2|DBF2+DBF2/DBF2\DBF2;
                      BMI +                                     ;;DBF4|DBF4+DBF4/DBF4\DBF4;
                      INC.B !SpriteTableC2,X                    ;;DBF6|DBF6+DBF6/DBF6\DBF6;
                    + LDY.W !SpriteMisc1594,X                   ;;DBF8|DBF8+DBF8/DBF8\DBF8;
                      BMI Return02DC0E                          ;;DBFB|DBFB+DBFB/DBFB\DBFB;
                      LDA.B #$02                                ;;DBFD|DBFD+DBFD/DBFD\DBFD; \ Sprite status = Killed
                      STA.W !SpriteStatus,Y                     ;;DBFF|DBFF+DBFF/DBFF\DBFF; /
                      LDA.B #$C0                                ;;DC02|DC02+DC02/DC02\DC02;
                      STA.W !SpriteYSpeed,Y                     ;;DC04|DC04+DC04/DC04\DC04;
                      PHX                                       ;;DC07|DC07+DC07/DC07\DC07;
                      TYX                                       ;;DC08|DC08+DC08/DC08\DC08;
                      JSL DisplayContactGfxS                    ;;DC09|DC09+DC09/DC09\DC09;
                      PLX                                       ;;DC0D|DC0D+DC0D/DC0D\DC0D;
Return02DC0E:         RTS                                       ;;DC0E|DC0E+DC0E/DC0E\DC0E; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02DC0F:          db $00,$10,$F2,$1E,$00,$10,$FA,$1E        ;;DC0F|DC0F+DC0F/DC0F\DC0F;
DATA_02DC17:          db $00,$00,$F6,$F6,$00,$00,$FE,$FE        ;;DC17|DC17+DC17/DC17\DC17;
HmrBroPlatTiles:      db $40,$40,$C6,$C6,$40,$40,$5D,$5D        ;;DC1F|DC1F+DC1F/DC1F\DC1F;
DATA_02DC27:          db $32,$32,$72,$32,$32,$32,$72,$32        ;;DC27|DC27+DC27/DC27\DC27;
DATA_02DC2F:          db $02,$02,$02,$02,$02,$02,$00,$00        ;;DC2F|DC2F+DC2F/DC2F\DC2F;
DATA_02DC37:          db $00,$04,$06,$08,$08,$06,$04,$00        ;;DC37|DC37+DC37/DC37\DC37;
                                                                ;;                        ;
FlyingPlatformGfx:    JSR GetDrawInfo2                          ;;DC3F|DC3F+DC3F/DC3F\DC3F;
                      LDA.B !SpriteTableC2,X                    ;;DC42|DC42+DC42/DC42\DC42;
                      STA.B !_7                                 ;;DC44|DC44+DC44/DC44\DC44;
                      LDA.W !SpriteMisc1558,X                   ;;DC46|DC46+DC46/DC46\DC46;
                      LSR A                                     ;;DC49|DC49+DC49/DC49\DC49;
                      TAY                                       ;;DC4A|DC4A+DC4A/DC4A\DC4A;
                      LDA.W DATA_02DC37,Y                       ;;DC4B|DC4B+DC4B/DC4B\DC4B;
                      STA.B !_5                                 ;;DC4E|DC4E+DC4E/DC4E\DC4E;
                      LDY.W !SpriteOAMIndex,X                   ;;DC50|DC50+DC50/DC50\DC50; Y = Index into sprite OAM
                      PHX                                       ;;DC53|DC53+DC53/DC53\DC53;
                      LDA.B !EffFrame                           ;;DC54|DC54+DC54/DC54\DC54;
                      LSR A                                     ;;DC56|DC56+DC56/DC56\DC56;
                      AND.B #$04                                ;;DC57|DC57+DC57/DC57\DC57;
                      STA.B !_2                                 ;;DC59|DC59+DC59/DC59\DC59;
                      LDX.B #$03                                ;;DC5B|DC5B+DC5B/DC5B\DC5B;
CODE_02DC5D:          STX.B !_6                                 ;;DC5D|DC5D+DC5D/DC5D\DC5D;
                      TXA                                       ;;DC5F|DC5F+DC5F/DC5F\DC5F;
                      ORA.B !_2                                 ;;DC60|DC60+DC60/DC60\DC60;
                      TAX                                       ;;DC62|DC62+DC62/DC62\DC62;
                      LDA.B !_0                                 ;;DC63|DC63+DC63/DC63\DC63;
                      CLC                                       ;;DC65|DC65+DC65/DC65\DC65;
                      ADC.W DATA_02DC0F,X                       ;;DC66|DC66+DC66/DC66\DC66;
                      STA.W !OAMTileXPos+$100,Y                 ;;DC69|DC69+DC69/DC69\DC69;
                      LDA.B !_1                                 ;;DC6C|DC6C+DC6C/DC6C\DC6C;
                      CLC                                       ;;DC6E|DC6E+DC6E/DC6E\DC6E;
                      ADC.W DATA_02DC17,X                       ;;DC6F|DC6F+DC6F/DC6F\DC6F;
                      STA.W !OAMTileYPos+$100,Y                 ;;DC72|DC72+DC72/DC72\DC72;
                      PHX                                       ;;DC75|DC75+DC75/DC75\DC75;
                      LDX.B !_6                                 ;;DC76|DC76+DC76/DC76\DC76;
                      CPX.B #$02                                ;;DC78|DC78+DC78/DC78\DC78;
                      BCS +                                     ;;DC7A|DC7A+DC7A/DC7A\DC7A;
                      INX                                       ;;DC7C|DC7C+DC7C/DC7C\DC7C;
                      CPX.B !_7                                 ;;DC7D|DC7D+DC7D/DC7D\DC7D;
                      BNE +                                     ;;DC7F|DC7F+DC7F/DC7F\DC7F;
                      LDA.W !OAMTileYPos+$100,Y                 ;;DC81|DC81+DC81/DC81\DC81;
                      SEC                                       ;;DC84|DC84+DC84/DC84\DC84;
                      SBC.B !_5                                 ;;DC85|DC85+DC85/DC85\DC85;
                      STA.W !OAMTileYPos+$100,Y                 ;;DC87|DC87+DC87/DC87\DC87;
                    + PLX                                       ;;DC8A|DC8A+DC8A/DC8A\DC8A;
                      LDA.W HmrBroPlatTiles,X                   ;;DC8B|DC8B+DC8B/DC8B\DC8B;
                      STA.W !OAMTileNo+$100,Y                   ;;DC8E|DC8E+DC8E/DC8E\DC8E;
                      LDA.W DATA_02DC27,X                       ;;DC91|DC91+DC91/DC91\DC91;
                      STA.W !OAMTileAttr+$100,Y                 ;;DC94|DC94+DC94/DC94\DC94;
                      PHY                                       ;;DC97|DC97+DC97/DC97\DC97;
                      TYA                                       ;;DC98|DC98+DC98/DC98\DC98;
                      LSR A                                     ;;DC99|DC99+DC99/DC99\DC99;
                      LSR A                                     ;;DC9A|DC9A+DC9A/DC9A\DC9A;
                      TAY                                       ;;DC9B|DC9B+DC9B/DC9B\DC9B;
                      LDA.W DATA_02DC2F,X                       ;;DC9C|DC9C+DC9C/DC9C\DC9C;
                      STA.W !OAMTileSize+$40,Y                  ;;DC9F|DC9F+DC9F/DC9F\DC9F;
                      PLY                                       ;;DCA2|DCA2+DCA2/DCA2\DCA2;
                      INY                                       ;;DCA3|DCA3+DCA3/DCA3\DCA3;
                      INY                                       ;;DCA4|DCA4+DCA4/DCA4\DCA4;
                      INY                                       ;;DCA5|DCA5+DCA5/DCA5\DCA5;
                      INY                                       ;;DCA6|DCA6+DCA6/DCA6\DCA6;
                      LDX.B !_6                                 ;;DCA7|DCA7+DCA7/DCA7\DCA7;
                      DEX                                       ;;DCA9|DCA9+DCA9/DCA9\DCA9;
                      BPL CODE_02DC5D                           ;;DCAA|DCAA+DCAA/DCAA\DCAA;
                      JMP CODE_02DB44                           ;;DCAC|DCAC+DCAC/DCAC\DCAC;
                                                                ;;                        ;
SumoBrotherMain:      PHB                                       ;;DCAF|DCAF+DCAF/DCAF\DCAF;
                      PHK                                       ;;DCB0|DCB0+DCB0/DCB0\DCB0;
                      PLB                                       ;;DCB1|DCB1+DCB1/DCB1\DCB1;
                      JSR SumoBroMainRt                         ;;DCB2|DCB2+DCB2/DCB2\DCB2;
                      PLB                                       ;;DCB5|DCB5+DCB5/DCB5\DCB5;
                      RTL                                       ;;DCB6|DCB6+DCB6/DCB6\DCB6; Return
                                                                ;;                        ;
SumoBroMainRt:        JSR SumoBroGfxRt                          ;;DCB7|DCB7+DCB7/DCB7\DCB7;
                      LDA.B !SpriteLock                         ;;DCBA|DCBA+DCBA/DCBA\DCBA;
                      BNE Return02DCE9                          ;;DCBC|DCBC+DCBC/DCBC\DCBC;
                      LDA.W !SpriteStatus,X                     ;;DCBE|DCBE+DCBE/DCBE\DCBE;
                      CMP.B #$08                                ;;DCC1|DCC1+DCC1/DCC1\DCC1;
                      BNE Return02DCE9                          ;;DCC3|DCC3+DCC3/DCC3\DCC3;
                      JSR SubOffscreen0Bnk2                     ;;DCC5|DCC5+DCC5/DCC5\DCC5;
                      JSL SprSpr_MarioSprRts                    ;;DCC8|DCC8+DCC8/DCC8\DCC8;
                      JSL UpdateSpritePos                       ;;DCCC|DCCC+DCCC/DCCC\DCCC;
                      LDA.W !SpriteBlockedDirs,X                ;;DCD0|DCD0+DCD0/DCD0\DCD0; \ Branch if not on ground
                      AND.B #$04                                ;;DCD3|DCD3+DCD3/DCD3\DCD3;  |
                      BEQ +                                     ;;DCD5|DCD5+DCD5/DCD5\DCD5; /
                      STZ.B !SpriteYSpeed,X                     ;;DCD7|DCD7+DCD7/DCD7\DCD7; Sprite Y Speed = 0
                      STZ.B !SpriteXSpeed,X                     ;;DCD9|DCD9+DCD9/DCD9\DCD9; Sprite X Speed = 0
                    + LDA.B !SpriteTableC2,X                    ;;DCDB|DCDB+DCDB/DCDB\DCDB;
                      JSL ExecutePtr                            ;;DCDD|DCDD+DCDD/DCDD\DCDD;
                                                                ;;                        ;
                      dw CODE_02DCEA                            ;;DCE1|DCE1+DCE1/DCE1\DCE1;
                      dw CODE_02DCFF                            ;;DCE3|DCE3+DCE3/DCE3\DCE3;
                      dw CODE_02DD0E                            ;;DCE5|DCE5+DCE5/DCE5\DCE5;
                      dw CODE_02DD4B                            ;;DCE7|DCE7+DCE7/DCE7\DCE7;
                                                                ;;                        ;
Return02DCE9:         RTS                                       ;;DCE9|DCE9+DCE9/DCE9\DCE9; Return
                                                                ;;                        ;
CODE_02DCEA:          LDA.B #$01                                ;;DCEA|DCEA+DCEA/DCEA\DCEA;
                      STA.W !SpriteMisc1602,X                   ;;DCEC|DCEC+DCEC/DCEC\DCEC;
                      LDA.W !SpriteMisc1540,X                   ;;DCEF|DCEF+DCEF/DCEF\DCEF;
                      BNE +                                     ;;DCF2|DCF2+DCF2/DCF2\DCF2;
                      STZ.W !SpriteMisc1602,X                   ;;DCF4|DCF4+DCF4/DCF4\DCF4;
                      LDA.B #$03                                ;;DCF7|DCF7+DCF7/DCF7\DCF7;
CODE_02DCF9:          STA.W !SpriteMisc1540,X                   ;;DCF9|DCF9+DCF9/DCF9\DCF9;
                      INC.B !SpriteTableC2,X                    ;;DCFC|DCFC+DCFC/DCFC\DCFC;
                    + RTS                                       ;;DCFE|DCFE+DCFE/DCFE\DCFE; Return
                                                                ;;                        ;
CODE_02DCFF:          LDA.W !SpriteMisc1540,X                   ;;DCFF|DCFF+DCFF/DCFF\DCFF;
                      BNE Return02DD0B                          ;;DD02|DD02+DD02/DD02\DD02;
                      INC.W !SpriteMisc1602,X                   ;;DD04|DD04+DD04/DD04\DD04;
                      LDA.B #$03                                ;;DD07|DD07+DD07/DD07\DD07;
                      BRA CODE_02DCF9                           ;;DD09|DD09+DD09/DD09\DD09;
                                                                ;;                        ;
Return02DD0B:         RTS                                       ;;DD0B|DD0B+DD0B/DD0B\DD0B; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02DD0C:          db $20,$E0                                ;;DD0C|DD0C+DD0C/DD0C\DD0C;
                                                                ;;                        ;
CODE_02DD0E:          LDA.W !SpriteMisc1558,X                   ;;DD0E|DD0E+DD0E/DD0E\DD0E;
                      BNE CODE_02DD45                           ;;DD11|DD11+DD11/DD11\DD11;
                      LDY.W !SpriteMisc157C,X                   ;;DD13|DD13+DD13/DD13\DD13;
                      LDA.W DATA_02DD0C,Y                       ;;DD16|DD16+DD16/DD16\DD16;
                      STA.B !SpriteXSpeed,X                     ;;DD19|DD19+DD19/DD19\DD19;
                      LDA.W !SpriteMisc1540,X                   ;;DD1B|DD1B+DD1B/DD1B\DD1B;
                      BNE Return02DD44                          ;;DD1E|DD1E+DD1E/DD1E\DD1E;
                      INC.W !SpriteMisc1570,X                   ;;DD20|DD20+DD20/DD20\DD20;
                      LDA.W !SpriteMisc1570,X                   ;;DD23|DD23+DD23/DD23\DD23;
                      AND.B #$01                                ;;DD26|DD26+DD26/DD26\DD26;
                      BNE +                                     ;;DD28|DD28+DD28/DD28\DD28;
                      LDA.B #$20                                ;;DD2A|DD2A+DD2A/DD2A\DD2A;
                      STA.W !SpriteMisc1558,X                   ;;DD2C|DD2C+DD2C/DD2C\DD2C;
                    + LDA.W !SpriteMisc1570,X                   ;;DD2F|DD2F+DD2F/DD2F\DD2F;
                      CMP.B #$03                                ;;DD32|DD32+DD32/DD32\DD32;
                      BNE CODE_02DD3D                           ;;DD34|DD34+DD34/DD34\DD34;
                      STZ.W !SpriteMisc1570,X                   ;;DD36|DD36+DD36/DD36\DD36;
                      LDA.B #$70                                ;;DD39|DD39+DD39/DD39\DD39;
                      BRA CODE_02DCF9                           ;;DD3B|DD3B+DD3B/DD3B\DD3B;
                                                                ;;                        ;
CODE_02DD3D:          LDA.B #$03                                ;;DD3D|DD3D+DD3D/DD3D\DD3D;
CODE_02DD3F:          JSR CODE_02DCF9                           ;;DD3F|DD3F+DD3F/DD3F\DD3F;
                      STZ.B !SpriteTableC2,X                    ;;DD42|DD42+DD42/DD42\DD42;
Return02DD44:         RTS                                       ;;DD44|DD44+DD44/DD44\DD44; Return
                                                                ;;                        ;
CODE_02DD45:          LDA.B #$01                                ;;DD45|DD45+DD45/DD45\DD45;
                      STA.W !SpriteMisc1602,X                   ;;DD47|DD47+DD47/DD47\DD47;
                      RTS                                       ;;DD4A|DD4A+DD4A/DD4A\DD4A; Return
                                                                ;;                        ;
CODE_02DD4B:          LDA.B #$03                                ;;DD4B|DD4B+DD4B/DD4B\DD4B;
                      LDY.W !SpriteMisc1540,X                   ;;DD4D|DD4D+DD4D/DD4D\DD4D;
                      BEQ CODE_02DD81                           ;;DD50|DD50+DD50/DD50\DD50;
                      CPY.B #$2E                                ;;DD52|DD52+DD52/DD52\DD52;
                      BNE CODE_02DD6F                           ;;DD54|DD54+DD54/DD54\DD54;
                      PHA                                       ;;DD56|DD56+DD56/DD56\DD56;
                      LDA.W !SpriteOffscreenX,X                 ;;DD57|DD57+DD57/DD57\DD57;
                      ORA.W !SpriteOffscreenVert,X              ;;DD5A|DD5A+DD5A/DD5A\DD5A;
                      BNE +                                     ;;DD5D|DD5D+DD5D/DD5D\DD5D;
                      LDA.B #$30                                ;;DD5F|DD5F+DD5F/DD5F\DD5F; \ Set ground shake timer
                      STA.W !ScreenShakeTimer                   ;;DD61|DD61+DD61/DD61\DD61; /
                      LDA.B #!SFX_KAPOW                         ;;DD64|DD64+DD64/DD64\DD64; \ Play sound effect
                      STA.W !SPCIO3                             ;;DD66|DD66+DD66/DD66\DD66; /
                      PHY                                       ;;DD69|DD69+DD69/DD69\DD69;
                      JSR GenSumoLightning                      ;;DD6A|DD6A+DD6A/DD6A\DD6A;
                      PLY                                       ;;DD6D|DD6D+DD6D/DD6D\DD6D;
                    + PLA                                       ;;DD6E|DD6E+DD6E/DD6E\DD6E;
CODE_02DD6F:          CPY.B #$30                                ;;DD6F|DD6F+DD6F/DD6F\DD6F;
                      BCC +                                     ;;DD71|DD71+DD71/DD71\DD71;
                      CPY.B #$50                                ;;DD73|DD73+DD73/DD73\DD73;
                      BCS +                                     ;;DD75|DD75+DD75/DD75\DD75;
                      INC A                                     ;;DD77|DD77+DD77/DD77\DD77;
                      CPY.B #$44                                ;;DD78|DD78+DD78/DD78\DD78;
                      BCS +                                     ;;DD7A|DD7A+DD7A/DD7A\DD7A;
                      INC A                                     ;;DD7C|DD7C+DD7C/DD7C\DD7C;
                    + STA.W !SpriteMisc1602,X                   ;;DD7D|DD7D+DD7D/DD7D\DD7D;
                      RTS                                       ;;DD80|DD80+DD80/DD80\DD80; Return
                                                                ;;                        ;
CODE_02DD81:          LDA.W !SpriteMisc157C,X                   ;;DD81|DD81+DD81/DD81\DD81;
                      EOR.B #$01                                ;;DD84|DD84+DD84/DD84\DD84;
                      STA.W !SpriteMisc157C,X                   ;;DD86|DD86+DD86/DD86\DD86;
                      LDA.B #$40                                ;;DD89|DD89+DD89/DD89\DD89;
                      JSR CODE_02DD3F                           ;;DD8B|DD8B+DD8B/DD8B\DD8B;
                      RTS                                       ;;DD8E|DD8E+DD8E/DD8E\DD8E; Return
                                                                ;;                        ;
GenSumoLightning:     JSL FindFreeSprSlot                       ;;DD8F|DD8F+DD8F/DD8F\DD8F; \ Return if no free slots
                      BMI +                                     ;;DD93|DD93+DD93/DD93\DD93; /
                      LDA.B #$2B                                ;;DD95|DD95+DD95/DD95\DD95; \ Sprite = Lightning
                      STA.W !SpriteNumber,Y                     ;;DD97|DD97+DD97/DD97\DD97; /
                      LDA.B #$08                                ;;DD9A|DD9A+DD9A/DD9A\DD9A; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;DD9C|DD9C+DD9C/DD9C\DD9C; /
                      LDA.B !SpriteXPosLow,X                    ;;DD9F|DD9F+DD9F/DD9F\DD9F; \ Lightning X position = Sprite X position + #$04
                      ADC.B #$04                                ;;DDA1|DDA1+DDA1/DDA1\DDA1;  |
                      STA.W !SpriteXPosLow,Y                    ;;DDA3|DDA3+DDA3/DDA3\DDA3;  |
                      LDA.W !SpriteXPosHigh,X                   ;;DDA6|DDA6+DDA6/DDA6\DDA6;  |
                      ADC.B #$00                                ;;DDA9|DDA9+DDA9/DDA9\DDA9;  |
                      STA.W !SpriteXPosHigh,Y                   ;;DDAB|DDAB+DDAB/DDAB\DDAB; /
                      LDA.B !SpriteYPosLow,X                    ;;DDAE|DDAE+DDAE/DDAE\DDAE; \ Lightning Y position = Sprite Y position
                      STA.W !SpriteYPosLow,Y                    ;;DDB0|DDB0+DDB0/DDB0\DDB0;  |
                      LDA.W !SpriteYPosHigh,X                   ;;DDB3|DDB3+DDB3/DDB3\DDB3;  |
                      STA.W !SpriteYPosHigh,Y                   ;;DDB6|DDB6+DDB6/DDB6\DDB6; /
                      PHX                                       ;;DDB9|DDB9+DDB9/DDB9\DDB9;
                      TYX                                       ;;DDBA|DDBA+DDBA/DDBA\DDBA; \ Reset sprite tables
                      JSL InitSpriteTables                      ;;DDBB|DDBB+DDBB/DDBB\DDBB; /
                      LDA.B #$10                                ;;DDBF|DDBF+DDBF/DDBF\DDBF; \ $1FE2,x = #$10
                      STA.W !SpriteMisc1FE2,X                   ;;DDC1|DDC1+DDC1/DDC1\DDC1; / Time to not interact with ground??
                      PLX                                       ;;DDC4|DDC4+DDC4/DDC4\DDC4;
                    + RTS                                       ;;DDC5|DDC5+DDC5/DDC5\DDC5; Return
                                                                ;;                        ;
                                                                ;;                        ;
SumoBrosDispX:        db $FF,$07,$FC,$04,$FF,$07,$FC,$04        ;;DDC6|DDC6+DDC6/DDC6\DDC6;
                      db $FF,$FF,$FC,$04,$FF,$FF,$FC,$04        ;;DDCE|DDCE+DDCE/DDCE\DDCE;
                      db $02,$02,$F4,$04,$02,$02,$F4,$04        ;;DDD6|DDD6+DDD6/DDD6\DDD6;
                      db $09,$01,$04,$FC,$09,$01,$04,$FC        ;;DDDE|DDDE+DDDE/DDDE\DDDE;
                      db $01,$01,$04,$FC,$01,$01,$04,$FC        ;;DDE6|DDE6+DDE6/DDE6\DDE6;
                      db $FF,$FF,$0C,$FC,$FF,$FF,$0C,$FC        ;;DDEE|DDEE+DDEE/DDEE\DDEE;
SumoBrosDispY:        db $F8,$F8,$00,$00,$F8,$F8,$00,$00        ;;DDF6|DDF6+DDF6/DDF6\DDF6;
                      db $F8,$F0,$00,$00,$F8,$F8,$00,$00        ;;DDFE|DDFE+DDFE/DDFE\DDFE;
                      db $F8,$F8,$01,$00,$F8,$F8,$FF,$00        ;;DE06|DE06+DE06/DE06\DE06;
SumoBrosTiles:        db $98,$99,$A7,$A8,$98,$99,$AA,$AB        ;;DE0E|DE0E+DE0E/DE0E\DE0E;
                      db $8A,$66,$AA,$AB,$EE,$EE,$C5,$C6        ;;DE16|DE16+DE16/DE16\DE16;
                      db $80,$80,$C1,$C3,$80,$80,$C1,$C3        ;;DE1E|DE1E+DE1E/DE1E\DE1E;
SumoBrosTileSize:     db $00,$00,$02,$02,$00,$00,$02,$02        ;;DE26|DE26+DE26/DE26\DE26;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;DE2E|DE2E+DE2E/DE2E\DE2E;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;DE36|DE36+DE36/DE36\DE36;
                                                                ;;                        ;
SumoBroGfxRt:         JSR GetDrawInfo2                          ;;DE3E|DE3E+DE3E/DE3E\DE3E;
                      LDA.W !SpriteMisc157C,X                   ;;DE41|DE41+DE41/DE41\DE41;
                      LSR A                                     ;;DE44|DE44+DE44/DE44\DE44;
                      ROR A                                     ;;DE45|DE45+DE45/DE45\DE45;
                      ROR A                                     ;;DE46|DE46+DE46/DE46\DE46;
                      AND.B #$40                                ;;DE47|DE47+DE47/DE47\DE47;
                      EOR.B #$40                                ;;DE49|DE49+DE49/DE49\DE49;
                      STA.B !_2                                 ;;DE4B|DE4B+DE4B/DE4B\DE4B;
                      LDY.W !SpriteOAMIndex,X                   ;;DE4D|DE4D+DE4D/DE4D\DE4D; Y = Index into sprite OAM
                      LDA.W !SpriteMisc1602,X                   ;;DE50|DE50+DE50/DE50\DE50;
                      ASL A                                     ;;DE53|DE53+DE53/DE53\DE53;
                      ASL A                                     ;;DE54|DE54+DE54/DE54\DE54;
                      PHX                                       ;;DE55|DE55+DE55/DE55\DE55;
                      TAX                                       ;;DE56|DE56+DE56/DE56\DE56;
                      LDA.B #$03                                ;;DE57|DE57+DE57/DE57\DE57;
                      STA.B !_5                                 ;;DE59|DE59+DE59/DE59\DE59;
CODE_02DE5B:          PHX                                       ;;DE5B|DE5B+DE5B/DE5B\DE5B;
                      LDA.B !_2                                 ;;DE5C|DE5C+DE5C/DE5C\DE5C;
                      BEQ +                                     ;;DE5E|DE5E+DE5E/DE5E\DE5E;
                      TXA                                       ;;DE60|DE60+DE60/DE60\DE60;
                      CLC                                       ;;DE61|DE61+DE61/DE61\DE61;
                      ADC.B #$18                                ;;DE62|DE62+DE62/DE62\DE62;
                      TAX                                       ;;DE64|DE64+DE64/DE64\DE64;
                    + LDA.B !_0                                 ;;DE65|DE65+DE65/DE65\DE65;
                      CLC                                       ;;DE67|DE67+DE67/DE67\DE67;
                      ADC.W SumoBrosDispX,X                     ;;DE68|DE68+DE68/DE68\DE68;
                      STA.W !OAMTileXPos+$100,Y                 ;;DE6B|DE6B+DE6B/DE6B\DE6B;
                      PLX                                       ;;DE6E|DE6E+DE6E/DE6E\DE6E;
                      LDA.B !_1                                 ;;DE6F|DE6F+DE6F/DE6F\DE6F;
                      CLC                                       ;;DE71|DE71+DE71/DE71\DE71;
                      ADC.W SumoBrosDispY,X                     ;;DE72|DE72+DE72/DE72\DE72;
                      STA.W !OAMTileYPos+$100,Y                 ;;DE75|DE75+DE75/DE75\DE75;
                      LDA.W SumoBrosTiles,X                     ;;DE78|DE78+DE78/DE78\DE78;
                      STA.W !OAMTileNo+$100,Y                   ;;DE7B|DE7B+DE7B/DE7B\DE7B;
                      CMP.B #$66                                ;;DE7E|DE7E+DE7E/DE7E\DE7E;
                      SEC                                       ;;DE80|DE80+DE80/DE80\DE80;
                      BNE +                                     ;;DE81|DE81+DE81/DE81\DE81;
                      CLC                                       ;;DE83|DE83+DE83/DE83\DE83;
                    + LDA.B #$34                                ;;DE84|DE84+DE84/DE84\DE84;
                      ADC.B !_2                                 ;;DE86|DE86+DE86/DE86\DE86;
                      STA.W !OAMTileAttr+$100,Y                 ;;DE88|DE88+DE88/DE88\DE88;
                      PHY                                       ;;DE8B|DE8B+DE8B/DE8B\DE8B;
                      TYA                                       ;;DE8C|DE8C+DE8C/DE8C\DE8C;
                      LSR A                                     ;;DE8D|DE8D+DE8D/DE8D\DE8D;
                      LSR A                                     ;;DE8E|DE8E+DE8E/DE8E\DE8E;
                      TAY                                       ;;DE8F|DE8F+DE8F/DE8F\DE8F;
                      LDA.W SumoBrosTileSize,X                  ;;DE90|DE90+DE90/DE90\DE90;
                      STA.W !OAMTileSize+$40,Y                  ;;DE93|DE93+DE93/DE93\DE93;
                      PLY                                       ;;DE96|DE96+DE96/DE96\DE96;
                      INY                                       ;;DE97|DE97+DE97/DE97\DE97;
                      INY                                       ;;DE98|DE98+DE98/DE98\DE98;
                      INY                                       ;;DE99|DE99+DE99/DE99\DE99;
                      INY                                       ;;DE9A|DE9A+DE9A/DE9A\DE9A;
                      INX                                       ;;DE9B|DE9B+DE9B/DE9B\DE9B;
                      DEC.B !_5                                 ;;DE9C|DE9C+DE9C/DE9C\DE9C;
                      BPL CODE_02DE5B                           ;;DE9E|DE9E+DE9E/DE9E\DE9E;
                      PLX                                       ;;DEA0|DEA0+DEA0/DEA0\DEA0;
                      LDY.B #$FF                                ;;DEA1|DEA1+DEA1/DEA1\DEA1;
                      LDA.B #$03                                ;;DEA3|DEA3+DEA3/DEA3\DEA3;
                      JMP CallFinOAMWriteBank2                  ;;DEA5|DEA5+DEA5/DEA5\DEA5;
                                                                ;;                        ;
SumosLightningMain:   PHB                                       ;;DEA8|DEA8+DEA8/DEA8\DEA8;
                      PHK                                       ;;DEA9|DEA9+DEA9/DEA9\DEA9;
                      PLB                                       ;;DEAA|DEAA+DEAA/DEAA\DEAA;
                      JSR CODE_02DEB0                           ;;DEAB|DEAB+DEAB/DEAB\DEAB;
                      PLB                                       ;;DEAE|DEAE+DEAE/DEAE\DEAE;
                      RTL                                       ;;DEAF|DEAF+DEAF/DEAF\DEAF; Return
                                                                ;;                        ;
CODE_02DEB0:          LDA.W !SpriteMisc1540,X                   ;;DEB0|DEB0+DEB0/DEB0\DEB0;
                      BNE CODE_02DEFC                           ;;DEB3|DEB3+DEB3/DEB3\DEB3;
                      LDA.B #$30                                ;;DEB5|DEB5+DEB5/DEB5\DEB5;
                      STA.B !SpriteYSpeed,X                     ;;DEB7|DEB7+DEB7/DEB7\DEB7;
                      JSR UpdateYPosNoGrvty                     ;;DEB9|DEB9+DEB9/DEB9\DEB9;
                      LDA.W !SpriteMisc1FE2,X                   ;;DEBC|DEBC+DEBC/DEBC\DEBC;
                      BNE +                                     ;;DEBF|DEBF+DEBF/DEBF\DEBF;
                      JSL SprObjInteract                        ;;DEC1|DEC1+DEC1/DEC1\DEC1;
                      LDA.W !SpriteBlockedDirs,X                ;;DEC5|DEC5+DEC5/DEC5\DEC5; \ Branch if not on ground
                      AND.B #$04                                ;;DEC8|DEC8+DEC8/DEC8\DEC8;  |
                      BEQ +                                     ;;DECA|DECA+DECA/DECA\DECA; /
                      LDA.B #!SFX_FIRESPIT                      ;;DECC|DECC+DECC/DECC\DECC; \ Play sound effect
                      STA.W !SPCIO3                             ;;DECE|DECE+DECE/DECE\DECE; /
                      LDA.B #$22                                ;;DED1|DED1+DED1/DED1\DED1;
                      STA.W !SpriteMisc1540,X                   ;;DED3|DED3+DED3/DED3\DED3;
                      LDA.W !SpriteOffscreenX,X                 ;;DED6|DED6+DED6/DED6\DED6;
                      ORA.W !SpriteOffscreenVert,X              ;;DED9|DED9+DED9/DED9\DED9;
                      BNE +                                     ;;DEDC|DEDC+DEDC/DEDC\DEDC;
                      LDA.B !SpriteXPosLow,X                    ;;DEDE|DEDE+DEDE/DEDE\DEDE;
                      STA.B !TouchBlockXPos                     ;;DEE0|DEE0+DEE0/DEE0\DEE0;
                      LDA.B !SpriteYPosLow,X                    ;;DEE2|DEE2+DEE2/DEE2\DEE2;
                      STA.B !TouchBlockYPos                     ;;DEE4|DEE4+DEE4/DEE4\DEE4;
                      JSL CODE_028A44                           ;;DEE6|DEE6+DEE6/DEE6\DEE6;
                    + LDA.B #$00                                ;;DEEA|DEEA+DEEA/DEEA\DEEA;
                      JSL GenericSprGfxRt0                      ;;DEEC|DEEC+DEEC/DEEC\DEEC;
                      LDY.W !SpriteOAMIndex,X                   ;;DEF0|DEF0+DEF0/DEF0\DEF0; Y = Index into sprite OAM
                      LDA.W !OAMTileAttr+$104,Y                 ;;DEF3|DEF3+DEF3/DEF3\DEF3;
                      EOR.B #$C0                                ;;DEF6|DEF6+DEF6/DEF6\DEF6;
                      STA.W !OAMTileAttr+$104,Y                 ;;DEF8|DEF8+DEF8/DEF8\DEF8;
                      RTS                                       ;;DEFB|DEFB+DEFB/DEFB\DEFB; Return
                                                                ;;                        ;
CODE_02DEFC:          STA.B !_2                                 ;;DEFC|DEFC+DEFC/DEFC\DEFC;
                      CMP.B #$01                                ;;DEFE|DEFE+DEFE/DEFE\DEFE;
                      BNE +                                     ;;DF00|DF00+DF00/DF00\DF00;
                      STZ.W !SpriteStatus,X                     ;;DF02|DF02+DF02/DF02\DF02;
                    + AND.B #$0F                                ;;DF05|DF05+DF05/DF05\DF05;
                      CMP.B #$01                                ;;DF07|DF07+DF07/DF07\DF07;
                      BNE +                                     ;;DF09|DF09+DF09/DF09\DF09;
                      STA.W !ActivateClusterSprite              ;;DF0B|DF0B+DF0B/DF0B\DF0B;
                      JSR CODE_02DF2C                           ;;DF0E|DF0E+DF0E/DF0E\DF0E;
                      INC.W !SpriteMisc1570,X                   ;;DF11|DF11+DF11/DF11\DF11;
                      LDA.W !SpriteMisc1570,X                   ;;DF14|DF14+DF14/DF14\DF14;
                      CMP.B #$01                                ;;DF17|DF17+DF17/DF17\DF17;
                      BEQ +                                     ;;DF19|DF19+DF19/DF19\DF19;
                      JSR CODE_02DF2C                           ;;DF1B|DF1B+DF1B/DF1B\DF1B;
                      INC.W !SpriteMisc1570,X                   ;;DF1E|DF1E+DF1E/DF1E\DF1E;
                    + RTS                                       ;;DF21|DF21+DF21/DF21\DF21; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02DF22:          db $FC,$0C,$EC,$1C,$DC                    ;;DF22|DF22+DF22/DF22\DF22;
                                                                ;;                        ;
DATA_02DF27:          db $FF,$00,$FF,$00,$FF                    ;;DF27|DF27+DF27/DF27\DF27;
                                                                ;;                        ;
CODE_02DF2C:          LDA.B !SpriteXPosLow,X                    ;;DF2C|DF2C+DF2C/DF2C\DF2C;
                      STA.B !_0                                 ;;DF2E|DF2E+DF2E/DF2E\DF2E;
                      LDA.W !SpriteXPosHigh,X                   ;;DF30|DF30+DF30/DF30\DF30;
                      STA.B !_1                                 ;;DF33|DF33+DF33/DF33\DF33;
                      LDY.B #$09                                ;;DF35|DF35+DF35/DF35\DF35;
CODE_02DF37:          LDA.W !ClusterSpriteNumber,Y              ;;DF37|DF37+DF37/DF37\DF37;
                      BEQ CODE_02DF4C                           ;;DF3A|DF3A+DF3A/DF3A\DF3A;
                      DEY                                       ;;DF3C|DF3C+DF3C/DF3C\DF3C;
                      BPL CODE_02DF37                           ;;DF3D|DF3D+DF3D/DF3D\DF3D;
                      DEC.W !SumoClustOverwrite                 ;;DF3F|DF3F+DF3F/DF3F\DF3F;
                      BPL +                                     ;;DF42|DF42+DF42/DF42\DF42;
                      LDA.B #$09                                ;;DF44|DF44+DF44/DF44\DF44;
                      STA.W !SumoClustOverwrite                 ;;DF46|DF46+DF46/DF46\DF46;
                    + LDY.W !SumoClustOverwrite                 ;;DF49|DF49+DF49/DF49\DF49;
CODE_02DF4C:          PHX                                       ;;DF4C|DF4C+DF4C/DF4C\DF4C;
                      LDA.W !SpriteMisc1570,X                   ;;DF4D|DF4D+DF4D/DF4D\DF4D;
                      TAX                                       ;;DF50|DF50+DF50/DF50\DF50;
                      LDA.B !_0                                 ;;DF51|DF51+DF51/DF51\DF51;
                      CLC                                       ;;DF53|DF53+DF53/DF53\DF53;
                      ADC.W DATA_02DF22,X                       ;;DF54|DF54+DF54/DF54\DF54;
                      STA.W !ClusterSpriteXPosLow,Y             ;;DF57|DF57+DF57/DF57\DF57;
                      LDA.B !_1                                 ;;DF5A|DF5A+DF5A/DF5A\DF5A;
                      ADC.W DATA_02DF27,X                       ;;DF5C|DF5C+DF5C/DF5C\DF5C;
                      STA.W !ClusterSpriteXPosHigh,Y            ;;DF5F|DF5F+DF5F/DF5F\DF5F;
                      PLX                                       ;;DF62|DF62+DF62/DF62\DF62;
                      LDA.B !SpriteYPosLow,X                    ;;DF63|DF63+DF63/DF63\DF63;
                      SEC                                       ;;DF65|DF65+DF65/DF65\DF65;
                      SBC.B #$10                                ;;DF66|DF66+DF66/DF66\DF66;
                      STA.W !ClusterSpriteYPosLow,Y             ;;DF68|DF68+DF68/DF68\DF68;
                      LDA.W !SpriteYPosHigh,X                   ;;DF6B|DF6B+DF6B/DF6B\DF6B;
                      SEC                                       ;;DF6E|DF6E+DF6E/DF6E\DF6E;
                      SBC.B #$00                                ;;DF6F|DF6F+DF6F/DF6F\DF6F;
                      STA.W !ClusterSpriteYPosHigh,Y            ;;DF71|DF71+DF71/DF71\DF71;
                      LDA.B #$7F                                ;;DF74|DF74+DF74/DF74\DF74;
                      STA.W !ClusterSpriteMisc0F4A,Y            ;;DF76|DF76+DF76/DF76\DF76;
                      LDA.W !ClusterSpriteXPosLow,Y             ;;DF79|DF79+DF79/DF79\DF79;
                      CMP.B !Layer1XPos                         ;;DF7C|DF7C+DF7C/DF7C\DF7C;
                      LDA.W !ClusterSpriteXPosHigh,Y            ;;DF7E|DF7E+DF7E/DF7E\DF7E;
                      SBC.B !Layer1XPos+1                       ;;DF81|DF81+DF81/DF81\DF81;
                      BNE +                                     ;;DF83|DF83+DF83/DF83\DF83;
                      LDA.B #$06                                ;;DF85|DF85+DF85/DF85\DF85;
                      STA.W !ClusterSpriteNumber,Y              ;;DF87|DF87+DF87/DF87\DF87;
                    + RTS                                       ;;DF8A|DF8A+DF8A/DF8A\DF8A; Return
                                                                ;;                        ;
VolcanoLotusMain:     PHB                                       ;;DF8B|DF8B+DF8B/DF8B\DF8B;
                      PHK                                       ;;DF8C|DF8C+DF8C/DF8C\DF8C;
                      PLB                                       ;;DF8D|DF8D+DF8D/DF8D\DF8D;
                      JSR CODE_02DF93                           ;;DF8E|DF8E+DF8E/DF8E\DF8E;
                      PLB                                       ;;DF91|DF91+DF91/DF91\DF91;
                      RTL                                       ;;DF92|DF92+DF92/DF92\DF92; Return
                                                                ;;                        ;
CODE_02DF93:          JSR VolcanoLotusGfx                       ;;DF93|DF93+DF93/DF93\DF93;
                      LDA.B !SpriteLock                         ;;DF96|DF96+DF96/DF96\DF96;
                      BNE Return02DFC8                          ;;DF98|DF98+DF98/DF98\DF98;
                      STZ.W !SpriteMisc151C,X                   ;;DF9A|DF9A+DF9A/DF9A\DF9A;
                      JSL SprSpr_MarioSprRts                    ;;DF9D|DF9D+DF9D/DF9D\DF9D;
                      JSR SubOffscreen0Bnk2                     ;;DFA1|DFA1+DFA1/DFA1\DFA1;
                      JSR UpdateYPosNoGrvty                     ;;DFA4|DFA4+DFA4/DFA4\DFA4;
                      LDA.B !SpriteYSpeed,X                     ;;DFA7|DFA7+DFA7/DFA7\DFA7;
                      CMP.B #$40                                ;;DFA9|DFA9+DFA9/DFA9\DFA9;
                      BPL +                                     ;;DFAB|DFAB+DFAB/DFAB\DFAB;
                      INC.B !SpriteYSpeed,X                     ;;DFAD|DFAD+DFAD/DFAD\DFAD;
                    + JSL SprObjInteract                        ;;DFAF|DFAF+DFAF/DFAF\DFAF;
                      LDA.W !SpriteBlockedDirs,X                ;;DFB3|DFB3+DFB3/DFB3\DFB3; \ Branch if not on ground
                      AND.B #$04                                ;;DFB6|DFB6+DFB6/DFB6\DFB6;  |
                      BEQ +                                     ;;DFB8|DFB8+DFB8/DFB8\DFB8; /
                      STZ.B !SpriteYSpeed,X                     ;;DFBA|DFBA+DFBA/DFBA\DFBA; Sprite Y Speed = 0
                    + LDA.B !SpriteTableC2,X                    ;;DFBC|DFBC+DFBC/DFBC\DFBC;
                      JSL ExecutePtr                            ;;DFBE|DFBE+DFBE/DFBE\DFBE;
                                                                ;;                        ;
                      dw CODE_02DFC9                            ;;DFC2|DFC2+DFC2/DFC2\DFC2;
                      dw CODE_02DFDF                            ;;DFC4|DFC4+DFC4/DFC4\DFC4;
                      dw CODE_02DFEF                            ;;DFC6|DFC6+DFC6/DFC6\DFC6;
                                                                ;;                        ;
Return02DFC8:         RTS                                       ;;DFC8|DFC8+DFC8/DFC8\DFC8; Return
                                                                ;;                        ;
CODE_02DFC9:          LDA.W !SpriteMisc1540,X                   ;;DFC9|DFC9+DFC9/DFC9\DFC9;
                      BNE +                                     ;;DFCC|DFCC+DFCC/DFCC\DFCC;
                      LDA.B #$40                                ;;DFCE|DFCE+DFCE/DFCE\DFCE;
CODE_02DFD0:          STA.W !SpriteMisc1540,X                   ;;DFD0|DFD0+DFD0/DFD0\DFD0;
                      INC.B !SpriteTableC2,X                    ;;DFD3|DFD3+DFD3/DFD3\DFD3;
                      RTS                                       ;;DFD5|DFD5+DFD5/DFD5\DFD5; Return
                                                                ;;                        ;
                    + LSR A                                     ;;DFD6|DFD6+DFD6/DFD6\DFD6;
                      LSR A                                     ;;DFD7|DFD7+DFD7/DFD7\DFD7;
                      LSR A                                     ;;DFD8|DFD8+DFD8/DFD8\DFD8;
                      AND.B #$01                                ;;DFD9|DFD9+DFD9/DFD9\DFD9;
                      STA.W !SpriteMisc1602,X                   ;;DFDB|DFDB+DFDB/DFDB\DFDB;
                      RTS                                       ;;DFDE|DFDE+DFDE/DFDE\DFDE; Return
                                                                ;;                        ;
CODE_02DFDF:          LDA.W !SpriteMisc1540,X                   ;;DFDF|DFDF+DFDF/DFDF\DFDF;
                      BNE CODE_02DFE8                           ;;DFE2|DFE2+DFE2/DFE2\DFE2;
                      LDA.B #$40                                ;;DFE4|DFE4+DFE4/DFE4\DFE4;
                      BRA CODE_02DFD0                           ;;DFE6|DFE6+DFE6/DFE6\DFE6;
                                                                ;;                        ;
CODE_02DFE8:          LSR A                                     ;;DFE8|DFE8+DFE8/DFE8\DFE8;
                      AND.B #$01                                ;;DFE9|DFE9+DFE9/DFE9\DFE9;
                      STA.W !SpriteMisc151C,X                   ;;DFEB|DFEB+DFEB/DFEB\DFEB;
                      RTS                                       ;;DFEE|DFEE+DFEE/DFEE\DFEE; Return
                                                                ;;                        ;
CODE_02DFEF:          LDA.W !SpriteMisc1540,X                   ;;DFEF|DFEF+DFEF/DFEF\DFEF;
                      BNE +                                     ;;DFF2|DFF2+DFF2/DFF2\DFF2;
                      LDA.B #$80                                ;;DFF4|DFF4+DFF4/DFF4\DFF4;
                      JSR CODE_02DFD0                           ;;DFF6|DFF6+DFF6/DFF6\DFF6;
                      STZ.B !SpriteTableC2,X                    ;;DFF9|DFF9+DFF9/DFF9\DFF9;
                    + CMP.B #$38                                ;;DFFB|DFFB+DFFB/DFFB\DFFB;
                      BNE +                                     ;;DFFD|DFFD+DFFD/DFFD\DFFD;
                      JSR CODE_02E079                           ;;DFFF|DFFF+DFFF/DFFF\DFFF;
                    + LDA.B #$02                                ;;E002|E002+E002/E002\E002;
                      STA.W !SpriteMisc1602,X                   ;;E004|E004+E004/E004\E004;
                      RTS                                       ;;E007|E007+E007/E007\E007; Return
                                                                ;;                        ;
                                                                ;;                        ;
VolcanoLotusTiles:    db $8E,$9E,$E2                            ;;E008|E008+E008/E008\E008;
                                                                ;;                        ;
VolcanoLotusGfx:      JSR MushroomScaleGfx                      ;;E00B|E00B+E00B/E00B\E00B;
                      LDY.W !SpriteOAMIndex,X                   ;;E00E|E00E+E00E/E00E\E00E; Y = Index into sprite OAM
                      LDA.B #$CE                                ;;E011|E011+E011/E011\E011;
                      STA.W !OAMTileNo+$100,Y                   ;;E013|E013+E013/E013\E013;
                      STA.W !OAMTileNo+$104,Y                   ;;E016|E016+E016/E016\E016;
                      LDA.W !OAMTileAttr+$100,Y                 ;;E019|E019+E019/E019\E019;
                      AND.B #$30                                ;;E01C|E01C+E01C/E01C\E01C;
                      ORA.B #$0B                                ;;E01E|E01E+E01E/E01E\E01E;
                      STA.W !OAMTileAttr+$100,Y                 ;;E020|E020+E020/E020\E020;
                      ORA.B #$40                                ;;E023|E023+E023/E023\E023;
                      STA.W !OAMTileAttr+$104,Y                 ;;E025|E025+E025/E025\E025;
                      LDA.W !OAMTileXPos+$100,Y                 ;;E028|E028+E028/E028\E028;
                      CLC                                       ;;E02B|E02B+E02B/E02B\E02B;
                      ADC.B #$08                                ;;E02C|E02C+E02C/E02C\E02C;
                      STA.W !OAMTileXPos+$108,Y                 ;;E02E|E02E+E02E/E02E\E02E;
                      CLC                                       ;;E031|E031+E031/E031\E031;
                      ADC.B #$08                                ;;E032|E032+E032/E032\E032;
                      STA.W !OAMTileXPos+$10C,Y                 ;;E034|E034+E034/E034\E034;
                      LDA.W !OAMTileYPos+$100,Y                 ;;E037|E037+E037/E037\E037;
                      STA.W !OAMTileYPos+$108,Y                 ;;E03A|E03A+E03A/E03A\E03A;
                      STA.W !OAMTileYPos+$10C,Y                 ;;E03D|E03D+E03D/E03D\E03D;
                      PHX                                       ;;E040|E040+E040/E040\E040;
                      LDA.W !SpriteMisc1602,X                   ;;E041|E041+E041/E041\E041;
                      TAX                                       ;;E044|E044+E044/E044\E044;
                      LDA.W VolcanoLotusTiles,X                 ;;E045|E045+E045/E045\E045;
                      STA.W !OAMTileNo+$108,Y                   ;;E048|E048+E048/E048\E048;
                      INC A                                     ;;E04B|E04B+E04B/E04B\E04B;
                      STA.W !OAMTileNo+$10C,Y                   ;;E04C|E04C+E04C/E04C\E04C;
                      PLX                                       ;;E04F|E04F+E04F/E04F\E04F;
                      LDA.W !SpriteMisc151C,X                   ;;E050|E050+E050/E050\E050;
                      CMP.B #$01                                ;;E053|E053+E053/E053\E053;
                      LDA.B #$39                                ;;E055|E055+E055/E055\E055;
                      BCC +                                     ;;E057|E057+E057/E057\E057;
                      LDA.B #$35                                ;;E059|E059+E059/E059\E059;
                    + STA.W !OAMTileAttr+$108,Y                 ;;E05B|E05B+E05B/E05B\E05B;
                      STA.W !OAMTileAttr+$10C,Y                 ;;E05E|E05E+E05E/E05E\E05E;
                      LDA.W !SpriteOAMIndex,X                   ;;E061|E061+E061/E061\E061;
                      CLC                                       ;;E064|E064+E064/E064\E064;
                      ADC.B #$08                                ;;E065|E065+E065/E065\E065;
                      STA.W !SpriteOAMIndex,X                   ;;E067|E067+E067/E067\E067;
                      LDY.B #$00                                ;;E06A|E06A+E06A/E06A\E06A;
                      LDA.B #$01                                ;;E06C|E06C+E06C/E06C\E06C;
                      JMP CallFinOAMWriteBank2                  ;;E06E|E06E+E06E/E06E\E06E;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E071:          db $10,$F0,$06,$FA                        ;;E071|E071+E071/E071\E071;
                                                                ;;                        ;
DATA_02E075:          db $EC,$EC,$E8,$E8                        ;;E075|E075+E075/E075\E075;
                                                                ;;                        ;
CODE_02E079:          LDA.W !SpriteOffscreenX,X                 ;;E079|E079+E079/E079\E079;
                      ORA.W !SpriteOffscreenVert,X              ;;E07C|E07C+E07C/E07C\E07C;
                      BNE Return02E0C4                          ;;E07F|E07F+E07F/E07F\E07F;
                      LDA.B #$03                                ;;E081|E081+E081/E081\E081;
                      STA.B !_0                                 ;;E083|E083+E083/E083\E083;
CODE_02E085:          LDY.B #$07                                ;;E085|E085+E085/E085\E085; \ Find a free extended sprite slot
CODE_02E087:          LDA.W !ExtSpriteNumber,Y                  ;;E087|E087+E087/E087\E087;  |
                      BEQ CODE_02E090                           ;;E08A|E08A+E08A/E08A\E08A;  |
                      DEY                                       ;;E08C|E08C+E08C/E08C\E08C;  |
                      BPL CODE_02E087                           ;;E08D|E08D+E08D/E08D\E08D;  |
                      RTS                                       ;;E08F|E08F+E08F/E08F\E08F; / Return if no free slots
                                                                ;;                        ;
CODE_02E090:          LDA.B #$0C                                ;;E090|E090+E090/E090\E090; \ Extended sprite = Volcano Lotus fire
                      STA.W !ExtSpriteNumber,Y                  ;;E092|E092+E092/E092\E092; /
                      LDA.B !SpriteXPosLow,X                    ;;E095|E095+E095/E095\E095;
                      CLC                                       ;;E097|E097+E097/E097\E097;
                      ADC.B #$04                                ;;E098|E098+E098/E098\E098;
                      STA.W !ExtSpriteXPosLow,Y                 ;;E09A|E09A+E09A/E09A\E09A;
                      LDA.W !SpriteXPosHigh,X                   ;;E09D|E09D+E09D/E09D\E09D;
                      ADC.B #$00                                ;;E0A0|E0A0+E0A0/E0A0\E0A0;
                      STA.W !ExtSpriteXPosHigh,Y                ;;E0A2|E0A2+E0A2/E0A2\E0A2;
                      LDA.B !SpriteYPosLow,X                    ;;E0A5|E0A5+E0A5/E0A5\E0A5;
                      STA.W !ExtSpriteYPosLow,Y                 ;;E0A7|E0A7+E0A7/E0A7\E0A7;
                      LDA.W !SpriteYPosHigh,X                   ;;E0AA|E0AA+E0AA/E0AA\E0AA;
                      STA.W !ExtSpriteYPosHigh,Y                ;;E0AD|E0AD+E0AD/E0AD\E0AD;
                      PHX                                       ;;E0B0|E0B0+E0B0/E0B0\E0B0;
                      LDX.B !_0                                 ;;E0B1|E0B1+E0B1/E0B1\E0B1;
                      LDA.W DATA_02E071,X                       ;;E0B3|E0B3+E0B3/E0B3\E0B3;
                      STA.W !ExtSpriteXSpeed,Y                  ;;E0B6|E0B6+E0B6/E0B6\E0B6;
                      LDA.W DATA_02E075,X                       ;;E0B9|E0B9+E0B9/E0B9\E0B9;
                      STA.W !ExtSpriteYSpeed,Y                  ;;E0BC|E0BC+E0BC/E0BC\E0BC;
                      PLX                                       ;;E0BF|E0BF+E0BF/E0BF\E0BF;
                      DEC.B !_0                                 ;;E0C0|E0C0+E0C0/E0C0\E0C0;
                      BPL CODE_02E085                           ;;E0C2|E0C2+E0C2/E0C2\E0C2;
Return02E0C4:         RTS                                       ;;E0C4|E0C4+E0C4/E0C4\E0C4; Return
                                                                ;;                        ;
JumpingPiranhaMain:   PHB                                       ;;E0C5|E0C5+E0C5/E0C5\E0C5;
                      PHK                                       ;;E0C6|E0C6+E0C6/E0C6\E0C6;
                      PLB                                       ;;E0C7|E0C7+E0C7/E0C7\E0C7;
                      JSR CODE_02E0CD                           ;;E0C8|E0C8+E0C8/E0C8\E0C8;
                      PLB                                       ;;E0CB|E0CB+E0CB/E0CB\E0CB;
                      RTL                                       ;;E0CC|E0CC+E0CC/E0CC\E0CC; Return
                                                                ;;                        ;
CODE_02E0CD:          JSL LoadSpriteTables                      ;;E0CD|E0CD+E0CD/E0CD\E0CD;
                      LDA.B !SpriteProperties                   ;;E0D1|E0D1+E0D1/E0D1\E0D1;
                      PHA                                       ;;E0D3|E0D3+E0D3/E0D3\E0D3;
                      LDA.B #$10                                ;;E0D4|E0D4+E0D4/E0D4\E0D4;
                      STA.B !SpriteProperties                   ;;E0D6|E0D6+E0D6/E0D6\E0D6;
                      LDA.W !SpriteMisc1570,X                   ;;E0D8|E0D8+E0D8/E0D8\E0D8;
                      AND.B #$08                                ;;E0DB|E0DB+E0DB/E0DB\E0DB;
                      LSR A                                     ;;E0DD|E0DD+E0DD/E0DD\E0DD;
                      LSR A                                     ;;E0DE|E0DE+E0DE/E0DE\E0DE;
                      EOR.B #$02                                ;;E0DF|E0DF+E0DF/E0DF\E0DF;
                      STA.W !SpriteMisc1602,X                   ;;E0E1|E0E1+E0E1/E0E1\E0E1;
                      JSL GenericSprGfxRt2                      ;;E0E4|E0E4+E0E4/E0E4\E0E4;
                      LDA.W !SpriteOAMIndex,X                   ;;E0E8|E0E8+E0E8/E0E8\E0E8;
                      CLC                                       ;;E0EB|E0EB+E0EB/E0EB\E0EB;
                      ADC.B #$04                                ;;E0EC|E0EC+E0EC/E0EC\E0EC;
                      STA.W !SpriteOAMIndex,X                   ;;E0EE|E0EE+E0EE/E0EE\E0EE;
                      LDA.W !SpriteMisc151C,X                   ;;E0F1|E0F1+E0F1/E0F1\E0F1;
                      AND.B #$04                                ;;E0F4|E0F4+E0F4/E0F4\E0F4;
                      LSR A                                     ;;E0F6|E0F6+E0F6/E0F6\E0F6;
                      LSR A                                     ;;E0F7|E0F7+E0F7/E0F7\E0F7;
                      INC A                                     ;;E0F8|E0F8+E0F8/E0F8\E0F8;
                      STA.W !SpriteMisc1602,X                   ;;E0F9|E0F9+E0F9/E0F9\E0F9;
                      LDA.B !SpriteYPosLow,X                    ;;E0FC|E0FC+E0FC/E0FC\E0FC;
                      PHA                                       ;;E0FE|E0FE+E0FE/E0FE\E0FE;
                      CLC                                       ;;E0FF|E0FF+E0FF/E0FF\E0FF;
                      ADC.B #$08                                ;;E100|E100+E100/E100\E100;
                      STA.B !SpriteYPosLow,X                    ;;E102|E102+E102/E102\E102;
                      LDA.W !SpriteYPosHigh,X                   ;;E104|E104+E104/E104\E104;
                      PHA                                       ;;E107|E107+E107/E107\E107;
                      ADC.B #$00                                ;;E108|E108+E108/E108\E108;
                      STA.W !SpriteYPosHigh,X                   ;;E10A|E10A+E10A/E10A\E10A;
                      LDA.B #$0A                                ;;E10D|E10D+E10D/E10D\E10D;
                      STA.W !SpriteOBJAttribute,X               ;;E10F|E10F+E10F/E10F\E10F;
                      LDA.B #$01                                ;;E112|E112+E112/E112\E112;
                      JSL GenericSprGfxRt0                      ;;E114|E114+E114/E114\E114;
                      PLA                                       ;;E118|E118+E118/E118\E118;
                      STA.W !SpriteYPosHigh,X                   ;;E119|E119+E119/E119\E119;
                      PLA                                       ;;E11C|E11C+E11C/E11C\E11C;
                      STA.B !SpriteYPosLow,X                    ;;E11D|E11D+E11D/E11D\E11D;
                      PLA                                       ;;E11F|E11F+E11F/E11F\E11F;
                      STA.B !SpriteProperties                   ;;E120|E120+E120/E120\E120;
                      LDA.B !SpriteLock                         ;;E122|E122+E122/E122\E122;
                      BNE +                                     ;;E124|E124+E124/E124\E124;
                      JSR SubOffscreen0Bnk2                     ;;E126|E126+E126/E126\E126;
                      JSL SprSpr_MarioSprRts                    ;;E129|E129+E129/E129\E129;
                      JSR UpdateYPosNoGrvty                     ;;E12D|E12D+E12D/E12D\E12D;
                      LDA.B !SpriteTableC2,X                    ;;E130|E130+E130/E130\E130;
                      JSL ExecutePtr                            ;;E132|E132+E132/E132\E132;
                                                                ;;                        ;
                      dw CODE_02E13C                            ;;E136|E136+E136/E136\E136;
                      dw CODE_02E159                            ;;E138|E138+E138/E138\E138;
                      dw CODE_02E177                            ;;E13A|E13A+E13A/E13A\E13A;
                                                                ;;                        ;
CODE_02E13C:          STZ.B !SpriteYSpeed,X                     ;;E13C|E13C+E13C/E13C\E13C; Sprite Y Speed = 0
                      LDA.W !SpriteMisc1540,X                   ;;E13E|E13E+E13E/E13E\E13E;
                      BNE +                                     ;;E141|E141+E141/E141\E141;
                      JSR SubHorizPosBnk2                       ;;E143|E143+E143/E143\E143;
                      LDA.B !_F                                 ;;E146|E146+E146/E146\E146;
                      CLC                                       ;;E148|E148+E148/E148\E148;
                      ADC.B #$1B                                ;;E149|E149+E149/E149\E149;
                      CMP.B #$37                                ;;E14B|E14B+E14B/E14B\E14B;
                      BCC +                                     ;;E14D|E14D+E14D/E14D\E14D;
                      LDA.B #$C0                                ;;E14F|E14F+E14F/E14F\E14F;
                      STA.B !SpriteYSpeed,X                     ;;E151|E151+E151/E151\E151;
                      INC.B !SpriteTableC2,X                    ;;E153|E153+E153/E153\E153;
                      STZ.W !SpriteMisc1602,X                   ;;E155|E155+E155/E155\E155;
                    + RTS                                       ;;E158|E158+E158/E158\E158; Return
                                                                ;;                        ;
CODE_02E159:          LDA.B !SpriteYSpeed,X                     ;;E159|E159+E159/E159\E159;
                      BMI CODE_02E161                           ;;E15B|E15B+E15B/E15B\E15B;
                      CMP.B #$40                                ;;E15D|E15D+E15D/E15D\E15D;
                      BCS +                                     ;;E15F|E15F+E15F/E15F\E15F;
CODE_02E161:          CLC                                       ;;E161|E161+E161/E161\E161;
                      ADC.B #$02                                ;;E162|E162+E162/E162\E162;
                      STA.B !SpriteYSpeed,X                     ;;E164|E164+E164/E164\E164;
                    + INC.W !SpriteMisc1570,X                   ;;E166|E166+E166/E166\E166;
                      LDA.B !SpriteYSpeed,X                     ;;E169|E169+E169/E169\E169;
                      CMP.B #$F0                                ;;E16B|E16B+E16B/E16B\E16B;
                      BMI Return02E176                          ;;E16D|E16D+E16D/E16D\E16D;
                      LDA.B #$50                                ;;E16F|E16F+E16F/E16F\E16F;
                      STA.W !SpriteMisc1540,X                   ;;E171|E171+E171/E171\E171;
                      INC.B !SpriteTableC2,X                    ;;E174|E174+E174/E174\E174;
Return02E176:         RTS                                       ;;E176|E176+E176/E176\E176; Return
                                                                ;;                        ;
CODE_02E177:          INC.W !SpriteMisc151C,X                   ;;E177|E177+E177/E177\E177;
                      LDA.W !SpriteMisc1540,X                   ;;E17A|E17A+E17A/E17A\E17A;
                      BNE CODE_02E1A4                           ;;E17D|E17D+E17D/E17D\E17D;
CODE_02E17F:          INC.W !SpriteMisc1570,X                   ;;E17F|E17F+E17F/E17F\E17F;
                      LDA.B !EffFrame                           ;;E182|E182+E182/E182\E182;
                      AND.B #$03                                ;;E184|E184+E184/E184\E184;
                      BNE +                                     ;;E186|E186+E186/E186\E186;
                      LDA.B !SpriteYSpeed,X                     ;;E188|E188+E188/E188\E188;
                      CMP.B #$08                                ;;E18A|E18A+E18A/E18A\E18A;
                      BPL +                                     ;;E18C|E18C+E18C/E18C\E18C;
                      INC A                                     ;;E18E|E18E+E18E/E18E\E18E;
                      STA.B !SpriteYSpeed,X                     ;;E18F|E18F+E18F/E18F\E18F;
                    + JSL SprObjInteract                        ;;E191|E191+E191/E191\E191;
                      LDA.W !SpriteBlockedDirs,X                ;;E195|E195+E195/E195\E195; \ Branch if not on ground
                      AND.B #$04                                ;;E198|E198+E198/E198\E198;  |
                      BEQ Return02E176                          ;;E19A|E19A+E19A/E19A\E19A; /
                      STZ.B !SpriteTableC2,X                    ;;E19C|E19C+E19C/E19C\E19C;
                      LDA.B #$40                                ;;E19E|E19E+E19E/E19E\E19E;
                      STA.W !SpriteMisc1540,X                   ;;E1A0|E1A0+E1A0/E1A0\E1A0;
                      RTS                                       ;;E1A3|E1A3+E1A3/E1A3\E1A3; Return
                                                                ;;                        ;
CODE_02E1A4:          LDY.B !SpriteNumber,X                     ;;E1A4|E1A4+E1A4/E1A4\E1A4;
                      CPY.B #$50                                ;;E1A6|E1A6+E1A6/E1A6\E1A6;
                      BNE CODE_02E1F7                           ;;E1A8|E1A8+E1A8/E1A8\E1A8;
                      STZ.W !SpriteMisc1570,X                   ;;E1AA|E1AA+E1AA/E1AA\E1AA;
                      CMP.B #$40                                ;;E1AD|E1AD+E1AD/E1AD\E1AD;
                      BNE CODE_02E1F7                           ;;E1AF|E1AF+E1AF/E1AF\E1AF;
                      LDA.W !SpriteOffscreenX,X                 ;;E1B1|E1B1+E1B1/E1B1\E1B1;
                      ORA.W !SpriteOffscreenVert,X              ;;E1B4|E1B4+E1B4/E1B4\E1B4;
                      BNE CODE_02E1F7                           ;;E1B7|E1B7+E1B7/E1B7\E1B7;
                      LDA.B #$10                                ;;E1B9|E1B9+E1B9/E1B9\E1B9;
                      JSR CODE_02E1C0                           ;;E1BB|E1BB+E1BB/E1BB\E1BB;
                      LDA.B #$F0                                ;;E1BE|E1BE+E1BE/E1BE\E1BE;
CODE_02E1C0:          STA.B !_0                                 ;;E1C0|E1C0+E1C0/E1C0\E1C0;
                      LDY.B #$07                                ;;E1C2|E1C2+E1C2/E1C2\E1C2; \ Find a free extended sprite slot
CODE_02E1C4:          LDA.W !ExtSpriteNumber,Y                  ;;E1C4|E1C4+E1C4/E1C4\E1C4;  |
                      BEQ CODE_02E1CD                           ;;E1C7|E1C7+E1C7/E1C7\E1C7;  |
                      DEY                                       ;;E1C9|E1C9+E1C9/E1C9\E1C9;  |
                      BPL CODE_02E1C4                           ;;E1CA|E1CA+E1CA/E1CA\E1CA;  |
                      RTS                                       ;;E1CC|E1CC+E1CC/E1CC\E1CC; / Return if no free slots
                                                                ;;                        ;
CODE_02E1CD:          LDA.B #$0B                                ;;E1CD|E1CD+E1CD/E1CD\E1CD; \ Extended sprite = Piranha fireball
                      STA.W !ExtSpriteNumber,Y                  ;;E1CF|E1CF+E1CF/E1CF\E1CF; /
                      LDA.B !SpriteXPosLow,X                    ;;E1D2|E1D2+E1D2/E1D2\E1D2;
                      CLC                                       ;;E1D4|E1D4+E1D4/E1D4\E1D4;
                      ADC.B #$04                                ;;E1D5|E1D5+E1D5/E1D5\E1D5;
                      STA.W !ExtSpriteXPosLow,Y                 ;;E1D7|E1D7+E1D7/E1D7\E1D7;
                      LDA.W !SpriteXPosHigh,X                   ;;E1DA|E1DA+E1DA/E1DA\E1DA;
                      ADC.B #$00                                ;;E1DD|E1DD+E1DD/E1DD\E1DD;
                      STA.W !ExtSpriteXPosHigh,Y                ;;E1DF|E1DF+E1DF/E1DF\E1DF;
                      LDA.B !SpriteYPosLow,X                    ;;E1E2|E1E2+E1E2/E1E2\E1E2;
                      STA.W !ExtSpriteYPosLow,Y                 ;;E1E4|E1E4+E1E4/E1E4\E1E4;
                      LDA.W !SpriteYPosHigh,X                   ;;E1E7|E1E7+E1E7/E1E7\E1E7;
                      STA.W !ExtSpriteYPosHigh,Y                ;;E1EA|E1EA+E1EA/E1EA\E1EA;
                      LDA.B #$D0                                ;;E1ED|E1ED+E1ED/E1ED\E1ED;
                      STA.W !ExtSpriteYSpeed,Y                  ;;E1EF|E1EF+E1EF/E1EF\E1EF;
                      LDA.B !_0                                 ;;E1F2|E1F2+E1F2/E1F2\E1F2;
                      STA.W !ExtSpriteXSpeed,Y                  ;;E1F4|E1F4+E1F4/E1F4\E1F4;
CODE_02E1F7:          BRA CODE_02E17F                           ;;E1F7|E1F7+E1F7/E1F7\E1F7;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E1F9:          db $00,$00,$F0,$10                        ;;E1F9|E1F9+E1F9/E1F9\E1F9;
                                                                ;;                        ;
DATA_02E1FD:          db $F0,$10,$00,$00                        ;;E1FD|E1FD+E1FD/E1FD\E1FD;
                                                                ;;                        ;
DATA_02E201:          db $00,$03,$02,$00,$01,$03,$02,$00        ;;E201|E201+E201/E201\E201;
                      db $00,$03,$02,$00,$00,$00,$00,$00        ;;E209|E209+E209/E209\E209;
DATA_02E211:          db $01,$00,$03,$02                        ;;E211|E211+E211/E211\E211;
                                                                ;;                        ;
DirectionCoinsMain:   PHB                                       ;;E215|E215+E215/E215\E215;
                      PHK                                       ;;E216|E216+E216/E216\E216;
                      PLB                                       ;;E217|E217+E217/E217\E217;
                      JSR DirectionCoinsMainRt                  ;;E218|E218+E218/E218\E218;
                      PLB                                       ;;E21B|E21B+E21B/E21B\E21B;
                      RTL                                       ;;E21C|E21C+E21C/E21C\E21C; Return
                                                                ;;                        ;
DirectionCoinsMainRt: LDA.B !SpriteProperties                   ;;E21D|E21D+E21D/E21D\E21D;
                      PHA                                       ;;E21F|E21F+E21F/E21F\E21F;
                      LDA.W !SpriteMisc1540,X                   ;;E220|E220+E220/E220\E220;
                      CMP.B #$30                                ;;E223|E223+E223/E223\E223;
                      BCC +                                     ;;E225|E225+E225/E225\E225;
                      LDA.B #$10                                ;;E227|E227+E227/E227\E227;
                      STA.B !SpriteProperties                   ;;E229|E229+E229/E229\E229;
                    + LDA.B !Layer1YPos                         ;;E22B|E22B+E22B/E22B\E22B;
                      PHA                                       ;;E22D|E22D+E22D/E22D\E22D;
                      CLC                                       ;;E22E|E22E+E22E/E22E\E22E;
                      ADC.B #$01                                ;;E22F|E22F+E22F/E22F\E22F;
                      STA.B !Layer1YPos                         ;;E231|E231+E231/E231\E231;
                      LDA.B !Layer1YPos+1                       ;;E233|E233+E233/E233\E233;
                      PHA                                       ;;E235|E235+E235/E235\E235;
                      ADC.B #$00                                ;;E236|E236+E236/E236\E236;
                      STA.B !Layer1YPos+1                       ;;E238|E238+E238/E238\E238;
                      LDA.W !BluePSwitchTimer                   ;;E23A|E23A+E23A/E23A\E23A;
                      BNE CODE_02E245                           ;;E23D|E23D+E23D/E23D\E23D;
                      JSL CoinSprGfx                            ;;E23F|E23F+E23F/E23F\E23F;
                      BRA +                                     ;;E243|E243+E243/E243\E243;
                                                                ;;                        ;
CODE_02E245:          JSL GenericSprGfxRt2                      ;;E245|E245+E245/E245\E245;
                      LDY.W !SpriteOAMIndex,X                   ;;E249|E249+E249/E249\E249; Y = Index into sprite OAM
                      LDA.B #$2E                                ;;E24C|E24C+E24C/E24C\E24C;
                      STA.W !OAMTileNo+$100,Y                   ;;E24E|E24E+E24E/E24E\E24E;
                      LDA.W !OAMTileAttr+$100,Y                 ;;E251|E251+E251/E251\E251;
                      AND.B #$3F                                ;;E254|E254+E254/E254\E254;
                      STA.W !OAMTileAttr+$100,Y                 ;;E256|E256+E256/E256\E256;
                    + PLA                                       ;;E259|E259+E259/E259\E259;
                      STA.B !Layer1YPos+1                       ;;E25A|E25A+E25A/E25A\E25A;
                      PLA                                       ;;E25C|E25C+E25C/E25C\E25C;
                      STA.B !Layer1YPos                         ;;E25D|E25D+E25D/E25D\E25D;
                      PLA                                       ;;E25F|E25F+E25F/E25F\E25F;
                      STA.B !SpriteProperties                   ;;E260|E260+E260/E260\E260;
                      LDA.B !SpriteLock                         ;;E262|E262+E262/E262\E262;
                      BNE CODE_02E2DE                           ;;E264|E264+E264/E264\E264;
                      LDA.B !TrueFrame                          ;;E266|E266+E266/E266\E266;
                      AND.B #$03                                ;;E268|E268+E268/E268\E268;
                      BNE CODE_02E288                           ;;E26A|E26A+E26A/E26A\E26A;
                      DEC.W !DirectCoinTimer                    ;;E26C|E26C+E26C/E26C\E26C;
                      BNE CODE_02E288                           ;;E26F|E26F+E26F/E26F\E26F;
CODE_02E271:          STZ.W !DirectCoinTimer                    ;;E271|E271+E271/E271\E271;
                      STZ.W !SpriteStatus,X                     ;;E274|E274+E274/E274\E274;
                      LDA.W !BluePSwitchTimer                   ;;E277|E277+E277/E277\E277;
                      ORA.W !SilverPSwitchTimer                 ;;E27A|E27A+E27A/E27A\E27A;
                      BNE +                                     ;;E27D|E27D+E27D/E27D\E27D;
                      LDA.W !MusicBackup                        ;;E27F|E27F+E27F/E27F\E27F;
                      BMI +                                     ;;E282|E282+E282/E282\E282;
                      STA.W !SPCIO2                             ;;E284|E284+E284/E284\E284; / Change music
                    + RTS                                       ;;E287|E287+E287/E287\E287; Return
                                                                ;;                        ;
CODE_02E288:          LDY.B !SpriteTableC2,X                    ;;E288|E288+E288/E288\E288;
                      LDA.W DATA_02E1F9,Y                       ;;E28A|E28A+E28A/E28A\E28A;
                      STA.B !SpriteXSpeed,X                     ;;E28D|E28D+E28D/E28D\E28D;
                      LDA.W DATA_02E1FD,Y                       ;;E28F|E28F+E28F/E28F\E28F;
                      STA.B !SpriteYSpeed,X                     ;;E292|E292+E292/E292\E292;
                      JSR UpdateYPosNoGrvty                     ;;E294|E294+E294/E294\E294;
                      JSR UpdateXPosNoGrvty                     ;;E297|E297+E297/E297\E297;
                      LDA.B !byetudlrHold                       ;;E29A|E29A+E29A/E29A\E29A;
                      AND.B #$0F                                ;;E29C|E29C+E29C/E29C\E29C;
                      BEQ +                                     ;;E29E|E29E+E29E/E29E\E29E;
                      TAY                                       ;;E2A0|E2A0+E2A0/E2A0\E2A0;
                      LDA.W DATA_02E201,Y                       ;;E2A1|E2A1+E2A1/E2A1\E2A1;
                      TAY                                       ;;E2A4|E2A4+E2A4/E2A4\E2A4;
                      LDA.W DATA_02E211,Y                       ;;E2A5|E2A5+E2A5/E2A5\E2A5;
                      CMP.B !SpriteTableC2,X                    ;;E2A8|E2A8+E2A8/E2A8\E2A8;
                      BEQ +                                     ;;E2AA|E2AA+E2AA/E2AA\E2AA;
                      TYA                                       ;;E2AC|E2AC+E2AC/E2AC\E2AC;
                      STA.W !SpriteMisc151C,X                   ;;E2AD|E2AD+E2AD/E2AD\E2AD;
                    + LDA.B !SpriteYPosLow,X                    ;;E2B0|E2B0+E2B0/E2B0\E2B0;
                      AND.B #$0F                                ;;E2B2|E2B2+E2B2/E2B2\E2B2;
                      STA.B !_0                                 ;;E2B4|E2B4+E2B4/E2B4\E2B4;
                      LDA.B !SpriteXPosLow,X                    ;;E2B6|E2B6+E2B6/E2B6\E2B6;
                      AND.B #$0F                                ;;E2B8|E2B8+E2B8/E2B8\E2B8;
                      ORA.B !_0                                 ;;E2BA|E2BA+E2BA/E2BA\E2BA;
                      BNE CODE_02E2DE                           ;;E2BC|E2BC+E2BC/E2BC\E2BC;
                      LDA.W !SpriteMisc151C,X                   ;;E2BE|E2BE+E2BE/E2BE\E2BE;
                      STA.B !SpriteTableC2,X                    ;;E2C1|E2C1+E2C1/E2C1\E2C1;
                      LDA.B !SpriteXPosLow,X                    ;;E2C3|E2C3+E2C3/E2C3\E2C3; \ $9A = Sprite X position
                      STA.B !TouchBlockXPos                     ;;E2C5|E2C5+E2C5/E2C5\E2C5;  | for block creation
                      LDA.W !SpriteXPosHigh,X                   ;;E2C7|E2C7+E2C7/E2C7\E2C7;  |
                      STA.B !TouchBlockXPos+1                   ;;E2CA|E2CA+E2CA/E2CA\E2CA; /
                      LDA.B !SpriteYPosLow,X                    ;;E2CC|E2CC+E2CC/E2CC\E2CC; \ $98 = Sprite Y position
                      STA.B !TouchBlockYPos                     ;;E2CE|E2CE+E2CE/E2CE\E2CE;  | for block creation
                      LDA.W !SpriteYPosHigh,X                   ;;E2D0|E2D0+E2D0/E2D0\E2D0;  |
                      STA.B !TouchBlockYPos+1                   ;;E2D3|E2D3+E2D3/E2D3\E2D3; /
                      LDA.B #$06                                ;;E2D5|E2D5+E2D5/E2D5\E2D5; \ Block to generate = Coin
                      STA.B !Map16TileGenerate                  ;;E2D7|E2D7+E2D7/E2D7\E2D7; /
                      JSL GenerateTile                          ;;E2D9|E2D9+E2D9/E2D9\E2D9;
                      RTS                                       ;;E2DD|E2DD+E2DD/E2DD\E2DD; Return
                                                                ;;                        ;
CODE_02E2DE:          JSL SprObjInteract                        ;;E2DE|E2DE+E2DE/E2DE\E2DE;
                      LDA.B !SpriteXSpeed,X                     ;;E2E2|E2E2+E2E2/E2E2\E2E2;
                      BNE CODE_02E2F3                           ;;E2E4|E2E4+E2E4/E2E4\E2E4;
                      LDA.W !SprMap16TouchVertHigh              ;;E2E6|E2E6+E2E6/E2E6\E2E6;
                      BNE CODE_02E2FF                           ;;E2E9|E2E9+E2E9/E2E9\E2E9;
                      LDA.W !SprMap16TouchVertLow               ;;E2EB|E2EB+E2EB/E2EB\E2EB;
                      CMP.B #$25                                ;;E2EE|E2EE+E2EE/E2EE\E2EE;
                      BNE CODE_02E2FF                           ;;E2F0|E2F0+E2F0/E2F0\E2F0;
                      RTS                                       ;;E2F2|E2F2+E2F2/E2F2\E2F2; Return
                                                                ;;                        ;
CODE_02E2F3:          LDA.W !SprMap16TouchHorizHigh             ;;E2F3|E2F3+E2F3/E2F3\E2F3;
                      BNE CODE_02E2FF                           ;;E2F6|E2F6+E2F6/E2F6\E2F6;
                      LDA.W !SprMap16TouchHorizLow              ;;E2F8|E2F8+E2F8/E2F8\E2F8;
                      CMP.B #$25                                ;;E2FB|E2FB+E2FB/E2FB\E2FB;
                      BEQ +                                     ;;E2FD|E2FD+E2FD/E2FD\E2FD;
CODE_02E2FF:          JSR CODE_02E271                           ;;E2FF|E2FF+E2FF/E2FF\E2FF;
                    + RTS                                       ;;E302|E302+E302/E302\E302; Return
                                                                ;;                        ;
GasBubbleMain:        PHB                                       ;;E303|E303+E303/E303\E303;
                      PHK                                       ;;E304|E304+E304/E304\E304;
                      PLB                                       ;;E305|E305+E305/E305\E305;
                      JSR CODE_02E311                           ;;E306|E306+E306/E306\E306;
                      PLB                                       ;;E309|E309+E309/E309\E309;
                      RTL                                       ;;E30A|E30A+E30A/E30A\E30A; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E30B:          db $10,$F0                                ;;E30B|E30B+E30B/E30B\E30B;
                                                                ;;                        ;
DATA_02E30D:          db $01,$FF                                ;;E30D|E30D+E30D/E30D\E30D;
                                                                ;;                        ;
DATA_02E30F:          db $10,$F0                                ;;E30F|E30F+E30F/E30F\E30F;
                                                                ;;                        ;
CODE_02E311:          JSR GasBubbleGfx                          ;;E311|E311+E311/E311\E311;
                      LDA.B !SpriteLock                         ;;E314|E314+E314/E314\E314;
                      BNE Return02E351                          ;;E316|E316+E316/E316\E316;
                      LDA.W !SpriteStatus,X                     ;;E318|E318+E318/E318\E318;
                      CMP.B #$08                                ;;E31B|E31B+E31B/E31B\E31B;
                      BNE Return02E351                          ;;E31D|E31D+E31D/E31D\E31D;
                      LDY.W !SpriteMisc157C,X                   ;;E31F|E31F+E31F/E31F\E31F;
                      LDA.W DATA_02E30B,Y                       ;;E322|E322+E322/E322\E322;
                      STA.B !SpriteXSpeed,X                     ;;E325|E325+E325/E325\E325;
                      JSR UpdateXPosNoGrvty                     ;;E327|E327+E327/E327\E327;
                      LDA.B !TrueFrame                          ;;E32A|E32A+E32A/E32A\E32A;
                      AND.B #$03                                ;;E32C|E32C+E32C/E32C\E32C;
                      BNE +                                     ;;E32E|E32E+E32E/E32E\E32E;
                      LDA.B !SpriteTableC2,X                    ;;E330|E330+E330/E330\E330;
                      AND.B #$01                                ;;E332|E332+E332/E332\E332;
                      TAY                                       ;;E334|E334+E334/E334\E334;
                      LDA.B !SpriteYSpeed,X                     ;;E335|E335+E335/E335\E335;
                      CLC                                       ;;E337|E337+E337/E337\E337;
                      ADC.W DATA_02E30D,Y                       ;;E338|E338+E338/E338\E338;
                      STA.B !SpriteYSpeed,X                     ;;E33B|E33B+E33B/E33B\E33B;
                      CMP.W DATA_02E30F,Y                       ;;E33D|E33D+E33D/E33D\E33D;
                      BNE +                                     ;;E340|E340+E340/E340\E340;
                      INC.B !SpriteTableC2,X                    ;;E342|E342+E342/E342\E342;
                    + JSR UpdateYPosNoGrvty                     ;;E344|E344+E344/E344\E344;
                      INC.W !SpriteMisc1570,X                   ;;E347|E347+E347/E347\E347;
                      JSR SubOffscreen0Bnk2                     ;;E34A|E34A+E34A/E34A\E34A;
                      JSL MarioSprInteract                      ;;E34D|E34D+E34D/E34D\E34D;
Return02E351:         RTS                                       ;;E351|E351+E351/E351\E351; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E352:          db $00,$10,$20,$30,$00,$10,$20,$30        ;;E352|E352+E352/E352\E352;
                      db $00,$10,$20,$30,$00,$10,$20,$30        ;;E35A|E35A+E35A/E35A\E35A;
DATA_02E362:          db $00,$00,$00,$00,$10,$10,$10,$10        ;;E362|E362+E362/E362\E362;
                      db $20,$20,$20,$20,$30,$30,$30,$30        ;;E36A|E36A+E36A/E36A\E36A;
DATA_02E372:          db $80,$82,$84,$86,$A0,$A2,$A4,$A6        ;;E372|E372+E372/E372\E372;
                      db $A0,$A2,$A4,$A6,$80,$82,$84,$86        ;;E37A|E37A+E37A/E37A\E37A;
DATA_02E382:          db $3B,$3B,$3B,$3B,$3B,$3B,$3B,$3B        ;;E382|E382+E382/E382\E382;
                      db $BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB        ;;E38A|E38A+E38A/E38A\E38A;
DATA_02E392:          db $00,$00,$02,$02,$00,$00,$02,$02        ;;E392|E392+E392/E392\E392;
                      db $01,$01,$03,$03,$01,$01,$03,$03        ;;E39A|E39A+E39A/E39A\E39A;
DATA_02E3A2:          db $00,$01,$02,$01                        ;;E3A2|E3A2+E3A2/E3A2\E3A2;
                                                                ;;                        ;
DATA_02E3A6:          db $02,$01,$00,$01                        ;;E3A6|E3A6+E3A6/E3A6\E3A6;
                                                                ;;                        ;
GasBubbleGfx:         JSR GetDrawInfo2                          ;;E3AA|E3AA+E3AA/E3AA\E3AA;
                      LDA.W !SpriteMisc1570,X                   ;;E3AD|E3AD+E3AD/E3AD\E3AD;
                      LSR A                                     ;;E3B0|E3B0+E3B0/E3B0\E3B0;
                      LSR A                                     ;;E3B1|E3B1+E3B1/E3B1\E3B1;
                      LSR A                                     ;;E3B2|E3B2+E3B2/E3B2\E3B2;
                      AND.B #$03                                ;;E3B3|E3B3+E3B3/E3B3\E3B3;
                      TAY                                       ;;E3B5|E3B5+E3B5/E3B5\E3B5;
                      LDA.W DATA_02E3A2,Y                       ;;E3B6|E3B6+E3B6/E3B6\E3B6;
                      STA.B !_2                                 ;;E3B9|E3B9+E3B9/E3B9\E3B9;
                      LDA.W DATA_02E3A6,Y                       ;;E3BB|E3BB+E3BB/E3BB\E3BB;
                      STA.B !_3                                 ;;E3BE|E3BE+E3BE/E3BE\E3BE;
                      LDY.W !SpriteOAMIndex,X                   ;;E3C0|E3C0+E3C0/E3C0\E3C0; Y = Index into sprite OAM
                      PHX                                       ;;E3C3|E3C3+E3C3/E3C3\E3C3;
                      LDX.B #$0F                                ;;E3C4|E3C4+E3C4/E3C4\E3C4;
CODE_02E3C6:          LDA.B !_0                                 ;;E3C6|E3C6+E3C6/E3C6\E3C6;
                      CLC                                       ;;E3C8|E3C8+E3C8/E3C8\E3C8;
                      ADC.W DATA_02E352,X                       ;;E3C9|E3C9+E3C9/E3C9\E3C9;
                      PHA                                       ;;E3CC|E3CC+E3CC/E3CC\E3CC;
                      LDA.W DATA_02E392,X                       ;;E3CD|E3CD+E3CD/E3CD\E3CD;
                      AND.B #$02                                ;;E3D0|E3D0+E3D0/E3D0\E3D0;
                      BNE CODE_02E3DA                           ;;E3D2|E3D2+E3D2/E3D2\E3D2;
                      PLA                                       ;;E3D4|E3D4+E3D4/E3D4\E3D4;
                      CLC                                       ;;E3D5|E3D5+E3D5/E3D5\E3D5;
                      ADC.B !_2                                 ;;E3D6|E3D6+E3D6/E3D6\E3D6;
                      BRA +                                     ;;E3D8|E3D8+E3D8/E3D8\E3D8;
                                                                ;;                        ;
CODE_02E3DA:          PLA                                       ;;E3DA|E3DA+E3DA/E3DA\E3DA;
                      SEC                                       ;;E3DB|E3DB+E3DB/E3DB\E3DB;
                      SBC.B !_2                                 ;;E3DC|E3DC+E3DC/E3DC\E3DC;
                    + STA.W !OAMTileXPos+$100,Y                 ;;E3DE|E3DE+E3DE/E3DE\E3DE;
                      LDA.B !_1                                 ;;E3E1|E3E1+E3E1/E3E1\E3E1;
                      CLC                                       ;;E3E3|E3E3+E3E3/E3E3\E3E3;
                      ADC.W DATA_02E362,X                       ;;E3E4|E3E4+E3E4/E3E4\E3E4;
                      PHA                                       ;;E3E7|E3E7+E3E7/E3E7\E3E7;
                      LDA.W DATA_02E392,X                       ;;E3E8|E3E8+E3E8/E3E8\E3E8;
                      AND.B #$01                                ;;E3EB|E3EB+E3EB/E3EB\E3EB;
                      BNE CODE_02E3F5                           ;;E3ED|E3ED+E3ED/E3ED\E3ED;
                      PLA                                       ;;E3EF|E3EF+E3EF/E3EF\E3EF;
                      CLC                                       ;;E3F0|E3F0+E3F0/E3F0\E3F0;
                      ADC.B !_3                                 ;;E3F1|E3F1+E3F1/E3F1\E3F1;
                      BRA +                                     ;;E3F3|E3F3+E3F3/E3F3\E3F3;
                                                                ;;                        ;
CODE_02E3F5:          PLA                                       ;;E3F5|E3F5+E3F5/E3F5\E3F5;
                      SEC                                       ;;E3F6|E3F6+E3F6/E3F6\E3F6;
                      SBC.B !_3                                 ;;E3F7|E3F7+E3F7/E3F7\E3F7;
                    + STA.W !OAMTileYPos+$100,Y                 ;;E3F9|E3F9+E3F9/E3F9\E3F9;
                      LDA.W DATA_02E372,X                       ;;E3FC|E3FC+E3FC/E3FC\E3FC;
                      STA.W !OAMTileNo+$100,Y                   ;;E3FF|E3FF+E3FF/E3FF\E3FF;
                      LDA.W DATA_02E382,X                       ;;E402|E402+E402/E402\E402;
                      STA.W !OAMTileAttr+$100,Y                 ;;E405|E405+E405/E405\E405;
                      INY                                       ;;E408|E408+E408/E408\E408;
                      INY                                       ;;E409|E409+E409/E409\E409;
                      INY                                       ;;E40A|E40A+E40A/E40A\E40A;
                      INY                                       ;;E40B|E40B+E40B/E40B\E40B;
                      DEX                                       ;;E40C|E40C+E40C/E40C\E40C;
                      BPL CODE_02E3C6                           ;;E40D|E40D+E40D/E40D\E40D;
                      PLX                                       ;;E40F|E40F+E40F/E40F\E40F;
                      LDY.B #$02                                ;;E410|E410+E410/E410\E410;
                      LDA.B #$0F                                ;;E412|E412+E412/E412\E412;
                      JMP CallFinOAMWriteBank2                  ;;E414|E414+E414/E414\E414;
                                                                ;;                        ;
ExplodingBlkMain:     PHB                                       ;;E417|E417+E417/E417\E417;
                      PHK                                       ;;E418|E418+E418/E418\E418;
                      PLB                                       ;;E419|E419+E419/E419\E419;
                      JSR CODE_02E41F                           ;;E41A|E41A+E41A/E41A\E41A;
                      PLB                                       ;;E41D|E41D+E41D/E41D\E41D;
                      RTL                                       ;;E41E|E41E+E41E/E41E\E41E; Return
                                                                ;;                        ;
CODE_02E41F:          JSL GenericSprGfxRt2                      ;;E41F|E41F+E41F/E41F\E41F;
                      LDA.B !SpriteLock                         ;;E423|E423+E423/E423\E423;
                      BNE Return02E462                          ;;E425|E425+E425/E425\E425;
                      BRA +                                     ;;E427|E427+E427/E427\E427;
                                                                ;;                        ;
                      JSL ADDR_02C0CF                           ;;E429|E429+E429/E429\E429; Unreachable instruction
                    + LDY.B #$00                                ;;E42D|E42D+E42D/E42D\E42D;
                      INC.W !SpriteMisc1570,X                   ;;E42F|E42F+E42F/E42F\E42F;
                      LDA.W !SpriteMisc1570,X                   ;;E432|E432+E432/E432\E432;
                      AND.B #$40                                ;;E435|E435+E435/E435\E435;
                      BEQ +                                     ;;E437|E437+E437/E437\E437;
                      LDY.B #$04                                ;;E439|E439+E439/E439\E439;
                      LDA.W !SpriteMisc1570,X                   ;;E43B|E43B+E43B/E43B\E43B;
                      AND.B #$04                                ;;E43E|E43E+E43E/E43E\E43E;
                      BEQ +                                     ;;E440|E440+E440/E440\E440;
                      LDY.B #$FC                                ;;E442|E442+E442/E442\E442;
                    + STY.B !SpriteXSpeed,X                     ;;E444|E444+E444/E444\E444;
                      JSR UpdateXPosNoGrvty                     ;;E446|E446+E446/E446\E446;
                      JSL SprSpr_MarioSprRts                    ;;E449|E449+E449/E449\E449;
                      JSR SubHorizPosBnk2                       ;;E44D|E44D+E44D/E44D\E44D;
                      LDA.B !_F                                 ;;E450|E450+E450/E450\E450;
                      CLC                                       ;;E452|E452+E452/E452\E452;
                      ADC.B #$60                                ;;E453|E453+E453/E453\E453;
                      CMP.B #$C0                                ;;E455|E455+E455/E455\E455;
                      BCS Return02E462                          ;;E457|E457+E457/E457\E457;
                      LDY.W !SpriteOffscreenX,X                 ;;E459|E459+E459/E459\E459;
                      BNE Return02E462                          ;;E45C|E45C+E45C/E45C\E45C;
                      JSL CODE_02E463                           ;;E45E|E45E+E45E/E45E\E45E;
Return02E462:         RTS                                       ;;E462|E462+E462/E462\E462; Return
                                                                ;;                        ;
CODE_02E463:          LDA.B !SpriteTableC2,X                    ;;E463|E463+E463/E463\E463;
                      STA.B !SpriteNumber,X                     ;;E465|E465+E465/E465\E465;
                      JSL InitSpriteTables                      ;;E467|E467+E467/E467\E467;
                      LDA.B #$D0                                ;;E46B|E46B+E46B/E46B\E46B;
                      STA.B !SpriteYSpeed,X                     ;;E46D|E46D+E46D/E46D\E46D;
                      JSR SubHorizPosBnk2                       ;;E46F|E46F+E46F/E46F\E46F;
                      TYA                                       ;;E472|E472+E472/E472\E472;
                      STA.W !SpriteMisc157C,X                   ;;E473|E473+E473/E473\E473;
                      LDA.B !SpriteXPosLow,X                    ;;E476|E476+E476/E476\E476;
                      STA.B !TouchBlockXPos                     ;;E478|E478+E478/E478\E478;
                      LDA.W !SpriteXPosHigh,X                   ;;E47A|E47A+E47A/E47A\E47A;
                      STA.B !TouchBlockXPos+1                   ;;E47D|E47D+E47D/E47D\E47D;
                      LDA.B !SpriteYPosLow,X                    ;;E47F|E47F+E47F/E47F\E47F;
                      STA.B !TouchBlockYPos                     ;;E481|E481+E481/E481\E481;
                      LDA.W !SpriteYPosHigh,X                   ;;E483|E483+E483/E483\E483;
                      STA.B !TouchBlockYPos+1                   ;;E486|E486+E486/E486\E486;
                      PHB                                       ;;E488|E488+E488/E488\E488;
                      LDA.B #$02                                ;;E489|E489+E489/E489\E489;
                      PHA                                       ;;E48B|E48B+E48B/E48B\E48B;
                      PLB                                       ;;E48C|E48C+E48C/E48C\E48C;
                      LDA.B #$00                                ;;E48D|E48D+E48D/E48D\E48D;
                      JSL ShatterBlock                          ;;E48F|E48F+E48F/E48F\E48F;
                      PLB                                       ;;E493|E493+E493/E493\E493;
                      RTL                                       ;;E494|E494+E494/E494\E494; Return
                                                                ;;                        ;
ScalePlatformMain:    LDA.W !SpriteOAMIndex,X                   ;;E495|E495+E495/E495\E495;
                      PHA                                       ;;E498|E498+E498/E498\E498;
                      PHB                                       ;;E499|E499+E499/E499\E499;
                      PHK                                       ;;E49A|E49A+E49A/E49A\E49A;
                      PLB                                       ;;E49B|E49B+E49B/E49B\E49B;
                      JSR CODE_02E4A5                           ;;E49C|E49C+E49C/E49C\E49C;
                      PLB                                       ;;E49F|E49F+E49F/E49F\E49F;
                      PLA                                       ;;E4A0|E4A0+E4A0/E4A0\E4A0;
                      STA.W !SpriteOAMIndex,X                   ;;E4A1|E4A1+E4A1/E4A1\E4A1;
                      RTL                                       ;;E4A4|E4A4+E4A4/E4A4\E4A4; Return
                                                                ;;                        ;
CODE_02E4A5:          JSR SubOffscreen2Bnk2                     ;;E4A5|E4A5+E4A5/E4A5\E4A5;
                      STZ.W !TileGenerateTrackA                 ;;E4A8|E4A8+E4A8/E4A8\E4A8;
                      LDA.B !SpriteXPosLow,X                    ;;E4AB|E4AB+E4AB/E4AB\E4AB;
                      PHA                                       ;;E4AD|E4AD+E4AD/E4AD\E4AD;
                      LDA.W !SpriteXPosHigh,X                   ;;E4AE|E4AE+E4AE/E4AE\E4AE;
                      PHA                                       ;;E4B1|E4B1+E4B1/E4B1\E4B1;
                      LDA.B !SpriteYPosLow,X                    ;;E4B2|E4B2+E4B2/E4B2\E4B2;
                      PHA                                       ;;E4B4|E4B4+E4B4/E4B4\E4B4;
                      LDA.W !SpriteYPosHigh,X                   ;;E4B5|E4B5+E4B5/E4B5\E4B5;
                      PHA                                       ;;E4B8|E4B8+E4B8/E4B8\E4B8;
                      LDA.W !SpriteMisc151C,X                   ;;E4B9|E4B9+E4B9/E4B9\E4B9;
                      STA.W !SpriteYPosHigh,X                   ;;E4BC|E4BC+E4BC/E4BC\E4BC;
                      LDA.W !SpriteMisc1534,X                   ;;E4BF|E4BF+E4BF/E4BF\E4BF;
                      STA.B !SpriteYPosLow,X                    ;;E4C2|E4C2+E4C2/E4C2\E4C2;
                      LDA.B !SpriteTableC2,X                    ;;E4C4|E4C4+E4C4/E4C4\E4C4;
                      STA.B !SpriteXPosLow,X                    ;;E4C6|E4C6+E4C6/E4C6\E4C6;
                      LDA.W !SpriteMisc1602,X                   ;;E4C8|E4C8+E4C8/E4C8\E4C8;
                      STA.W !SpriteXPosHigh,X                   ;;E4CB|E4CB+E4CB/E4CB\E4CB;
                      LDY.B #$02                                ;;E4CE|E4CE+E4CE/E4CE\E4CE;
                      JSR CODE_02E524                           ;;E4D0|E4D0+E4D0/E4D0\E4D0;
                      PLA                                       ;;E4D3|E4D3+E4D3/E4D3\E4D3;
                      STA.W !SpriteYPosHigh,X                   ;;E4D4|E4D4+E4D4/E4D4\E4D4;
                      PLA                                       ;;E4D7|E4D7+E4D7/E4D7\E4D7;
                      STA.B !SpriteYPosLow,X                    ;;E4D8|E4D8+E4D8/E4D8\E4D8;
                      PLA                                       ;;E4DA|E4DA+E4DA/E4DA\E4DA;
                      STA.W !SpriteXPosHigh,X                   ;;E4DB|E4DB+E4DB/E4DB\E4DB;
                      PLA                                       ;;E4DE|E4DE+E4DE/E4DE\E4DE;
                      STA.B !SpriteXPosLow,X                    ;;E4DF|E4DF+E4DF/E4DF\E4DF;
                      BCC +                                     ;;E4E1|E4E1+E4E1/E4E1\E4E1;
                      INC.W !TileGenerateTrackA                 ;;E4E3|E4E3+E4E3/E4E3\E4E3;
                      LDA.B #$F8                                ;;E4E6|E4E6+E4E6/E4E6\E4E6;
                      JSR CODE_02E559                           ;;E4E8|E4E8+E4E8/E4E8\E4E8;
                    + LDA.W !SpriteOAMIndex,X                   ;;E4EB|E4EB+E4EB/E4EB\E4EB;
                      CLC                                       ;;E4EE|E4EE+E4EE/E4EE\E4EE;
                      ADC.B #$08                                ;;E4EF|E4EF+E4EF/E4EF\E4EF;
                      STA.W !SpriteOAMIndex,X                   ;;E4F1|E4F1+E4F1/E4F1\E4F1;
                      LDY.B #$00                                ;;E4F4|E4F4+E4F4/E4F4\E4F4;
                      JSR CODE_02E524                           ;;E4F6|E4F6+E4F6/E4F6\E4F6;
                      BCC +                                     ;;E4F9|E4F9+E4F9/E4F9\E4F9;
                      INC.W !TileGenerateTrackA                 ;;E4FB|E4FB+E4FB/E4FB\E4FB;
                      LDA.B #$08                                ;;E4FE|E4FE+E4FE/E4FE\E4FE;
                      JSR CODE_02E559                           ;;E500|E500+E500/E500\E500;
                    + LDA.W !TileGenerateTrackA                 ;;E503|E503+E503/E503\E503;
                      BNE Return02E51F                          ;;E506|E506+E506/E506\E506;
                      LDY.B #$02                                ;;E508|E508+E508/E508\E508;
                      LDA.B !SpriteYPosLow,X                    ;;E50A|E50A+E50A/E50A\E50A;
                      CMP.W !SpriteMisc1534,X                   ;;E50C|E50C+E50C/E50C\E50C;
                      BEQ Return02E51F                          ;;E50F|E50F+E50F/E50F\E50F;
                      LDA.W !SpriteYPosHigh,X                   ;;E511|E511+E511/E511\E511;
                      SBC.W !SpriteMisc151C,X                   ;;E514|E514+E514/E514\E514;
                      BMI +                                     ;;E517|E517+E517/E517\E517;
                      LDY.B #$FE                                ;;E519|E519+E519/E519\E519;
                    + TYA                                       ;;E51B|E51B+E51B/E51B\E51B;
                      JSR CODE_02E559                           ;;E51C|E51C+E51C/E51C\E51C;
Return02E51F:         RTS                                       ;;E51F|E51F+E51F/E51F\E51F; Return
                                                                ;;                        ;
                                                                ;;                        ;
MushrmScaleTiles:     db $02,$07,$07,$02                        ;;E520|E520+E520/E520\E520;
                                                                ;;                        ;
CODE_02E524:          LDA.B !SpriteYPosLow,X                    ;;E524|E524+E524/E524\E524;
                      AND.B #$0F                                ;;E526|E526+E526/E526\E526;
                      BNE CODE_02E54E                           ;;E528|E528+E528/E528\E528;
                      LDA.B !SpriteYSpeed,X                     ;;E52A|E52A+E52A/E52A\E52A;
                      BEQ CODE_02E54E                           ;;E52C|E52C+E52C/E52C\E52C;
                      LDA.B !SpriteYSpeed,X                     ;;E52E|E52E+E52E/E52E\E52E;
                      BPL +                                     ;;E530|E530+E530/E530\E530;
                      INY                                       ;;E532|E532+E532/E532\E532;
                    + LDA.W MushrmScaleTiles,Y                  ;;E533|E533+E533/E533\E533;
                      STA.B !Map16TileGenerate                  ;;E536|E536+E536/E536\E536; $9C = tile to generate
                      LDA.B !SpriteXPosLow,X                    ;;E538|E538+E538/E538\E538; \ $9A = Sprite X position
                      STA.B !TouchBlockXPos                     ;;E53A|E53A+E53A/E53A\E53A;  | for block creation
                      LDA.W !SpriteXPosHigh,X                   ;;E53C|E53C+E53C/E53C\E53C;  |
                      STA.B !TouchBlockXPos+1                   ;;E53F|E53F+E53F/E53F\E53F; /
                      LDA.B !SpriteYPosLow,X                    ;;E541|E541+E541/E541\E541; \ $98 = Sprite Y position
                      STA.B !TouchBlockYPos                     ;;E543|E543+E543/E543\E543;  | for block creation
                      LDA.W !SpriteYPosHigh,X                   ;;E545|E545+E545/E545\E545;  |
                      STA.B !TouchBlockYPos+1                   ;;E548|E548+E548/E548\E548; /
                      JSL GenerateTile                          ;;E54A|E54A+E54A/E54A\E54A; Generate the tile
CODE_02E54E:          JSR MushroomScaleGfx                      ;;E54E|E54E+E54E/E54E\E54E;
                      STZ.W !SpriteMisc1528,X                   ;;E551|E551+E551/E551\E551;
                      JSL InvisBlkMainRt                        ;;E554|E554+E554/E554\E554;
                      RTS                                       ;;E558|E558+E558/E558\E558; Return
                                                                ;;                        ;
CODE_02E559:          LDY.B !SpriteLock                         ;;E559|E559+E559/E559\E559;
                      BNE Return02E57D                          ;;E55B|E55B+E55B/E55B\E55B;
                      PHA                                       ;;E55D|E55D+E55D/E55D\E55D;
                      JSR UpdateYPosNoGrvty                     ;;E55E|E55E+E55E/E55E\E55E;
                      PLA                                       ;;E561|E561+E561/E561\E561;
                      STA.B !SpriteYSpeed,X                     ;;E562|E562+E562/E562\E562;
                      LDY.B #$00                                ;;E564|E564+E564/E564\E564;
                      LDA.W !SpriteXMovement                    ;;E566|E566+E566/E566\E566;
                      EOR.B #$FF                                ;;E569|E569+E569/E569\E569;
                      INC A                                     ;;E56B|E56B+E56B/E56B\E56B;
                      BPL +                                     ;;E56C|E56C+E56C/E56C\E56C;
                      DEY                                       ;;E56E|E56E+E56E/E56E\E56E;
                    + CLC                                       ;;E56F|E56F+E56F/E56F\E56F;
                      ADC.W !SpriteMisc1534,X                   ;;E570|E570+E570/E570\E570;
                      STA.W !SpriteMisc1534,X                   ;;E573|E573+E573/E573\E573;
                      TYA                                       ;;E576|E576+E576/E576\E576;
                      ADC.W !SpriteMisc151C,X                   ;;E577|E577+E577/E577\E577;
                      STA.W !SpriteMisc151C,X                   ;;E57A|E57A+E57A/E57A\E57A;
Return02E57D:         RTS                                       ;;E57D|E57D+E57D/E57D\E57D; Return
                                                                ;;                        ;
MushroomScaleGfx:     JSR GetDrawInfo2                          ;;E57E|E57E+E57E/E57E\E57E;
                      LDA.B !_0                                 ;;E581|E581+E581/E581\E581;
                      SEC                                       ;;E583|E583+E583/E583\E583;
                      SBC.B #$08                                ;;E584|E584+E584/E584\E584;
                      STA.W !OAMTileXPos+$100,Y                 ;;E586|E586+E586/E586\E586;
                      CLC                                       ;;E589|E589+E589/E589\E589;
                      ADC.B #$10                                ;;E58A|E58A+E58A/E58A\E58A;
                      STA.W !OAMTileXPos+$104,Y                 ;;E58C|E58C+E58C/E58C\E58C;
                      LDA.B !_1                                 ;;E58F|E58F+E58F/E58F\E58F;
                      DEC A                                     ;;E591|E591+E591/E591\E591;
                      STA.W !OAMTileYPos+$100,Y                 ;;E592|E592+E592/E592\E592;
                      STA.W !OAMTileYPos+$104,Y                 ;;E595|E595+E595/E595\E595;
                      LDA.B #$80                                ;;E598|E598+E598/E598\E598;
                      STA.W !OAMTileNo+$100,Y                   ;;E59A|E59A+E59A/E59A\E59A;
                      STA.W !OAMTileNo+$104,Y                   ;;E59D|E59D+E59D/E59D\E59D;
                      LDA.W !SpriteOBJAttribute,X               ;;E5A0|E5A0+E5A0/E5A0\E5A0;
                      ORA.B !SpriteProperties                   ;;E5A3|E5A3+E5A3/E5A3\E5A3;
                      STA.W !OAMTileAttr+$100,Y                 ;;E5A5|E5A5+E5A5/E5A5\E5A5;
                      ORA.B #$40                                ;;E5A8|E5A8+E5A8/E5A8\E5A8;
                      STA.W !OAMTileAttr+$104,Y                 ;;E5AA|E5AA+E5AA/E5AA\E5AA;
                      LDA.B #$01                                ;;E5AD|E5AD+E5AD/E5AD\E5AD;
                      LDY.B #$02                                ;;E5AF|E5AF+E5AF/E5AF\E5AF;
                      JMP CallFinOAMWriteBank2                  ;;E5B1|E5B1+E5B1/E5B1\E5B1;
                                                                ;;                        ;
MovingLedgeMain:      PHB                                       ;;E5B4|E5B4+E5B4/E5B4\E5B4;
                      PHK                                       ;;E5B5|E5B5+E5B5/E5B5\E5B5;
                      PLB                                       ;;E5B6|E5B6+E5B6/E5B6\E5B6;
                      JSR CODE_02E5BC                           ;;E5B7|E5B7+E5B7/E5B7\E5B7;
                      PLB                                       ;;E5BA|E5BA+E5BA/E5BA\E5BA;
                      RTL                                       ;;E5BB|E5BB+E5BB/E5BB\E5BB; Return
                                                                ;;                        ;
CODE_02E5BC:          JSR SubOffscreen0Bnk2                     ;;E5BC|E5BC+E5BC/E5BC\E5BC;
                      LDA.B !SpriteLock                         ;;E5BF|E5BF+E5BF/E5BF\E5BF;
                      BNE CODE_02E5D7                           ;;E5C1|E5C1+E5C1/E5C1\E5C1;
                      INC.W !SpriteMisc1570,X                   ;;E5C3|E5C3+E5C3/E5C3\E5C3;
                      LDY.B #$10                                ;;E5C6|E5C6+E5C6/E5C6\E5C6;
                      LDA.W !SpriteMisc1570,X                   ;;E5C8|E5C8+E5C8/E5C8\E5C8;
                      AND.B #$80                                ;;E5CB|E5CB+E5CB/E5CB\E5CB;
                      BNE +                                     ;;E5CD|E5CD+E5CD/E5CD\E5CD;
                      LDY.B #$F0                                ;;E5CF|E5CF+E5CF/E5CF\E5CF;
                    + TYA                                       ;;E5D1|E5D1+E5D1/E5D1\E5D1;
                      STA.B !SpriteXSpeed,X                     ;;E5D2|E5D2+E5D2/E5D2\E5D2;
                      JSR UpdateXPosNoGrvty                     ;;E5D4|E5D4+E5D4/E5D4\E5D4;
CODE_02E5D7:          JSR CODE_02E637                           ;;E5D7|E5D7+E5D7/E5D7\E5D7;
                      JSR CODE_02E5F7                           ;;E5DA|E5DA+E5DA/E5DA\E5DA;
                      LDA.W !PlayerDisableObjInt                ;;E5DD|E5DD+E5DD/E5DD\E5DD;
                      BEQ CODE_02E5E8                           ;;E5E0|E5E0+E5E0/E5E0\E5E0;
                      DEC A                                     ;;E5E2|E5E2+E5E2/E5E2\E5E2;
                      CMP.W !CurSpriteProcess                   ;;E5E3|E5E3+E5E3/E5E3\E5E3;
                      BNE +                                     ;;E5E6|E5E6+E5E6/E5E6\E5E6;
CODE_02E5E8:          JSL MarioSprInteract                      ;;E5E8|E5E8+E5E8/E5E8\E5E8;
                      STZ.W !PlayerDisableObjInt                ;;E5EC|E5EC+E5EC/E5EC\E5EC;
                      BCC +                                     ;;E5EF|E5EF+E5EF/E5EF\E5EF;
                      INX                                       ;;E5F1|E5F1+E5F1/E5F1\E5F1;
                      STX.W !PlayerDisableObjInt                ;;E5F2|E5F2+E5F2/E5F2\E5F2;
                      DEX                                       ;;E5F5|E5F5+E5F5/E5F5\E5F5;
                    + RTS                                       ;;E5F6|E5F6+E5F6/E5F6\E5F6; Return
                                                                ;;                        ;
CODE_02E5F7:          LDY.B #$0B                                ;;E5F7|E5F7+E5F7/E5F7\E5F7;
CODE_02E5F9:          CPY.W !CurSpriteProcess                   ;;E5F9|E5F9+E5F9/E5F9\E5F9;
                      BEQ CODE_02E633                           ;;E5FC|E5FC+E5FC/E5FC\E5FC;
                      TYA                                       ;;E5FE|E5FE+E5FE/E5FE\E5FE;
                      EOR.B !TrueFrame                          ;;E5FF|E5FF+E5FF/E5FF\E5FF;
                      AND.B #$03                                ;;E601|E601+E601/E601\E601;
                      BNE CODE_02E633                           ;;E603|E603+E603/E603\E603;
                      LDA.W !SpriteStatus,Y                     ;;E605|E605+E605/E605\E605;
                      CMP.B #$08                                ;;E608|E608+E608/E608\E608;
                      BCC CODE_02E633                           ;;E60A|E60A+E60A/E60A\E60A;
                      LDA.W !SpriteDisableObjInt,Y              ;;E60C|E60C+E60C/E60C\E60C;
                      BEQ CODE_02E617                           ;;E60F|E60F+E60F/E60F\E60F;
                      DEC A                                     ;;E611|E611+E611/E611\E611;
                      CMP.W !CurSpriteProcess                   ;;E612|E612+E612/E612\E612;
                      BNE CODE_02E633                           ;;E615|E615+E615/E615\E615;
CODE_02E617:          TYX                                       ;;E617|E617+E617/E617\E617;
                      JSL GetSpriteClippingB                    ;;E618|E618+E618/E618\E618;
                      LDX.W !CurSpriteProcess                   ;;E61C|E61C+E61C/E61C\E61C; X = Sprite index
                      JSL GetSpriteClippingA                    ;;E61F|E61F+E61F/E61F\E61F;
                      JSL CheckForContact                       ;;E623|E623+E623/E623\E623;
                      LDA.B #$00                                ;;E627|E627+E627/E627\E627;
                      STA.W !SpriteDisableObjInt,Y              ;;E629|E629+E629/E629\E629;
                      BCC CODE_02E633                           ;;E62C|E62C+E62C/E62C\E62C;
                      TXA                                       ;;E62E|E62E+E62E/E62E\E62E;
                      INC A                                     ;;E62F|E62F+E62F/E62F\E62F;
                      STA.W !SpriteDisableObjInt,Y              ;;E630|E630+E630/E630\E630;
CODE_02E633:          DEY                                       ;;E633|E633+E633/E633\E633;
                      BPL CODE_02E5F9                           ;;E634|E634+E634/E634\E634;
                      RTS                                       ;;E636|E636+E636/E636\E636; Return
                                                                ;;                        ;
CODE_02E637:          JSR GetDrawInfo2                          ;;E637|E637+E637/E637\E637;
                      PHX                                       ;;E63A|E63A+E63A/E63A\E63A;
                      LDX.B #$03                                ;;E63B|E63B+E63B/E63B\E63B;
                    - LDA.B !_0                                 ;;E63D|E63D+E63D/E63D\E63D;
                      CLC                                       ;;E63F|E63F+E63F/E63F\E63F;
                      ADC.W MovingHoleXOffs,X                   ;;E640|E640+E640/E640\E640;
                      STA.W !OAMTileXPos+$100,Y                 ;;E643|E643+E643/E643\E643;
                      LDA.B !_1                                 ;;E646|E646+E646/E646\E646;
                      STA.W !OAMTileYPos+$100,Y                 ;;E648|E648+E648/E648\E648;
                      LDA.W MovingHoleTiles,X                   ;;E64B|E64B+E64B/E64B\E64B;
                      STA.W !OAMTileNo+$100,Y                   ;;E64E|E64E+E64E/E64E\E64E;
                      LDA.W MovingHoleTileProps,X               ;;E651|E651+E651/E651\E651;
                      STA.W !OAMTileAttr+$100,Y                 ;;E654|E654+E654/E654\E654;
                      INY                                       ;;E657|E657+E657/E657\E657;
                      INY                                       ;;E658|E658+E658/E658\E658;
                      INY                                       ;;E659|E659+E659/E659\E659;
                      INY                                       ;;E65A|E65A+E65A/E65A\E65A;
                      DEX                                       ;;E65B|E65B+E65B/E65B\E65B;
                      BPL -                                     ;;E65C|E65C+E65C/E65C\E65C;
                      PLX                                       ;;E65E|E65E+E65E/E65E\E65E;
                      LDA.B #$03                                ;;E65F|E65F+E65F/E65F\E65F;
                      LDY.B #$02                                ;;E661|E661+E661/E661\E661;
                      JMP CallFinOAMWriteBank2                  ;;E663|E663+E663/E663\E663;
                                                                ;;                        ;
                                                                ;;                        ;
MovingHoleXOffs:      db $00,$08,$18,$20                        ;;E666|E666+E666/E666\E666;
                                                                ;;                        ;
MovingHoleTiles:      db $EB,$EA,$EA,$EB                        ;;E66A|E66A+E66A/E66A\E66A;
                                                                ;;                        ;
MovingHoleTileProps:  db $71,$31,$31,$31                        ;;E66E|E66E+E66E/E66E\E66E;
                                                                ;;                        ;
FishinLakituGfx:      PHB                                       ;;E672|E672+E672/E672\E672; Wrapper
                      PHK                                       ;;E673|E673+E673/E673\E673;
                      PLB                                       ;;E674|E674+E674/E674\E674;
                      JSR CODE_02E67A                           ;;E675|E675+E675/E675\E675;
                      PLB                                       ;;E678|E678+E678/E678\E678;
                      RTL                                       ;;E679|E679+E679/E679\E679; Return
                                                                ;;                        ;
CODE_02E67A:          JSR GetDrawInfo2                          ;;E67A|E67A+E67A/E67A\E67A;
                      TYA                                       ;;E67D|E67D+E67D/E67D\E67D;
                      CLC                                       ;;E67E|E67E+E67E/E67E\E67E;
                      ADC.B #$08                                ;;E67F|E67F+E67F/E67F\E67F;
                      STA.W !SpriteOAMIndex,X                   ;;E681|E681+E681/E681\E681;
                      TAY                                       ;;E684|E684+E684/E684\E684;
                      LDA.B !_0                                 ;;E685|E685+E685/E685\E685;
                      SEC                                       ;;E687|E687+E687/E687\E687;
                      SBC.B #$0D                                ;;E688|E688+E688/E688\E688;
                      STA.W !OAMTileXPos+$100,Y                 ;;E68A|E68A+E68A/E68A\E68A;
                      SEC                                       ;;E68D|E68D+E68D/E68D\E68D;
                      SBC.B #$08                                ;;E68E|E68E+E68E/E68E\E68E;
                      STA.W !TileGenerateTrackA                 ;;E690|E690+E690/E690\E690;
                      STA.W !OAMTileXPos+$104,Y                 ;;E693|E693+E693/E693\E693;
                      LDA.B !_1                                 ;;E696|E696+E696/E696\E696;
                      CLC                                       ;;E698|E698+E698/E698\E698;
                      ADC.B #$02                                ;;E699|E699+E699/E699\E699;
                      STA.W !OAMTileYPos+$100,Y                 ;;E69B|E69B+E69B/E69B\E69B;
                      STA.W !TileGenerateTrackB                 ;;E69E|E69E+E69E/E69E\E69E;
                      CLC                                       ;;E6A1|E6A1+E6A1/E6A1\E6A1;
                      ADC.B #$40                                ;;E6A2|E6A2+E6A2/E6A2\E6A2;
                      STA.W !OAMTileYPos+$104,Y                 ;;E6A4|E6A4+E6A4/E6A4\E6A4;
                      LDA.B #$AA                                ;;E6A7|E6A7+E6A7/E6A7\E6A7;
                      STA.W !OAMTileNo+$100,Y                   ;;E6A9|E6A9+E6A9/E6A9\E6A9;
                      LDA.B #$24                                ;;E6AC|E6AC+E6AC/E6AC\E6AC;
                      STA.W !OAMTileNo+$104,Y                   ;;E6AE|E6AE+E6AE/E6AE\E6AE;
                      LDA.B #$35                                ;;E6B1|E6B1+E6B1/E6B1\E6B1;
                      STA.W !OAMTileAttr+$100,Y                 ;;E6B3|E6B3+E6B3/E6B3\E6B3;
                      LDA.B #$3A                                ;;E6B6|E6B6+E6B6/E6B6\E6B6;
                      STA.W !OAMTileAttr+$104,Y                 ;;E6B8|E6B8+E6B8/E6B8\E6B8;
                      LDA.B #$01                                ;;E6BB|E6BB+E6BB/E6BB\E6BB;
                      LDY.B #$02                                ;;E6BD|E6BD+E6BD/E6BD\E6BD;
                      JSR CallFinOAMWriteBank2                  ;;E6BF|E6BF+E6BF/E6BF\E6BF;
                      LDA.W !SpriteOffscreenX,X                 ;;E6C2|E6C2+E6C2/E6C2\E6C2;
                      BNE +                                     ;;E6C5|E6C5+E6C5/E6C5\E6C5;
                      LDY.W !SpriteOAMIndex,X                   ;;E6C7|E6C7+E6C7/E6C7\E6C7; Y = Index into sprite OAM
                      LDA.B !PlayerXPosScrRel                   ;;E6CA|E6CA+E6CA/E6CA\E6CA;
                      SEC                                       ;;E6CC|E6CC+E6CC/E6CC\E6CC;
                      SBC.W !OAMTileXPos+$104,Y                 ;;E6CD|E6CD+E6CD/E6CD\E6CD;
                      CLC                                       ;;E6D0|E6D0+E6D0/E6D0\E6D0;
                      ADC.B #$0C                                ;;E6D1|E6D1+E6D1/E6D1\E6D1;
                      CMP.B #$18                                ;;E6D3|E6D3+E6D3/E6D3\E6D3;
                      BCS +                                     ;;E6D5|E6D5+E6D5/E6D5\E6D5;
                      LDA.B !PlayerYPosScrRel                   ;;E6D7|E6D7+E6D7/E6D7\E6D7;
                      SEC                                       ;;E6D9|E6D9+E6D9/E6D9\E6D9;
                      SBC.W !OAMTileYPos+$104,Y                 ;;E6DA|E6DA+E6DA/E6DA\E6DA;
                      CLC                                       ;;E6DD|E6DD+E6DD/E6DD\E6DD;
                      ADC.B #$0C                                ;;E6DE|E6DE+E6DE/E6DE\E6DE;
                      CMP.B #$18                                ;;E6E0|E6E0+E6E0/E6E0\E6E0;
                      BCS +                                     ;;E6E2|E6E2+E6E2/E6E2\E6E2;
                      STZ.W !SpriteMisc151C,X                   ;;E6E4|E6E4+E6E4/E6E4\E6E4;
                      JSL CODE_00F388                           ;;E6E7|E6E7+E6E7/E6E7\E6E7;
                    + PHX                                       ;;E6EB|E6EB+E6EB/E6EB\E6EB;
                      LDA.B #$38                                ;;E6EC|E6EC+E6EC/E6EC\E6EC;
                      STA.W !SpriteOAMIndex,X                   ;;E6EE|E6EE+E6EE/E6EE\E6EE;
                      TAY                                       ;;E6F1|E6F1+E6F1/E6F1\E6F1;
                      LDX.B #$07                                ;;E6F2|E6F2+E6F2/E6F2\E6F2;
                    - LDA.W !TileGenerateTrackA                 ;;E6F4|E6F4+E6F4/E6F4\E6F4;
                      STA.W !OAMTileXPos+$100,Y                 ;;E6F7|E6F7+E6F7/E6F7\E6F7;
                      LDA.W !TileGenerateTrackB                 ;;E6FA|E6FA+E6FA/E6FA\E6FA;
                      STA.W !OAMTileYPos+$100,Y                 ;;E6FD|E6FD+E6FD/E6FD\E6FD;
                      CLC                                       ;;E700|E700+E700/E700\E700;
                      ADC.B #$08                                ;;E701|E701+E701/E701\E701;
                      STA.W !TileGenerateTrackB                 ;;E703|E703+E703/E703\E703;
                      LDA.B #$89                                ;;E706|E706+E706/E706\E706;
                      STA.W !OAMTileNo+$100,Y                   ;;E708|E708+E708/E708\E708;
                      LDA.B #$35                                ;;E70B|E70B+E70B/E70B\E70B;
                      STA.W !OAMTileAttr+$100,Y                 ;;E70D|E70D+E70D/E70D\E70D;
                      INY                                       ;;E710|E710+E710/E710\E710;
                      INY                                       ;;E711|E711+E711/E711\E711;
                      INY                                       ;;E712|E712+E712/E712\E712;
                      INY                                       ;;E713|E713+E713/E713\E713;
                      DEX                                       ;;E714|E714+E714/E714\E714;
                      BPL -                                     ;;E715|E715+E715/E715\E715;
                      PLX                                       ;;E717|E717+E717/E717\E717;
                      LDA.B #$07                                ;;E718|E718+E718/E718\E718;
                      LDY.B #$00                                ;;E71A|E71A+E71A/E71A\E71A;
                      JMP CallFinOAMWriteBank2                  ;;E71C|E71C+E71C/E71C\E71C;
                                                                ;;                        ;
SwimJumpFishMain:     PHB                                       ;;E71F|E71F+E71F/E71F\E71F;
                      PHK                                       ;;E720|E720+E720/E720\E720;
                      PLB                                       ;;E721|E721+E721/E721\E721;
                      JSR CODE_02E727                           ;;E722|E722+E722/E722\E722;
                      PLB                                       ;;E725|E725+E725/E725\E725;
                      RTL                                       ;;E726|E726+E726/E726\E726; Return
                                                                ;;                        ;
CODE_02E727:          JSL GenericSprGfxRt2                      ;;E727|E727+E727/E727\E727;
                      LDA.B !SpriteLock                         ;;E72B|E72B+E72B/E72B\E72B;
                      BNE +                                     ;;E72D|E72D+E72D/E72D\E72D;
                      JSR SubOffscreen0Bnk2                     ;;E72F|E72F+E72F/E72F\E72F;
                      JSL SprSpr_MarioSprRts                    ;;E732|E732+E732/E732\E732;
                      JSL SprObjInteract                        ;;E736|E736+E736/E736\E736;
                      LDY.B #$00                                ;;E73A|E73A+E73A/E73A\E73A;
                      JSR CODE_02EB3D                           ;;E73C|E73C+E73C/E73C\E73C;
                      LDA.B !SpriteTableC2,X                    ;;E73F|E73F+E73F/E73F\E73F;
                      AND.B #$01                                ;;E741|E741+E741/E741\E741;
                      JSL ExecutePtr                            ;;E743|E743+E743/E743\E743;
                                                                ;;                        ;
                      dw CODE_02E74E                            ;;E747|E747+E747/E747\E747;
                      dw CODE_02E788                            ;;E749|E749+E749/E749\E749;
                                                                ;;                        ;
                    + RTS                                       ;;E74B|E74B+E74B/E74B\E74B; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E74C:          db $14,$EC                                ;;E74C|E74C+E74C/E74C\E74C;
                                                                ;;                        ;
CODE_02E74E:          LDY.W !SpriteMisc157C,X                   ;;E74E|E74E+E74E/E74E\E74E;
                      LDA.W DATA_02E74C,Y                       ;;E751|E751+E751/E751\E751;
                      STA.B !SpriteXSpeed,X                     ;;E754|E754+E754/E754\E754;
                      JSR UpdateXPosNoGrvty                     ;;E756|E756+E756/E756\E756;
                      LDA.W !SpriteMisc1540,X                   ;;E759|E759+E759/E759\E759;
                      BNE Return02E77B                          ;;E75C|E75C+E75C/E75C\E75C;
                      INC.W !SpriteMisc1570,X                   ;;E75E|E75E+E75E/E75E\E75E;
                      LDY.W !SpriteMisc1570,X                   ;;E761|E761+E761/E761\E761;
                      CPY.B #$04                                ;;E764|E764+E764/E764\E764;
                      BEQ CODE_02E77C                           ;;E766|E766+E766/E766\E766;
                      LDA.W !SpriteMisc157C,X                   ;;E768|E768+E768/E768\E768;
                      EOR.B #$01                                ;;E76B|E76B+E76B/E76B\E76B;
                      STA.W !SpriteMisc157C,X                   ;;E76D|E76D+E76D/E76D\E76D;
                      LDA.B #$20                                ;;E770|E770+E770/E770\E770;
                      CPY.B #$03                                ;;E772|E772+E772/E772\E772;
                      BEQ +                                     ;;E774|E774+E774/E774\E774;
                      LDA.B #$40                                ;;E776|E776+E776/E776\E776;
                    + STA.W !SpriteMisc1540,X                   ;;E778|E778+E778/E778\E778;
Return02E77B:         RTS                                       ;;E77B|E77B+E77B/E77B\E77B; Return
                                                                ;;                        ;
CODE_02E77C:          INC.B !SpriteTableC2,X                    ;;E77C|E77C+E77C/E77C\E77C;
                      LDA.B #$80                                ;;E77E|E77E+E77E/E77E\E77E;
                      STA.W !SpriteMisc1540,X                   ;;E780|E780+E780/E780\E780;
                      LDA.B #$A0                                ;;E783|E783+E783/E783\E783;
                      STA.B !SpriteYSpeed,X                     ;;E785|E785+E785/E785\E785;
                      RTS                                       ;;E787|E787+E787/E787\E787; Return
                                                                ;;                        ;
CODE_02E788:          LDA.W !SpriteMisc1540,X                   ;;E788|E788+E788/E788\E788;
                      BEQ CODE_02E7A4                           ;;E78B|E78B+E78B/E78B\E78B;
                      CMP.B #$70                                ;;E78D|E78D+E78D/E78D\E78D;
                      BCS Return02E7A3                          ;;E78F|E78F+E78F/E78F\E78F;
                      STZ.B !SpriteXSpeed,X                     ;;E791|E791+E791/E791\E791; Sprite X Speed = 0
                      JSR UpdateYPosNoGrvty                     ;;E793|E793+E793/E793\E793;
                      LDA.B !SpriteYSpeed,X                     ;;E796|E796+E796/E796\E796;
                      BMI CODE_02E79E                           ;;E798|E798+E798/E798\E798;
                      CMP.B #$30                                ;;E79A|E79A+E79A/E79A\E79A;
                      BCS Return02E7A3                          ;;E79C|E79C+E79C/E79C\E79C;
CODE_02E79E:          CLC                                       ;;E79E|E79E+E79E/E79E\E79E;
                      ADC.B #$02                                ;;E79F|E79F+E79F/E79F\E79F;
                      STA.B !SpriteYSpeed,X                     ;;E7A1|E7A1+E7A1/E7A1\E7A1;
Return02E7A3:         RTS                                       ;;E7A3|E7A3+E7A3/E7A3\E7A3; Return
                                                                ;;                        ;
CODE_02E7A4:          LDA.B !SpriteYPosLow,X                    ;;E7A4|E7A4+E7A4/E7A4\E7A4;
                      AND.B #$F0                                ;;E7A6|E7A6+E7A6/E7A6\E7A6;
                      STA.B !SpriteYPosLow,X                    ;;E7A8|E7A8+E7A8/E7A8\E7A8;
                      INC.B !SpriteTableC2,X                    ;;E7AA|E7AA+E7AA/E7AA\E7AA;
                      STZ.W !SpriteMisc1570,X                   ;;E7AC|E7AC+E7AC/E7AC\E7AC;
                      LDA.B #$20                                ;;E7AF|E7AF+E7AF/E7AF\E7AF;
                      STA.W !SpriteMisc1540,X                   ;;E7B1|E7B1+E7B1/E7B1\E7B1;
                      RTS                                       ;;E7B4|E7B4+E7B4/E7B4\E7B4; Return
                                                                ;;                        ;
ChucksRockMain:       PHB                                       ;;E7B5|E7B5+E7B5/E7B5\E7B5;
                      PHK                                       ;;E7B6|E7B6+E7B6/E7B6\E7B6;
                      PLB                                       ;;E7B7|E7B7+E7B7/E7B7\E7B7;
                      JSR CODE_02E7BD                           ;;E7B8|E7B8+E7B8/E7B8\E7B8;
                      PLB                                       ;;E7BB|E7BB+E7BB/E7BB\E7BB;
                      RTL                                       ;;E7BC|E7BC+E7BC/E7BC\E7BC; Return
                                                                ;;                        ;
CODE_02E7BD:          LDA.B !SpriteProperties                   ;;E7BD|E7BD+E7BD/E7BD\E7BD;
                      PHA                                       ;;E7BF|E7BF+E7BF/E7BF\E7BF;
                      LDA.W !SpriteMisc1540,X                   ;;E7C0|E7C0+E7C0/E7C0\E7C0;
                      BEQ +                                     ;;E7C3|E7C3+E7C3/E7C3\E7C3;
                      LDA.B #$10                                ;;E7C5|E7C5+E7C5/E7C5\E7C5;
                      STA.B !SpriteProperties                   ;;E7C7|E7C7+E7C7/E7C7\E7C7;
                    + JSL GenericSprGfxRt2                      ;;E7C9|E7C9+E7C9/E7C9\E7C9;
                      PLA                                       ;;E7CD|E7CD+E7CD/E7CD\E7CD;
                      STA.B !SpriteProperties                   ;;E7CE|E7CE+E7CE/E7CE\E7CE;
                      LDA.B !SpriteLock                         ;;E7D0|E7D0+E7D0/E7D0\E7D0;
                      BNE Return02E82C                          ;;E7D2|E7D2+E7D2/E7D2\E7D2;
                      LDA.W !SpriteMisc1540,X                   ;;E7D4|E7D4+E7D4/E7D4\E7D4;
                      CMP.B #$08                                ;;E7D7|E7D7+E7D7/E7D7\E7D7;
                      BCS Return02E82C                          ;;E7D9|E7D9+E7D9/E7D9\E7D9;
                      LDY.B #$00                                ;;E7DB|E7DB+E7DB/E7DB\E7DB;
                      LDA.B !TrueFrame                          ;;E7DD|E7DD+E7DD/E7DD\E7DD;
                      LSR A                                     ;;E7DF|E7DF+E7DF/E7DF\E7DF;
                      JSR CODE_02EB3D                           ;;E7E0|E7E0+E7E0/E7E0\E7E0;
                      JSR SubOffscreen0Bnk2                     ;;E7E3|E7E3+E7E3/E7E3\E7E3;
                      JSL UpdateSpritePos                       ;;E7E6|E7E6+E7E6/E7E6\E7E6;
                      LDA.W !SpriteMisc1540,X                   ;;E7EA|E7EA+E7EA/E7EA\E7EA;
                      BNE CODE_02E828                           ;;E7ED|E7ED+E7ED/E7ED\E7ED;
                      LDA.W !SpriteBlockedDirs,X                ;;E7EF|E7EF+E7EF/E7EF\E7EF; \ Branch if not touching object
                      AND.B #$03                                ;;E7F2|E7F2+E7F2/E7F2\E7F2;  |
                      BEQ +                                     ;;E7F4|E7F4+E7F4/E7F4\E7F4; /
                      LDA.B !SpriteXSpeed,X                     ;;E7F6|E7F6+E7F6/E7F6\E7F6;
                      EOR.B #$FF                                ;;E7F8|E7F8+E7F8/E7F8\E7F8;
                      INC A                                     ;;E7FA|E7FA+E7FA/E7FA\E7FA;
                      STA.B !SpriteXSpeed,X                     ;;E7FB|E7FB+E7FB/E7FB\E7FB;
                    + LDA.W !SpriteBlockedDirs,X                ;;E7FD|E7FD+E7FD/E7FD\E7FD;
                      AND.B #$08                                ;;E800|E800+E800/E800\E800;
                      BEQ +                                     ;;E802|E802+E802/E802\E802;
                      LDA.B #$10                                ;;E804|E804+E804/E804\E804;
                      STA.B !SpriteYSpeed,X                     ;;E806|E806+E806/E806\E806;
                    + LDA.W !SpriteBlockedDirs,X                ;;E808|E808+E808/E808\E808; \ Branch if not on ground
                      AND.B #$04                                ;;E80B|E80B+E80B/E80B\E80B;  |
                      BEQ CODE_02E828                           ;;E80D|E80D+E80D/E80D\E80D; /
                      LDA.B !SpriteYSpeed,X                     ;;E80F|E80F+E80F/E80F\E80F;
                      CMP.B #$38                                ;;E811|E811+E811/E811\E811;
                      LDA.B #$E0                                ;;E813|E813+E813/E813\E813;
                      BCC +                                     ;;E815|E815+E815/E815\E815;
                      LDA.B #$D0                                ;;E817|E817+E817/E817\E817;
                    + STA.B !SpriteYSpeed,X                     ;;E819|E819+E819/E819\E819;
                      LDA.B #$08                                ;;E81B|E81B+E81B/E81B\E81B;
                      LDY.W !SpriteSlope,X                      ;;E81D|E81D+E81D/E81D\E81D;
                      BEQ CODE_02E828                           ;;E820|E820+E820/E820\E820;
                      BPL +                                     ;;E822|E822+E822/E822\E822;
                      LDA.B #$F8                                ;;E824|E824+E824/E824\E824;
                    + STA.B !SpriteXSpeed,X                     ;;E826|E826+E826/E826\E826;
CODE_02E828:          JSL SprSpr_MarioSprRts                    ;;E828|E828+E828/E828\E828;
Return02E82C:         RTS                                       ;;E82C|E82C+E82C/E82C\E82C; Return
                                                                ;;                        ;
GrowingPipeMain:      PHB                                       ;;E82D|E82D+E82D/E82D\E82D;
                      PHK                                       ;;E82E|E82E+E82E/E82E\E82E;
                      PLB                                       ;;E82F|E82F+E82F/E82F\E82F;
                      JSR CODE_02E845                           ;;E830|E830+E830/E830\E830;
                      PLB                                       ;;E833|E833+E833/E833\E833;
                      RTL                                       ;;E834|E834+E834/E834\E834; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02E835:          db $00,$F0,$00,$10                        ;;E835|E835+E835/E835\E835;
                                                                ;;                        ;
DATA_02E839:          db $20,$40,$20,$40                        ;;E839|E839+E839/E839\E839;
                                                                ;;                        ;
GrowingPipeTiles1:    db $00,$14,$00,$02                        ;;E83D|E83D+E83D/E83D\E83D;
                                                                ;;                        ;
GrowingPipeTiles2:    db $00,$15,$00,$02                        ;;E841|E841+E841/E841\E841;
                                                                ;;                        ;
CODE_02E845:          LDA.W !SpriteMisc1534,X                   ;;E845|E845+E845/E845\E845;
                      BMI +                                     ;;E848|E848+E848/E848\E848;
                      LDA.B !SpriteYPosLow,X                    ;;E84A|E84A+E84A/E84A\E84A;
                      PHA                                       ;;E84C|E84C+E84C/E84C\E84C;
                      SEC                                       ;;E84D|E84D+E84D/E84D\E84D;
                      SBC.W !SpriteMisc1534,X                   ;;E84E|E84E+E84E/E84E\E84E;
                      STA.B !SpriteYPosLow,X                    ;;E851|E851+E851/E851\E851;
                      LDA.W !SpriteYPosHigh,X                   ;;E853|E853+E853/E853\E853;
                      PHA                                       ;;E856|E856+E856/E856\E856;
                      SBC.B #$00                                ;;E857|E857+E857/E857\E857;
                      STA.W !SpriteYPosHigh,X                   ;;E859|E859+E859/E859\E859;
                      LDY.B #$03                                ;;E85C|E85C+E85C/E85C\E85C;
                      JSR GrowingPipeDrawtile                   ;;E85E|E85E+E85E/E85E\E85E;
                      PLA                                       ;;E861|E861+E861/E861\E861;
                      STA.W !SpriteYPosHigh,X                   ;;E862|E862+E862/E862\E862;
                      PLA                                       ;;E865|E865+E865/E865\E865;
                      STA.B !SpriteYPosLow,X                    ;;E866|E866+E866/E866\E866;
                      LDA.W !SpriteMisc1534,X                   ;;E868|E868+E868/E868\E868;
                      SEC                                       ;;E86B|E86B+E86B/E86B\E86B;
                      SBC.B #$10                                ;;E86C|E86C+E86C/E86C\E86C;
                      STA.W !SpriteMisc1534,X                   ;;E86E|E86E+E86E/E86E\E86E;
                      RTS                                       ;;E871|E871+E871/E871\E871; Return
                                                                ;;                        ;
                    + JSR CODE_02E902                           ;;E872|E872+E872/E872\E872;
                      JSR SubOffscreen0Bnk2                     ;;E875|E875+E875/E875\E875;
                      LDA.B !SpriteLock                         ;;E878|E878+E878/E878\E878;
                      ORA.W !SpriteOffscreenX,X                 ;;E87A|E87A+E87A/E87A\E87A;
                      BNE CODE_02E8B5                           ;;E87D|E87D+E87D/E87D\E87D;
                      JSR SubHorizPosBnk2                       ;;E87F|E87F+E87F/E87F\E87F;
                      LDA.B !_F                                 ;;E882|E882+E882/E882\E882;
                      CLC                                       ;;E884|E884+E884/E884\E884;
                      ADC.B #$50                                ;;E885|E885+E885/E885\E885;
                      CMP.B #$A0                                ;;E887|E887+E887/E887\E887;
                      BCS CODE_02E8B5                           ;;E889|E889+E889/E889\E889;
                      LDA.B !SpriteTableC2,X                    ;;E88B|E88B+E88B/E88B\E88B;
                      AND.B #$03                                ;;E88D|E88D+E88D/E88D\E88D;
                      TAY                                       ;;E88F|E88F+E88F/E88F\E88F;
                      INC.W !SpriteMisc1570,X                   ;;E890|E890+E890/E890\E890;
                      LDA.W !SpriteMisc1570,X                   ;;E893|E893+E893/E893\E893;
                      CMP.W DATA_02E839,Y                       ;;E896|E896+E896/E896\E896;
                      BNE CODE_02E8A2                           ;;E899|E899+E899/E899\E899;
                      STZ.W !SpriteMisc1570,X                   ;;E89B|E89B+E89B/E89B\E89B;
                      INC.B !SpriteTableC2,X                    ;;E89E|E89E+E89E/E89E\E89E;
                      BRA CODE_02E8B5                           ;;E8A0|E8A0+E8A0/E8A0\E8A0;
                                                                ;;                        ;
CODE_02E8A2:          LDA.W DATA_02E835,Y                       ;;E8A2|E8A2+E8A2/E8A2\E8A2;
                      STA.B !SpriteYSpeed,X                     ;;E8A5|E8A5+E8A5/E8A5\E8A5;
                      BEQ +                                     ;;E8A7|E8A7+E8A7/E8A7\E8A7;
                      LDA.B !SpriteYPosLow,X                    ;;E8A9|E8A9+E8A9/E8A9\E8A9;
                      AND.B #$0F                                ;;E8AB|E8AB+E8AB/E8AB\E8AB;
                      BNE +                                     ;;E8AD|E8AD+E8AD/E8AD\E8AD;
                      JSR GrowingPipeDrawtile                   ;;E8AF|E8AF+E8AF/E8AF\E8AF;
                    + JSR UpdateYPosNoGrvty                     ;;E8B2|E8B2+E8B2/E8B2\E8B2;
CODE_02E8B5:          JSL InvisBlkMainRt                        ;;E8B5|E8B5+E8B5/E8B5\E8B5;
                      RTS                                       ;;E8B9|E8B9+E8B9/E8B9\E8B9; Return
                                                                ;;                        ;
GrowingPipeDrawtile:  LDA.W GrowingPipeTiles1,Y                 ;;E8BA|E8BA+E8BA/E8BA\E8BA;
                      STA.W !TileGenerateTrackA                 ;;E8BD|E8BD+E8BD/E8BD\E8BD;
                      LDA.W GrowingPipeTiles2,Y                 ;;E8C0|E8C0+E8C0/E8C0\E8C0;
                      STA.W !TileGenerateTrackB                 ;;E8C3|E8C3+E8C3/E8C3\E8C3;
                      LDA.W !TileGenerateTrackA                 ;;E8C6|E8C6+E8C6/E8C6\E8C6;
                      STA.B !Map16TileGenerate                  ;;E8C9|E8C9+E8C9/E8C9\E8C9; $9C = tile to generate
                      LDA.B !SpriteXPosLow,X                    ;;E8CB|E8CB+E8CB/E8CB\E8CB; \ $9A = Sprite X position
                      STA.B !TouchBlockXPos                     ;;E8CD|E8CD+E8CD/E8CD\E8CD;  | for block creation
                      LDA.W !SpriteXPosHigh,X                   ;;E8CF|E8CF+E8CF/E8CF\E8CF;  |
                      STA.B !TouchBlockXPos+1                   ;;E8D2|E8D2+E8D2/E8D2\E8D2; /
                      LDA.B !SpriteYPosLow,X                    ;;E8D4|E8D4+E8D4/E8D4\E8D4; \ $98 = Sprite Y position
                      STA.B !TouchBlockYPos                     ;;E8D6|E8D6+E8D6/E8D6\E8D6;  | for block creation
                      LDA.W !SpriteYPosHigh,X                   ;;E8D8|E8D8+E8D8/E8D8\E8D8;  |
                      STA.B !TouchBlockYPos+1                   ;;E8DB|E8DB+E8DB/E8DB\E8DB; /
                      JSL GenerateTile                          ;;E8DD|E8DD+E8DD/E8DD\E8DD; Generate the tile
                      LDA.W !TileGenerateTrackB                 ;;E8E1|E8E1+E8E1/E8E1\E8E1;
                      STA.B !Map16TileGenerate                  ;;E8E4|E8E4+E8E4/E8E4\E8E4; $9C = tile to generate
                      LDA.B !SpriteXPosLow,X                    ;;E8E6|E8E6+E8E6/E8E6\E8E6; \ $9A = Sprite X position + #$10
                      CLC                                       ;;E8E8|E8E8+E8E8/E8E8\E8E8;  | for block creation
                      ADC.B #$10                                ;;E8E9|E8E9+E8E9/E8E9\E8E9;  |
                      STA.B !TouchBlockXPos                     ;;E8EB|E8EB+E8EB/E8EB\E8EB;  |
                      LDA.W !SpriteXPosHigh,X                   ;;E8ED|E8ED+E8ED/E8ED\E8ED;  |
                      ADC.B #$00                                ;;E8F0|E8F0+E8F0/E8F0\E8F0;  |
                      STA.B !TouchBlockXPos+1                   ;;E8F2|E8F2+E8F2/E8F2\E8F2; /
                      LDA.B !SpriteYPosLow,X                    ;;E8F4|E8F4+E8F4/E8F4\E8F4; \ $98 = Sprite Y position
                      STA.B !TouchBlockYPos                     ;;E8F6|E8F6+E8F6/E8F6\E8F6;  | for block creation
                      LDA.W !SpriteYPosHigh,X                   ;;E8F8|E8F8+E8F8/E8F8\E8F8;  |
                      STA.B !TouchBlockYPos+1                   ;;E8FB|E8FB+E8FB/E8FB\E8FB; /
                      JSL GenerateTile                          ;;E8FD|E8FD+E8FD/E8FD\E8FD; Generate the tile
                      RTS                                       ;;E901|E901+E901/E901\E901; Return
                                                                ;;                        ;
CODE_02E902:          JSR GetDrawInfo2                          ;;E902|E902+E902/E902\E902;
                      LDA.B !_0                                 ;;E905|E905+E905/E905\E905;
                      STA.W !OAMTileXPos+$100,Y                 ;;E907|E907+E907/E907\E907;
                      CLC                                       ;;E90A|E90A+E90A/E90A\E90A;
                      ADC.B #$10                                ;;E90B|E90B+E90B/E90B\E90B;
                      STA.W !OAMTileXPos+$104,Y                 ;;E90D|E90D+E90D/E90D\E90D;
                      LDA.B !_1                                 ;;E910|E910+E910/E910\E910;
                      DEC A                                     ;;E912|E912+E912/E912\E912;
                      STA.W !OAMTileYPos+$100,Y                 ;;E913|E913+E913/E913\E913;
                      STA.W !OAMTileYPos+$104,Y                 ;;E916|E916+E916/E916\E916;
                      LDA.B #$A4                                ;;E919|E919+E919/E919\E919;
                      STA.W !OAMTileNo+$100,Y                   ;;E91B|E91B+E91B/E91B\E91B;
                      LDA.B #$A6                                ;;E91E|E91E+E91E/E91E\E91E;
                      STA.W !OAMTileNo+$104,Y                   ;;E920|E920+E920/E920\E920;
                      LDA.W !SpriteOBJAttribute,X               ;;E923|E923+E923/E923\E923;
                      ORA.B !SpriteProperties                   ;;E926|E926+E926/E926\E926;
                      STA.W !OAMTileAttr+$100,Y                 ;;E928|E928+E928/E928\E928;
                      STA.W !OAMTileAttr+$104,Y                 ;;E92B|E92B+E92B/E92B\E92B;
CODE_02E92E:          LDA.B #$01                                ;;E92E|E92E+E92E/E92E\E92E;
                      LDY.B #$02                                ;;E930|E930+E930/E930\E930;
                      JMP CallFinOAMWriteBank2                  ;;E932|E932+E932/E932\E932;
                                                                ;;                        ;
PipeLakituMain:       PHB                                       ;;E935|E935+E935/E935\E935;
                      PHK                                       ;;E936|E936+E936/E936\E936;
                      PLB                                       ;;E937|E937+E937/E937\E937;
                      JSR CODE_02E93D                           ;;E938|E938+E938/E938\E938;
                      PLB                                       ;;E93B|E93B+E93B/E93B\E93B;
                      RTL                                       ;;E93C|E93C+E93C/E93C\E93C; Return
                                                                ;;                        ;
CODE_02E93D:          LDA.W !SpriteStatus,X                     ;;E93D|E93D+E93D/E93D\E93D;
                      CMP.B #$02                                ;;E940|E940+E940/E940\E940;
                      BNE +                                     ;;E942|E942+E942/E942\E942;
                      LDA.B #$02                                ;;E944|E944+E944/E944\E944;
                      STA.W !SpriteMisc1602,X                   ;;E946|E946+E946/E946\E946;
                      JMP CODE_02E9EC                           ;;E949|E949+E949/E949\E949;
                                                                ;;                        ;
                    + JSR CODE_02E9EC                           ;;E94C|E94C+E94C/E94C\E94C;
                      LDA.B !SpriteLock                         ;;E94F|E94F+E94F/E94F\E94F;
                      BNE +                                     ;;E951|E951+E951/E951\E951;
                      STZ.W !SpriteMisc1602,X                   ;;E953|E953+E953/E953\E953;
                      JSR SubOffscreen0Bnk2                     ;;E956|E956+E956/E956\E956;
                      JSL SprSpr_MarioSprRts                    ;;E959|E959+E959/E959\E959;
                      LDA.B !SpriteTableC2,X                    ;;E95D|E95D+E95D/E95D\E95D;
                      JSL ExecutePtr                            ;;E95F|E95F+E95F/E95F\E95F;
                                                                ;;                        ;
                      dw CODE_02E96D                            ;;E963|E963+E963/E963\E963;
                      dw CODE_02E986                            ;;E965|E965+E965/E965\E965;
                      dw CODE_02E9B4                            ;;E967|E967+E967/E967\E967;
                      dw CODE_02E9BD                            ;;E969|E969+E969/E969\E969;
                      dw CODE_02E9D5                            ;;E96B|E96B+E96B/E96B\E96B;
                                                                ;;                        ;
CODE_02E96D:          LDA.W !SpriteMisc1540,X                   ;;E96D|E96D+E96D/E96D\E96D;
                      BNE +                                     ;;E970|E970+E970/E970\E970;
                      JSR SubHorizPosBnk2                       ;;E972|E972+E972/E972\E972;
                      LDA.B !_F                                 ;;E975|E975+E975/E975\E975;
                      CLC                                       ;;E977|E977+E977/E977\E977;
                      ADC.B #$13                                ;;E978|E978+E978/E978\E978;
                      CMP.B #$36                                ;;E97A|E97A+E97A/E97A\E97A;
                      BCC +                                     ;;E97C|E97C+E97C/E97C\E97C;
                      LDA.B #$90                                ;;E97E|E97E+E97E/E97E\E97E;
CODE_02E980:          STA.W !SpriteMisc1540,X                   ;;E980|E980+E980/E980\E980;
                      INC.B !SpriteTableC2,X                    ;;E983|E983+E983/E983\E983;
                    + RTS                                       ;;E985|E985+E985/E985\E985; Return
                                                                ;;                        ;
CODE_02E986:          LDA.W !SpriteMisc1540,X                   ;;E986|E986+E986/E986\E986;
                      BNE CODE_02E996                           ;;E989|E989+E989/E989\E989;
                      JSR SubHorizPosBnk2                       ;;E98B|E98B+E98B/E98B\E98B;
                      TYA                                       ;;E98E|E98E+E98E/E98E\E98E;
                      STA.W !SpriteMisc157C,X                   ;;E98F|E98F+E98F/E98F\E98F;
                      LDA.B #$0C                                ;;E992|E992+E992/E992\E992;
                      BRA CODE_02E980                           ;;E994|E994+E994/E994\E994;
                                                                ;;                        ;
CODE_02E996:          CMP.B #$7C                                ;;E996|E996+E996/E996\E996;
                      BCC +                                     ;;E998|E998+E998/E998\E998;
CODE_02E99A:          LDA.B #$F8                                ;;E99A|E99A+E99A/E99A\E99A;
CODE_02E99C:          STA.B !SpriteYSpeed,X                     ;;E99C|E99C+E99C/E99C\E99C;
                      JSR UpdateYPosNoGrvty                     ;;E99E|E99E+E99E/E99E\E99E;
                      RTS                                       ;;E9A1|E9A1+E9A1/E9A1\E9A1; Return
                                                                ;;                        ;
                    + CMP.B #$50                                ;;E9A2|E9A2+E9A2/E9A2\E9A2;
                      BCS Return02E9B3                          ;;E9A4|E9A4+E9A4/E9A4\E9A4;
                      LDY.B #$00                                ;;E9A6|E9A6+E9A6/E9A6\E9A6;
                      LDA.B !TrueFrame                          ;;E9A8|E9A8+E9A8/E9A8\E9A8;
                      AND.B #$20                                ;;E9AA|E9AA+E9AA/E9AA\E9AA;
                      BEQ +                                     ;;E9AC|E9AC+E9AC/E9AC\E9AC;
                      INY                                       ;;E9AE|E9AE+E9AE/E9AE\E9AE;
                    + TYA                                       ;;E9AF|E9AF+E9AF/E9AF\E9AF;
                      STA.W !SpriteMisc157C,X                   ;;E9B0|E9B0+E9B0/E9B0\E9B0;
Return02E9B3:         RTS                                       ;;E9B3|E9B3+E9B3/E9B3\E9B3; Return
                                                                ;;                        ;
CODE_02E9B4:          LDA.W !SpriteMisc1540,X                   ;;E9B4|E9B4+E9B4/E9B4\E9B4;
                      BNE CODE_02E99A                           ;;E9B7|E9B7+E9B7/E9B7\E9B7;
                      LDA.B #$80                                ;;E9B9|E9B9+E9B9/E9B9\E9B9;
                      BRA CODE_02E980                           ;;E9BB|E9BB+E9BB/E9BB\E9BB;
                                                                ;;                        ;
CODE_02E9BD:          LDA.W !SpriteMisc1540,X                   ;;E9BD|E9BD+E9BD/E9BD\E9BD;
                      BNE CODE_02E9C6                           ;;E9C0|E9C0+E9C0/E9C0\E9C0;
                      LDA.B #$20                                ;;E9C2|E9C2+E9C2/E9C2\E9C2;
                      BRA CODE_02E980                           ;;E9C4|E9C4+E9C4/E9C4\E9C4;
                                                                ;;                        ;
CODE_02E9C6:          CMP.B #$40                                ;;E9C6|E9C6+E9C6/E9C6\E9C6;
                      BNE +                                     ;;E9C8|E9C8+E9C8/E9C8\E9C8;
                      JSL CODE_01EA19                           ;;E9CA|E9CA+E9CA/E9CA\E9CA;
                      RTS                                       ;;E9CE|E9CE+E9CE/E9CE\E9CE; Return
                                                                ;;                        ;
                    + BCS +                                     ;;E9CF|E9CF+E9CF/E9CF\E9CF;
                      INC.W !SpriteMisc1602,X                   ;;E9D1|E9D1+E9D1/E9D1\E9D1;
                    + RTS                                       ;;E9D4|E9D4+E9D4/E9D4\E9D4; Return
                                                                ;;                        ;
CODE_02E9D5:          LDA.W !SpriteMisc1540,X                   ;;E9D5|E9D5+E9D5/E9D5\E9D5;
                      BNE +                                     ;;E9D8|E9D8+E9D8/E9D8\E9D8;
                      LDA.B #$50                                ;;E9DA|E9DA+E9DA/E9DA\E9DA;
                      JSR CODE_02E980                           ;;E9DC|E9DC+E9DC/E9DC\E9DC;
                      STZ.B !SpriteTableC2,X                    ;;E9DF|E9DF+E9DF/E9DF\E9DF;
                      RTS                                       ;;E9E1|E9E1+E9E1/E9E1\E9E1; Return
                                                                ;;                        ;
                    + LDA.B #$08                                ;;E9E2|E9E2+E9E2/E9E2\E9E2;
                      BRA CODE_02E99C                           ;;E9E4|E9E4+E9E4/E9E4\E9E4;
                                                                ;;                        ;
                                                                ;;                        ;
PipeLakitu1:          db $EC,$A8,$CE                            ;;E9E6|E9E6+E9E6/E9E6\E9E6;
                                                                ;;                        ;
PipeLakitu2:          db $EE,$EE,$EE                            ;;E9E9|E9E9+E9E9/E9E9\E9E9;
                                                                ;;                        ;
CODE_02E9EC:          JSR GetDrawInfo2                          ;;E9EC|E9EC+E9EC/E9EC\E9EC;
                      LDA.B !_0                                 ;;E9EF|E9EF+E9EF/E9EF\E9EF;
                      STA.W !OAMTileXPos+$100,Y                 ;;E9F1|E9F1+E9F1/E9F1\E9F1;
                      STA.W !OAMTileXPos+$104,Y                 ;;E9F4|E9F4+E9F4/E9F4\E9F4;
                      LDA.B !_1                                 ;;E9F7|E9F7+E9F7/E9F7\E9F7;
                      STA.W !OAMTileYPos+$100,Y                 ;;E9F9|E9F9+E9F9/E9F9\E9F9;
                      CLC                                       ;;E9FC|E9FC+E9FC/E9FC\E9FC;
                      ADC.B #$10                                ;;E9FD|E9FD+E9FD/E9FD\E9FD;
                      STA.W !OAMTileYPos+$104,Y                 ;;E9FF|E9FF+E9FF/E9FF\E9FF;
                      PHX                                       ;;EA02|EA02+EA02/EA02\EA02;
                      LDA.W !SpriteMisc1602,X                   ;;EA03|EA03+EA03/EA03\EA03;
                      TAX                                       ;;EA06|EA06+EA06/EA06\EA06;
                      LDA.W PipeLakitu1,X                       ;;EA07|EA07+EA07/EA07\EA07;
                      STA.W !OAMTileNo+$100,Y                   ;;EA0A|EA0A+EA0A/EA0A\EA0A;
                      LDA.W PipeLakitu2,X                       ;;EA0D|EA0D+EA0D/EA0D\EA0D;
                      STA.W !OAMTileNo+$104,Y                   ;;EA10|EA10+EA10/EA10\EA10;
                      PLX                                       ;;EA13|EA13+EA13/EA13\EA13;
                      LDA.W !SpriteMisc157C,X                   ;;EA14|EA14+EA14/EA14\EA14;
                      LSR A                                     ;;EA17|EA17+EA17/EA17\EA17;
                      ROR A                                     ;;EA18|EA18+EA18/EA18\EA18;
                      LSR A                                     ;;EA19|EA19+EA19/EA19\EA19;
                      EOR.B #$5B                                ;;EA1A|EA1A+EA1A/EA1A\EA1A;
                      STA.W !OAMTileAttr+$100,Y                 ;;EA1C|EA1C+EA1C/EA1C\EA1C;
                      STA.W !OAMTileAttr+$104,Y                 ;;EA1F|EA1F+EA1F/EA1F\EA1F;
                      JMP CODE_02E92E                           ;;EA22|EA22+EA22/EA22\EA22;
                                                                ;;                        ;
CODE_02EA25:          LDY.W !SpriteOAMIndex,X                   ;;EA25|EA25+EA25/EA25\EA25; Y = Index into sprite OAM
                      LDA.W !OAMTileNo+$100,Y                   ;;EA28|EA28+EA28/EA28\EA28;
                      STA.B !_0                                 ;;EA2B|EA2B+EA2B/EA2B\EA2B;
                      STZ.B !_1                                 ;;EA2D|EA2D+EA2D/EA2D\EA2D;
                      LDA.B #$06                                ;;EA2F|EA2F+EA2F/EA2F\EA2F;
                      STA.W !OAMTileNo+$100,Y                   ;;EA31|EA31+EA31/EA31\EA31;
                      REP #$20                                  ;;EA34|EA34+EA34/EA34\EA34; Accum (16 bit)
                      LDA.B !_0                                 ;;EA36|EA36+EA36/EA36\EA36;
                      ASL A                                     ;;EA38|EA38+EA38/EA38\EA38;
                      ASL A                                     ;;EA39|EA39+EA39/EA39\EA39;
                      ASL A                                     ;;EA3A|EA3A+EA3A/EA3A\EA3A;
                      ASL A                                     ;;EA3B|EA3B+EA3B/EA3B\EA3B;
                      ASL A                                     ;;EA3C|EA3C+EA3C/EA3C\EA3C;
                      CLC                                       ;;EA3D|EA3D+EA3D/EA3D\EA3D;
                      ADC.W #$8500                              ;;EA3E|EA3E+EA3E/EA3E\EA3E;
                      STA.W !DynGfxTilePtr+6                    ;;EA41|EA41+EA41/EA41\EA41;
                      CLC                                       ;;EA44|EA44+EA44/EA44\EA44;
                      ADC.W #$0200                              ;;EA45|EA45+EA45/EA45\EA45;
                      STA.W !DynGfxTilePtr+$10                  ;;EA48|EA48+EA48/EA48\EA48;
                      SEP #$20                                  ;;EA4B|EA4B+EA4B/EA4B\EA4B; Accum (8 bit)
                      RTL                                       ;;EA4D|EA4D+EA4D/EA4D\EA4D; Return
                                                                ;;                        ;
CODE_02EA4E:          LDY.B #$0B                                ;;EA4E|EA4E+EA4E/EA4E\EA4E;
CODE_02EA50:          TYA                                       ;;EA50|EA50+EA50/EA50\EA50;
                      CMP.W !SpriteMisc160E,X                   ;;EA51|EA51+EA51/EA51\EA51;
                      BEQ CODE_02EA86                           ;;EA54|EA54+EA54/EA54\EA54;
                      EOR.B !TrueFrame                          ;;EA56|EA56+EA56/EA56\EA56;
                      LSR A                                     ;;EA58|EA58+EA58/EA58\EA58;
                      BCS CODE_02EA86                           ;;EA59|EA59+EA59/EA59\EA59;
                      CPY.W !CurSpriteProcess                   ;;EA5B|EA5B+EA5B/EA5B\EA5B;
                      BEQ CODE_02EA86                           ;;EA5E|EA5E+EA5E/EA5E\EA5E;
                      STY.W !SpriteInterIndex                   ;;EA60|EA60+EA60/EA60\EA60;
                      LDA.W !SpriteStatus,Y                     ;;EA63|EA63+EA63/EA63\EA63;
                      CMP.B #$08                                ;;EA66|EA66+EA66/EA66\EA66;
                      BCC CODE_02EA86                           ;;EA68|EA68+EA68/EA68\EA68;
                      LDA.W !SpriteNumber,Y                     ;;EA6A|EA6A+EA6A/EA6A\EA6A;
                      CMP.B #$70                                ;;EA6D|EA6D+EA6D/EA6D\EA6D;
                      BEQ CODE_02EA86                           ;;EA6F|EA6F+EA6F/EA6F\EA6F;
                      CMP.B #$0E                                ;;EA71|EA71+EA71/EA71\EA71;
                      BEQ CODE_02EA86                           ;;EA73|EA73+EA73/EA73\EA73;
                      CMP.B #$1D                                ;;EA75|EA75+EA75/EA75\EA75;
                      BCC CODE_02EA83                           ;;EA77|EA77+EA77/EA77\EA77;
                      LDA.W !SpriteTweaker1686,Y                   ;;EA79|EA79+EA79/EA79\EA79;
                      AND.B #$03                                ;;EA7C|EA7C+EA7C/EA7C\EA7C;
                      ORA.W !YoshiGrowingTimer                  ;;EA7E|EA7E+EA7E/EA7E\EA7E;
                      BNE CODE_02EA86                           ;;EA81|EA81+EA81/EA81\EA81;
CODE_02EA83:          JSR CODE_02EA8A                           ;;EA83|EA83+EA83/EA83\EA83;
CODE_02EA86:          DEY                                       ;;EA86|EA86+EA86/EA86\EA86;
                      BPL CODE_02EA50                           ;;EA87|EA87+EA87/EA87\EA87;
                      RTL                                       ;;EA89|EA89+EA89/EA89\EA89; Return
                                                                ;;                        ;
CODE_02EA8A:          PHX                                       ;;EA8A|EA8A+EA8A/EA8A\EA8A;
                      TYX                                       ;;EA8B|EA8B+EA8B/EA8B\EA8B;
                      JSL GetSpriteClippingB                    ;;EA8C|EA8C+EA8C/EA8C\EA8C;
                      PLX                                       ;;EA90|EA90+EA90/EA90\EA90;
                      JSL GetSpriteClippingA                    ;;EA91|EA91+EA91/EA91\EA91;
                      JSL CheckForContact                       ;;EA95|EA95+EA95/EA95\EA95;
                      BCC Return02EACD                          ;;EA99|EA99+EA99/EA99\EA99;
                      LDA.W !SpriteMisc163E,X                   ;;EA9B|EA9B+EA9B/EA9B\EA9B;
                      BEQ CODE_02EAA9                           ;;EA9E|EA9E+EA9E/EA9E\EA9E;
                      JSL CODE_03C023                           ;;EAA0|EAA0+EAA0/EAA0\EAA0;
                      LDA.W !YoshiGrowingTimer                  ;;EAA4|EAA4+EAA4/EAA4\EAA4;
                      BNE ADDR_02EACE                           ;;EAA7|EAA7+EAA7/EAA7\EAA7;
CODE_02EAA9:          LDA.B #$37                                ;;EAA9|EAA9+EAA9/EAA9\EAA9;
                      STA.W !SpriteMisc163E,X                   ;;EAAB|EAAB+EAAB/EAAB\EAAB;
                      LDY.W !SpriteInterIndex                   ;;EAAE|EAAE+EAAE/EAAE\EAAE;
                      STA.W !SpriteBehindScene,Y                ;;EAB1|EAB1+EAB1/EAB1\EAB1;
                      LDA.W !SpriteInterIndex                   ;;EAB4|EAB4+EAB4/EAB4\EAB4;
                      STA.W !SpriteMisc160E,X                   ;;EAB7|EAB7+EAB7/EAB7\EAB7;
                      STZ.W !SpriteMisc157C,X                   ;;EABA|EABA+EABA/EABA\EABA;
                      LDA.B !SpriteXPosLow,X                    ;;EABD|EABD+EABD/EABD\EABD;
                      CMP.W !SpriteXPosLow,Y                    ;;EABF|EABF+EABF/EABF\EABF;
                      LDA.W !SpriteXPosHigh,X                   ;;EAC2|EAC2+EAC2/EAC2\EAC2;
                      SBC.W !SpriteXPosHigh,Y                   ;;EAC5|EAC5+EAC5/EAC5\EAC5;
                      BCC Return02EACD                          ;;EAC8|EAC8+EAC8/EAC8\EAC8;
                      INC.W !SpriteMisc157C,X                   ;;EACA|EACA+EACA/EACA\EACA;
Return02EACD:         RTS                                       ;;EACD|EACD+EACD/EACD\EACD; Return
                                                                ;;                        ;
ADDR_02EACE:          STZ.W !SpriteMisc163E,X                   ;;EACE|EACE+EACE/EACE\EACE;
                      RTS                                       ;;EAD1|EAD1+EAD1/EAD1\EAD1; Return
                                                                ;;                        ;
WarpBlocksMain:       PHB                                       ;;EAD2|EAD2+EAD2/EAD2\EAD2;
                      PHK                                       ;;EAD3|EAD3+EAD3/EAD3\EAD3;
                      PLB                                       ;;EAD4|EAD4+EAD4/EAD4\EAD4;
                      JSR CODE_02EADA                           ;;EAD5|EAD5+EAD5/EAD5\EAD5;
                      PLB                                       ;;EAD8|EAD8+EAD8/EAD8\EAD8;
                      RTL                                       ;;EAD9|EAD9+EAD9/EAD9\EAD9; Return
                                                                ;;                        ;
CODE_02EADA:          JSL MarioSprInteract                      ;;EADA|EADA+EADA/EADA\EADA;
                      BCC +                                     ;;EADE|EADE+EADE/EADE\EADE;
                      STZ.B !PlayerXSpeed                       ;;EAE0|EAE0+EAE0/EAE0\EAE0;
                      LDA.B !SpriteXPosLow,X                    ;;EAE2|EAE2+EAE2/EAE2\EAE2;
                      CLC                                       ;;EAE4|EAE4+EAE4/EAE4\EAE4;
                      ADC.B #$0A                                ;;EAE5|EAE5+EAE5/EAE5\EAE5;
                      STA.B !PlayerXPosNext                     ;;EAE7|EAE7+EAE7/EAE7\EAE7;
                      LDA.W !SpriteXPosHigh,X                   ;;EAE9|EAE9+EAE9/EAE9\EAE9;
                      ADC.B #$00                                ;;EAEC|EAEC+EAEC/EAEC\EAEC;
                      STA.B !PlayerXPosNext+1                   ;;EAEE|EAEE+EAEE/EAEE\EAEE;
                    + RTS                                       ;;EAF0|EAF0+EAF0/EAF0\EAF0; Return
                                                                ;;                        ;
                      RTS                                       ;;EAF1|EAF1+EAF1/EAF1\EAF1;
                                                                ;;                        ;
CODE_02EAF2:          JSL FindFreeSprSlot                       ;;EAF2|EAF2+EAF2/EAF2\EAF2; \ Return if no free slots
                      BMI +                                     ;;EAF6|EAF6+EAF6/EAF6\EAF6; /
                      LDA.B #$08                                ;;EAF8|EAF8+EAF8/EAF8\EAF8; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;EAFA|EAFA+EAFA/EAFA\EAFA; /
                      LDA.B #$77                                ;;EAFD|EAFD+EAFD/EAFD\EAFD;
                      STA.W !SpriteNumber,Y                     ;;EAFF|EAFF+EAFF/EAFF\EAFF;
                      LDA.B !SpriteXPosLow,X                    ;;EB02|EB02+EB02/EB02\EB02;
                      STA.W !SpriteXPosLow,Y                    ;;EB04|EB04+EB04/EB04\EB04;
                      LDA.W !SpriteXPosHigh,X                   ;;EB07|EB07+EB07/EB07\EB07;
                      STA.W !SpriteXPosHigh,Y                   ;;EB0A|EB0A+EB0A/EB0A\EB0A;
                      LDA.B !SpriteYPosLow,X                    ;;EB0D|EB0D+EB0D/EB0D\EB0D;
                      STA.W !SpriteYPosLow,Y                    ;;EB0F|EB0F+EB0F/EB0F\EB0F;
                      LDA.W !SpriteYPosHigh,X                   ;;EB12|EB12+EB12/EB12\EB12;
                      STA.W !SpriteYPosHigh,Y                   ;;EB15|EB15+EB15/EB15\EB15;
                      TYX                                       ;;EB18|EB18+EB18/EB18\EB18;
                      JSL InitSpriteTables                      ;;EB19|EB19+EB19/EB19\EB19;
                      LDA.B #$30                                ;;EB1D|EB1D+EB1D/EB1D\EB1D;
                      STA.W !SpriteMisc154C,X                   ;;EB1F|EB1F+EB1F/EB1F\EB1F;
                      LDA.B #$D0                                ;;EB22|EB22+EB22/EB22\EB22;
                      STA.B !SpriteYSpeed,X                     ;;EB24|EB24+EB24/EB24\EB24;
                    + RTL                                       ;;EB26|EB26+EB26/EB26\EB26; Return
                                                                ;;                        ;
SuperKoopaMain:       PHB                                       ;;EB27|EB27+EB27/EB27\EB27;
                      PHK                                       ;;EB28|EB28+EB28/EB28\EB28;
                      PLB                                       ;;EB29|EB29+EB29/EB29\EB29;
                      JSR CODE_02EB31                           ;;EB2A|EB2A+EB2A/EB2A\EB2A;
                      PLB                                       ;;EB2D|EB2D+EB2D/EB2D\EB2D;
                      RTL                                       ;;EB2E|EB2E+EB2E/EB2E\EB2E; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02EB2F:          db $18,$E8                                ;;EB2F|EB2F+EB2F/EB2F\EB2F;
                                                                ;;                        ;
CODE_02EB31:          JSR CODE_02ECDE                           ;;EB31|EB31+EB31/EB31\EB31;
                      LDA.W !SpriteStatus,X                     ;;EB34|EB34+EB34/EB34\EB34;
                      CMP.B #$02                                ;;EB37|EB37+EB37/EB37\EB37;
                      BNE CODE_02EB49                           ;;EB39|EB39+EB39/EB39\EB39;
                      LDY.B #$04                                ;;EB3B|EB3B+EB3B/EB3B\EB3B;
CODE_02EB3D:          LDA.B !EffFrame                           ;;EB3D|EB3D+EB3D/EB3D\EB3D;
                      AND.B #$04                                ;;EB3F|EB3F+EB3F/EB3F\EB3F;
                      BEQ +                                     ;;EB41|EB41+EB41/EB41\EB41;
                      INY                                       ;;EB43|EB43+EB43/EB43\EB43;
                    + TYA                                       ;;EB44|EB44+EB44/EB44\EB44;
                      STA.W !SpriteMisc1602,X                   ;;EB45|EB45+EB45/EB45\EB45;
                      RTS                                       ;;EB48|EB48+EB48/EB48\EB48; Return
                                                                ;;                        ;
CODE_02EB49:          LDA.B !SpriteLock                         ;;EB49|EB49+EB49/EB49\EB49;
                      BNE Return02EB7C                          ;;EB4B|EB4B+EB4B/EB4B\EB4B;
                      JSR SubOffscreen0Bnk2                     ;;EB4D|EB4D+EB4D/EB4D\EB4D;
                      JSL SprSpr_MarioSprRts                    ;;EB50|EB50+EB50/EB50\EB50;
                      JSR UpdateXPosNoGrvty                     ;;EB54|EB54+EB54/EB54\EB54;
                      JSR UpdateYPosNoGrvty                     ;;EB57|EB57+EB57/EB57\EB57;
                      LDA.B !SpriteNumber,X                     ;;EB5A|EB5A+EB5A/EB5A\EB5A;
                      CMP.B #$73                                ;;EB5C|EB5C+EB5C/EB5C\EB5C;
                      BEQ CODE_02EB7D                           ;;EB5E|EB5E+EB5E/EB5E\EB5E;
                      LDY.W !SpriteMisc157C,X                   ;;EB60|EB60+EB60/EB60\EB60;
                      LDA.W DATA_02EB2F,Y                       ;;EB63|EB63+EB63/EB63\EB63;
                      STA.B !SpriteXSpeed,X                     ;;EB66|EB66+EB66/EB66\EB66;
                      JSR CODE_02EBF8                           ;;EB68|EB68+EB68/EB68\EB68;
                      LDA.B !TrueFrame                          ;;EB6B|EB6B+EB6B/EB6B\EB6B;
                      AND.B #$01                                ;;EB6D|EB6D+EB6D/EB6D\EB6D;
                      BNE Return02EB7C                          ;;EB6F|EB6F+EB6F/EB6F\EB6F;
                      LDA.B !SpriteYSpeed,X                     ;;EB71|EB71+EB71/EB71\EB71;
                      CMP.B #$F0                                ;;EB73|EB73+EB73/EB73\EB73;
                      BMI Return02EB7C                          ;;EB75|EB75+EB75/EB75\EB75;
                      CLC                                       ;;EB77|EB77+EB77/EB77\EB77;
                      ADC.B #$FF                                ;;EB78|EB78+EB78/EB78\EB78;
                      STA.B !SpriteYSpeed,X                     ;;EB7A|EB7A+EB7A/EB7A\EB7A;
Return02EB7C:         RTS                                       ;;EB7C|EB7C+EB7C/EB7C\EB7C; Return
                                                                ;;                        ;
CODE_02EB7D:          LDA.B !SpriteTableC2,X                    ;;EB7D|EB7D+EB7D/EB7D\EB7D;
                      JSL ExecutePtr                            ;;EB7F|EB7F+EB7F/EB7F\EB7F;
                                                                ;;                        ;
                      dw CODE_02EB8D                            ;;EB83|EB83+EB83/EB83\EB83;
                      dw CODE_02EBD1                            ;;EB85|EB85+EB85/EB85\EB85;
                      dw CODE_02EBE7                            ;;EB87|EB87+EB87/EB87\EB87;
                                                                ;;                        ;
DATA_02EB89:          db $18,$E8                                ;;EB89|EB89+EB89/EB89\EB89;
                                                                ;;                        ;
DATA_02EB8B:          db $01,$FF                                ;;EB8B|EB8B+EB8B/EB8B\EB8B;
                                                                ;;                        ;
CODE_02EB8D:          LDA.B !TrueFrame                          ;;EB8D|EB8D+EB8D/EB8D\EB8D;
                      AND.B #$00                                ;;EB8F|EB8F+EB8F/EB8F\EB8F;
                      STA.B !_1                                 ;;EB91|EB91+EB91/EB91\EB91;
                      STZ.B !_0                                 ;;EB93|EB93+EB93/EB93\EB93;
                      LDY.W !SpriteMisc157C,X                   ;;EB95|EB95+EB95/EB95\EB95;
                      LDA.B !SpriteXSpeed,X                     ;;EB98|EB98+EB98/EB98\EB98;
                      CMP.W DATA_02EB89,Y                       ;;EB9A|EB9A+EB9A/EB9A\EB9A;
                      BEQ CODE_02EBAB                           ;;EB9D|EB9D+EB9D/EB9D\EB9D;
                      CLC                                       ;;EB9F|EB9F+EB9F/EB9F\EB9F;
                      ADC.W DATA_02EB8B,Y                       ;;EBA0|EBA0+EBA0/EBA0\EBA0;
                      LDY.B !_1                                 ;;EBA3|EBA3+EBA3/EBA3\EBA3;
                      BNE +                                     ;;EBA5|EBA5+EBA5/EBA5\EBA5;
                      STA.B !SpriteXSpeed,X                     ;;EBA7|EBA7+EBA7/EBA7\EBA7;
                    + INC.B !_0                                 ;;EBA9|EBA9+EBA9/EBA9\EBA9;
CODE_02EBAB:          INC.W !SpriteMisc151C,X                   ;;EBAB|EBAB+EBAB/EBAB\EBAB;
                      LDA.W !SpriteMisc151C,X                   ;;EBAE|EBAE+EBAE/EBAE\EBAE;
                      CMP.B #$30                                ;;EBB1|EBB1+EBB1/EBB1\EBB1;
                      BEQ CODE_02EBCA                           ;;EBB3|EBB3+EBB3/EBB3\EBB3;
CODE_02EBB5:          LDY.B #$00                                ;;EBB5|EBB5+EBB5/EBB5\EBB5;
                      LDA.B !TrueFrame                          ;;EBB7|EBB7+EBB7/EBB7\EBB7;
                      AND.B #$04                                ;;EBB9|EBB9+EBB9/EBB9\EBB9;
                      BEQ +                                     ;;EBBB|EBBB+EBBB/EBBB\EBBB;
                      INY                                       ;;EBBD|EBBD+EBBD/EBBD\EBBD;
                    + TYA                                       ;;EBBE|EBBE+EBBE/EBBE\EBBE;
                      LDY.B !_0                                 ;;EBBF|EBBF+EBBF/EBBF\EBBF;
                      BNE +                                     ;;EBC1|EBC1+EBC1/EBC1\EBC1;
                      CLC                                       ;;EBC3|EBC3+EBC3/EBC3\EBC3;
                      ADC.B #$06                                ;;EBC4|EBC4+EBC4/EBC4\EBC4;
                    + STA.W !SpriteMisc1602,X                   ;;EBC6|EBC6+EBC6/EBC6\EBC6;
                      RTS                                       ;;EBC9|EBC9+EBC9/EBC9\EBC9; Return
                                                                ;;                        ;
CODE_02EBCA:          INC.B !SpriteTableC2,X                    ;;EBCA|EBCA+EBCA/EBCA\EBCA;
                      LDA.B #$D0                                ;;EBCC|EBCC+EBCC/EBCC\EBCC;
                      STA.B !SpriteYSpeed,X                     ;;EBCE|EBCE+EBCE/EBCE\EBCE;
                      RTS                                       ;;EBD0|EBD0+EBD0/EBD0\EBD0; Return
                                                                ;;                        ;
CODE_02EBD1:          LDA.B !SpriteYSpeed,X                     ;;EBD1|EBD1+EBD1/EBD1\EBD1;
                      CLC                                       ;;EBD3|EBD3+EBD3/EBD3\EBD3;
                      ADC.B #$02                                ;;EBD4|EBD4+EBD4/EBD4\EBD4;
                      STA.B !SpriteYSpeed,X                     ;;EBD6|EBD6+EBD6/EBD6\EBD6;
                      CMP.B #$14                                ;;EBD8|EBD8+EBD8/EBD8\EBD8;
                      BMI +                                     ;;EBDA|EBDA+EBDA/EBDA\EBDA;
                      INC.B !SpriteTableC2,X                    ;;EBDC|EBDC+EBDC/EBDC\EBDC;
                    + STZ.B !_0                                 ;;EBDE|EBDE+EBDE/EBDE\EBDE;
                      JSR CODE_02EBB5                           ;;EBE0|EBE0+EBE0/EBE0\EBE0;
                      INC.W !SpriteMisc1602,X                   ;;EBE3|EBE3+EBE3/EBE3\EBE3;
                      RTS                                       ;;EBE6|EBE6+EBE6/EBE6\EBE6; Return
                                                                ;;                        ;
CODE_02EBE7:          LDY.W !SpriteMisc157C,X                   ;;EBE7|EBE7+EBE7/EBE7\EBE7;
                      LDA.W DATA_02EB89,Y                       ;;EBEA|EBEA+EBEA/EBEA\EBEA;
                      STA.B !SpriteXSpeed,X                     ;;EBED|EBED+EBED/EBED\EBED;
                      LDA.B !SpriteYSpeed,X                     ;;EBEF|EBEF+EBEF/EBEF\EBEF;
                      BEQ CODE_02EBF8                           ;;EBF1|EBF1+EBF1/EBF1\EBF1;
                      CLC                                       ;;EBF3|EBF3+EBF3/EBF3\EBF3;
                      ADC.B #$FF                                ;;EBF4|EBF4+EBF4/EBF4\EBF4;
                      STA.B !SpriteYSpeed,X                     ;;EBF6|EBF6+EBF6/EBF6\EBF6;
CODE_02EBF8:          LDY.B #$02                                ;;EBF8|EBF8+EBF8/EBF8\EBF8;
                      LDA.B !TrueFrame                          ;;EBFA|EBFA+EBFA/EBFA\EBFA;
                      AND.B #$04                                ;;EBFC|EBFC+EBFC/EBFC\EBFC;
                      BEQ +                                     ;;EBFE|EBFE+EBFE/EBFE\EBFE;
                      INY                                       ;;EC00|EC00+EC00/EC00\EC00;
                    + TYA                                       ;;EC01|EC01+EC01/EC01\EC01;
                      STA.W !SpriteMisc1602,X                   ;;EC02|EC02+EC02/EC02\EC02;
                      RTS                                       ;;EC05|EC05+EC05/EC05\EC05; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02EC06:          db $08,$08,$10,$00,$08,$08,$10,$00        ;;EC06|EC06+EC06/EC06\EC06;
                      db $08,$10,$10,$00,$08,$10,$10,$00        ;;EC0E|EC0E+EC0E/EC0E\EC0E;
                      db $09,$09,$00,$00,$09,$09,$00,$00        ;;EC16|EC16+EC16/EC16\EC16;
                      db $08,$10,$00,$00,$08,$10,$00,$00        ;;EC1E|EC1E+EC1E/EC1E\EC1E;
                      db $08,$10,$00,$00,$00,$00,$F8,$00        ;;EC26|EC26+EC26/EC26\EC26;
                      db $00,$00,$F8,$00,$00,$F8,$F8,$00        ;;EC2E|EC2E+EC2E/EC2E\EC2E;
                      db $00,$F8,$F8,$00,$FF,$FF,$00,$00        ;;EC36|EC36+EC36/EC36\EC36;
                      db $FF,$FF,$00,$00,$00,$F8,$00,$00        ;;EC3E|EC3E+EC3E/EC3E\EC3E;
                      db $00,$F8,$00,$00,$00,$F8,$00,$00        ;;EC46|EC46+EC46/EC46\EC46;
DATA_02EC4E:          db $00,$08,$08,$00,$00,$08,$08,$00        ;;EC4E|EC4E+EC4E/EC4E\EC4E;
                      db $03,$03,$08,$00,$03,$03,$08,$00        ;;EC56|EC56+EC56/EC56\EC56;
                      db $FF,$07,$00,$00,$FF,$07,$00,$00        ;;EC5E|EC5E+EC5E/EC5E\EC5E;
                      db $FD,$FD,$00,$00,$FD,$FD,$00,$00        ;;EC66|EC66+EC66/EC66\EC66;
                      db $FD,$FD,$00,$00                        ;;EC6E|EC6E+EC6E/EC6E\EC6E;
                                                                ;;                        ;
SuperKoopaTiles:      db $C8,$D8,$D0,$E0,$C9,$D9,$C0,$E2        ;;EC72|EC72+EC72/EC72\EC72;
                      db $E4,$E5,$F2,$E0,$F4,$F5,$F2,$E0        ;;EC7A|EC7A+EC7A/EC7A\EC7A;
                      db $DA,$CA,$E0,$CF,$DB,$CB,$E0,$CF        ;;EC82|EC82+EC82/EC82\EC82;
                      db $E4,$E5,$E0,$CF,$F4,$F5,$E2,$CF        ;;EC8A|EC8A+EC8A/EC8A\EC8A;
                      db $E4,$E5,$E2,$CF                        ;;EC92|EC92+EC92/EC92\EC92;
                                                                ;;                        ;
DATA_02EC96:          db $03,$03,$03,$00,$03,$03,$03,$00        ;;EC96|EC96+EC96/EC96\EC96;
                      db $03,$03,$01,$01,$03,$03,$01,$01        ;;EC9E|EC9E+EC9E/EC9E\EC9E;
                      db $83,$83,$80,$00,$83,$83,$80,$00        ;;ECA6|ECA6+ECA6/ECA6\ECA6;
                      db $03,$03,$00,$01,$03,$03,$00,$01        ;;ECAE|ECAE+ECAE/ECAE\ECAE;
                      db $03,$03,$00,$01                        ;;ECB6|ECB6+ECB6/ECB6\ECB6;
                                                                ;;                        ;
DATA_02ECBA:          db $00,$00,$00,$02,$00,$00,$00,$02        ;;ECBA|ECBA+ECBA/ECBA\ECBA;
                      db $00,$00,$00,$02,$00,$00,$00,$02        ;;ECC2|ECC2+ECC2/ECC2\ECC2;
                      db $00,$00,$02,$00,$00,$00,$02,$00        ;;ECCA|ECCA+ECCA/ECCA\ECCA;
                      db $00,$00,$02,$00,$00,$00,$02,$00        ;;ECD2|ECD2+ECD2/ECD2\ECD2;
                      db $00,$00,$02,$00                        ;;ECDA|ECDA+ECDA/ECDA\ECDA;
                                                                ;;                        ;
CODE_02ECDE:          JSR GetDrawInfo2                          ;;ECDE|ECDE+ECDE/ECDE\ECDE;
                      LDA.W !SpriteMisc157C,X                   ;;ECE1|ECE1+ECE1/ECE1\ECE1;
                      STA.B !_2                                 ;;ECE4|ECE4+ECE4/ECE4\ECE4;
                      LDA.W !SpriteOBJAttribute,X               ;;ECE6|ECE6+ECE6/ECE6\ECE6;
                      AND.B #$0E                                ;;ECE9|ECE9+ECE9/ECE9\ECE9;
                      STA.B !_5                                 ;;ECEB|ECEB+ECEB/ECEB\ECEB;
                      LDA.W !SpriteMisc1602,X                   ;;ECED|ECED+ECED/ECED\ECED;
                      ASL A                                     ;;ECF0|ECF0+ECF0/ECF0\ECF0;
                      ASL A                                     ;;ECF1|ECF1+ECF1/ECF1\ECF1;
                      STA.B !_3                                 ;;ECF2|ECF2+ECF2/ECF2\ECF2;
                      PHX                                       ;;ECF4|ECF4+ECF4/ECF4\ECF4;
                      STZ.B !_4                                 ;;ECF5|ECF5+ECF5/ECF5\ECF5;
CODE_02ECF7:          LDA.B !_3                                 ;;ECF7|ECF7+ECF7/ECF7\ECF7;
                      CLC                                       ;;ECF9|ECF9+ECF9/ECF9\ECF9;
                      ADC.B !_4                                 ;;ECFA|ECFA+ECFA/ECFA\ECFA;
                      TAX                                       ;;ECFC|ECFC+ECFC/ECFC\ECFC;
                      LDA.B !_1                                 ;;ECFD|ECFD+ECFD/ECFD\ECFD;
                      CLC                                       ;;ECFF|ECFF+ECFF/ECFF\ECFF;
                      ADC.W DATA_02EC4E,X                       ;;ED00|ED00+ED00/ED00\ED00;
                      STA.W !OAMTileYPos+$100,Y                 ;;ED03|ED03+ED03/ED03\ED03;
                      LDA.W SuperKoopaTiles,X                   ;;ED06|ED06+ED06/ED06\ED06;
                      STA.W !OAMTileNo+$100,Y                   ;;ED09|ED09+ED09/ED09\ED09;
                      PHY                                       ;;ED0C|ED0C+ED0C/ED0C\ED0C;
                      TYA                                       ;;ED0D|ED0D+ED0D/ED0D\ED0D;
                      LSR A                                     ;;ED0E|ED0E+ED0E/ED0E\ED0E;
                      LSR A                                     ;;ED0F|ED0F+ED0F/ED0F\ED0F;
                      TAY                                       ;;ED10|ED10+ED10/ED10\ED10;
                      LDA.W DATA_02ECBA,X                       ;;ED11|ED11+ED11/ED11\ED11;
                      STA.W !OAMTileSize+$40,Y                  ;;ED14|ED14+ED14/ED14\ED14;
                      PLY                                       ;;ED17|ED17+ED17/ED17\ED17;
                      LDA.B !_2                                 ;;ED18|ED18+ED18/ED18\ED18;
                      LSR A                                     ;;ED1A|ED1A+ED1A/ED1A\ED1A;
                      LDA.W DATA_02EC96,X                       ;;ED1B|ED1B+ED1B/ED1B\ED1B;
                      AND.B #$02                                ;;ED1E|ED1E+ED1E/ED1E\ED1E;
                      BEQ CODE_02ED4D                           ;;ED20|ED20+ED20/ED20\ED20;
                      PHP                                       ;;ED22|ED22+ED22/ED22\ED22;
                      PHX                                       ;;ED23|ED23+ED23/ED23\ED23;
                      LDX.W !CurSpriteProcess                   ;;ED24|ED24+ED24/ED24\ED24; X = Sprite index
                      LDA.W !SpriteMisc1534,X                   ;;ED27|ED27+ED27/ED27\ED27;
                      BEQ CODE_02ED3B                           ;;ED2A|ED2A+ED2A/ED2A\ED2A;
                      LDA.B !EffFrame                           ;;ED2C|ED2C+ED2C/ED2C\ED2C;
                      LSR A                                     ;;ED2E|ED2E+ED2E/ED2E\ED2E;
                      AND.B #$01                                ;;ED2F|ED2F+ED2F/ED2F\ED2F;
                      PHY                                       ;;ED31|ED31+ED31/ED31\ED31;
                      TAY                                       ;;ED32|ED32+ED32/ED32\ED32;
                      LDA.W DATA_02ED39,Y                       ;;ED33|ED33+ED33/ED33\ED33;
                      PLY                                       ;;ED36|ED36+ED36/ED36\ED36;
                      BRA +                                     ;;ED37|ED37+ED37/ED37\ED37;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02ED39:          db $10,$0A                                ;;ED39|ED39+ED39/ED39\ED39;
                                                                ;;                        ;
CODE_02ED3B:          LDA.B !SpriteNumber,X                     ;;ED3B|ED3B+ED3B/ED3B\ED3B;
                      CMP.B #$72                                ;;ED3D|ED3D+ED3D/ED3D\ED3D;
                      LDA.B #$08                                ;;ED3F|ED3F+ED3F/ED3F\ED3F;
                      BCC +                                     ;;ED41|ED41+ED41/ED41\ED41;
                      LSR A                                     ;;ED43|ED43+ED43/ED43\ED43;
                    + PLX                                       ;;ED44|ED44+ED44/ED44\ED44;
                      PLP                                       ;;ED45|ED45+ED45/ED45\ED45;
                      ORA.W DATA_02EC96,X                       ;;ED46|ED46+ED46/ED46\ED46;
                      AND.B #$FD                                ;;ED49|ED49+ED49/ED49\ED49;
                      BRA +                                     ;;ED4B|ED4B+ED4B/ED4B\ED4B;
                                                                ;;                        ;
CODE_02ED4D:          LDA.W DATA_02EC96,X                       ;;ED4D|ED4D+ED4D/ED4D\ED4D;
                      ORA.B !_5                                 ;;ED50|ED50+ED50/ED50\ED50;
                    + ORA.B !SpriteProperties                   ;;ED52|ED52+ED52/ED52\ED52;
                      BCS +                                     ;;ED54|ED54+ED54/ED54\ED54;
                      PHA                                       ;;ED56|ED56+ED56/ED56\ED56;
                      TXA                                       ;;ED57|ED57+ED57/ED57\ED57;
                      CLC                                       ;;ED58|ED58+ED58/ED58\ED58;
                      ADC.B #$24                                ;;ED59|ED59+ED59/ED59\ED59;
                      TAX                                       ;;ED5B|ED5B+ED5B/ED5B\ED5B;
                      PLA                                       ;;ED5C|ED5C+ED5C/ED5C\ED5C;
                      ORA.B #$40                                ;;ED5D|ED5D+ED5D/ED5D\ED5D;
                    + STA.W !OAMTileAttr+$100,Y                 ;;ED5F|ED5F+ED5F/ED5F\ED5F;
                      LDA.B !_0                                 ;;ED62|ED62+ED62/ED62\ED62;
                      CLC                                       ;;ED64|ED64+ED64/ED64\ED64;
                      ADC.W DATA_02EC06,X                       ;;ED65|ED65+ED65/ED65\ED65;
                      STA.W !OAMTileXPos+$100,Y                 ;;ED68|ED68+ED68/ED68\ED68;
                      INY                                       ;;ED6B|ED6B+ED6B/ED6B\ED6B;
                      INY                                       ;;ED6C|ED6C+ED6C/ED6C\ED6C;
                      INY                                       ;;ED6D|ED6D+ED6D/ED6D\ED6D;
                      INY                                       ;;ED6E|ED6E+ED6E/ED6E\ED6E;
                      INC.B !_4                                 ;;ED6F|ED6F+ED6F/ED6F\ED6F;
                      LDA.B !_4                                 ;;ED71|ED71+ED71/ED71\ED71;
                      CMP.B #$04                                ;;ED73|ED73+ED73/ED73\ED73;
                      BNE CODE_02ECF7                           ;;ED75|ED75+ED75/ED75\ED75;
                      PLX                                       ;;ED77|ED77+ED77/ED77\ED77;
                      LDY.B #$FF                                ;;ED78|ED78+ED78/ED78\ED78;
                      LDA.B #$03                                ;;ED7A|ED7A+ED7A/ED7A\ED7A;
                      JMP CallFinOAMWriteBank2                  ;;ED7C|ED7C+ED7C/ED7C\ED7C;
                                                                ;;                        ;
                                                                ;;                        ;
FloatSkullPlatXOff:   db $10,$20,$30                            ;;ED7F|ED7F+ED7F/ED7F\ED7F;
                                                                ;;                        ;
FloatingSkullInit:    PHB                                       ;;ED82|ED82+ED82/ED82\ED82;
                      PHK                                       ;;ED83|ED83+ED83/ED83\ED83;
                      PLB                                       ;;ED84|ED84+ED84/ED84\ED84;
                      JSR FloatingSkullInitRt                   ;;ED85|ED85+ED85/ED85\ED85;
                      PLB                                       ;;ED88|ED88+ED88/ED88\ED88;
                      RTL                                       ;;ED89|ED89+ED89/ED89\ED89; Return
                                                                ;;                        ;
FloatingSkullInitRt:  STZ.W !SkullRaftSpeed                     ;;ED8A|ED8A+ED8A/ED8A\ED8A;
                      INC.B !SpriteTableC2,X                    ;;ED8D|ED8D+ED8D/ED8D\ED8D;
                      LDA.B #$02                                ;;ED8F|ED8F+ED8F/ED8F\ED8F;
                      STA.B !_0                                 ;;ED91|ED91+ED91/ED91\ED91;
.spawn_skull_loop:    JSL FindFreeSprSlot                       ;;ED93|ED93+ED93/ED93\ED93; \ Branch if no free slots
                      BMI +                                     ;;ED97|ED97+ED97/ED97\ED97; /
                      LDA.B #$08                                ;;ED99|ED99+ED99/ED99\ED99; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;ED9B|ED9B+ED9B/ED9B\ED9B; /
                      LDA.B #$61                                ;;ED9E|ED9E+ED9E/ED9E\ED9E;
                      STA.W !SpriteNumber,Y                     ;;EDA0|EDA0+EDA0/EDA0\EDA0;
                      LDA.B !SpriteYPosLow,X                    ;;EDA3|EDA3+EDA3/EDA3\EDA3;
                      STA.W !SpriteYPosLow,Y                    ;;EDA5|EDA5+EDA5/EDA5\EDA5;
                      LDA.W !SpriteYPosHigh,X                   ;;EDA8|EDA8+EDA8/EDA8\EDA8;
                      STA.W !SpriteYPosHigh,Y                   ;;EDAB|EDAB+EDAB/EDAB\EDAB;
                      LDX.B !_0                                 ;;EDAE|EDAE+EDAE/EDAE\EDAE;
                      %LorW_X(LDA,FloatSkullPlatXOff)           ;;EDB0|EDB0+EDB0/EDB0\EDB0;
                      LDX.W !CurSpriteProcess                   ;;EDB4|EDB3+EDB3/EDB3\EDB3; X = Sprite index
                      CLC                                       ;;EDB7|EDB6+EDB6/EDB6\EDB6;
                      ADC.B !SpriteXPosLow,X                    ;;EDB8|EDB7+EDB7/EDB7\EDB7;
                      STA.W !SpriteXPosLow,Y                    ;;EDBA|EDB9+EDB9/EDB9\EDB9;
                      LDA.W !SpriteXPosHigh,X                   ;;EDBD|EDBC+EDBC/EDBC\EDBC;
                      ADC.B #$00                                ;;EDC0|EDBF+EDBF/EDBF\EDBF;
                      STA.W !SpriteXPosHigh,Y                   ;;EDC2|EDC1+EDC1/EDC1\EDC1;
                      PHX                                       ;;EDC5|EDC4+EDC4/EDC4\EDC4;
                      TYX                                       ;;EDC6|EDC5+EDC5/EDC5\EDC5;
                      JSL InitSpriteTables                      ;;EDC7|EDC6+EDC6/EDC6\EDC6;
                      PLX                                       ;;EDCB|EDCA+EDCA/EDCA\EDCA;
                    + DEC.B !_0                                 ;;EDCC|EDCB+EDCB/EDCB\EDCB;
                      BPL .spawn_skull_loop                     ;;EDCE|EDCD+EDCD/EDCD\EDCD;
                      RTS                                       ;;EDD0|EDCF+EDCF/EDCF\EDCF; Return
                                                                ;;                        ;
FloatingSkullMain:    PHB                                       ;;EDD1|EDD0+EDD0/EDD0\EDD0;
                      PHK                                       ;;EDD2|EDD1+EDD1/EDD1\EDD1;
                      PLB                                       ;;EDD3|EDD2+EDD2/EDD2\EDD2;
                      JSR CODE_02EDD8                           ;;EDD4|EDD3+EDD3/EDD3\EDD3;
                      PLB                                       ;;EDD7|EDD6+EDD6/EDD6\EDD6;
                      RTL                                       ;;EDD8|EDD7+EDD7/EDD7\EDD7; Return
                                                                ;;                        ;
CODE_02EDD8:          LDA.B !SpriteTableC2,X                    ;;EDD9|EDD8+EDD8/EDD8\EDD8;
                      BEQ CODE_02EDF6                           ;;EDDB|EDDA+EDDA/EDDA\EDDA;IF SKULLS DIEING
                      JSR SubOffscreen0Bnk2                     ;;EDDD|EDDC+EDDC/EDDC\EDDC;
                      LDA.W !SpriteStatus,X                     ;;EDE0|EDDF+EDDF/EDDF\EDDF;
                      BNE CODE_02EDF6                           ;;EDE3|EDE2+EDE2/EDE2\EDE2;IF LIVING, DO BELOW
                      LDY.B #$09                                ;;EDE5|EDE4+EDE4/EDE4\EDE4;
CODE_02EDE6:          LDA.W !SpriteNumber,Y                     ;;EDE7|EDE6+EDE6/EDE6\EDE6;
                      CMP.B #$61                                ;;EDEA|EDE9+EDE9/EDE9\EDE9;SEARCH OUT OTHERS
                      BNE +                                     ;;EDEC|EDEB+EDEB/EDEB\EDEB;
                      LDA.B #$00                                ;;EDEE|EDED+EDED/EDED\EDED;ERASE THEM TOO
                      STA.W !SpriteStatus,Y                     ;;EDF0|EDEF+EDEF/EDEF\EDEF;
                    + DEY                                       ;;EDF3|EDF2+EDF2/EDF2\EDF2;
                      BPL CODE_02EDE6                           ;;EDF4|EDF3+EDF3/EDF3\EDF3;
Return02EDF5:         RTS                                       ;;EDF6|EDF5+EDF5/EDF5\EDF5; Return
                                                                ;;                        ;
CODE_02EDF6:          JSL GenericSprGfxRt2                      ;;EDF7|EDF6+EDF6/EDF6\EDF6;
                      LDY.W !SpriteOAMIndex,X                   ;;EDFB|EDFA+EDFA/EDFA\EDFA; Y = Index into sprite OAM
                      LDA.B !EffFrame                           ;;EDFE|EDFD+EDFD/EDFD\EDFD;
                      LSR A                                     ;;EE00|EDFF+EDFF/EDFF\EDFF;
                      LSR A                                     ;;EE01|EE00+EE00/EE00\EE00;
                      LSR A                                     ;;EE02|EE01+EE01/EE01\EE01;
                      LSR A                                     ;;EE03|EE02+EE02/EE02\EE02;
                      LDA.B #$E0                                ;;EE04|EE03+EE03/EE03\EE03;
                      BCC +                                     ;;EE06|EE05+EE05/EE05\EE05;
                      LDA.B #$E2                                ;;EE08|EE07+EE07/EE07\EE07;
                    + STA.W !OAMTileNo+$100,Y                   ;;EE0A|EE09+EE09/EE09\EE09;
                      LDA.W !OAMTileYPos+$100,Y                 ;;EE0D|EE0C+EE0C/EE0C\EE0C;
                      CMP.B #$F0                                ;;EE10|EE0F+EE0F/EE0F\EE0F;
                      BCS +                                     ;;EE12|EE11+EE11/EE11\EE11;
                      CLC                                       ;;EE14|EE13+EE13/EE13\EE13;
                      ADC.B #$03                                ;;EE15|EE14+EE14/EE14\EE14;
                      STA.W !OAMTileYPos+$100,Y                 ;;EE17|EE16+EE16/EE16\EE16;
                    + LDA.B !SpriteLock                         ;;EE1A|EE19+EE19/EE19\EE19;
                      BNE Return02EDF5                          ;;EE1C|EE1B+EE1B/EE1B\EE1B;
                      STZ.B !_0                                 ;;EE1E|EE1D+EE1D/EE1D\EE1D;
                      LDY.B #$09                                ;;EE20|EE1F+EE1F/EE1F\EE1F;
CODE_02EE21:          LDA.W !SpriteStatus,Y                     ;;EE22|EE21+EE21/EE21\EE21;
                      BEQ +                                     ;;EE25|EE24+EE24/EE24\EE24;
                      LDA.W !SpriteNumber,Y                     ;;EE27|EE26+EE26/EE26\EE26;
                      CMP.B #$61                                ;;EE2A|EE29+EE29/EE29\EE29;
                      BNE +                                     ;;EE2C|EE2B+EE2B/EE2B\EE2B;
                      LDA.W !SpriteBlockedDirs,Y                ;;EE2E|EE2D+EE2D/EE2D\EE2D;
                      AND.B #$0F                                ;;EE31|EE30+EE30/EE30\EE30;
                      BEQ +                                     ;;EE33|EE32+EE32/EE32\EE32;
                      STA.B !_0                                 ;;EE35|EE34+EE34/EE34\EE34;
                    + DEY                                       ;;EE37|EE36+EE36/EE36\EE36;
                      BPL CODE_02EE21                           ;;EE38|EE37+EE37/EE37\EE37;
                      LDA.W !SkullRaftSpeed                     ;;EE3A|EE39+EE39/EE39\EE39;
                      STA.B !SpriteXSpeed,X                     ;;EE3D|EE3C+EE3C/EE3C\EE3C;
                      LDA.B !SpriteYSpeed,X                     ;;EE3F|EE3E+EE3E/EE3E\EE3E;
                      CMP.B #$20                                ;;EE41|EE40+EE40/EE40\EE40;
                      BMI +                                     ;;EE43|EE42+EE42/EE42\EE42;
                      LDA.B #$20                                ;;EE45|EE44+EE44/EE44\EE44;
                      STA.B !SpriteYSpeed,X                     ;;EE47|EE46+EE46/EE46\EE46;
                    + JSL UpdateSpritePos                       ;;EE49|EE48+EE48/EE48\EE48;
                      LDA.W !SpriteBlockedDirs,X                ;;EE4D|EE4C+EE4C/EE4C\EE4C; \ Branch if not on ground
                      AND.B #$04                                ;;EE50|EE4F+EE4F/EE4F\EE4F;  |
                      BEQ +                                     ;;EE52|EE51+EE51/EE51\EE51; /
                      LDA.B #$10                                ;;EE54|EE53+EE53/EE53\EE53;
                      STA.B !SpriteYSpeed,X                     ;;EE56|EE55+EE55/EE55\EE55;
                    + JSL MarioSprInteract                      ;;EE58|EE57+EE57/EE57\EE57;
                      BCC Return02EEA8                          ;;EE5C|EE5B+EE5B/EE5B\EE5B;
                      LDA.B !PlayerYSpeed                       ;;EE5E|EE5D+EE5D/EE5D\EE5D;
                      BMI Return02EEA8                          ;;EE60|EE5F+EE5F/EE5F\EE5F;
                      LDA.B #$0C                                ;;EE62|EE61+EE61/EE61\EE61;
                      STA.W !SkullRaftSpeed                     ;;EE64|EE63+EE63/EE63\EE63;
                      LDA.W !SpriteOAMIndex,X                   ;;EE67|EE66+EE66/EE66\EE66;
                      TAX                                       ;;EE6A|EE69+EE69/EE69\EE69;
                      INC.W !OAMTileYPos+$100,X                 ;;EE6B|EE6A+EE6A/EE6A\EE6A;
                      LDX.W !CurSpriteProcess                   ;;EE6E|EE6D+EE6D/EE6D\EE6D; X = Sprite index
                      LDA.B #$01                                ;;EE71|EE70+EE70/EE70\EE70;
                      STA.W !StandOnSolidSprite                 ;;EE73|EE72+EE72/EE72\EE72;
                      STZ.B !PlayerInAir                        ;;EE76|EE75+EE75/EE75\EE75;
                      LDA.B #$1C                                ;;EE78|EE77+EE77/EE77\EE77;
                      LDY.W !PlayerRidingYoshi                  ;;EE7A|EE79+EE79/EE79\EE79;
                      BEQ +                                     ;;EE7D|EE7C+EE7C/EE7C\EE7C;
                      LDA.B #$2C                                ;;EE7F|EE7E+EE7E/EE7E\EE7E;
                    + STA.B !_1                                 ;;EE81|EE80+EE80/EE80\EE80;
                      LDA.B !SpriteYPosLow,X                    ;;EE83|EE82+EE82/EE82\EE82;
                      SEC                                       ;;EE85|EE84+EE84/EE84\EE84;
                      SBC.B !_1                                 ;;EE86|EE85+EE85/EE85\EE85;
                      STA.B !PlayerYPosNext                     ;;EE88|EE87+EE87/EE87\EE87;
                      LDA.W !SpriteYPosHigh,X                   ;;EE8A|EE89+EE89/EE89\EE89;
                      SBC.B #$00                                ;;EE8D|EE8C+EE8C/EE8C\EE8C;
                      STA.B !PlayerYPosNext+1                   ;;EE8F|EE8E+EE8E/EE8E\EE8E;
                      LDA.B !PlayerBlockedDir                   ;;EE91|EE90+EE90/EE90\EE90;
                      AND.B #$01                                ;;EE93|EE92+EE92/EE92\EE92;
                      BNE Return02EEA8                          ;;EE95|EE94+EE94/EE94\EE94;
                      LDY.B #$00                                ;;EE97|EE96+EE96/EE96\EE96;
                      LDA.W !SpriteXMovement                    ;;EE99|EE98+EE98/EE98\EE98;
                      BPL +                                     ;;EE9C|EE9B+EE9B/EE9B\EE9B;
                      DEY                                       ;;EE9E|EE9D+EE9D/EE9D\EE9D;
                    + CLC                                       ;;EE9F|EE9E+EE9E/EE9E\EE9E;
                      ADC.B !PlayerXPosNext                     ;;EEA0|EE9F+EE9F/EE9F\EE9F;
                      STA.B !PlayerXPosNext                     ;;EEA2|EEA1+EEA1/EEA1\EEA1;
                      TYA                                       ;;EEA4|EEA3+EEA3/EEA3\EEA3;
                      ADC.B !PlayerXPosNext+1                   ;;EEA5|EEA4+EEA4/EEA4\EEA4;
                      STA.B !PlayerXPosNext+1                   ;;EEA7|EEA6+EEA6/EEA6\EEA6;
Return02EEA8:         RTS                                       ;;EEA9|EEA8+EEA8/EEA8\EEA8; Return
                                                                ;;                        ;
CoinCloudMain:        PHB                                       ;;EEAA|EEA9+EEA9/EEA9\EEA9;
                      PHK                                       ;;EEAB|EEAA+EEAA/EEAA\EEAA;
                      PLB                                       ;;EEAC|EEAB+EEAB/EEAB\EEAB;
                      JSR CoinCloudMainLocal                    ;;EEAD|EEAC+EEAC/EEAC\EEAC;
                      PLB                                       ;;EEB0|EEAF+EEAF/EEAF\EEAF;
                      RTL                                       ;;EEB1|EEB0+EEB0/EEB0\EEB0; Return
                                                                ;;                        ;
                                                                ;;                        ;
CoinCloudYAccel:      db $01,$FF                                ;;EEB2|EEB1+EEB1/EEB1\EEB1;
                                                                ;;                        ;
CoinCloudYSpeedMax:   db $10,$F0                                ;;EEB4|EEB3+EEB3/EEB3\EEB3;
                                                                ;;                        ;
CoinCloudMainLocal:   LDA.B !SpriteTableC2,X                    ;;EEB6|EEB5+EEB5/EEB5\EEB5; Flag for zeroing coin game count
                      BNE .skipCountInit                        ;;EEB8|EEB7+EEB7/EEB7\EEB7;
                      INC.B !SpriteTableC2,X                    ;;EEBA|EEB9+EEB9/EEB9\EEB9;
                      STZ.W !GameCloudCoinCount                 ;;EEBC|EEBB+EEBB/EEBB\EEBB;
.skipCountInit:       LDA.B !SpriteLock                         ;;EEBF|EEBE+EEBE/EEBE\EEBE;
                      BNE CoinCloudGfx                          ;;EEC1|EEC0+EEC0/EEC0\EEC0;
                      LDA.B !EffFrame                           ;;EEC3|EEC2+EEC2/EEC2\EEC2;
                      AND.B #$7F                                ;;EEC5|EEC4+EEC4/EEC4\EEC4;
                      BNE .dontSpawnSpr                         ;;EEC7|EEC6+EEC6/EEC6\EEC6;
                      LDA.W !SpriteMisc1570,X                   ;;EEC9|EEC8+EEC8/EEC8\EEC8;
                      CMP.B #$0B                                ;;EECC|EECB+EECB/EECB\EECB;
                      BCS .dontSpawnSpr                         ;;EECE|EECD+EECD/EECD\EECD;
                      INC.W !SpriteMisc1570,X                   ;;EED0|EECF+EECF/EECF\EECF;
                      JSR CoinGameSpawnSpr                      ;;EED3|EED2+EED2/EED2\EED2;
.dontSpawnSpr:        LDA.B !EffFrame                           ;;EED6|EED5+EED5/EED5\EED5;
                      AND.B #$01                                ;;EED8|EED7+EED7/EED7\EED7;
                      BNE .dontApplyYAccel                      ;;EEDA|EED9+EED9/EED9\EED9;
                      LDA.B !SpriteYPosLow,X                    ;;EEDC|EEDB+EEDB/EEDB\EEDB;
                      STA.B !_0                                 ;;EEDE|EEDD+EEDD/EEDD\EEDD;
                      LDA.W !SpriteYPosHigh,X                   ;;EEE0|EEDF+EEDF/EEDF\EEDF;
                      STA.B !_1                                 ;;EEE3|EEE2+EEE2/EEE2\EEE2;
                      LDA.B #$10                                ;;EEE5|EEE4+EEE4/EEE4\EEE4;
                      STA.B !_2                                 ;;EEE7|EEE6+EEE6/EEE6\EEE6;
                      LDA.B #$01                                ;;EEE9|EEE8+EEE8/EEE8\EEE8;
                      STA.B !_3                                 ;;EEEB|EEEA+EEEA/EEEA\EEEA;
                      REP #$20                                  ;;EEED|EEEC+EEEC/EEEC\EEEC; Accum (16 bit)
                      LDA.B !_0                                 ;;EEEF|EEEE+EEEE/EEEE\EEEE;
                      CMP.B !_2                                 ;;EEF1|EEF0+EEF0/EEF0\EEF0;
                      SEP #$20                                  ;;EEF3|EEF2+EEF2/EEF2\EEF2; Accum (8 bit)
                      LDY.B #$00                                ;;EEF5|EEF4+EEF4/EEF4\EEF4;
                      BCC .movingDown                           ;;EEF7|EEF6+EEF6/EEF6\EEF6;
                      INY                                       ;;EEF9|EEF8+EEF8/EEF8\EEF8;
.movingDown:          LDA.W !SpriteMisc1570,X                   ;;EEFA|EEF9+EEF9/EEF9\EEF9;
                      CMP.B #$0B                                ;;EEFD|EEFC+EEFC/EEFC\EEFC;
                      BCC .spawned10Coins                       ;;EEFF|EEFE+EEFE/EEFE\EEFE;
                      JSR SubOffscreen0Bnk2                     ;;EF01|EF00+EF00/EF00\EF00;
                      LDY.B #$01                                ;;EF04|EF03+EF03/EF03\EF03;
.spawned10Coins:      LDA.B !SpriteYSpeed,X                     ;;EF06|EF05+EF05/EF05\EF05;
                      CMP.W CoinCloudYSpeedMax,Y                ;;EF08|EF07+EF07/EF07\EF07;
                      BEQ .dontApplyYAccel                      ;;EF0B|EF0A+EF0A/EF0A\EF0A;
                      CLC                                       ;;EF0D|EF0C+EF0C/EF0C\EF0C;
                      ADC.W CoinCloudYAccel,Y                   ;;EF0E|EF0D+EF0D/EF0D\EF0D;
                      STA.B !SpriteYSpeed,X                     ;;EF11|EF10+EF10/EF10\EF10;
.dontApplyYAccel:     JSR UpdateYPosNoGrvty                     ;;EF13|EF12+EF12/EF12\EF12;
                      LDA.B #$08                                ;;EF16|EF15+EF15/EF15\EF15;
                      STA.B !SpriteXSpeed,X                     ;;EF18|EF17+EF17/EF17\EF17;
                      JSR UpdateXPosNoGrvty                     ;;EF1A|EF19+EF19/EF19\EF19;
CoinCloudGfx:         LDA.W !SpriteOAMIndex,X                   ;;EF1D|EF1C+EF1C/EF1C\EF1C;
                      PHA                                       ;;EF20|EF1F+EF1F/EF1F\EF1F;
                      CLC                                       ;;EF21|EF20+EF20/EF20\EF20;
                      ADC.B #$04                                ;;EF22|EF21+EF21/EF21\EF21;
                      STA.W !SpriteOAMIndex,X                   ;;EF24|EF23+EF23/EF23\EF23;
                      JSL GenericSprGfxRt2                      ;;EF27|EF26+EF26/EF26\EF26;
                      LDY.W !SpriteOAMIndex,X                   ;;EF2B|EF2A+EF2A/EF2A\EF2A; Y = Index into sprite OAM
                      LDA.B #$60                                ;;EF2E|EF2D+EF2D/EF2D\EF2D; smiley face tile
                      STA.W !OAMTileNo+$100,Y                   ;;EF30|EF2F+EF2F/EF2F\EF2F;
                      LDA.B !EffFrame                           ;;EF33|EF32+EF32/EF32\EF32;
                      ASL A                                     ;;EF35|EF34+EF34/EF34\EF34;
                      ASL A                                     ;;EF36|EF35+EF35/EF35\EF35;
                      ASL A                                     ;;EF37|EF36+EF36/EF36\EF36;
                      AND.B #$C0                                ;;EF38|EF37+EF37/EF37\EF37;
                      ORA.B #$30                                ;;EF3A|EF39+EF39/EF39\EF39;
                      STA.W !OAMTileAttr+$100,Y                 ;;EF3C|EF3B+EF3B/EF3B\EF3B;
                      PLA                                       ;;EF3F|EF3E+EF3E/EF3E\EF3E;
                      STA.W !SpriteOAMIndex,X                   ;;EF40|EF3F+EF3F/EF3F\EF3F;
                      JSR GetDrawInfo2                          ;;EF43|EF42+EF42/EF42\EF42;
                      LDA.B !_0                                 ;;EF46|EF45+EF45/EF45\EF45;
                      CLC                                       ;;EF48|EF47+EF47/EF47\EF47;
                      ADC.B #$04                                ;;EF49|EF48+EF48/EF48\EF48;
                      STA.W !OAMTileXPos+$100,Y                 ;;EF4B|EF4A+EF4A/EF4A\EF4A;
                      LDA.B !_1                                 ;;EF4E|EF4D+EF4D/EF4D\EF4D;
                      CLC                                       ;;EF50|EF4F+EF4F/EF4F\EF4F;
                      ADC.B #$04                                ;;EF51|EF50+EF50/EF50\EF50;
                      STA.W !OAMTileYPos+$100,Y                 ;;EF53|EF52+EF52/EF52\EF52;
                      LDA.B #$4D                                ;;EF56|EF55+EF55/EF55\EF55;
                      STA.W !OAMTileNo+$100,Y                   ;;EF58|EF57+EF57/EF57\EF57;
                      LDA.B #$39                                ;;EF5B|EF5A+EF5A/EF5A\EF5A;
                      STA.W !OAMTileAttr+$100,Y                 ;;EF5D|EF5C+EF5C/EF5C\EF5C;
                      LDY.B #$00                                ;;EF60|EF5F+EF5F/EF5F\EF5F;
                      LDA.B #$00                                ;;EF62|EF61+EF61/EF61\EF61;
                      JSR CallFinOAMWriteBank2                  ;;EF64|EF63+EF63/EF63\EF63;
                      RTS                                       ;;EF67|EF66+EF66/EF66\EF66; Return
                                                                ;;                        ;
CoinGameSpawnSpr:     LDA.W !GameCloudCoinCount                 ;;EF68|EF67+EF67/EF67\EF67;
                      CMP.B #$0A                                ;;EF6B|EF6A+EF6A/EF6A\EF6A; \ If < 10 coins collected,
                      BCC CoinGameSpawnExtCoin                  ;;EF6D|EF6C+EF6C/EF6C\EF6C; / spawn the extended coin sprite instead
                      LDY.B #$0B                                ;;EF6F|EF6E+EF6E/EF6E\EF6E; Spawning a powerup (1-up) so all slots are looped over
.loopNextSprSlot:     LDA.W !SpriteStatus,Y                     ;;EF71|EF70+EF70/EF70\EF70;
                      BEQ .sprSlotFound                         ;;EF74|EF73+EF73/EF73\EF73;
                      DEY                                       ;;EF76|EF75+EF75/EF75\EF75;
                      CPY.B #$09                                ;;EF77|EF76+EF76/EF76\EF76;
                      BNE .loopNextSprSlot                      ;;EF79|EF78+EF78/EF78\EF78;
                      RTS                                       ;;EF7B|EF7A+EF7A/EF7A\EF7A; Return: no slot found
                                                                ;;                        ;
.sprSlotFound:        LDA.B #$08                                ;;EF7C|EF7B+EF7B/EF7B\EF7B; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;EF7E|EF7D+EF7D/EF7D\EF7D; /
                      LDA.B #$78                                ;;EF81|EF80+EF80/EF80\EF80;
                      STA.W !SpriteNumber,Y                     ;;EF83|EF82+EF82/EF82\EF82;
                      LDA.B !SpriteXPosLow,X                    ;;EF86|EF85+EF85/EF85\EF85;
                      STA.W !SpriteXPosLow,Y                    ;;EF88|EF87+EF87/EF87\EF87;
                      LDA.W !SpriteXPosHigh,X                   ;;EF8B|EF8A+EF8A/EF8A\EF8A;
                      STA.W !SpriteXPosHigh,Y                   ;;EF8E|EF8D+EF8D/EF8D\EF8D;
                      LDA.B !SpriteYPosLow,X                    ;;EF91|EF90+EF90/EF90\EF90;
                      STA.W !SpriteYPosLow,Y                    ;;EF93|EF92+EF92/EF92\EF92;
                      LDA.W !SpriteYPosHigh,X                   ;;EF96|EF95+EF95/EF95\EF95;
                      STA.W !SpriteYPosHigh,Y                   ;;EF99|EF98+EF98/EF98\EF98;
                      PHX                                       ;;EF9C|EF9B+EF9B/EF9B\EF9B;
                      TYX                                       ;;EF9D|EF9C+EF9C/EF9C\EF9C;
                      JSL InitSpriteTables                      ;;EF9E|EF9D+EF9D/EF9D\EF9D;
                      LDA.B #$E0                                ;;EFA2|EFA1+EFA1/EFA1\EFA1;
                      STA.B !SpriteYSpeed,X                     ;;EFA4|EFA3+EFA3/EFA3\EFA3;
                      INC.W !SpriteMisc157C,X                   ;;EFA6|EFA5+EFA5/EFA5\EFA5;
                      PLX                                       ;;EFA9|EFA8+EFA8/EFA8\EFA8;
                      RTS                                       ;;EFAA|EFA9+EFA9/EFA9\EFA9; Return
                                                                ;;                        ;
CoinGameSpawnExtCoin: LDA.W !SpriteMisc1570,X                   ;;EFAB|EFAA+EFAA/EFAA\EFAA;
                      CMP.B #$0B                                ;;EFAE|EFAD+EFAD/EFAD\EFAD;
                      BCS .noSpawnCoin                          ;;EFB0|EFAF+EFAF/EFAF\EFAF;
                      LDY.B #$07                                ;;EFB2|EFB1+EFB1/EFB1\EFB1; \ Find a free extended sprite slot
.loopNextExtSlot:     LDA.W !ExtSpriteNumber,Y                  ;;EFB4|EFB3+EFB3/EFB3\EFB3;  |
                      BEQ .extSlotFound                         ;;EFB7|EFB6+EFB6/EFB6\EFB6;  |
                      DEY                                       ;;EFB9|EFB8+EFB8/EFB8\EFB8;  |
                      BPL .loopNextExtSlot                      ;;EFBA|EFB9+EFB9/EFB9\EFB9;  |
.noSpawnCoin:         RTS                                       ;;EFBC|EFBB+EFBB/EFBB\EFBB; / Return if no free slots
                                                                ;;                        ;
.extSlotFound:        LDA.B #$0A                                ;;EFBD|EFBC+EFBC/EFBC\EFBC; \ Extended sprite = Cloud game coin
                      STA.W !ExtSpriteNumber,Y                  ;;EFBF|EFBE+EFBE/EFBE\EFBE; /
                      LDA.B !SpriteXPosLow,X                    ;;EFC2|EFC1+EFC1/EFC1\EFC1;
                      CLC                                       ;;EFC4|EFC3+EFC3/EFC3\EFC3;
                      ADC.B #$04                                ;;EFC5|EFC4+EFC4/EFC4\EFC4;
                      STA.W !ExtSpriteXPosLow,Y                 ;;EFC7|EFC6+EFC6/EFC6\EFC6;
                      LDA.W !SpriteXPosHigh,X                   ;;EFCA|EFC9+EFC9/EFC9\EFC9;
                      ADC.B #$00                                ;;EFCD|EFCC+EFCC/EFCC\EFCC;
                      STA.W !ExtSpriteXPosHigh,Y                ;;EFCF|EFCE+EFCE/EFCE\EFCE;
                      LDA.B !SpriteYPosLow,X                    ;;EFD2|EFD1+EFD1/EFD1\EFD1;
                      STA.W !ExtSpriteYPosLow,Y                 ;;EFD4|EFD3+EFD3/EFD3\EFD3;
                      LDA.W !SpriteYPosHigh,X                   ;;EFD7|EFD6+EFD6/EFD6\EFD6;
                      STA.W !ExtSpriteYPosHigh,Y                ;;EFDA|EFD9+EFD9/EFD9\EFD9;
                      LDA.B #$D0                                ;;EFDD|EFDC+EFDC/EFDC\EFDC;
                      STA.W !ExtSpriteYSpeed,Y                  ;;EFDF|EFDE+EFDE/EFDE\EFDE;
                      LDA.B #$00                                ;;EFE2|EFE1+EFE1/EFE1\EFE1;
                      STA.W !ExtSpriteXSpeed,Y                  ;;EFE4|EFE3+EFE3/EFE3\EFE3;
                      STA.W !ExtSpriteMisc1765,Y                ;;EFE7|EFE6+EFE6/EFE6\EFE6;
                      RTS                                       ;;EFEA|EFE9+EFE9/EFE9\EFE9; Return
                                                                ;;                        ;
                                                                ;;                        ;
WigglerSegBuffOffLo:  db $00,$80,$00,$80                        ;;EFEB|EFEA+EFEA/EFEA\EFEA;
                                                                ;;                        ;
WigglerSegBuffOffHi:  db $00,$00,$01,$01                        ;;EFEF|EFEE+EFEE/EFEE\EFEE;
                                                                ;;                        ;
WigglerInit:          PHB                                       ;;EFF3|EFF2+EFF2/EFF2\EFF2;
                      PHK                                       ;;EFF4|EFF3+EFF3/EFF3\EFF3;
                      PLB                                       ;;EFF5|EFF4+EFF4/EFF4\EFF4;
                      JSR InitWigglerSgmtPtr                    ;;EFF6|EFF5+EFF5/EFF5\EFF5;
                      LDY.B #$7E                                ;;EFF9|EFF8+EFF8/EFF8\EFF8;
                    - LDA.B !SpriteXPosLow,X                    ;;EFFB|EFFA+EFFA/EFFA\EFFA;
                      STA.B [!WigglerSegmentPtr],Y              ;;EFFD|EFFC+EFFC/EFFC\EFFC;
                      LDA.B !SpriteYPosLow,X                    ;;EFFF|EFFE+EFFE/EFFE\EFFE;
                      INY                                       ;;F001|F000+F000/F000\F000;
                      STA.B [!WigglerSegmentPtr],Y              ;;F002|F001+F001/F001\F001;
                      DEY                                       ;;F004|F003+F003/F003\F003;
                      DEY                                       ;;F005|F004+F004/F004\F004;
                      DEY                                       ;;F006|F005+F005/F005\F005;
                      BPL -                                     ;;F007|F006+F006/F006\F006;
                      JSR SubHorizPosBnk2                       ;;F009|F008+F008/F008\F008;
                      TYA                                       ;;F00C|F00B+F00B/F00B\F00B;
                      STA.W !SpriteMisc157C,X                   ;;F00D|F00C+F00C/F00C\F00C;
                      PLB                                       ;;F010|F00F+F00F/F00F\F00F;
                      RTL                                       ;;F011|F010+F010/F010\F010; Return
                                                                ;;                        ;
InitWigglerSgmtPtr:   TXA                                       ;;F012|F011+F011/F011\F011;
                      AND.B #$03                                ;;F013|F012+F012/F012\F012;
                      TAY                                       ;;F015|F014+F014/F014\F014;
                      LDA.B #!WigglerTable                      ;;F016|F015+F015/F015\F015;
                      CLC                                       ;;F018|F017+F017/F017\F017;
                      ADC.W WigglerSegBuffOffLo,Y               ;;F019|F018+F018/F018\F018;
                      STA.B !WigglerSegmentPtr                  ;;F01C|F01B+F01B/F01B\F01B;
                      LDA.B #!WigglerTable>>8                   ;;F01E|F01D+F01D/F01D\F01D;
                      ADC.W WigglerSegBuffOffHi,Y               ;;F020|F01F+F01F/F01F\F01F;
                      STA.B !WigglerSegmentPtr+1                ;;F023|F022+F022/F022\F022;
                      LDA.B #!WigglerTable>>16                  ;;F025|F024+F024/F024\F024;
                      STA.B !WigglerSegmentPtr+2                ;;F027|F026+F026/F026\F026;
                      RTS                                       ;;F029|F028+F028/F028\F028; Return
                                                                ;;                        ;
WigglerMain:          PHB                                       ;;F02A|F029+F029/F029\F029;
                      PHK                                       ;;F02B|F02A+F02A/F02A\F02A;
                      PLB                                       ;;F02C|F02B+F02B/F02B\F02B;
                      JSR WigglerMainRt                         ;;F02D|F02C+F02C/F02C\F02C;
                      PLB                                       ;;F030|F02F+F02F/F02F\F02F;
                      RTL                                       ;;F031|F030+F030/F030\F030; Return
                                                                ;;                        ;
                                                                ;;                        ;
WigglerSpeeds:        db $08,$F8,$10,$F0                        ;;F032|F031+F031/F031\F031; Speeds moving right, left, angry right, angry left
                                                                ;;                        ;
WigglerMainRt:        JSR InitWigglerSgmtPtr                    ;;F036|F035+F035/F035\F035;
                      LDA.B !SpriteLock                         ;;F039|F038+F038/F038\F038;
                      BEQ .noSprLock                            ;;F03B|F03A+F03A/F03A\F03A;
                      JMP WigglerDoGfx                          ;;F03D|F03C+F03C/F03C\F03C;
                                                                ;;                        ;
.noSprLock:           JSL SprSprInteract                        ;;F040|F03F+F03F/F03F\F03F;
                      LDA.W !SpriteMisc1540,X                   ;;F044|F043+F043/F043\F043;
                      BEQ .notStunned                           ;;F047|F046+F046/F046\F046;
                      CMP.B #$01                                ;;F049|F048+F048/F048\F048;
                      BNE .paletteCycle                         ;;F04B|F04A+F04A/F04A\F04A;
                      LDA.B #$08                                ;;F04D|F04C+F04C/F04C\F04C;
                      BRA .noPaletteCycle                       ;;F04F|F04E+F04E/F04E\F04E;
                                                                ;;                        ;
.paletteCycle:        AND.B #$0E                                ;;F051|F050+F050/F050\F050; Use value of timer as palette
.noPaletteCycle:      STA.B !_0                                 ;;F053|F052+F052/F052\F052;
                      LDA.W !SpriteOBJAttribute,X               ;;F055|F054+F054/F054\F054;
                      AND.B #$F1                                ;;F058|F057+F057/F057\F057;
                      ORA.B !_0                                 ;;F05A|F059+F059/F059\F059;
                      STA.W !SpriteOBJAttribute,X               ;;F05C|F05B+F05B/F05B\F05B;
                      JMP WigglerDoGfx                          ;;F05F|F05E+F05E/F05E\F05E;
                                                                ;;                        ;
.notStunned:          JSR UpdateXPosNoGrvty                     ;;F062|F061+F061/F061\F061;
                      JSR UpdateYPosNoGrvty                     ;;F065|F064+F064/F064\F064;
                      JSR SubOffscreen0Bnk2                     ;;F068|F067+F067/F067\F067;
                      INC.W !SpriteMisc1570,X                   ;;F06B|F06A+F06A/F06A\F06A; Animation frame counter
                      LDA.W !SpriteMisc151C,X                   ;;F06E|F06D+F06D/F06D\F06D; \ Branch if wiggler isn't angry (hasn't yet been jumped on)
                      BEQ .notAngry1                            ;;F071|F070+F070/F070\F070; /
                      INC.W !SpriteMisc1570,X                   ;;F073|F072+F072/F072\F072;
                      INC.W !SpriteMisc1534,X                   ;;F076|F075+F075/F075\F075;
                      LDA.W !SpriteMisc1534,X                   ;;F079|F078+F078/F078\F078;
                      AND.B #$3F                                ;;F07C|F07B+F07B/F07B\F07B;
                      BNE .notAngry1                            ;;F07E|F07D+F07D/F07D\F07D;
                      JSR SubHorizPosBnk2                       ;;F080|F07F+F07F/F07F\F07F;
                      TYA                                       ;;F083|F082+F082/F082\F082;
                      STA.W !SpriteMisc157C,X                   ;;F084|F083+F083/F083\F083;
.notAngry1:           LDY.W !SpriteMisc157C,X                   ;;F087|F086+F086/F086\F086;
                      LDA.W !SpriteMisc151C,X                   ;;F08A|F089+F089/F089\F089;
                      BEQ .notAngry2                            ;;F08D|F08C+F08C/F08C\F08C;
                      INY                                       ;;F08F|F08E+F08E/F08E\F08E;
                      INY                                       ;;F090|F08F+F08F/F08F\F08F;
.notAngry2:           LDA.W WigglerSpeeds,Y                     ;;F091|F090+F090/F090\F090;
                      STA.B !SpriteXSpeed,X                     ;;F094|F093+F093/F093\F093;
                      INC.B !SpriteYSpeed,X                     ;;F096|F095+F095/F095\F095;
                      JSL SprObjInteract                        ;;F098|F097+F097/F097\F097;
                      LDA.W !SpriteBlockedDirs,X                ;;F09C|F09B+F09B/F09B\F09B; \ Branch if touching object
                      AND.B #$03                                ;;F09F|F09E+F09E/F09E\F09E;  |
                      BNE CODE_02F0AE                           ;;F0A1|F0A0+F0A0/F0A0\F0A0; /
                      LDA.W !SpriteBlockedDirs,X                ;;F0A3|F0A2+F0A2/F0A2\F0A2; \ Branch if not on ground
                      AND.B #$04                                ;;F0A6|F0A5+F0A5/F0A5\F0A5;  |
                      BEQ CODE_02F0AE                           ;;F0A8|F0A7+F0A7/F0A7\F0A7; /
                      JSR CODE_02FFD1                           ;;F0AA|F0A9+F0A9/F0A9\F0A9;
                      BRA +                                     ;;F0AD|F0AC+F0AC/F0AC\F0AC;
                                                                ;;                        ;
CODE_02F0AE:          LDA.W !SpriteMisc15AC,X                   ;;F0AF|F0AE+F0AE/F0AE\F0AE;
                      BNE +                                     ;;F0B2|F0B1+F0B1/F0B1\F0B1;
                      LDA.W !SpriteMisc157C,X                   ;;F0B4|F0B3+F0B3/F0B3\F0B3;
                      EOR.B #$01                                ;;F0B7|F0B6+F0B6/F0B6\F0B6;
                      STA.W !SpriteMisc157C,X                   ;;F0B9|F0B8+F0B8/F0B8\F0B8;
                      STZ.W !SpriteMisc1602,X                   ;;F0BC|F0BB+F0BB/F0BB\F0BB;
                      LDA.B #$08                                ;;F0BF|F0BE+F0BE/F0BE\F0BE;
                      STA.W !SpriteMisc15AC,X                   ;;F0C1|F0C0+F0C0/F0C0\F0C0;
                    + JSR WigglerUpdateSegBuff                  ;;F0C4|F0C3+F0C3/F0C3\F0C3;
                      LDA.W !SpriteMisc1602,X                   ;;F0C7|F0C6+F0C6/F0C6\F0C6;
                      INC.W !SpriteMisc1602,X                   ;;F0CA|F0C9+F0C9/F0C9\F0C9;
                      AND.B #$07                                ;;F0CD|F0CC+F0CC/F0CC\F0CC;
                      BNE WigglerDoGfx                          ;;F0CF|F0CE+F0CE/F0CE\F0CE;
                      LDA.B !SpriteTableC2,X                    ;;F0D1|F0D0+F0D0/F0D0\F0D0;
                      ASL A                                     ;;F0D3|F0D2+F0D2/F0D2\F0D2;
                      ORA.W !SpriteMisc157C,X                   ;;F0D4|F0D3+F0D3/F0D3\F0D3;
                      STA.B !SpriteTableC2,X                    ;;F0D7|F0D6+F0D6/F0D6\F0D6;
WigglerDoGfx:         JMP WigglerGfx                            ;;F0D9|F0D8+F0D8/F0D8\F0D8;
                                                                ;;                        ;
WigglerUpdateSegBuff: PHX                                       ;;F0DC|F0DB+F0DB/F0DB\F0DB;
                      PHB                                       ;;F0DD|F0DC+F0DC/F0DC\F0DC;
                      REP #$30                                  ;;F0DE|F0DD+F0DD/F0DD\F0DD; Index (16 bit) Accum (16 bit)
                      LDA.B !WigglerSegmentPtr                  ;;F0E0|F0DF+F0DF/F0DF\F0DF;
                      CLC                                       ;;F0E2|F0E1+F0E1/F0E1\F0E1;
                      ADC.W #$007D                              ;;F0E3|F0E2+F0E2/F0E2\F0E2;
                      TAX                                       ;;F0E6|F0E5+F0E5/F0E5\F0E5; MVP Source: Segment buffer + $7D
                      LDA.B !WigglerSegmentPtr                  ;;F0E7|F0E6+F0E6/F0E6\F0E6;
                      CLC                                       ;;F0E9|F0E8+F0E8/F0E8\F0E8;
                      ADC.W #$007F                              ;;F0EA|F0E9+F0E9/F0E9\F0E9;
                      TAY                                       ;;F0ED|F0EC+F0EC/F0EC\F0EC; MVP Destination: Segment buffer + $7F
                      LDA.W #$007D                              ;;F0EE|F0ED+F0ED/F0ED\F0ED; Size: $7D bytes
                      MVP !WigglerTable>>16,!WigglerTable>>16   ;;F0F1|F0F0+F0F0/F0F0\F0F0; This moves every byte in the buffer down (to a higher address) by two bytes.
                      SEP #$30                                  ;;F0F4|F0F3+F0F3/F0F3\F0F3; Index (8 bit) Accum (8 bit)
                      PLB                                       ;;F0F6|F0F5+F0F5/F0F5\F0F5;
                      PLX                                       ;;F0F7|F0F6+F0F6/F0F6\F0F6;
                      LDY.B #$00                                ;;F0F8|F0F7+F0F7/F0F7\F0F7; \ Now simply set the current
                      LDA.B !SpriteXPosLow,X                    ;;F0FA|F0F9+F0F9/F0F9\F0F9; | \ x position in the buffer
                      STA.B [!WigglerSegmentPtr],Y              ;;F0FC|F0FB+F0FB/F0FB\F0FB; | /
                      LDA.B !SpriteYPosLow,X                    ;;F0FE|F0FD+F0FD/F0FD\F0FD; | \ y position in the buffer
                      INY                                       ;;F100|F0FF+F0FF/F0FF\F0FF; | |
                      STA.B [!WigglerSegmentPtr],Y              ;;F101|F100+F100/F100\F100; / /
                      RTS                                       ;;F103|F102+F102/F102\F102; Return
                                                                ;;                        ;
                                                                ;;                        ;
WigSegBuffPartOff:    db $00,$1E,$3E,$5E,$7E                    ;;F104|F103+F103/F103\F103; Initial Offset into the segment buffer, head
                                                                ;;                        ; and then following body parts.
DATA_02F108:          db $00,$01,$02,$01                        ;;F109|F108+F108/F108\F108;
                                                                ;;                        ;
WigglerBodyTiles:     db $C4,$C6,$C8,$C6                        ;;F10D|F10C+F10C/F10C\F10C;
                                                                ;;                        ;
WigglerGfx:           JSR GetDrawInfo2                          ;;F111|F110+F110/F110\F110;
                      LDA.W !SpriteMisc1570,X                   ;;F114|F113+F113/F113\F113;
                      STA.B !_3                                 ;;F117|F116+F116/F116\F116;
                      LDA.W !SpriteOBJAttribute,X               ;;F119|F118+F118/F118\F118;
                      STA.B !_7                                 ;;F11C|F11B+F11B/F11B\F11B;
                      LDA.W !SpriteMisc151C,X                   ;;F11E|F11D+F11D/F11D\F11D;
                      STA.B !_8                                 ;;F121|F120+F120/F120\F120;
                      LDA.B !SpriteTableC2,X                    ;;F123|F122+F122/F122\F122;
                      STA.B !_2                                 ;;F125|F124+F124/F124\F124;
                      TYA                                       ;;F127|F126+F126/F126\F126;
                      CLC                                       ;;F128|F127+F127/F127\F127;
                      ADC.B #$04                                ;;F129|F128+F128/F128\F128;
                      TAY                                       ;;F12B|F12A+F12A/F12A\F12A;
                      LDX.B #$00                                ;;F12C|F12B+F12B/F12B\F12B;
CODE_02F12D:          PHX                                       ;;F12E|F12D+F12D/F12D\F12D;
                      STX.B !_5                                 ;;F12F|F12E+F12E/F12E\F12E;
                      LDA.B !_3                                 ;;F131|F130+F130/F130\F130;
                      LSR A                                     ;;F133|F132+F132/F132\F132;
                      LSR A                                     ;;F134|F133+F133/F133\F133;
                      LSR A                                     ;;F135|F134+F134/F134\F134;
                      NOP                                       ;;F136|F135+F135/F135\F135;
                      NOP                                       ;;F137|F136+F136/F136\F136;
                      NOP                                       ;;F138|F137+F137/F137\F137;
                      NOP                                       ;;F139|F138+F138/F138\F138;
                      CLC                                       ;;F13A|F139+F139/F139\F139;
                      ADC.B !_5                                 ;;F13B|F13A+F13A/F13A\F13A;
                      AND.B #$03                                ;;F13D|F13C+F13C/F13C\F13C;
                      STA.B !_6                                 ;;F13F|F13E+F13E/F13E\F13E;
                      PHY                                       ;;F141|F140+F140/F140\F140; Push OAM Mirror offset
                      LDY.W WigSegBuffPartOff,X                 ;;F142|F141+F141/F141\F141; Load initial offset to segment position buffer
                      LDA.B !_8                                 ;;F145|F144+F144/F144\F144; \ Load 151C,x backup
                      BEQ +                                     ;;F147|F146+F146/F146\F146; | If wiggler is angry,
                      TYA                                       ;;F149|F148+F148/F148\F148; | buffer index to A
                      LSR A                                     ;;F14A|F149+F149/F149\F149; | halve the buffer offset
                      AND.B #$FE                                ;;F14B|F14A+F14A/F14A\F14A; | truncate range (x,y pair)
                      TAY                                       ;;F14D|F14C+F14C/F14C\F14C; / restore buffer offset to Y
                    + STY.B !_9                                 ;;F14E|F14D+F14D/F14D\F14D; Backup wiggler buffer index
                      LDA.B [!WigglerSegmentPtr],Y              ;;F150|F14F+F14F/F14F\F14F; > Load buffer x position for this tile
                      PLY                                       ;;F152|F151+F151/F151\F151; Pull OAM Mirror offset into Y
                      SEC                                       ;;F153|F152+F152/F152\F152; \ Calculate x position relative
                      SBC.B !Layer1XPos                         ;;F154|F153+F153/F153\F153; / to camera
                      STA.W !OAMTileXPos+$100,Y                 ;;F156|F155+F155/F155\F155;
                      PHY                                       ;;F159|F158+F158/F158\F158; Push OAM Mirror offset
                      LDY.B !_9                                 ;;F15A|F159+F159/F159\F159; Load wiggler buffer index
                      INY                                       ;;F15C|F15B+F15B/F15B\F15B; \ Load buffer y position for this tile
                      LDA.B [!WigglerSegmentPtr],Y              ;;F15D|F15C+F15C/F15C\F15C; /
                      PLY                                       ;;F15F|F15E+F15E/F15E\F15E; Pull OAM Mirror offset into Y
                      SEC                                       ;;F160|F15F+F15F/F15F\F15F; \ Calculate y position relative
                      SBC.B !Layer1YPos                         ;;F161|F160+F160/F160\F160; / to camera
                      LDX.B !_6                                 ;;F163|F162+F162/F162\F162;
                      SEC                                       ;;F165|F164+F164/F164\F164;
                      %LorW_X(SBC,DATA_02F108)                  ;;F166|F165+F165/F165\F165;
                      STA.W !OAMTileYPos+$100,Y                 ;;F16A|F168+F168/F168\F168;
                      PLX                                       ;;F16D|F16B+F16B/F16B\F16B;
                      PHX                                       ;;F16E|F16C+F16C/F16C\F16C;
                      LDA.B #$8C                                ;;F16F|F16D+F16D/F16D\F16D; Wiggler's head tile
                      CPX.B #$00                                ;;F171|F16F+F16F/F16F\F16F;
                      BEQ +                                     ;;F173|F171+F171/F171\F171;
                      LDX.B !_6                                 ;;F175|F173+F173/F173\F173;
                      %LorW_X(LDA,WigglerBodyTiles)             ;;F177|F175+F175/F175\F175;
                    + STA.W !OAMTileNo+$100,Y                   ;;F17B|F178+F178/F178\F178;
                      PLX                                       ;;F17E|F17B+F17B/F17B\F17B;
                      LDA.B !_7                                 ;;F17F|F17C+F17C/F17C\F17C;
                      ORA.B !SpriteProperties                   ;;F181|F17E+F17E/F17E\F17E;
                      LSR.B !_2                                 ;;F183|F180+F180/F180\F180;
                      BCS +                                     ;;F185|F182+F182/F182\F182;
                      ORA.B #$40                                ;;F187|F184+F184/F184\F184;
                    + STA.W !OAMTileAttr+$100,Y                 ;;F189|F186+F186/F186\F186;
                      PHY                                       ;;F18C|F189+F189/F189\F189;
                      TYA                                       ;;F18D|F18A+F18A/F18A\F18A;
                      LSR A                                     ;;F18E|F18B+F18B/F18B\F18B;
                      LSR A                                     ;;F18F|F18C+F18C/F18C\F18C;
                      TAY                                       ;;F190|F18D+F18D/F18D\F18D;
                      LDA.B #$02                                ;;F191|F18E+F18E/F18E\F18E;
                      STA.W !OAMTileSize+$40,Y                  ;;F193|F190+F190/F190\F190;
                      PLY                                       ;;F196|F193+F193/F193\F193;
                      INY                                       ;;F197|F194+F194/F194\F194;
                      INY                                       ;;F198|F195+F195/F195\F195;
                      INY                                       ;;F199|F196+F196/F196\F196;
                      INY                                       ;;F19A|F197+F197/F197\F197;
                      INX                                       ;;F19B|F198+F198/F198\F198;
                      CPX.B #$05                                ;;F19C|F199+F199/F199\F199;
                      BNE CODE_02F12D                           ;;F19E|F19B+F19B/F19B\F19B;
                      LDX.W !CurSpriteProcess                   ;;F1A0|F19D+F19D/F19D\F19D; X = Sprite index
                      LDA.B !_8                                 ;;F1A3|F1A0+F1A0/F1A0\F1A0;
                      BEQ CODE_02F1C7                           ;;F1A5|F1A2+F1A2/F1A2\F1A2;
                      PHX                                       ;;F1A7|F1A4+F1A4/F1A4\F1A4;
                      LDY.W !SpriteOAMIndex,X                   ;;F1A8|F1A5+F1A5/F1A5\F1A5; Y = Index into sprite OAM
                      LDA.W !SpriteMisc157C,X                   ;;F1AB|F1A8+F1A8/F1A8\F1A8;
                      TAX                                       ;;F1AE|F1AB+F1AB/F1AB\F1AB;
                      LDA.W !OAMTileXPos+$104,Y                 ;;F1AF|F1AC+F1AC/F1AC\F1AC;
                      CLC                                       ;;F1B2|F1AF+F1AF/F1AF\F1AF;
                      ADC.W WigglerEyesXOff,X                   ;;F1B3|F1B0+F1B0/F1B0\F1B0;
                      PLX                                       ;;F1B6|F1B3+F1B3/F1B3\F1B3;
                      STA.W !OAMTileXPos+$100,Y                 ;;F1B7|F1B4+F1B4/F1B4\F1B4;
                      LDA.W !OAMTileYPos+$104,Y                 ;;F1BA|F1B7+F1B7/F1B7\F1B7;
                      STA.W !OAMTileYPos+$100,Y                 ;;F1BD|F1BA+F1BA/F1BA\F1BA;
                      LDA.B #$88                                ;;F1C0|F1BD+F1BD/F1BD\F1BD; Angry face tile
                      STA.W !OAMTileNo+$100,Y                   ;;F1C2|F1BF+F1BF/F1BF\F1BF;
                      LDA.W !OAMTileAttr+$104,Y                 ;;F1C5|F1C2+F1C2/F1C2\F1C2;
                      BRA +                                     ;;F1C8|F1C5+F1C5/F1C5\F1C5;
                                                                ;;                        ;
CODE_02F1C7:          PHX                                       ;;F1CA|F1C7+F1C7/F1C7\F1C7;
                      LDY.W !SpriteOAMIndex,X                   ;;F1CB|F1C8+F1C8/F1C8\F1C8; Y = Index into sprite OAM
                      LDA.W !SpriteMisc157C,X                   ;;F1CE|F1CB+F1CB/F1CB\F1CB;
                      TAX                                       ;;F1D1|F1CE+F1CE/F1CE\F1CE;
                      LDA.W !OAMTileXPos+$104,Y                 ;;F1D2|F1CF+F1CF/F1CF\F1CF;
                      CLC                                       ;;F1D5|F1D2+F1D2/F1D2\F1D2;
                      ADC.W WigglerFlowerXOff,X                 ;;F1D6|F1D3+F1D3/F1D3\F1D3;
                      PLX                                       ;;F1D9|F1D6+F1D6/F1D6\F1D6;
                      STA.W !OAMTileXPos+$100,Y                 ;;F1DA|F1D7+F1D7/F1D7\F1D7;
                      LDA.W !OAMTileYPos+$104,Y                 ;;F1DD|F1DA+F1DA/F1DA\F1DA;
                      SEC                                       ;;F1E0|F1DD+F1DD/F1DD\F1DD;
                      SBC.B #$08                                ;;F1E1|F1DE+F1DE/F1DE\F1DE;
                      STA.W !OAMTileYPos+$100,Y                 ;;F1E3|F1E0+F1E0/F1E0\F1E0;
                      LDA.B #$98                                ;;F1E6|F1E3+F1E3/F1E3\F1E3; Wiggler's flower tile
                      STA.W !OAMTileNo+$100,Y                   ;;F1E8|F1E5+F1E5/F1E5\F1E5;
                      LDA.W !OAMTileAttr+$104,Y                 ;;F1EB|F1E8+F1E8/F1E8\F1E8;
                      AND.B #$F1                                ;;F1EE|F1EB+F1EB/F1EB\F1EB;
                      ORA.B #$0A                                ;;F1F0|F1ED+F1ED/F1ED\F1ED;
                    + STA.W !OAMTileAttr+$100,Y                 ;;F1F2|F1EF+F1EF/F1EF\F1EF;
                      TYA                                       ;;F1F5|F1F2+F1F2/F1F2\F1F2;
                      LSR A                                     ;;F1F6|F1F3+F1F3/F1F3\F1F3;
                      LSR A                                     ;;F1F7|F1F4+F1F4/F1F4\F1F4;
                      TAY                                       ;;F1F8|F1F5+F1F5/F1F5\F1F5;
                      LDA.B #$00                                ;;F1F9|F1F6+F1F6/F1F6\F1F6;
                      STA.W !OAMTileSize+$40,Y                  ;;F1FB|F1F8+F1F8/F1F8\F1F8;
                      LDA.B #$05                                ;;F1FE|F1FB+F1FB/F1FB\F1FB;
                      LDY.B #$FF                                ;;F200|F1FD+F1FD/F1FD\F1FD;
                      JSR CallFinOAMWriteBank2                  ;;F202|F1FF+F1FF/F1FF\F1FF; FinshOAMWrite call
                      LDA.B !SpriteXPosLow,X                    ;;F205|F202+F202/F202\F202;
                      STA.B !_0                                 ;;F207|F204+F204/F204\F204;
                      LDA.W !SpriteXPosHigh,X                   ;;F209|F206+F206/F206\F206;
                      STA.B !_1                                 ;;F20C|F209+F209/F209\F209;
                      REP #$20                                  ;;F20E|F20B+F20B/F20B\F20B; Accum (16 bit)
                      LDA.B !_0                                 ;;F210|F20D+F20D/F20D\F20D;
                      SEC                                       ;;F212|F20F+F20F/F20F\F20F;
                      SBC.B !PlayerXPosNext                     ;;F213|F210+F210/F210\F210;
                      CLC                                       ;;F215|F212+F212/F212\F212;
                      ADC.W #$0050                              ;;F216|F213+F213/F213\F213;
                      CMP.W #$00A0                              ;;F219|F216+F216/F216\F216;
                      SEP #$20                                  ;;F21C|F219+F219/F219\F219; Accum (8 bit)
                      BCS Return02F295                          ;;F21E|F21B+F21B/F21B\F21B;
                      LDA.W !SpriteStatus,X                     ;;F220|F21D+F21D/F21D\F21D;
                      CMP.B #$08                                ;;F223|F220+F220/F220\F220;
                      BNE Return02F295                          ;;F225|F222+F222/F222\F222;
                      LDA.B #$04                                ;;F227|F224+F224/F224\F224;
                      STA.B !_0                                 ;;F229|F226+F226/F226\F226;
                      LDY.W !SpriteOAMIndex,X                   ;;F22B|F228+F228/F228\F228; Y = Index into sprite OAM
CODE_02F22B:          LDA.W !OAMTileXPos+$104,Y                 ;;F22E|F22B+F22B/F22B\F22B;
                      SEC                                       ;;F231|F22E+F22E/F22E\F22E;
                      SBC.B !PlayerXPosScrRel                   ;;F232|F22F+F22F/F22F\F22F;
                      ADC.B #$0C                                ;;F234|F231+F231/F231\F231;
                      CMP.B #$18                                ;;F236|F233+F233/F233\F233;
                      BCS CODE_02F29B                           ;;F238|F235+F235/F235\F235;
                      LDA.W !OAMTileYPos+$104,Y                 ;;F23A|F237+F237/F237\F237;
                      SEC                                       ;;F23D|F23A+F23A/F23A\F23A;
                      SBC.B !PlayerYPosScrRel                   ;;F23E|F23B+F23B/F23B\F23B;
                      SBC.B #$10                                ;;F240|F23D+F23D/F23D\F23D;
                      PHY                                       ;;F242|F23F+F23F/F23F\F23F;
                      LDY.W !PlayerRidingYoshi                  ;;F243|F240+F240/F240\F240;
                      BEQ +                                     ;;F246|F243+F243/F243\F243;
                      SBC.B #$10                                ;;F248|F245+F245/F245\F245;
                    + PLY                                       ;;F24A|F247+F247/F247\F247;
                      CLC                                       ;;F24B|F248+F248/F248\F248;
                      ADC.B #$0C                                ;;F24C|F249+F249/F249\F249;
                      CMP.B #$18                                ;;F24E|F24B+F24B/F24B\F24B;
                      BCS CODE_02F29B                           ;;F250|F24D+F24D/F24D\F24D;
                      LDA.W !InvinsibilityTimer                 ;;F252|F24F+F24F/F24F\F24F; \ Branch if Mario has star
                      BNE ADDR_02F29D                           ;;F255|F252+F252/F252\F252; /
                      LDA.W !SpriteMisc154C,X                   ;;F257|F254+F254/F254\F254;
                      ORA.B !PlayerYPosScrRel+1                 ;;F25A|F257+F257/F257\F257;
                      BNE CODE_02F29B                           ;;F25C|F259+F259/F259\F259;
                      LDA.B #$08                                ;;F25E|F25B+F25B/F25B\F25B;
                      STA.W !SpriteMisc154C,X                   ;;F260|F25D+F25D/F25D\F25D;
                      LDA.W !SpriteStompCounter                 ;;F263|F260+F260/F260\F260;
                      BNE CODE_02F26B                           ;;F266|F263+F263/F263\F263;
                      LDA.B !PlayerYSpeed                       ;;F268|F265+F265/F265\F265;
                      CMP.B #$08                                ;;F26A|F267+F267/F267\F267;
                      BMI CODE_02F296                           ;;F26C|F269+F269/F269\F269;
CODE_02F26B:          LDA.B #!SFX_KICK                          ;;F26E|F26B+F26B/F26B\F26B; \ Play sound effect
                      STA.W !SPCIO0                             ;;F270|F26D+F26D/F26D\F26D; /
                      JSL BoostMarioSpeed                       ;;F273|F270+F270/F270\F270;
                      LDA.W !SpriteMisc151C,X                   ;;F277|F274+F274/F274\F274;
                      ORA.W !SpriteOnYoshiTongue,X              ;;F27A|F277+F277/F277\F277;
                      BNE Return02F295                          ;;F27D|F27A+F27A/F27A\F27A;
                      JSL DisplayContactGfxP                    ;;F27F|F27C+F27C/F27C\F27C;
                      LDA.W !SpriteStompCounter                 ;;F283|F280+F280/F280\F280;
                      INC.W !SpriteStompCounter                 ;;F286|F283+F283/F283\F283;
                      JSL GivePoints                            ;;F289|F286+F286/F286\F286;
                      LDA.B #$40                                ;;F28D|F28A+F28A/F28A\F28A;
                      STA.W !SpriteMisc1540,X                   ;;F28F|F28C+F28C/F28C\F28C;
                      INC.W !SpriteMisc151C,X                   ;;F292|F28F+F28F/F28F\F28F;
                      JSR WigglerSpawnExtFlwr                   ;;F295|F292+F292/F292\F292;
Return02F295:         RTS                                       ;;F298|F295+F295/F295\F295; Return
                                                                ;;                        ;
CODE_02F296:          JSL HurtMario                             ;;F299|F296+F296/F296\F296;
                      RTS                                       ;;F29D|F29A+F29A/F29A\F29A; Return
                                                                ;;                        ;
CODE_02F29B:          BRA CODE_02F2C7                           ;;F29E|F29B+F29B/F29B\F29B;
                                                                ;;                        ;
ADDR_02F29D:          LDA.B #$02                                ;;F2A0|F29D+F29D/F29D\F29D; \ Sprite status = Killed
                      STA.W !SpriteStatus,X                     ;;F2A2|F29F+F29F/F29F\F29F; /
                      LDA.B #$D0                                ;;F2A5|F2A2+F2A2/F2A2\F2A2;
                      STA.B !SpriteYSpeed,X                     ;;F2A7|F2A4+F2A4/F2A4\F2A4;
                      INC.W !StarKillCounter                    ;;F2A9|F2A6+F2A6/F2A6\F2A6;
                      LDA.W !StarKillCounter                    ;;F2AC|F2A9+F2A9/F2A9\F2A9;
                      CMP.B #$09                                ;;F2AF|F2AC+F2AC/F2AC\F2AC;
                      BCC +                                     ;;F2B1|F2AE+F2AE/F2AE\F2AE;
                      LDA.B #$09                                ;;F2B3|F2B0+F2B0/F2B0\F2B0;
                      STA.W !StarKillCounter                    ;;F2B5|F2B2+F2B2/F2B2\F2B2;
                    + JSL GivePoints                            ;;F2B8|F2B5+F2B5/F2B5\F2B5;
                      LDY.W !StarKillCounter                    ;;F2BC|F2B9+F2B9/F2B9\F2B9;
                      CPY.B #$08                                ;;F2BF|F2BC+F2BC/F2BC\F2BC;
                      BCS +                                     ;;F2C1|F2BE+F2BE/F2BE\F2BE;
                      LDA.W StompSFX2-1,Y                       ;;F2C3|F2C0+F2C0/F2C0\F2C0; \ Play sound effect
                      STA.W !SPCIO0                             ;;F2C6|F2C3+F2C3/F2C3\F2C3; /
                    + RTS                                       ;;F2C9|F2C6+F2C6/F2C6\F2C6; Return
                                                                ;;                        ;
CODE_02F2C7:          INY                                       ;;F2CA|F2C7+F2C7/F2C7\F2C7;
                      INY                                       ;;F2CB|F2C8+F2C8/F2C8\F2C8;
                      INY                                       ;;F2CC|F2C9+F2C9/F2C9\F2C9;
                      INY                                       ;;F2CD|F2CA+F2CA/F2CA\F2CA;
                      DEC.B !_0                                 ;;F2CE|F2CB+F2CB/F2CB\F2CB;
                      BMI +                                     ;;F2D0|F2CD+F2CD/F2CD\F2CD;
                      JMP CODE_02F22B                           ;;F2D2|F2CF+F2CF/F2CF\F2CF;
                                                                ;;                        ;
                    + RTS                                       ;;F2D5|F2D2+F2D2/F2D2\F2D2; Return
                                                                ;;                        ;
                                                                ;;                        ;
WigglerFlowerXOff:    db $00,$08                                ;;F2D6|F2D3+F2D3/F2D3\F2D3;
                                                                ;;                        ;
WigglerEyesXOff:      db $04,$04                                ;;F2D8|F2D5+F2D5/F2D5\F2D5;
                                                                ;;                        ;
WigglerSpawnExtFlwr:  LDY.B #$07                                ;;F2DA|F2D7+F2D7/F2D7\F2D7; \ Find a free extended sprite slot
.loop:                LDA.W !ExtSpriteNumber,Y                  ;;F2DC|F2D9+F2D9/F2D9\F2D9;  |
                      BEQ WigglerFlowerInit                     ;;F2DF|F2DC+F2DC/F2DC\F2DC;  |
                      DEY                                       ;;F2E1|F2DE+F2DE/F2DE\F2DE;  |
                      BPL .loop                                 ;;F2E2|F2DF+F2DF/F2DF\F2DF;  |
                      RTS                                       ;;F2E4|F2E1+F2E1/F2E1\F2E1; / Return if no free slots
                                                                ;;                        ;
WigglerFlowerInit:    LDA.B #$0E                                ;;F2E5|F2E2+F2E2/F2E2\F2E2; \ Extended sprite = Wiggler flower
                      STA.W !ExtSpriteNumber,Y                  ;;F2E7|F2E4+F2E4/F2E4\F2E4; /
                      LDA.B #$01                                ;;F2EA|F2E7+F2E7/F2E7\F2E7;
                      STA.W !ExtSpriteMisc1765,Y                ;;F2EC|F2E9+F2E9/F2E9\F2E9;
                      LDA.B !SpriteXPosLow,X                    ;;F2EF|F2EC+F2EC/F2EC\F2EC;
                      STA.W !ExtSpriteXPosLow,Y                 ;;F2F1|F2EE+F2EE/F2EE\F2EE;
                      LDA.W !SpriteXPosHigh,X                   ;;F2F4|F2F1+F2F1/F2F1\F2F1;
                      STA.W !ExtSpriteXPosHigh,Y                ;;F2F7|F2F4+F2F4/F2F4\F2F4;
                      LDA.B !SpriteYPosLow,X                    ;;F2FA|F2F7+F2F7/F2F7\F2F7;
                      STA.W !ExtSpriteYPosLow,Y                 ;;F2FC|F2F9+F2F9/F2F9\F2F9;
                      LDA.B !SpriteYPosLow,X                    ;;F2FF|F2FC+F2FC/F2FC\F2FC;
                      STA.W !ExtSpriteYPosHigh,Y                ;;F301|F2FE+F2FE/F2FE\F2FE;
                      LDA.B #$D0                                ;;F304|F301+F301/F301\F301;
                      STA.W !ExtSpriteYSpeed,Y                  ;;F306|F303+F303/F303\F303;
                      LDA.B !SpriteXSpeed,X                     ;;F309|F306+F306/F306\F306;
                      EOR.B #$FF                                ;;F30B|F308+F308/F308\F308;
                      INC A                                     ;;F30D|F30A+F30A/F30A\F30A;
                      STA.W !ExtSpriteXSpeed,Y                  ;;F30E|F30B+F30B/F30B\F30B;
                      RTS                                       ;;F311|F30E+F30E/F30E\F30E; Return
                                                                ;;                        ;
BirdsMain:            PHB                                       ;;F312|F30F+F30F/F30F\F30F;
                      PHK                                       ;;F313|F310+F310/F310\F310;
                      PLB                                       ;;F314|F311+F311/F311\F311;
                      JSR CODE_02F317                           ;;F315|F312+F312/F312\F312;
                      PLB                                       ;;F318|F315+F315/F315\F315;
                      RTL                                       ;;F319|F316+F316/F316\F316; Return
                                                                ;;                        ;
CODE_02F317:          LDA.W !SpriteMisc15AC,X                   ;;F31A|F317+F317/F317\F317;
                      BEQ +                                     ;;F31D|F31A+F31A/F31A\F31A;
                      LDA.B #$04                                ;;F31F|F31C+F31C/F31C\F31C;
                      STA.W !SpriteMisc1602,X                   ;;F321|F31E+F31E/F31E\F31E;
                    + JSR CODE_02F3EA                           ;;F324|F321+F321/F321\F321;
                      JSR UpdateXPosNoGrvty                     ;;F327|F324+F324/F324\F324;
                      JSR UpdateYPosNoGrvty                     ;;F32A|F327+F327/F327\F327;
                      LDA.B !SpriteYSpeed,X                     ;;F32D|F32A+F32A/F32A\F32A;
                      CLC                                       ;;F32F|F32C+F32C/F32C\F32C;
                      ADC.B #$03                                ;;F330|F32D+F32D/F32D\F32D;
                      STA.B !SpriteYSpeed,X                     ;;F332|F32F+F32F/F32F\F32F;
                      LDA.B !SpriteTableC2,X                    ;;F334|F331+F331/F331\F331;
                      JSL ExecutePtr                            ;;F336|F333+F333/F333\F333;
                                                                ;;                        ;
                      dw CODE_02F342                            ;;F33A|F337+F337/F337\F337;
                      dw CODE_02F38F                            ;;F33C|F339+F339/F339\F339;
                                                                ;;                        ;
                      RTS                                       ;;F33E|F33B+F33B/F33B\F33B;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F33C:          db $02,$03,$05,$01                        ;;F33F|F33C+F33C/F33C\F33C;
                                                                ;;                        ;
DATA_02F340:          db $08,$F8                                ;;F343|F340+F340/F340\F340;
                                                                ;;                        ;
CODE_02F342:          LDY.W !SpriteMisc157C,X                   ;;F345|F342+F342/F342\F342;
                      LDA.W DATA_02F340,Y                       ;;F348|F345+F345/F345\F345;
                      STA.B !SpriteXSpeed,X                     ;;F34B|F348+F348/F348\F348;
                      STZ.W !SpriteMisc1602,X                   ;;F34D|F34A+F34A/F34A\F34A;
                      LDA.B !SpriteYSpeed,X                     ;;F350|F34D+F34D/F34D\F34D;
                      BMI Return02F370                          ;;F352|F34F+F34F/F34F\F34F;
                      LDA.B !SpriteYPosLow,X                    ;;F354|F351+F351/F351\F351;
                      CMP.B #$E8                                ;;F356|F353+F353/F353\F353;
                      BCC Return02F370                          ;;F358|F355+F355/F355\F355;
                      AND.B #$F8                                ;;F35A|F357+F357/F357\F357;
                      STA.B !SpriteYPosLow,X                    ;;F35C|F359+F359/F359\F359;
                      LDA.B #$F0                                ;;F35E|F35B+F35B/F35B\F35B;
                      STA.B !SpriteYSpeed,X                     ;;F360|F35D+F35D/F35D\F35D;
                      LDA.B !SpriteXPosLow,X                    ;;F362|F35F+F35F/F35F\F35F;
                      CLC                                       ;;F364|F361+F361/F361\F361;
                      ADC.B #$30                                ;;F365|F362+F362/F362\F362;
                      CMP.B #$60                                ;;F367|F364+F364/F364\F364;
                      BCC CODE_02F381                           ;;F369|F366+F366/F366\F366;
                      LDA.W !SpriteMisc1570,X                   ;;F36B|F368+F368/F368\F368;
                      BEQ +                                     ;;F36E|F36B+F36B/F36B\F36B;
                      DEC.W !SpriteMisc1570,X                   ;;F370|F36D+F36D/F36D\F36D;
Return02F370:         RTS                                       ;;F373|F370+F370/F370\F370; Return
                                                                ;;                        ;
                    + INC.B !SpriteTableC2,X                    ;;F374|F371+F371/F371\F371;
                      JSL GetRand                               ;;F376|F373+F373/F373\F373;
                      AND.B #$03                                ;;F37A|F377+F377/F377\F377;
                      TAY                                       ;;F37C|F379+F379/F379\F379;
                      LDA.W DATA_02F33C,Y                       ;;F37D|F37A+F37A/F37A\F37A;
                      STA.W !SpriteMisc1570,X                   ;;F380|F37D+F37D/F37D\F37D;
                      RTS                                       ;;F383|F380+F380/F380\F380; Return
                                                                ;;                        ;
CODE_02F381:          LDA.W !SpriteMisc154C,X                   ;;F384|F381+F381/F381\F381;
                      BNE +                                     ;;F387|F384+F384/F384\F384;
                      JSR CODE_02F3C1                           ;;F389|F386+F386/F386\F386;
                      LDA.B #$10                                ;;F38C|F389+F389/F389\F389;
                      STA.W !SpriteMisc154C,X                   ;;F38E|F38B+F38B/F38B\F38B;
                    + RTS                                       ;;F391|F38E+F38E/F38E\F38E; Return
                                                                ;;                        ;
CODE_02F38F:          STZ.B !SpriteYSpeed,X                     ;;F392|F38F+F38F/F38F\F38F; Sprite Y Speed = 0
                      STZ.B !SpriteXSpeed,X                     ;;F394|F391+F391/F391\F391; Sprite X Speed = 0
                      STZ.W !SpriteMisc1602,X                   ;;F396|F393+F393/F393\F393;
                      LDA.W !SpriteMisc1540,X                   ;;F399|F396+F396/F396\F396;
                      BEQ CODE_02F3A3                           ;;F39C|F399+F399/F399\F399;
                      CMP.B #$08                                ;;F39E|F39B+F39B/F39B\F39B;
                      BCS +                                     ;;F3A0|F39D+F39D/F39D\F39D;
                      INC.W !SpriteMisc1602,X                   ;;F3A2|F39F+F39F/F39F\F39F;
                    + RTS                                       ;;F3A5|F3A2+F3A2/F3A2\F3A2; Return
                                                                ;;                        ;
CODE_02F3A3:          LDA.W !SpriteMisc1570,X                   ;;F3A6|F3A3+F3A3/F3A3\F3A3;
                      BEQ +                                     ;;F3A9|F3A6+F3A6/F3A6\F3A6;
                      DEC.W !SpriteMisc1570,X                   ;;F3AB|F3A8+F3A8/F3A8\F3A8;
                      JSL GetRand                               ;;F3AE|F3AB+F3AB/F3AB\F3AB;
                      AND.B #$1F                                ;;F3B2|F3AF+F3AF/F3AF\F3AF;
                      ORA.B #$0A                                ;;F3B4|F3B1+F3B1/F3B1\F3B1;
                      STA.W !SpriteMisc1540,X                   ;;F3B6|F3B3+F3B3/F3B3\F3B3;
                      RTS                                       ;;F3B9|F3B6+F3B6/F3B6\F3B6; Return
                                                                ;;                        ;
                    + STZ.B !SpriteTableC2,X                    ;;F3BA|F3B7+F3B7/F3B7\F3B7;
                      JSL GetRand                               ;;F3BC|F3B9+F3B9/F3B9\F3B9;
                      AND.B #$01                                ;;F3C0|F3BD+F3BD/F3BD\F3BD;
                      BNE +                                     ;;F3C2|F3BF+F3BF/F3BF\F3BF;
CODE_02F3C1:          LDA.W !SpriteMisc157C,X                   ;;F3C4|F3C1+F3C1/F3C1\F3C1;
                      EOR.B #$01                                ;;F3C7|F3C4+F3C4/F3C4\F3C4;
                      STA.W !SpriteMisc157C,X                   ;;F3C9|F3C6+F3C6/F3C6\F3C6;
                      LDA.B #$0A                                ;;F3CC|F3C9+F3C9/F3C9\F3C9;
                      STA.W !SpriteMisc15AC,X                   ;;F3CE|F3CB+F3CB/F3CB\F3CB;
                    + JSL GetRand                               ;;F3D1|F3CE+F3CE/F3CE\F3CE;
                      AND.B #$03                                ;;F3D5|F3D2+F3D2/F3D2\F3D2;
                      CLC                                       ;;F3D7|F3D4+F3D4/F3D4\F3D4;
                      ADC.B #$02                                ;;F3D8|F3D5+F3D5/F3D5\F3D5;
                      STA.W !SpriteMisc1570,X                   ;;F3DA|F3D7+F3D7/F3D7\F3D7;
                      RTS                                       ;;F3DD|F3DA+F3DA/F3DA\F3DA; Return
                                                                ;;                        ;
                                                                ;;                        ;
BirdsTilemap:         db $D2,$D3,$D0,$D1,$9B                    ;;F3DE|F3DB+F3DB/F3DB\F3DB;
                                                                ;;                        ;
BirdsFlip:            db $71,$31                                ;;F3E3|F3E0+F3E0/F3E0\F3E0;
                                                                ;;                        ;
BirdsPal:             db $08,$04,$06,$0A                        ;;F3E5|F3E2+F3E2/F3E2\F3E2;
                                                                ;;                        ;
FireplaceTilemap:     db $30,$34,$48,$3C                        ;;F3E9|F3E6+F3E6/F3E6\F3E6;
                                                                ;;                        ;
CODE_02F3EA:          TXA                                       ;;F3ED|F3EA+F3EA/F3EA\F3EA;
                      AND.B #$03                                ;;F3EE|F3EB+F3EB/F3EB\F3EB;
                      TAY                                       ;;F3F0|F3ED+F3ED/F3ED\F3ED;
                      LDA.W BirdsPal,Y                          ;;F3F1|F3EE+F3EE/F3EE\F3EE;
                      LDY.W !SpriteMisc157C,X                   ;;F3F4|F3F1+F3F1/F3F1\F3F1;
                      ORA.W BirdsFlip,Y                         ;;F3F7|F3F4+F3F4/F3F4\F3F4;
                      STA.B !_2                                 ;;F3FA|F3F7+F3F7/F3F7\F3F7;
                      TXA                                       ;;F3FC|F3F9+F3F9/F3F9\F3F9;
                      AND.B #$03                                ;;F3FD|F3FA+F3FA/F3FA\F3FA;
                      TAY                                       ;;F3FF|F3FC+F3FC/F3FC\F3FC;
                      LDA.W FireplaceTilemap,Y                  ;;F400|F3FD+F3FD/F3FD\F3FD;
                      TAY                                       ;;F403|F400+F400/F400\F400;
                      LDA.B !SpriteXPosLow,X                    ;;F404|F401+F401/F401\F401;
                      SEC                                       ;;F406|F403+F403/F403\F403;
                      SBC.B !Layer1XPos                         ;;F407|F404+F404/F404\F404;
                      STA.W !OAMTileXPos,Y                      ;;F409|F406+F406/F406\F406;
                      LDA.B !SpriteYPosLow,X                    ;;F40C|F409+F409/F409\F409;
                      SEC                                       ;;F40E|F40B+F40B/F40B\F40B;
                      SBC.B !Layer1YPos                         ;;F40F|F40C+F40C/F40C\F40C;
                      STA.W !OAMTileYPos,Y                      ;;F411|F40E+F40E/F40E\F40E;
                      PHX                                       ;;F414|F411+F411/F411\F411;
                      LDA.W !SpriteMisc1602,X                   ;;F415|F412+F412/F412\F412;
                      TAX                                       ;;F418|F415+F415/F415\F415;
                      %LorW_X(LDA,BirdsTilemap)                 ;;F419|F416+F416/F416\F416;
                      STA.W !OAMTileNo,Y                        ;;F41D|F419+F419/F419\F419;
                      PLX                                       ;;F420|F41C+F41C/F41C\F41C;
                      LDA.B !_2                                 ;;F421|F41D+F41D/F41D\F41D;
                      STA.W !OAMTileAttr,Y                      ;;F423|F41F+F41F/F41F\F41F;
                      TYA                                       ;;F426|F422+F422/F422\F422;
                      LSR A                                     ;;F427|F423+F423/F423\F423;
                      LSR A                                     ;;F428|F424+F424/F424\F424;
                      TAY                                       ;;F429|F425+F425/F425\F425;
                      LDA.B #$00                                ;;F42A|F426+F426/F426\F426;
                      STA.W !OAMTileSize,Y                      ;;F42C|F428+F428/F428\F428;
                      RTS                                       ;;F42F|F42B+F42B/F42B\F42B; Return
                                                                ;;                        ;
SmokeMain:            PHB                                       ;;F430|F42C+F42C/F42C\F42C;
                      PHK                                       ;;F431|F42D+F42D/F42D\F42D;
                      PLB                                       ;;F432|F42E+F42E/F42E\F42E;
                      JSR CODE_02F434                           ;;F433|F42F+F42F/F42F\F42F;
                      PLB                                       ;;F436|F432+F432/F432\F432;
                      RTL                                       ;;F437|F433+F433/F433\F433; Return
                                                                ;;                        ;
CODE_02F434:          INC.W !SpriteMisc1570,X                   ;;F438|F434+F434/F434\F434;
                      LDY.B #$04                                ;;F43B|F437+F437/F437\F437;
                      LDA.W !SpriteMisc1570,X                   ;;F43D|F439+F439/F439\F439;
                      AND.B #$40                                ;;F440|F43C+F43C/F43C\F43C;
                      BEQ +                                     ;;F442|F43E+F43E/F43E\F43E;
                      LDY.B #$FE                                ;;F444|F440+F440/F440\F440;
                    + STY.B !SpriteXSpeed,X                     ;;F446|F442+F442/F442\F442;
                      LDA.B #$FC                                ;;F448|F444+F444/F444\F444;
                      STA.B !SpriteYSpeed,X                     ;;F44A|F446+F446/F446\F446;
                      JSR UpdateYPosNoGrvty                     ;;F44C|F448+F448/F448\F448;
                      LDA.W !SpriteMisc1540,X                   ;;F44F|F44B+F44B/F44B\F44B;
                      BNE +                                     ;;F452|F44E+F44E/F44E\F44E;
                      JSR UpdateXPosNoGrvty                     ;;F454|F450+F450/F450\F450;
                    + JSR CODE_02F47C                           ;;F457|F453+F453/F453\F453;
                      LDA.B !SpriteYPosLow,X                    ;;F45A|F456+F456/F456\F456;
                      SEC                                       ;;F45C|F458+F458/F458\F458;
                      SBC.B !Layer1YPos                         ;;F45D|F459+F459/F459\F459;
                      CMP.B #$F0                                ;;F45F|F45B+F45B/F45B\F45B;
                      BNE +                                     ;;F461|F45D+F45D/F45D\F45D;
                      STZ.W !SpriteStatus,X                     ;;F463|F45F+F45F/F45F\F45F;
                    + RTS                                       ;;F466|F462+F462/F462\F462; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F463:          db $03,$04,$05,$04,$05,$06,$05,$06        ;;F467|F463+F463/F463\F463;
                      db $07,$06,$07,$08,$07,$08,$07,$08        ;;F46F|F46B+F46B/F46B\F46B;
                      db $07,$08,$07,$08,$07,$08,$07,$08        ;;F477|F473+F473/F473\F473;
                      db $07                                    ;;F47F|F47B+F47B/F47B\F47B;
                                                                ;;                        ;
CODE_02F47C:          LDA.B !EffFrame                           ;;F480|F47C+F47C/F47C\F47C;
                      AND.B #$0F                                ;;F482|F47E+F47E/F47E\F47E;
                      BNE +                                     ;;F484|F480+F480/F480\F480;
                      INC.W !SpriteMisc151C,X                   ;;F486|F482+F482/F482\F482;
                    + LDY.W !SpriteMisc151C,X                   ;;F489|F485+F485/F485\F485;
                      LDA.W DATA_02F463,Y                       ;;F48C|F488+F488/F488\F488;
                      STA.B !_0                                 ;;F48F|F48B+F48B/F48B\F48B;
                      LDY.W !SpriteOAMIndex,X                   ;;F491|F48D+F48D/F48D\F48D; Y = Index into sprite OAM
                      LDA.B !SpriteXPosLow,X                    ;;F494|F490+F490/F490\F490;
                      SEC                                       ;;F496|F492+F492/F492\F492;
                      SBC.B !Layer1XPos                         ;;F497|F493+F493/F493\F493;
                      PHA                                       ;;F499|F495+F495/F495\F495;
                      SEC                                       ;;F49A|F496+F496/F496\F496;
                      SBC.B !_0                                 ;;F49B|F497+F497/F497\F497;
                      STA.W !OAMTileXPos+$100,Y                 ;;F49D|F499+F499/F499\F499;
                      PLA                                       ;;F4A0|F49C+F49C/F49C\F49C;
                      CLC                                       ;;F4A1|F49D+F49D/F49D\F49D;
                      ADC.B !_0                                 ;;F4A2|F49E+F49E/F49E\F49E;
                      STA.W !OAMTileXPos+$104,Y                 ;;F4A4|F4A0+F4A0/F4A0\F4A0;
                      LDA.B !SpriteYPosLow,X                    ;;F4A7|F4A3+F4A3/F4A3\F4A3;
                      SEC                                       ;;F4A9|F4A5+F4A5/F4A5\F4A5;
                      SBC.B !Layer1YPos                         ;;F4AA|F4A6+F4A6/F4A6\F4A6;
                      STA.W !OAMTileYPos+$100,Y                 ;;F4AC|F4A8+F4A8/F4A8\F4A8;
                      STA.W !OAMTileYPos+$104,Y                 ;;F4AF|F4AB+F4AB/F4AB\F4AB;
                      LDA.B #$C5                                ;;F4B2|F4AE+F4AE/F4AE\F4AE;
                      STA.W !OAMTileNo+$100,Y                   ;;F4B4|F4B0+F4B0/F4B0\F4B0;
                      STA.W !OAMTileNo+$104,Y                   ;;F4B7|F4B3+F4B3/F4B3\F4B3;
                      LDA.B #$05                                ;;F4BA|F4B6+F4B6/F4B6\F4B6;
                      STA.W !OAMTileAttr+$100,Y                 ;;F4BC|F4B8+F4B8/F4B8\F4B8;
                      ORA.B #$40                                ;;F4BF|F4BB+F4BB/F4BB\F4BB;
                      STA.W !OAMTileAttr+$104,Y                 ;;F4C1|F4BD+F4BD/F4BD\F4BD;
                      TYA                                       ;;F4C4|F4C0+F4C0/F4C0\F4C0;
                      LSR A                                     ;;F4C5|F4C1+F4C1/F4C1\F4C1;
                      LSR A                                     ;;F4C6|F4C2+F4C2/F4C2\F4C2;
                      TAY                                       ;;F4C7|F4C3+F4C3/F4C3\F4C3;
                      LDA.B #$02                                ;;F4C8|F4C4+F4C4/F4C4\F4C4;
                      STA.W !OAMTileSize+$40,Y                  ;;F4CA|F4C6+F4C6/F4C6\F4C6;
                      STA.W !OAMTileSize+$41,Y                  ;;F4CD|F4C9+F4C9/F4C9\F4C9;
                      RTS                                       ;;F4D0|F4CC+F4CC/F4CC\F4CC; Return
                                                                ;;                        ;
SideExitMain:         PHB                                       ;;F4D1|F4CD+F4CD/F4CD\F4CD;
                      PHK                                       ;;F4D2|F4CE+F4CE/F4CE\F4CE;
                      PLB                                       ;;F4D3|F4CF+F4CF/F4CF\F4CF;
                      JSR CODE_02F4D5                           ;;F4D4|F4D0+F4D0/F4D0\F4D0;
                      PLB                                       ;;F4D7|F4D3+F4D3/F4D3\F4D3;
                      RTL                                       ;;F4D8|F4D4+F4D4/F4D4\F4D4; Return
                                                                ;;                        ;
CODE_02F4D5:          LDA.B #$01                                ;;F4D9|F4D5+F4D5/F4D5\F4D5;
                      STA.W !SideExitEnabled                    ;;F4DB|F4D7+F4D7/F4D7\F4D7;
                      LDA.B !SpriteXPosLow,X                    ;;F4DE|F4DA+F4DA/F4DA\F4DA;
                      AND.B #$10                                ;;F4E0|F4DC+F4DC/F4DC\F4DC;
                      BNE +                                     ;;F4E2|F4DE+F4DE/F4DE\F4DE;
                      JSR CODE_02F4EB                           ;;F4E4|F4E0+F4E0/F4E0\F4E0;
                      JSR CODE_02F53E                           ;;F4E7|F4E3+F4E3/F4E3\F4E3;
                    + RTS                                       ;;F4EA|F4E6+F4E6/F4E6\F4E6; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F4E7:          db $D4,$AB                                ;;F4EB|F4E7+F4E7/F4E7\F4E7;
                                                                ;;                        ;
DATA_02F4E9:          db $BB,$9A                                ;;F4ED|F4E9+F4E9/F4E9\F4E9;
                                                                ;;                        ;
CODE_02F4EB:          LDA.W !SpriteOAMIndex,X                   ;;F4EF|F4EB+F4EB/F4EB\F4EB;
                      CLC                                       ;;F4F2|F4EE+F4EE/F4EE\F4EE;
                      ADC.B #$08                                ;;F4F3|F4EF+F4EF/F4EF\F4EF;
                      TAY                                       ;;F4F5|F4F1+F4F1/F4F1\F4F1;
                      LDA.B #$B8                                ;;F4F6|F4F2+F4F2/F4F2\F4F2;
                      STA.W !OAMTileXPos+$100,Y                 ;;F4F8|F4F4+F4F4/F4F4\F4F4;
                      STA.W !OAMTileXPos+$104,Y                 ;;F4FB|F4F7+F4F7/F4F7\F4F7;
                      LDA.B #$B0                                ;;F4FE|F4FA+F4FA/F4FA\F4FA;
                      STA.W !OAMTileYPos+$100,Y                 ;;F500|F4FC+F4FC/F4FC\F4FC;
                      LDA.B #$B8                                ;;F503|F4FF+F4FF/F4FF\F4FF;
                      STA.W !OAMTileYPos+$104,Y                 ;;F505|F501+F501/F501\F501;
                      LDA.B !TrueFrame                          ;;F508|F504+F504/F504\F504;
                   if ver_is_lores(!_VER)             ;\   IF   ;;++++++++++++++++++++++++; J, U, SS, & E0
                      AND.B #$03                                ;;F50A|F506+F506/F506     ;
                      BNE +                                     ;;F50C|F508+F508/F508     ;
                      PHY                                       ;;F50E|F50A+F50A/F50A     ;
                      JSL GetRand                               ;;F50F|F50B+F50B/F50B     ;
                      PLY                                       ;;F513|F50F+F50F/F50F     ;
                      AND.B #$03                                ;;F514|F510+F510/F510     ;
                      BNE +                                     ;;F516|F512+F512/F512     ;
                      INC.B !SpriteTableC2,X                    ;;F518|F514+F514/F514     ;
                   else                               ;<  ELSE  ;;------------------------; E1
                      AND.B #$07                                ;;                   \F506;
                      BNE +                                     ;;                   \F508; yup this does nothing
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                    + PHX                                       ;;F51A|F516+F516/F516\F50A;
                      LDA.B !SpriteTableC2,X                    ;;F51B|F517+F517/F517\F50B;
                      AND.B #$01                                ;;F51D|F519+F519/F519\F50D;
                      TAX                                       ;;F51F|F51B+F51B/F51B\F50F;
                      %LorW_X(LDA,DATA_02F4E7)                  ;;F520|F51C+F51C/F51C\F510;
                      STA.W !OAMTileNo+$100,Y                   ;;F524|F51F+F51F/F51F\F513;
                      %LorW_X(LDA,DATA_02F4E9)                  ;;F527|F522+F522/F522\F516;
                      STA.W !OAMTileNo+$104,Y                   ;;F52B|F525+F525/F525\F519;
                      LDA.B #$35                                ;;F52E|F528+F528/F528\F51C;
                      STA.W !OAMTileAttr+$100,Y                 ;;F530|F52A+F52A/F52A\F51E;
                      STA.W !OAMTileAttr+$104,Y                 ;;F533|F52D+F52D/F52D\F521;
                      TYA                                       ;;F536|F530+F530/F530\F524;
                      LSR A                                     ;;F537|F531+F531/F531\F525;
                      LSR A                                     ;;F538|F532+F532/F532\F526;
                      TAY                                       ;;F539|F533+F533/F533\F527;
                      LDA.B #$00                                ;;F53A|F534+F534/F534\F528;
                      STA.W !OAMTileSize+$40,Y                  ;;F53C|F536+F536/F536\F52A;
                      STA.W !OAMTileSize+$41,Y                  ;;F53F|F539+F539/F539\F52D;
                      PLX                                       ;;F542|F53C+F53C/F53C\F530;
                      RTS                                       ;;F543|F53D+F53D/F53D\F531; Return
                                                                ;;                        ;
CODE_02F53E:          LDA.B !EffFrame                           ;;F544|F53E+F53E/F53E\F532;
                      AND.B #$3F                                ;;F546|F540+F540/F540\F534;
                      BNE +                                     ;;F548|F542+F542/F542\F536;
                      JSR CODE_02F548                           ;;F54A|F544+F544/F544\F538;
                    + RTS                                       ;;F54D|F547+F547/F547\F53B; Return
                                                                ;;                        ;
CODE_02F548:          LDY.B #$09                                ;;F54E|F548+F548/F548\F53C;
CODE_02F54A:          LDA.W !SpriteStatus,Y                     ;;F550|F54A+F54A/F54A\F53E;
                      BEQ CODE_02F553                           ;;F553|F54D+F54D/F54D\F541;
                      DEY                                       ;;F555|F54F+F54F/F54F\F543;
                      BPL CODE_02F54A                           ;;F556|F550+F550/F550\F544;
                      RTS                                       ;;F558|F552+F552/F552\F546; Return
                                                                ;;                        ;
CODE_02F553:          LDA.B #$8B                                ;;F559|F553+F553/F553\F547;
                      STA.W !SpriteNumber,Y                     ;;F55B|F555+F555/F555\F549;
                      LDA.B #$08                                ;;F55E|F558+F558/F558\F54C; \ Sprite status = Normal
                      STA.W !SpriteStatus,Y                     ;;F560|F55A+F55A/F55A\F54E; /
                      PHX                                       ;;F563|F55D+F55D/F55D\F551;
                      TYX                                       ;;F564|F55E+F55E/F55E\F552;
                      JSL InitSpriteTables                      ;;F565|F55F+F55F/F55F\F553;
                      LDA.B #$BB                                ;;F569|F563+F563/F563\F557;
                      STA.B !SpriteXPosLow,X                    ;;F56B|F565+F565/F565\F559;
                      LDA.B #$00                                ;;F56D|F567+F567/F567\F55B;
                      STA.W !SpriteXPosHigh,X                   ;;F56F|F569+F569/F569\F55D;
                      LDA.B #$00                                ;;F572|F56C+F56C/F56C\F560;
                      STA.W !SpriteYPosHigh,X                   ;;F574|F56E+F56E/F56E\F562;
                      LDA.B #$E0                                ;;F577|F571+F571/F571\F565;
                      STA.B !SpriteYPosLow,X                    ;;F579|F573+F573/F573\F567;
                      LDA.B #$20                                ;;F57B|F575+F575/F575\F569;
                      STA.W !SpriteMisc1540,X                   ;;F57D|F577+F577/F577\F56B;
                      PLX                                       ;;F580|F57A+F57A/F57A\F56E;
                      RTS                                       ;;F581|F57B+F57B/F57B\F56F; Return
                                                                ;;                        ;
CODE_02F57C:          PHB                                       ;;F582|F57C+F57C/F57C\F570; Wrapper
                      PHK                                       ;;F583|F57D+F57D/F57D\F571;
                      PLB                                       ;;F584|F57E+F57E/F57E\F572;
                      JSR CODE_02F759                           ;;F585|F57F+F57F/F57F\F573;
                      PLB                                       ;;F588|F582+F582/F582\F576;
                      RTL                                       ;;F589|F583+F583/F583\F577; Return
                                                                ;;                        ;
CODE_02F584:          PHB                                       ;;F58A|F584+F584/F584\F578; Wrapper
                      PHK                                       ;;F58B|F585+F585/F585\F579;
                      PLB                                       ;;F58C|F586+F586/F586\F57A;
                      JSR CODE_02F66E                           ;;F58D|F587+F587/F587\F57B;
                      PLB                                       ;;F590|F58A+F58A/F58A\F57E;
                      RTL                                       ;;F591|F58B+F58B/F58B\F57F; Return
                                                                ;;                        ;
ADDR_02F58C:          PHB                                       ;;F592|F58C+F58C/F58C\F580; Wrapper
                      PHK                                       ;;F593|F58D+F58D/F58D\F581;
                      PLB                                       ;;F594|F58E+F58E/F58E\F582;
                      JSR ADDR_02F639                           ;;F595|F58F+F58F/F58F\F583;
                      PLB                                       ;;F598|F592+F592/F592\F586;
                      RTL                                       ;;F599|F593+F593/F593\F587; Return
                                                                ;;                        ;
GhostExitMain:        PHB                                       ;;F59A|F594+F594/F594\F588;
                      PHK                                       ;;F59B|F595+F595/F595\F589;
                      PLB                                       ;;F59C|F596+F596/F596\F58A;
                      PHX                                       ;;F59D|F597+F597/F597\F58B;
                      JSR CODE_02F5D0                           ;;F59E|F598+F598/F598\F58C;
                      PLX                                       ;;F5A1|F59B+F59B/F59B\F58F;
                      PLB                                       ;;F5A2|F59C+F59C/F59C\F590;
                      RTL                                       ;;F5A3|F59D+F59D/F59D\F591; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F59E:          db $08,$18,$F8,$F8,$F8,$F8,$28,$28        ;;F5A4|F59E+F59E/F59E\F592;
                      db $28,$28                                ;;F5AC|F5A6+F5A6/F5A6\F59A;
                                                                ;;                        ;
DATA_02F5A8:          db $00,$00,$FF,$FF,$FF,$FF,$00,$00        ;;F5AE|F5A8+F5A8/F5A8\F59C;
                      db $00,$00                                ;;F5B6|F5B0+F5B0/F5B0\F5A4;
                                                                ;;                        ;
DATA_02F5B2:          db $5F,$5F,$8F,$97,$A7,$AF,$8F,$97        ;;F5B8|F5B2+F5B2/F5B2\F5A6;
                      db $A7,$AF                                ;;F5C0|F5BA+F5BA/F5BA\F5AE;
                                                                ;;                        ;
DATA_02F5BC:          db $9C,$9E,$A0,$B0,$B0,$A0,$A0,$B0        ;;F5C2|F5BC+F5BC/F5BC\F5B0;
                      db $B0,$A0                                ;;F5CA|F5C4+F5C4/F5C4\F5B8;
                                                                ;;                        ;
DATA_02F5C6:          db $23,$23,$2D,$2D,$AD,$AD,$6D,$6D        ;;F5CC|F5C6+F5C6/F5C6\F5BA;
                      db $ED,$ED                                ;;F5D4|F5CE+F5CE/F5CE\F5C2;
                                                                ;;                        ;
CODE_02F5D0:          LDA.B !Layer1XPos                         ;;F5D6|F5D0+F5D0/F5D0\F5C4;
                      CMP.B #$46                                ;;F5D8|F5D2+F5D2/F5D2\F5C6;
                      BCS Return02F618                          ;;F5DA|F5D4+F5D4/F5D4\F5C8;
                      LDX.B #$09                                ;;F5DC|F5D6+F5D6/F5D6\F5CA;
                      LDY.B #$A0                                ;;F5DE|F5D8+F5D8/F5D8\F5CC;
CODE_02F5DA:          STZ.B !_2                                 ;;F5E0|F5DA+F5DA/F5DA\F5CE;
                      LDA.W DATA_02F59E,X                       ;;F5E2|F5DC+F5DC/F5DC\F5D0;
                      SEC                                       ;;F5E5|F5DF+F5DF/F5DF\F5D3;
                      SBC.B !Layer1XPos                         ;;F5E6|F5E0+F5E0/F5E0\F5D4;
                      STA.B !_0                                 ;;F5E8|F5E2+F5E2/F5E2\F5D6;
                      LDA.W DATA_02F5A8,X                       ;;F5EA|F5E4+F5E4/F5E4\F5D8;
                      SBC.B !Layer1XPos+1                       ;;F5ED|F5E7+F5E7/F5E7\F5DB;
                      BEQ +                                     ;;F5EF|F5E9+F5E9/F5E9\F5DD;
                      INC.B !_2                                 ;;F5F1|F5EB+F5EB/F5EB\F5DF;
                    + LDA.B !_0                                 ;;F5F3|F5ED+F5ED/F5ED\F5E1;
                      STA.W !OAMTileXPos+$100,Y                 ;;F5F5|F5EF+F5EF/F5EF\F5E3;
                      LDA.W DATA_02F5B2,X                       ;;F5F8|F5F2+F5F2/F5F2\F5E6;
                      STA.W !OAMTileYPos+$100,Y                 ;;F5FB|F5F5+F5F5/F5F5\F5E9;
                      LDA.W DATA_02F5BC,X                       ;;F5FE|F5F8+F5F8/F5F8\F5EC;
                      STA.W !OAMTileNo+$100,Y                   ;;F601|F5FB+F5FB/F5FB\F5EF;
                      LDA.W DATA_02F5C6,X                       ;;F604|F5FE+F5FE/F5FE\F5F2;
                      STA.W !OAMTileAttr+$100,Y                 ;;F607|F601+F601/F601\F5F5;
                      PHY                                       ;;F60A|F604+F604/F604\F5F8;
                      TYA                                       ;;F60B|F605+F605/F605\F5F9;
                      LSR A                                     ;;F60C|F606+F606/F606\F5FA;
                      LSR A                                     ;;F60D|F607+F607/F607\F5FB;
                      TAY                                       ;;F60E|F608+F608/F608\F5FC;
                      LDA.B #$02                                ;;F60F|F609+F609/F609\F5FD;
                      ORA.B !_2                                 ;;F611|F60B+F60B/F60B\F5FF;
                      STA.W !OAMTileSize+$40,Y                  ;;F613|F60D+F60D/F60D\F601;
                      PLY                                       ;;F616|F610+F610/F610\F604;
                      INY                                       ;;F617|F611+F611/F611\F605;
                      INY                                       ;;F618|F612+F612/F612\F606;
                      INY                                       ;;F619|F613+F613/F613\F607;
                      INY                                       ;;F61A|F614+F614/F614\F608;
                      DEX                                       ;;F61B|F615+F615/F615\F609;
                      BPL CODE_02F5DA                           ;;F61C|F616+F616/F616\F60A;
Return02F618:         RTS                                       ;;F61E|F618+F618/F618\F60C; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F619:          db $F8,$08,$F8,$08,$00,$00,$00,$00        ;;F61F|F619+F619/F619\F60D;
DATA_02F621:          db $00,$00,$10,$10,$20,$30,$40,$08        ;;F627|F621+F621/F621\F615;
DATA_02F629:          db $C7,$A7,$A7,$C7,$A9,$C9,$C9,$E0        ;;F62F|F629+F629/F629\F61D;
DATA_02F631:          db $A9,$69,$A9,$69,$29,$29,$29,$6B        ;;F637|F631+F631/F631\F625;
                                                                ;;                        ;
ADDR_02F639:          LDX.B #$07                                ;;F63F|F639+F639/F639\F62D;
                      LDY.B #$B0                                ;;F641|F63B+F63B/F63B\F62F;
                    - LDA.B #$C0                                ;;F643|F63D+F63D/F63D\F631;
                      CLC                                       ;;F645|F63F+F63F/F63F\F633;
                      %LorW_X(ADC,DATA_02F619)                  ;;F646|F640+F640/F640\F634;
                      STA.W !OAMTileXPos+$100,Y                 ;;F64A|F643+F643/F643\F637;
                      LDA.B #$70                                ;;F64D|F646+F646/F646\F63A;
                      CLC                                       ;;F64F|F648+F648/F648\F63C;
                      %LorW_X(ADC,DATA_02F621)                  ;;F650|F649+F649/F649\F63D;
                      STA.W !OAMTileYPos+$100,Y                 ;;F654|F64C+F64C/F64C\F640;
                      %LorW_X(LDA,DATA_02F629)                  ;;F657|F64F+F64F/F64F\F643;
                      STA.W !OAMTileNo+$100,Y                   ;;F65B|F652+F652/F652\F646;
                      %LorW_X(LDA,DATA_02F631)                  ;;F65E|F655+F655/F655\F649;
                      STA.W !OAMTileAttr+$100,Y                 ;;F662|F658+F658/F658\F64C;
                      PHY                                       ;;F665|F65B+F65B/F65B\F64F;
                      TYA                                       ;;F666|F65C+F65C/F65C\F650;
                      LSR A                                     ;;F667|F65D+F65D/F65D\F651;
                      LSR A                                     ;;F668|F65E+F65E/F65E\F652;
                      TAY                                       ;;F669|F65F+F65F/F65F\F653;
                      LDA.B #$02                                ;;F66A|F660+F660/F660\F654;
                      STA.W !OAMTileSize+$40,Y                  ;;F66C|F662+F662/F662\F656;
                      PLY                                       ;;F66F|F665+F665/F665\F659;
                      INY                                       ;;F670|F666+F666/F666\F65A;
                      INY                                       ;;F671|F667+F667/F667\F65B;
                      INY                                       ;;F672|F668+F668/F668\F65C;
                      INY                                       ;;F673|F669+F669/F669\F65D;
                      DEX                                       ;;F674|F66A+F66A/F66A\F65E;
                      BPL -                                     ;;F675|F66B+F66B/F66B\F65F;
                      RTS                                       ;;F677|F66D+F66D/F66D\F661; Return
                                                                ;;                        ;
CODE_02F66E:          LDA.W !NoYoshiIntroTimer                  ;;F678|F66E+F66E/F66E\F662;
                      BEQ +                                     ;;F67B|F671+F671/F671\F665;
                      DEC.W !NoYoshiIntroTimer                  ;;F67D|F673+F673/F673\F667;
                    + CMP.B #$B0                                ;;F680|F676+F676/F676\F66A;
                      BNE +                                     ;;F682|F678+F678/F678\F66C;
                      LDY.B #!SFX_DOOROPEN                      ;;F684|F67A+F67A/F67A\F66E; \ Play sound effect
                      STY.W !SPCIO3                             ;;F686|F67C+F67C/F67C\F670; /
                    + CMP.B #$01                                ;;F689|F67F+F67F/F67F\F673;
                      BNE +                                     ;;F68B|F681+F681/F681\F675;
                      LDY.B #!SFX_DOORCLOSE                     ;;F68D|F683+F683/F683\F677; \ Play sound effect
                      STY.W !SPCIO3                             ;;F68F|F685+F685/F685\F679; /
                    + CMP.B #$30                                ;;F692|F688+F688/F688\F67C;
                      BCC CODE_02F69A                           ;;F694|F68A+F68A/F68A\F67E;
                      CMP.B #$81                                ;;F696|F68C+F68C/F68C\F680;
                      BCC CODE_02F698                           ;;F698|F68E+F68E/F68E\F682;
                      CLC                                       ;;F69A|F690+F690/F690\F684;
                      ADC.B #$4F                                ;;F69B|F691+F691/F691\F685;
                      EOR.B #$FF                                ;;F69D|F693+F693/F693\F687;
                      INC A                                     ;;F69F|F695+F695/F695\F689;
                      BRA CODE_02F69A                           ;;F6A0|F696+F696/F696\F68A;
                                                                ;;                        ;
CODE_02F698:          LDA.B #$30                                ;;F6A2|F698+F698/F698\F68C;
CODE_02F69A:          STA.B !_0                                 ;;F6A4|F69A+F69A/F69A\F68E;
                      JSR CODE_02F6B8                           ;;F6A6|F69C+F69C/F69C\F690;
                      RTS                                       ;;F6A9|F69F+F69F/F69F\F693; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F6A0:          db $00,$10,$20,$00,$10,$20,$00,$10        ;;F6AA|F6A0+F6A0/F6A0\F694;
                      db $20,$00,$10,$20                        ;;F6B2|F6A8+F6A8/F6A8\F69C;
                                                                ;;                        ;
DATA_02F6AC:          db $00,$00,$00,$10,$10,$10,$20,$20        ;;F6B6|F6AC+F6AC/F6AC\F6A0;
                      db $20,$30,$30,$30                        ;;F6BE|F6B4+F6B4/F6B4\F6A8;
                                                                ;;                        ;
CODE_02F6B8:          LDX.B #$0B                                ;;F6C2|F6B8+F6B8/F6B8\F6AC;
                      LDY.B #$B0                                ;;F6C4|F6BA+F6BA/F6BA\F6AE;
                    - LDA.B #$B8                                ;;F6C6|F6BC+F6BC/F6BC\F6B0;
                      CLC                                       ;;F6C8|F6BE+F6BE/F6BE\F6B2;
                      %LorW_X(ADC,DATA_02F6A0)                  ;;F6C9|F6BF+F6BF/F6BF\F6B3;
                      STA.W !OAMTileXPos,Y                      ;;F6CD|F6C2+F6C2/F6C2\F6B6;
                      LDA.B #$50                                ;;F6D0|F6C5+F6C5/F6C5\F6B9;
                      SEC                                       ;;F6D2|F6C7+F6C7/F6C7\F6BB;
                      SBC.B !Layer1YPos                         ;;F6D3|F6C8+F6C8/F6C8\F6BC;
                      SEC                                       ;;F6D5|F6CA+F6CA/F6CA\F6BE;
                      SBC.B !_0                                 ;;F6D6|F6CB+F6CB/F6CB\F6BF;
                      CLC                                       ;;F6D8|F6CD+F6CD/F6CD\F6C1;
                      %LorW_X(ADC,DATA_02F6AC)                  ;;F6D9|F6CE+F6CE/F6CE\F6C2;
                      STA.W !OAMTileYPos,Y                      ;;F6DD|F6D1+F6D1/F6D1\F6C5;
                      LDA.B #$A5                                ;;F6E0|F6D4+F6D4/F6D4\F6C8;
                      STA.W !OAMTileNo,Y                        ;;F6E2|F6D6+F6D6/F6D6\F6CA;
                      LDA.B #$21                                ;;F6E5|F6D9+F6D9/F6D9\F6CD;
                      STA.W !OAMTileAttr,Y                      ;;F6E7|F6DB+F6DB/F6DB\F6CF;
                      PHY                                       ;;F6EA|F6DE+F6DE/F6DE\F6D2;
                      TYA                                       ;;F6EB|F6DF+F6DF/F6DF\F6D3;
                      LSR A                                     ;;F6EC|F6E0+F6E0/F6E0\F6D4;
                      LSR A                                     ;;F6ED|F6E1+F6E1/F6E1\F6D5;
                      TAY                                       ;;F6EE|F6E2+F6E2/F6E2\F6D6;
                      LDA.B #$02                                ;;F6EF|F6E3+F6E3/F6E3\F6D7;
                      STA.W !OAMTileSize,Y                      ;;F6F1|F6E5+F6E5/F6E5\F6D9;
                      PLY                                       ;;F6F4|F6E8+F6E8/F6E8\F6DC;
                      INY                                       ;;F6F5|F6E9+F6E9/F6E9\F6DD;
                      INY                                       ;;F6F6|F6EA+F6EA/F6EA\F6DE;
                      INY                                       ;;F6F7|F6EB+F6EB/F6EB\F6DF;
                      INY                                       ;;F6F8|F6EC+F6EC/F6EC\F6E0;
                      DEX                                       ;;F6F9|F6ED+F6ED/F6ED\F6E1;
                      BPL -                                     ;;F6FA|F6EE+F6EE/F6EE\F6E2;
                      RTS                                       ;;F6FC|F6F0+F6F0/F6F0\F6E4; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F6F1:          db $00,$00,$00,$00,$10,$10,$10,$10        ;;F6FD|F6F1+F6F1/F6F1\F6E5;
                      db $00,$00,$00,$00,$10,$10,$10,$10        ;;F705|F6F9+F6F9/F6F9\F6ED;
                      db $00,$00,$00,$00,$10,$10,$10,$10        ;;F70D|F701+F701/F701\F6F5;
                      db $F2,$F2,$F2,$F2,$1E,$1E,$1E,$1E        ;;F715|F709+F709/F709\F6FD;
DATA_02F711:          db $00,$08,$18,$20,$00,$08,$18,$20        ;;F71D|F711+F711/F711\F705;
DATA_02F719:          db $7D,$7D,$FD,$FD,$3D,$3D,$BD,$BD        ;;F725|F719+F719/F719\F70D;
DATA_02F721:          db $A0,$B0,$B0,$A0,$A0,$B0,$B0,$A0        ;;F72D|F721+F721/F721\F715;
                      db $A3,$B3,$B3,$A3,$A3,$B3,$B3,$A3        ;;F735|F729+F729/F729\F71D;
                      db $A2,$B2,$B2,$A2,$A2,$B2,$B2,$A2        ;;F73D|F731+F731/F731\F725;
                      db $A3,$B3,$B3,$A3,$A3,$B3,$B3,$A3        ;;F745|F739+F739/F739\F72D;
DATA_02F741:          db $40,$44,$48,$4C,$F0,$F4,$F8,$FC        ;;F74D|F741+F741/F741\F735;
DATA_02F749:          db $00,$01,$02,$03,$03,$03,$03,$03        ;;F755|F749+F749/F749\F73D;
                      db $03,$03,$03,$03,$03,$02,$01,$00        ;;F75D|F751+F751/F751\F745;
                                                                ;;                        ;
CODE_02F759:          LDA.W !NoYoshiIntroTimer                  ;;F765|F759+F759/F759\F74D;
                      BEQ +                                     ;;F768|F75C+F75C/F75C\F750;
                      DEC.W !NoYoshiIntroTimer                  ;;F76A|F75E+F75E/F75E\F752;
                    + CMP.B #$76                                ;;F76D|F761+F761/F761\F755;
                      BNE +                                     ;;F76F|F763+F763/F763\F757;
                      LDY.B #!SFX_DOOROPEN                      ;;F771|F765+F765/F765\F759; \ Play sound effect
                      STY.W !SPCIO3                             ;;F773|F767+F767/F767\F75B; /
                    + CMP.B #$08                                ;;F776|F76A+F76A/F76A\F75E;
                      BNE +                                     ;;F778|F76C+F76C/F76C\F760;
                      LDY.B #!SFX_DOORCLOSE                     ;;F77A|F76E+F76E/F76E\F762; \ Play sound effect
                      STY.W !SPCIO3                             ;;F77C|F770+F770/F770\F764; /
                    + LSR A                                     ;;F77F|F773+F773/F773\F767;
                      LSR A                                     ;;F780|F774+F774/F774\F768;
                      LSR A                                     ;;F781|F775+F775/F775\F769;
                      TAY                                       ;;F782|F776+F776/F776\F76A;
                      LDA.W DATA_02F749,Y                       ;;F783|F777+F777/F777\F76B;
                      STA.B !_3                                 ;;F786|F77A+F77A/F77A\F76E;
                      LDX.B #$07                                ;;F788|F77C+F77C/F77C\F770;
                      LDA.B #$B8                                ;;F78A|F77E+F77E/F77E\F772;
                      SEC                                       ;;F78C|F780+F780/F780\F774;
                      SBC.B !Layer1XPos                         ;;F78D|F781+F781/F781\F775;
                      STA.B !_0                                 ;;F78F|F783+F783/F783\F777;
                      LDA.B #$60                                ;;F791|F785+F785/F785\F779;
                      SEC                                       ;;F793|F787+F787/F787\F77B;
                      SBC.B !Layer1YPos                         ;;F794|F788+F788/F788\F77C;
                      STA.B !_1                                 ;;F796|F78A+F78A/F78A\F77E;
CODE_02F78C:          STX.B !_2                                 ;;F798|F78C+F78C/F78C\F780;
                      LDY.W DATA_02F741,X                       ;;F79A|F78E+F78E/F78E\F782;
                      LDA.B !_3                                 ;;F79D|F791+F791/F791\F785;
                      ASL A                                     ;;F79F|F793+F793/F793\F787;
                      ASL A                                     ;;F7A0|F794+F794/F794\F788;
                      ASL A                                     ;;F7A1|F795+F795/F795\F789;
                      CLC                                       ;;F7A2|F796+F796/F796\F78A;
                      ADC.B !_2                                 ;;F7A3|F797+F797/F797\F78B;
                      TAX                                       ;;F7A5|F799+F799/F799\F78D;
                      TYA                                       ;;F7A6|F79A+F79A/F79A\F78E;
                      BMI CODE_02F7D0                           ;;F7A7|F79B+F79B/F79B\F78F;
                      LDA.B !_0                                 ;;F7A9|F79D+F79D/F79D\F791;
                      CLC                                       ;;F7AB|F79F+F79F/F79F\F793;
                      %LorW_X(ADC,DATA_02F6F1)                  ;;F7AC|F7A0+F7A0/F7A0\F794;
                      STA.W !OAMTileXPos+$100,Y                 ;;F7B0|F7A3+F7A3/F7A3\F797;
                      %LorW_X(LDA,DATA_02F721)                  ;;F7B3|F7A6+F7A6/F7A6\F79A;
                      STA.W !OAMTileNo+$100,Y                   ;;F7B7|F7A9+F7A9/F7A9\F79D;
                      LDX.B !_2                                 ;;F7BA|F7AC+F7AC/F7AC\F7A0;
                      LDA.B !_1                                 ;;F7BC|F7AE+F7AE/F7AE\F7A2;
                      CLC                                       ;;F7BE|F7B0+F7B0/F7B0\F7A4;
                      %LorW_X(ADC,DATA_02F711)                  ;;F7BF|F7B1+F7B1/F7B1\F7A5;
                      STA.W !OAMTileYPos+$100,Y                 ;;F7C3|F7B4+F7B4/F7B4\F7A8;
                      LDA.B !_3                                 ;;F7C6|F7B7+F7B7/F7B7\F7AB;
                      CMP.B #$03                                ;;F7C8|F7B9+F7B9/F7B9\F7AD;
                      %LorW_X(LDA,DATA_02F719)                  ;;F7CA|F7BB+F7BB/F7BB\F7AF;
                      BCC +                                     ;;F7CE|F7BE+F7BE/F7BE\F7B2;
                      EOR.B #$40                                ;;F7D0|F7C0+F7C0/F7C0\F7B4;
                    + STA.W !OAMTileAttr+$100,Y                 ;;F7D2|F7C2+F7C2/F7C2\F7B6;
                      TYA                                       ;;F7D5|F7C5+F7C5/F7C5\F7B9;
                      LSR A                                     ;;F7D6|F7C6+F7C6/F7C6\F7BA;
                      LSR A                                     ;;F7D7|F7C7+F7C7/F7C7\F7BB;
                      TAY                                       ;;F7D8|F7C8+F7C8/F7C8\F7BC;
                      LDA.B #$02                                ;;F7D9|F7C9+F7C9/F7C9\F7BD;
                      STA.W !OAMTileSize+$40,Y                  ;;F7DB|F7CB+F7CB/F7CB\F7BF;
                      BRA CODE_02F801                           ;;F7DE|F7CE+F7CE/F7CE\F7C2;
                                                                ;;                        ;
CODE_02F7D0:          LDA.B !_0                                 ;;F7E0|F7D0+F7D0/F7D0\F7C4;
                      CLC                                       ;;F7E2|F7D2+F7D2/F7D2\F7C6;
                      %LorW_X(ADC,DATA_02F6F1)                  ;;F7E3|F7D3+F7D3/F7D3\F7C7;
                      STA.W !OAMTileXPos,Y                      ;;F7E7|F7D6+F7D6/F7D6\F7CA;
                      %LorW_X(LDA,DATA_02F721)                  ;;F7EA|F7D9+F7D9/F7D9\F7CD;
                      STA.W !OAMTileNo,Y                        ;;F7EE|F7DC+F7DC/F7DC\F7D0;
                      LDX.B !_2                                 ;;F7F1|F7DF+F7DF/F7DF\F7D3;
                      LDA.B !_1                                 ;;F7F3|F7E1+F7E1/F7E1\F7D5;
                      CLC                                       ;;F7F5|F7E3+F7E3/F7E3\F7D7;
                      %LorW_X(ADC,DATA_02F711)                  ;;F7F6|F7E4+F7E4/F7E4\F7D8;
                      STA.W !OAMTileYPos,Y                      ;;F7FA|F7E7+F7E7/F7E7\F7DB;
                      LDA.B !_3                                 ;;F7FD|F7EA+F7EA/F7EA\F7DE;
                      CMP.B #$03                                ;;F7FF|F7EC+F7EC/F7EC\F7E0;
                      %LorW_X(LDA,DATA_02F719)                  ;;F801|F7EE+F7EE/F7EE\F7E2;
                      BCC +                                     ;;F805|F7F1+F7F1/F7F1\F7E5;
                      EOR.B #$40                                ;;F807|F7F3+F7F3/F7F3\F7E7;
                    + STA.W !OAMTileAttr,Y                      ;;F809|F7F5+F7F5/F7F5\F7E9;
                      TYA                                       ;;F80C|F7F8+F7F8/F7F8\F7EC;
                      LSR A                                     ;;F80D|F7F9+F7F9/F7F9\F7ED;
                      LSR A                                     ;;F80E|F7FA+F7FA/F7FA\F7EE;
                      TAY                                       ;;F80F|F7FB+F7FB/F7FB\F7EF;
                      LDA.B #$02                                ;;F810|F7FC+F7FC/F7FC\F7F0;
                      STA.W !OAMTileSize,Y                      ;;F812|F7FE+F7FE/F7FE\F7F2;
CODE_02F801:          DEX                                       ;;F815|F801+F801/F801\F7F5;
                      BMI +                                     ;;F816|F802+F802/F802\F7F6;
                      JMP CODE_02F78C                           ;;F818|F804+F804/F804\F7F8;
                                                                ;;                        ;
                    + RTS                                       ;;F81B|F807+F807/F807\F7FB; Return
                                                                ;;                        ;
CODE_02F808:          PHB                                       ;;F81C|F808+F808/F808\F7FC; Wrapper
                      PHK                                       ;;F81D|F809+F809/F809\F7FD;
                      PLB                                       ;;F81E|F80A+F80A/F80A\F7FE;
                      JSR CODE_02F810                           ;;F81F|F80B+F80B/F80B\F7FF;
                      PLB                                       ;;F822|F80E+F80E/F80E\F802;
                      RTL                                       ;;F823|F80F+F80F/F80F\F803; Return
                                                                ;;                        ;
CODE_02F810:          LDX.B #$13                                ;;F824|F810+F810/F810\F804;
CODE_02F812:          STX.W !CurSpriteProcess                   ;;F826|F812+F812/F812\F806;
                      LDA.W !ClusterSpriteNumber,X              ;;F829|F815+F815/F815\F809;
                      BEQ +                                     ;;F82C|F818+F818/F818\F80C;
                      JSR CODE_02F821                           ;;F82E|F81A+F81A/F81A\F80E;
                    + DEX                                       ;;F831|F81D+F81D/F81D\F811;
                      BPL CODE_02F812                           ;;F832|F81E+F81E/F81E\F812;
Return02F820:         RTS                                       ;;F834|F820+F820/F820\F814; Return
                                                                ;;                        ;
CODE_02F821:          JSL ExecutePtr                            ;;F835|F821+F821/F821\F815;
                                                                ;;                        ;
                      dw Return02F820                           ;;F839|F825+F825/F825\F819;
                      dw Bonus1UpClusterSpr                     ;;F83B|F827+F827/F827\F81B;
                      dw $0000                                  ;;F83D|F829+F829/F829\F81D;
                      dw BooSwperCeilClsSpr                     ;;F83F|F82B+F82B/F82B\F81F;
                      dw BooRingBooClusterSpr                   ;;F841|F82D+F82D/F82D\F821;
                      dw CastleBgFlameClsSpr                    ;;F843|F82F+F82F/F82F\F823;
                      dw SumoFirePillarClsSpr                   ;;F845|F831+F831/F831\F825;
                      dw BooFormationClsSpr                     ;;F847|F833+F833/F833\F827;
                      dw BooSwperCeilClsSpr                     ;;F849|F835+F835/F835\F829;
                                                                ;;                        ;
DATA_02F837:          db $01,$FF                                ;;F84B|F837+F837/F837\F82B;
                                                                ;;                        ;
DATA_02F839:          db $00,$FF,$02,$0E                        ;;F84D|F839+F839/F839\F82D;
                                                                ;;                        ;
BooFormationClsSpr:   LDA.W !BooCloudTimer                      ;;F851|F83D+F83D/F83D\F831;
                      STA.W !TileGenerateTrackA                 ;;F854|F840+F840/F840\F834;
                      TXY                                       ;;F857|F843+F843/F843\F837;
                      BNE +                                     ;;F858|F844+F844/F844\F838;
                      DEC.W !BooCloudTimer                      ;;F85A|F846+F846/F846\F83A;
                      CMP.B #$00                                ;;F85D|F849+F849/F849\F83D;
                      BNE +                                     ;;F85F|F84B+F84B/F84B\F83F;
                      INC.W !BooRingIndex                       ;;F861|F84D+F84D/F84D\F841;
                      LDY.B #$FF                                ;;F864|F850+F850/F850\F844;
                      STY.W !BooCloudTimer                      ;;F866|F852+F852/F852\F846;
                    + CMP.B #$00                                ;;F869|F855+F855/F855\F849;
                      BNE CODE_02F89E                           ;;F86B|F857+F857/F857\F84B;
                      LDA.W !SpriteWillAppear                   ;;F86D|F859+F859/F859\F84D;
                      BEQ +                                     ;;F870|F85C+F85C/F85C\F850;
                      STZ.W !ClusterSpriteNumber,X              ;;F872|F85E+F85E/F85E\F852;
                      STZ.W !BooRingIndex                       ;;F875|F861+F861/F861\F855;
                      RTS                                       ;;F878|F864+F864/F864\F858; Return
                                                                ;;                        ;
                    + LDA.W !ClusterSpriteMisc1E66,X            ;;F879|F865+F865/F865\F859;
                      STA.B !_0                                 ;;F87C|F868+F868/F868\F85C;
                      LDA.W !ClusterSpriteMisc1E52,X            ;;F87E|F86A+F86A/F86A\F85E;
                      STA.B !_1                                 ;;F881|F86D+F86D/F86D\F861;
                      LDA.W !BooRingIndex                       ;;F883|F86F+F86F/F86F\F863;
                      AND.B #$01                                ;;F886|F872+F872/F872\F866;
                      BNE +                                     ;;F888|F874+F874/F874\F868;
                      LDA.W !ClusterSpriteMisc1E8E,X            ;;F88A|F876+F876/F876\F86A;
                      STA.B !_0                                 ;;F88D|F879+F879/F879\F86D;
                      LDA.W !ClusterSpriteMisc1E7A,X            ;;F88F|F87B+F87B/F87B\F86F;
                      STA.B !_1                                 ;;F892|F87E+F87E/F87E\F872;
                    + LDA.B !_0                                 ;;F894|F880+F880/F880\F874;
                      CLC                                       ;;F896|F882+F882/F882\F876;
                      ADC.B !Layer1XPos                         ;;F897|F883+F883/F883\F877;
                      STA.W !ClusterSpriteXPosLow,X             ;;F899|F885+F885/F885\F879;
                      LDA.B !Layer1XPos+1                       ;;F89C|F888+F888/F888\F87C;
                      ADC.B #$00                                ;;F89E|F88A+F88A/F88A\F87E;
                      STA.W !ClusterSpriteXPosHigh,X            ;;F8A0|F88C+F88C/F88C\F880;
                      LDA.B !_1                                 ;;F8A3|F88F+F88F/F88F\F883;
                      CLC                                       ;;F8A5|F891+F891/F891\F885;
                      ADC.B !Layer1YPos                         ;;F8A6|F892+F892/F892\F886;
                      STA.W !ClusterSpriteYPosLow,X             ;;F8A8|F894+F894/F894\F888;
                      LDA.B !Layer1YPos+1                       ;;F8AB|F897+F897/F897\F88B;
                      ADC.B #$00                                ;;F8AD|F899+F899/F899\F88D;
                      STA.W !ClusterSpriteYPosHigh,X            ;;F8AF|F89B+F89B/F89B\F88F;
CODE_02F89E:          TXA                                       ;;F8B2|F89E+F89E/F89E\F892;
                      ASL A                                     ;;F8B3|F89F+F89F/F89F\F893;
                      ASL A                                     ;;F8B4|F8A0+F8A0/F8A0\F894;
                      ADC.B !EffFrame                           ;;F8B5|F8A1+F8A1/F8A1\F895;
                      STA.B !_0                                 ;;F8B7|F8A3+F8A3/F8A3\F897;
                      AND.B #$07                                ;;F8B9|F8A5+F8A5/F8A5\F899;
                      ORA.B !SpriteLock                         ;;F8BB|F8A7+F8A7/F8A7\F89B;
                      BNE +                                     ;;F8BD|F8A9+F8A9/F8A9\F89D;
                      LDA.B !_0                                 ;;F8BF|F8AB+F8AB/F8AB\F89F;
                      AND.B #$20                                ;;F8C1|F8AD+F8AD/F8AD\F8A1;
                      LSR A                                     ;;F8C3|F8AF+F8AF/F8AF\F8A3;
                      LSR A                                     ;;F8C4|F8B0+F8B0/F8B0\F8A4;
                      LSR A                                     ;;F8C5|F8B1+F8B1/F8B1\F8A5;
                      LSR A                                     ;;F8C6|F8B2+F8B2/F8B2\F8A6;
                      LSR A                                     ;;F8C7|F8B3+F8B3/F8B3\F8A7;
                      TAY                                       ;;F8C8|F8B4+F8B4/F8B4\F8A8;
                      LDA.W !ClusterSpriteYPosLow,X             ;;F8C9|F8B5+F8B5/F8B5\F8A9;
                      CLC                                       ;;F8CC|F8B8+F8B8/F8B8\F8AC;
                      ADC.W DATA_02F837,Y                       ;;F8CD|F8B9+F8B9/F8B9\F8AD;
                      STA.W !ClusterSpriteYPosLow,X             ;;F8D0|F8BC+F8BC/F8BC\F8B0;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;F8D3|F8BF+F8BF/F8BF\F8B3;
                      ADC.W DATA_02F839,Y                       ;;F8D6|F8C2+F8C2/F8C2\F8B6;
                      STA.W !ClusterSpriteYPosHigh,X            ;;F8D9|F8C5+F8C5/F8C5\F8B9;
                    + LDY.W !TileGenerateTrackA                 ;;F8DC|F8C8+F8C8/F8C8\F8BC;
                      CPY.B #$20                                ;;F8DF|F8CB+F8CB/F8CB\F8BF;
                      BCC Return02F8FB                          ;;F8E1|F8CD+F8CD/F8CD\F8C1;
                      CPY.B #$40                                ;;F8E3|F8CF+F8CF/F8CF\F8C3;
                      BCS CODE_02F8D8                           ;;F8E5|F8D1+F8D1/F8D1\F8C5;
                      TYA                                       ;;F8E7|F8D3+F8D3/F8D3\F8C7;
                      SBC.B #$1F                                ;;F8E8|F8D4+F8D4/F8D4\F8C8;
                      BRA CODE_02F8E2                           ;;F8EA|F8D6+F8D6/F8D6\F8CA;
                                                                ;;                        ;
CODE_02F8D8:          CPY.B #$E0                                ;;F8EC|F8D8+F8D8/F8D8\F8CC;
                      BCC CODE_02F8E6                           ;;F8EE|F8DA+F8DA/F8DA\F8CE;
                      TYA                                       ;;F8F0|F8DC+F8DC/F8DC\F8D0;
                      SBC.B #$E0                                ;;F8F1|F8DD+F8DD/F8DD\F8D1;
                      EOR.B #$1F                                ;;F8F3|F8DF+F8DF/F8DF\F8D3;
                      INC A                                     ;;F8F5|F8E1+F8E1/F8E1\F8D5;
CODE_02F8E2:          LSR A                                     ;;F8F6|F8E2+F8E2/F8E2\F8D6;
                      LSR A                                     ;;F8F7|F8E3+F8E3/F8E3\F8D7;
                      BRA +                                     ;;F8F8|F8E4+F8E4/F8E4\F8D8;
                                                                ;;                        ;
CODE_02F8E6:          JSR CODE_02FBB0                           ;;F8FA|F8E6+F8E6/F8E6\F8DA;
                      LDA.B #$08                                ;;F8FD|F8E9+F8E9/F8E9\F8DD;
                    + STA.W !BooTransparency                    ;;F8FF|F8EB+F8EB/F8EB\F8DF;
                      CPX.B #$00                                ;;F902|F8EE+F8EE/F8EE\F8E2;
                      BNE +                                     ;;F904|F8F0+F8F0/F8F0\F8E4;
                      JSL CODE_038239                           ;;F906|F8F2+F8F2/F8F2\F8E6;
                    + LDA.B #$0F                                ;;F90A|F8F6+F8F6/F8F6\F8EA;
                      JSR CODE_02FD48                           ;;F90C|F8F8+F8F8/F8F8\F8EC;
Return02F8FB:         RTS                                       ;;F90F|F8FB+F8FB/F8FB\F8EF; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F8FC:          db $00,$10,$00,$10,$08,$10,$FF,$10        ;;F910|F8FC+F8FC/F8FC\F8F0;
SumoBroFlameTiles:    db $DC,$EC,$CC,$EC,$CC,$DC,$00,$CC        ;;F918|F904+F904/F904\F8F8;
DATA_02F90C:          db $03,$03,$03,$03,$02,$01,$00,$00        ;;F920|F90C+F90C/F90C\F900;
                      db $00,$00,$00,$00,$01,$02,$03,$03        ;;F928|F914+F914/F914\F908;
                                                                ;;                        ;
SumoFirePillarClsSpr: LDA.W !ClusterSpriteMisc0F4A,X            ;;F930|F91C+F91C/F91C\F910;
                      BEQ CODE_02F93C                           ;;F933|F91F+F91F/F91F\F913;
                      LDY.B !SpriteLock                         ;;F935|F921+F921/F921\F915;
                      BNE +                                     ;;F937|F923+F923/F923\F917;
                      DEC.W !ClusterSpriteMisc0F4A,X            ;;F939|F925+F925/F925\F919;
                    + LSR A                                     ;;F93C|F928+F928/F928\F91C;
                      LSR A                                     ;;F93D|F929+F929/F929\F91D;
                      LSR A                                     ;;F93E|F92A+F92A/F92A\F91E;
                      TAY                                       ;;F93F|F92B+F92B/F92B\F91F;
                      LDA.W DATA_02F90C,Y                       ;;F940|F92C+F92C/F92C\F920;
                      ASL A                                     ;;F943|F92F+F92F/F92F\F923;
                      STA.W !TileGenerateTrackA                 ;;F944|F930+F930/F930\F924;
                      JSR CODE_02F9AE                           ;;F947|F933+F933/F933\F927;
                      PHX                                       ;;F94A|F936+F936/F936\F92A;
                      JSR CODE_02F940                           ;;F94B|F937+F937/F937\F92B;
                      PLX                                       ;;F94E|F93A+F93A/F93A\F92E;
                      RTS                                       ;;F94F|F93B+F93B/F93B\F92F; Return
                                                                ;;                        ;
CODE_02F93C:          STZ.W !ClusterSpriteNumber,X              ;;F950|F93C+F93C/F93C\F930;
                      RTS                                       ;;F953|F93F+F93F/F93F\F933; Return
                                                                ;;                        ;
CODE_02F940:          TXA                                       ;;F954|F940+F940/F940\F934;
                      ASL A                                     ;;F955|F941+F941/F941\F935;
                      TAY                                       ;;F956|F942+F942/F942\F936;
                      LDA.W DATA_02FF50,Y                       ;;F957|F943+F943/F943\F937;
                      STA.W !SpriteOAMIndex                     ;;F95A|F946+F946/F946\F93A;
                      LDA.W !ClusterSpriteXPosLow,X             ;;F95D|F949+F949/F949\F93D;
                      STA.B !SpriteXPosLow                      ;;F960|F94C+F94C/F94C\F940;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;F962|F94E+F94E/F94E\F942;
                      STA.W !SpriteXPosHigh                     ;;F965|F951+F951/F951\F945;
                      LDA.W !ClusterSpriteYPosLow,X             ;;F968|F954+F954/F954\F948;
                      STA.B !SpriteYPosLow                      ;;F96B|F957+F957/F957\F94B;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;F96D|F959+F959/F959\F94D;
                      STA.W !SpriteYPosHigh                     ;;F970|F95C+F95C/F95C\F950;
                      TAY                                       ;;F973|F95F+F95F/F95F\F953;
                      LDX.B #$00                                ;;F974|F960+F960/F960\F954;
                      JSR GetDrawInfo2                          ;;F976|F962+F962/F962\F956;
                      LDX.B #$01                                ;;F979|F965+F965/F965\F959;
CODE_02F967:          PHX                                       ;;F97B|F967+F967/F967\F95B;
                      LDA.B !_0                                 ;;F97C|F968+F968/F968\F95C;
                      STA.W !OAMTileXPos+$100,Y                 ;;F97E|F96A+F96A/F96A\F95E;
                      TXA                                       ;;F981|F96D+F96D/F96D\F961;
                      ORA.W !TileGenerateTrackA                 ;;F982|F96E+F96E/F96E\F962;
                      TAX                                       ;;F985|F971+F971/F971\F965;
                      LDA.W DATA_02F8FC,X                       ;;F986|F972+F972/F972\F966;
                      BMI +                                     ;;F989|F975+F975/F975\F969;
                      CLC                                       ;;F98B|F977+F977/F977\F96B;
                      ADC.B !_1                                 ;;F98C|F978+F978/F978\F96C;
                      STA.W !OAMTileYPos+$100,Y                 ;;F98E|F97A+F97A/F97A\F96E;
                      LDA.W SumoBroFlameTiles,X                 ;;F991|F97D+F97D/F97D\F971;
                      STA.W !OAMTileNo+$100,Y                   ;;F994|F980+F980/F980\F974;
                      LDA.B !EffFrame                           ;;F997|F983+F983/F983\F977;
                      AND.B #$04                                ;;F999|F985+F985/F985\F979;
                      ASL A                                     ;;F99B|F987+F987/F987\F97B;
                      ASL A                                     ;;F99C|F988+F988/F988\F97C;
                      ASL A                                     ;;F99D|F989+F989/F989\F97D;
                      ASL A                                     ;;F99E|F98A+F98A/F98A\F97E;
                      NOP                                       ;;F99F|F98B+F98B/F98B\F97F;
                      ORA.B !SpriteProperties                   ;;F9A0|F98C+F98C/F98C\F980;
                      ORA.B #$05                                ;;F9A2|F98E+F98E/F98E\F982;
                      STA.W !OAMTileAttr+$100,Y                 ;;F9A4|F990+F990/F990\F984;
                    + PLX                                       ;;F9A7|F993+F993/F993\F987;
                      INY                                       ;;F9A8|F994+F994/F994\F988;
                      INY                                       ;;F9A9|F995+F995/F995\F989;
                      INY                                       ;;F9AA|F996+F996/F996\F98A;
                      INY                                       ;;F9AB|F997+F997/F997\F98B;
                      DEX                                       ;;F9AC|F998+F998/F998\F98C;
                      BPL CODE_02F967                           ;;F9AD|F999+F999/F999\F98D;
                      LDX.B #$00                                ;;F9AF|F99B+F99B/F99B\F98F;
                      LDY.B #$02                                ;;F9B1|F99D+F99D/F99D\F991;
                      LDA.B #$01                                ;;F9B3|F99F+F99F/F99F\F993;
                      JSL FinishOAMWrite                        ;;F9B5|F9A1+F9A1/F9A1\F995;
                      RTS                                       ;;F9B9|F9A5+F9A5/F9A5\F999; Return
                                                                ;;                        ;
ADDR_02F9A6:          STZ.W !ClusterSpriteNumber,X              ;;F9BA|F9A6+F9A6/F9A6\F99A;
                      RTS                                       ;;F9BD|F9A9+F9A9/F9A9\F99D; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02F9AA:          db $02,$0A,$12,$1A                        ;;F9BE|F9AA+F9AA/F9AA\F99E;
                                                                ;;                        ;
CODE_02F9AE:          TXA                                       ;;F9C2|F9AE+F9AE/F9AE\F9A2;
                      EOR.B !TrueFrame                          ;;F9C3|F9AF+F9AF/F9AF\F9A3;
                      AND.B #$03                                ;;F9C5|F9B1+F9B1/F9B1\F9A5;
                      BNE Return02F9FE                          ;;F9C7|F9B3+F9B3/F9B3\F9A7;
                      LDA.W !ClusterSpriteMisc0F4A,X            ;;F9C9|F9B5+F9B5/F9B5\F9A9;
                      CMP.B #$10                                ;;F9CC|F9B8+F9B8/F9B8\F9AC;
                      BCC Return02F9FE                          ;;F9CE|F9BA+F9BA/F9BA\F9AE;
                      LDA.W !ClusterSpriteXPosLow,X             ;;F9D0|F9BC+F9BC/F9BC\F9B0;
                      CLC                                       ;;F9D3|F9BF+F9BF/F9BF\F9B3;
                      ADC.B #$02                                ;;F9D4|F9C0+F9C0/F9C0\F9B4;
                      STA.B !_4                                 ;;F9D6|F9C2+F9C2/F9C2\F9B6;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;F9D8|F9C4+F9C4/F9C4\F9B8;
                      ADC.B #$00                                ;;F9DB|F9C7+F9C7/F9C7\F9BB;
                      STA.B !_A                                 ;;F9DD|F9C9+F9C9/F9C9\F9BD;
                      LDA.B #$0C                                ;;F9DF|F9CB+F9CB/F9CB\F9BF;
                      STA.B !_6                                 ;;F9E1|F9CD+F9CD/F9CD\F9C1;
                      LDY.W !TileGenerateTrackA                 ;;F9E3|F9CF+F9CF/F9CF\F9C3;
                      LDA.W !ClusterSpriteYPosLow,X             ;;F9E6|F9D2+F9D2/F9D2\F9C6;
                      CLC                                       ;;F9E9|F9D5+F9D5/F9D5\F9C9;
                      ADC.W DATA_02F9AA,Y                       ;;F9EA|F9D6+F9D6/F9D6\F9CA;
                      STA.B !_5                                 ;;F9ED|F9D9+F9D9/F9D9\F9CD;
                      LDA.B #$14                                ;;F9EF|F9DB+F9DB/F9DB\F9CF;
                      STA.B !_7                                 ;;F9F1|F9DD+F9DD/F9DD\F9D1;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;F9F3|F9DF+F9DF/F9DF\F9D3;
                      ADC.B #$00                                ;;F9F6|F9E2+F9E2/F9E2\F9D6;
                      STA.B !_B                                 ;;F9F8|F9E4+F9E4/F9E4\F9D8;
                      JSL GetMarioClipping                      ;;F9FA|F9E6+F9E6/F9E6\F9DA;
                      JSL CheckForContact                       ;;F9FE|F9EA+F9EA/F9EA\F9DE;
                      BCC Return02F9FE                          ;;FA02|F9EE+F9EE/F9EE\F9E2;
                      LDA.W !InvinsibilityTimer                 ;;FA04|F9F0+F9F0/F9F0\F9E4; \ Branch if Mario has star
                      BNE ADDR_02F9A6                           ;;FA07|F9F3+F9F3/F9F3\F9E7; /
CODE_02F9F5:          LDA.W !PlayerRidingYoshi                  ;;FA09|F9F5+F9F5/F9F5\F9E9;
                      BNE +                                     ;;FA0C|F9F8+F9F8/F9F8\F9EC;
                      JSL HurtMario                             ;;FA0E|F9FA+F9FA/F9FA\F9EE;
Return02F9FE:         RTS                                       ;;FA12|F9FE+F9FE/F9FE\F9F2; Return
                                                                ;;                        ;
                    + JMP CODE_02A473                           ;;FA13|F9FF+F9FF/F9FF\F9F3;
                                                                ;;                        ;
                                                                ;;                        ;
CastleFlameUpdFrmTbl: db $03,$07,$07,$07,$0F,$07,$07,$0F        ;;FA16|FA02+FA02/FA02\F9F6;
CastleFlameOAMSlot:   db $F0,$F4,$F8,$FC                        ;;FA1E|FA0A+FA0A/FA0A\F9FE;
                                                                ;;                        ;
CastleFlameTiles:     db $E2,$E4,$E2,$E4                        ;;FA22|FA0E+FA0E/FA0E\FA02;
                                                                ;;                        ;
CastleFlameGfxProp:   db $09,$09,$49,$49                        ;;FA26|FA12+FA12/FA12\FA06;
                                                                ;;                        ;
CastleBgFlameClsSpr:  LDA.B !SpriteLock                         ;;FA2A|FA16+FA16/FA16\FA0A;
                      BNE +                                     ;;FA2C|FA18+FA18/FA18\FA0C;
                      JSL GetRand                               ;;FA2E|FA1A+FA1A/FA1A\FA0E; \ Get a random number, then
                      AND.B #$07                                ;;FA32|FA1E+FA1E/FA1E\FA12; | Limit to lower 3 bits..
                      TAY                                       ;;FA34|FA20+FA20/FA20\FA14; | Use this as table index.
                      LDA.B !TrueFrame                          ;;FA35|FA21+FA21/FA21\FA15; | If current frame is
                      AND.W CastleFlameUpdFrmTbl,Y              ;;FA37|FA23+FA23/FA23\FA17; | a fourth/eighth/sixteenth frame (depending on random number)
                      BNE +                                     ;;FA3A|FA26+FA26/FA26\FA1A; | If not, don't update current frame
                      INC.W !ClusterSpriteMisc0F4A,X            ;;FA3C|FA28+FA28/FA28\FA1C; / If so, use the next graphics frame.
                    + LDY.W CastleFlameOAMSlot,X                ;;FA3F|FA2B+FA2B/FA2B\FA1F;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FA42|FA2E+FA2E/FA2E\FA22;
                      SEC                                       ;;FA45|FA31+FA31/FA31\FA25;
                      SBC.B !Layer2XPos                         ;;FA46|FA32+FA32/FA32\FA26;
                      STA.W !OAMTileXPos+$100,Y                 ;;FA48|FA34+FA34/FA34\FA28;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FA4B|FA37+FA37/FA37\FA2B;
                      SEC                                       ;;FA4E|FA3A+FA3A/FA3A\FA2E;
                      SBC.B !Layer2YPos                         ;;FA4F|FA3B+FA3B/FA3B\FA2F;
                      STA.W !OAMTileYPos+$100,Y                 ;;FA51|FA3D+FA3D/FA3D\FA31;
                      PHY                                       ;;FA54|FA40+FA40/FA40\FA34;
                      PHX                                       ;;FA55|FA41+FA41/FA41\FA35;
                      LDA.W !ClusterSpriteMisc0F4A,X            ;;FA56|FA42+FA42/FA42\FA36; \ Create a very simplistic ring
                      AND.B #$03                                ;;FA59|FA45+FA45/FA45\FA39; / for the table index
                      TAX                                       ;;FA5B|FA47+FA47/FA47\FA3B;
                      %LorW_X(LDA,CastleFlameTiles)             ;;FA5C|FA48+FA48/FA48\FA3C;
                      STA.W !OAMTileNo+$100,Y                   ;;FA60|FA4B+FA4B/FA4B\FA3F;
                      %LorW_X(LDA,CastleFlameGfxProp)           ;;FA63|FA4E+FA4E/FA4E\FA42;
                      STA.W !OAMTileAttr+$100,Y                 ;;FA67|FA51+FA51/FA51\FA45;
                      PLX                                       ;;FA6A|FA54+FA54/FA54\FA48;
                      TYA                                       ;;FA6B|FA55+FA55/FA55\FA49;
                      LSR A                                     ;;FA6C|FA56+FA56/FA56\FA4A;
                      LSR A                                     ;;FA6D|FA57+FA57/FA57\FA4B;
                      TAY                                       ;;FA6E|FA58+FA58/FA58\FA4C;
                      LDA.B #$02                                ;;FA6F|FA59+FA59/FA59\FA4D;
                      STA.W !OAMTileSize+$40,Y                  ;;FA71|FA5B+FA5B/FA5B\FA4F;
                      PLY                                       ;;FA74|FA5E+FA5E/FA5E\FA52;
                      LDA.W !OAMTileXPos+$100,Y                 ;;FA75|FA5F+FA5F/FA5F\FA53;
                      CMP.B #$F0                                ;;FA78|FA62+FA62/FA62\FA56;
                      BCC +                                     ;;FA7A|FA64+FA64/FA64\FA58;
                      LDA.W !OAMTileXPos+$100,Y                 ;;FA7C|FA66+FA66/FA66\FA5A;
                      STA.W !OAMTileXPos+$1EC                   ;;FA7F|FA69+FA69/FA69\FA5D;
                      LDA.W !OAMTileYPos+$100,Y                 ;;FA82|FA6C+FA6C/FA6C\FA60;
                      STA.W !OAMTileYPos+$1EC                   ;;FA85|FA6F+FA6F/FA6F\FA63;
                      LDA.W !OAMTileNo+$100,Y                   ;;FA88|FA72+FA72/FA72\FA66;
                      STA.W !OAMTileNo+$1EC                     ;;FA8B|FA75+FA75/FA75\FA69;
                      LDA.W !OAMTileAttr+$100,Y                 ;;FA8E|FA78+FA78/FA78\FA6C;
                      STA.W !OAMTileAttr+$1EC                   ;;FA91|FA7B+FA7B/FA7B\FA6F;
                      LDA.B #$03                                ;;FA94|FA7E+FA7E/FA7E\FA72;
                      STA.W !OAMTileSize+$7B                    ;;FA96|FA80+FA80/FA80\FA74;
                    + RTS                                       ;;FA99|FA83+FA83/FA83\FA77; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02FA84:          db $00                                    ;;FA9A|FA84+FA84/FA84\FA78;
                                                                ;;                        ;
DATA_02FA85:          db $00,$28,$00,$50,$00,$78,$00,$A0        ;;FA9B|FA85+FA85/FA85\FA79;
                      db $00,$C8,$00,$F0,$00,$18,$01,$40        ;;FAA3|FA8D+FA8D/FA8D\FA81;
                      db $01,$68,$01                            ;;FAAB|FA95+FA95/FA95\FA89;
                                                                ;;                        ;
BooRingBooClusterSpr: LDY.W !ClusterSpriteMisc0F86,X            ;;FAAE|FA98+FA98/FA98\FA8C;
                      LDA.W !BooRingOffscreen,Y                 ;;FAB1|FA9B+FA9B/FA9B\FA8F;
                      BEQ +                                     ;;FAB4|FA9E+FA9E/FA9E\FA92;
                      STZ.W !ClusterSpriteNumber,X              ;;FAB6|FAA0+FAA0/FAA0\FA94;
                      RTS                                       ;;FAB9|FAA3+FAA3/FAA3\FA97; Return
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;FABA|FAA4+FAA4/FAA4\FA98;
                      BNE CODE_02FAF0                           ;;FABC|FAA6+FAA6/FAA6\FA9A;
                      LDA.W !ClusterSpriteMisc0F4A,X            ;;FABE|FAA8+FAA8/FAA8\FA9C;
                      BEQ CODE_02FAF0                           ;;FAC1|FAAB+FAAB/FAAB\FA9F;
                      STZ.B !_0                                 ;;FAC3|FAAD+FAAD/FAAD\FAA1;
                      BPL +                                     ;;FAC5|FAAF+FAAF/FAAF\FAA3;
                      DEC.B !_0                                 ;;FAC7|FAB1+FAB1/FAB1\FAA5;
                    + CLC                                       ;;FAC9|FAB3+FAB3/FAB3\FAA7;
                      ADC.W !BooRingAngleLow,Y                  ;;FACA|FAB4+FAB4/FAB4\FAA8;
                      STA.W !BooRingAngleLow,Y                  ;;FACD|FAB7+FAB7/FAB7\FAAB;
                      LDA.W !BooRingAngleHigh,Y                 ;;FAD0|FABA+FABA/FABA\FAAE;
                      ADC.B !_0                                 ;;FAD3|FABD+FABD/FABD\FAB1;
                      AND.B #$01                                ;;FAD5|FABF+FABF/FABF\FAB3;
                      STA.W !BooRingAngleHigh,Y                 ;;FAD7|FAC1+FAC1/FAC1\FAB5;
                      LDA.W !BooRingXPosLow,Y                   ;;FADA|FAC4+FAC4/FAC4\FAB8;
                      STA.B !_0                                 ;;FADD|FAC7+FAC7/FAC7\FABB;
                      LDA.W !BooRingXPosHigh,Y                  ;;FADF|FAC9+FAC9/FAC9\FABD;
                      STA.B !_1                                 ;;FAE2|FACC+FACC/FACC\FAC0;
                      REP #$20                                  ;;FAE4|FACE+FACE/FACE\FAC2; Accum (16 bit)
                      LDA.B !_0                                 ;;FAE6|FAD0+FAD0/FAD0\FAC4;
                      SEC                                       ;;FAE8|FAD2+FAD2/FAD2\FAC6;
                      SBC.B !Layer1XPos                         ;;FAE9|FAD3+FAD3/FAD3\FAC7;
                      CLC                                       ;;FAEB|FAD5+FAD5/FAD5\FAC9;
                      ADC.W #$0080                              ;;FAEC|FAD6+FAD6/FAD6\FACA;
                      CMP.W #$0200                              ;;FAEF|FAD9+FAD9/FAD9\FACD;
                      SEP #$20                                  ;;FAF2|FADC+FADC/FADC\FAD0; Accum (8 bit)
                      BCC CODE_02FAF0                           ;;FAF4|FADE+FADE/FADE\FAD2;
                      LDA.B #$01                                ;;FAF6|FAE0+FAE0/FAE0\FAD4;
                      STA.W !BooRingOffscreen,Y                 ;;FAF8|FAE2+FAE2/FAE2\FAD6;
                      PHX                                       ;;FAFB|FAE5+FAE5/FAE5\FAD9;
                      LDX.W !BooRingLoadIndex,Y                 ;;FAFC|FAE6+FAE6/FAE6\FADA;
                      STZ.W !SpriteLoadStatus,X                 ;;FAFF|FAE9+FAE9/FAE9\FADD; Allow sprite to be reloaded by level loading routine
                      PLX                                       ;;FB02|FAEC+FAEC/FAEC\FAE0;
                      DEC.W !BooRingIndex                       ;;FB03|FAED+FAED/FAED\FAE1;
CODE_02FAF0:          PHX                                       ;;FB06|FAF0+FAF0/FAF0\FAE4;
                      LDA.W !ClusterSpriteMisc0F72,X            ;;FB07|FAF1+FAF1/FAF1\FAE5;
                      ASL A                                     ;;FB0A|FAF4+FAF4/FAF4\FAE8;
                      TAX                                       ;;FB0B|FAF5+FAF5/FAF5\FAE9;
                      %LorW_X(LDA,DATA_02FA84)                  ;;FB0C|FAF6+FAF6/FAF6\FAEA;
                      CLC                                       ;;FB10|FAF9+FAF9/FAF9\FAED;
                      ADC.W !BooRingAngleLow,Y                  ;;FB11|FAFA+FAFA/FAFA\FAEE;
                      STA.B !_0                                 ;;FB14|FAFD+FAFD/FAFD\FAF1;
                      %LorW_X(LDA,DATA_02FA85)                  ;;FB16|FAFF+FAFF/FAFF\FAF3;
                      ADC.W !BooRingAngleHigh,Y                 ;;FB1A|FB02+FB02/FB02\FAF6;
                      AND.B #$01                                ;;FB1D|FB05+FB05/FB05\FAF9;
                      STA.B !_1                                 ;;FB1F|FB07+FB07/FB07\FAFB;
                      PLX                                       ;;FB21|FB09+FB09/FB09\FAFD;
                      REP #$30                                  ;;FB22|FB0A+FB0A/FB0A\FAFE; Index (16 bit) Accum (16 bit)
                      LDA.B !_0                                 ;;FB24|FB0C+FB0C/FB0C\FB00;
                      CLC                                       ;;FB26|FB0E+FB0E/FB0E\FB02;
                      ADC.W #$0080                              ;;FB27|FB0F+FB0F/FB0F\FB03;
                      AND.W #$01FF                              ;;FB2A|FB12+FB12/FB12\FB06;
                      STA.B !_2                                 ;;FB2D|FB15+FB15/FB15\FB09;
                      LDA.B !_0                                 ;;FB2F|FB17+FB17/FB17\FB0B;
                      AND.W #$00FF                              ;;FB31|FB19+FB19/FB19\FB0D;
                      ASL A                                     ;;FB34|FB1C+FB1C/FB1C\FB10;
                      TAX                                       ;;FB35|FB1D+FB1D/FB1D\FB11;
                      LDA.L CircleCoords,X                      ;;FB36|FB1E+FB1E/FB1E\FB12;
                      STA.B !_4                                 ;;FB3A|FB22+FB22/FB22\FB16;
                      LDA.B !_2                                 ;;FB3C|FB24+FB24/FB24\FB18;
                      AND.W #$00FF                              ;;FB3E|FB26+FB26/FB26\FB1A;
                      ASL A                                     ;;FB41|FB29+FB29/FB29\FB1D;
                      TAX                                       ;;FB42|FB2A+FB2A/FB2A\FB1E;
                      LDA.L CircleCoords,X                      ;;FB43|FB2B+FB2B/FB2B\FB1F;
                      STA.B !_6                                 ;;FB47|FB2F+FB2F/FB2F\FB23;
                      SEP #$30                                  ;;FB49|FB31+FB31/FB31\FB25; Index (8 bit) Accum (8 bit)
                      LDA.B !_4                                 ;;FB4B|FB33+FB33/FB33\FB27;
                      STA.W !HW_WRMPYA                          ;;FB4D|FB35+FB35/FB35\FB29; Multiplicand A
                      LDA.B #$50                                ;;FB50|FB38+FB38/FB38\FB2C;
                      LDY.B !_5                                 ;;FB52|FB3A+FB3A/FB3A\FB2E;
                      BNE +                                     ;;FB54|FB3C+FB3C/FB3C\FB30;
                      STA.W !HW_WRMPYB                          ;;FB56|FB3E+FB3E/FB3E\FB32; Multplier B
                      NOP                                       ;;FB59|FB41+FB41/FB41\FB35;
                      NOP                                       ;;FB5A|FB42+FB42/FB42\FB36;
                      NOP                                       ;;FB5B|FB43+FB43/FB43\FB37;
                      NOP                                       ;;FB5C|FB44+FB44/FB44\FB38;
                      ASL.W !HW_RDMPY                           ;;FB5D|FB45+FB45/FB45\FB39; Product/Remainder Result (Low Byte)
                      LDA.W !HW_RDMPY+1                         ;;FB60|FB48+FB48/FB48\FB3C; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;FB63|FB4B+FB4B/FB4B\FB3F;
                    + LSR.B !_1                                 ;;FB65|FB4D+FB4D/FB4D\FB41;
                      BCC +                                     ;;FB67|FB4F+FB4F/FB4F\FB43;
                      EOR.B #$FF                                ;;FB69|FB51+FB51/FB51\FB45;
                      INC A                                     ;;FB6B|FB53+FB53/FB53\FB47;
                    + STA.B !_4                                 ;;FB6C|FB54+FB54/FB54\FB48;
                      LDA.B !_6                                 ;;FB6E|FB56+FB56/FB56\FB4A;
                      STA.W !HW_WRMPYA                          ;;FB70|FB58+FB58/FB58\FB4C; Multiplicand A
                      LDA.B #$50                                ;;FB73|FB5B+FB5B/FB5B\FB4F;
                      LDY.B !_7                                 ;;FB75|FB5D+FB5D/FB5D\FB51;
                      BNE +                                     ;;FB77|FB5F+FB5F/FB5F\FB53;
                      STA.W !HW_WRMPYB                          ;;FB79|FB61+FB61/FB61\FB55; Multplier B
                      NOP                                       ;;FB7C|FB64+FB64/FB64\FB58;
                      NOP                                       ;;FB7D|FB65+FB65/FB65\FB59;
                      NOP                                       ;;FB7E|FB66+FB66/FB66\FB5A;
                      NOP                                       ;;FB7F|FB67+FB67/FB67\FB5B;
                      ASL.W !HW_RDMPY                           ;;FB80|FB68+FB68/FB68\FB5C; Product/Remainder Result (Low Byte)
                      LDA.W !HW_RDMPY+1                         ;;FB83|FB6B+FB6B/FB6B\FB5F; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;FB86|FB6E+FB6E/FB6E\FB62;
                    + LSR.B !_3                                 ;;FB88|FB70+FB70/FB70\FB64;
                      BCC +                                     ;;FB8A|FB72+FB72/FB72\FB66;
                      EOR.B #$FF                                ;;FB8C|FB74+FB74/FB74\FB68;
                      INC A                                     ;;FB8E|FB76+FB76/FB76\FB6A;
                    + STA.B !_6                                 ;;FB8F|FB77+FB77/FB77\FB6B;
                      LDX.W !CurSpriteProcess                   ;;FB91|FB79+FB79/FB79\FB6D; X = Sprite index
                      LDY.W !ClusterSpriteMisc0F86,X            ;;FB94|FB7C+FB7C/FB7C\FB70;
                      STZ.B !_0                                 ;;FB97|FB7F+FB7F/FB7F\FB73;
                      LDA.B !_4                                 ;;FB99|FB81+FB81/FB81\FB75;
                      BPL +                                     ;;FB9B|FB83+FB83/FB83\FB77;
                      DEC.B !_0                                 ;;FB9D|FB85+FB85/FB85\FB79;
                    + CLC                                       ;;FB9F|FB87+FB87/FB87\FB7B;
                      ADC.W !BooRingXPosLow,Y                   ;;FBA0|FB88+FB88/FB88\FB7C;
                      STA.W !ClusterSpriteXPosLow,X             ;;FBA3|FB8B+FB8B/FB8B\FB7F;
                      LDA.W !BooRingXPosHigh,Y                  ;;FBA6|FB8E+FB8E/FB8E\FB82;
                      ADC.B !_0                                 ;;FBA9|FB91+FB91/FB91\FB85;
                      STA.W !ClusterSpriteXPosHigh,X            ;;FBAB|FB93+FB93/FB93\FB87;
                      STZ.B !_1                                 ;;FBAE|FB96+FB96/FB96\FB8A;
                      LDA.B !_6                                 ;;FBB0|FB98+FB98/FB98\FB8C;
                      BPL +                                     ;;FBB2|FB9A+FB9A/FB9A\FB8E;
                      DEC.B !_1                                 ;;FBB4|FB9C+FB9C/FB9C\FB90;
                    + CLC                                       ;;FBB6|FB9E+FB9E/FB9E\FB92;
                      ADC.W !BooRingYPosLow,Y                   ;;FBB7|FB9F+FB9F/FB9F\FB93;
                      STA.W !ClusterSpriteYPosLow,X             ;;FBBA|FBA2+FBA2/FBA2\FB96;
                      LDA.W !BooRingYPosHigh,Y                  ;;FBBD|FBA5+FBA5/FBA5\FB99;
                      ADC.B !_1                                 ;;FBC0|FBA8+FBA8/FBA8\FB9C;
                      STA.W !ClusterSpriteYPosHigh,X            ;;FBC2|FBAA+FBAA/FBAA\FB9E;
                      JSR CODE_02FC8D                           ;;FBC5|FBAD+FBAD/FBAD\FBA1;
CODE_02FBB0:          TXA                                       ;;FBC8|FBB0+FBB0/FBB0\FBA4;
                      EOR.B !TrueFrame                          ;;FBC9|FBB1+FBB1/FBB1\FBA5;
                      AND.B #$03                                ;;FBCB|FBB3+FBB3/FBB3\FBA7;
                      BNE +                                     ;;FBCD|FBB5+FBB5/FBB5\FBA9;
                      JSR CODE_02FE71                           ;;FBCF|FBB7+FBB7/FBB7\FBAB;
                    + RTS                                       ;;FBD2|FBBA+FBBA/FBBA\FBAE; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02FBBB:          db $01,$FF                                ;;FBD3|FBBB+FBBB/FBBB\FBAF;
                                                                ;;                        ;
DATA_02FBBD:          db $08,$F8                                ;;FBD5|FBBD+FBBD/FBBD\FBB1;
                                                                ;;                        ;
BooRingTiles:         db $88,$8C,$A8,$8E,$AA,$AE,$88,$8C        ;;FBD7|FBBF+FBBF/FBBF\FBB3;
                                                                ;;                        ;
BooSwperCeilClsSpr:   CPX.B #$00                                ;;FBDF|FBC7+FBC7/FBC7\FBBB;
                      BEQ +                                     ;;FBE1|FBC9+FBC9/FBC9\FBBD;
                      JMP CODE_02FC41                           ;;FBE3|FBCB+FBCB/FBCB\FBBF;
                                                                ;;                        ;
                    + LDA.B !TrueFrame                          ;;FBE6|FBCE+FBCE/FBCE\FBC2;
                      AND.B #$07                                ;;FBE8|FBD0+FBD0/FBD0\FBC4;
                      ORA.B !SpriteLock                         ;;FBEA|FBD2+FBD2/FBD2\FBC6;
                      BNE CODE_02FC3E                           ;;FBEC|FBD4+FBD4/FBD4\FBC8;
                      JSL GetRand                               ;;FBEE|FBD6+FBD6/FBD6\FBCA;
                      AND.B #$1F                                ;;FBF2|FBDA+FBDA/FBDA\FBCE;
                      CMP.B #$14                                ;;FBF4|FBDC+FBDC/FBDC\FBD0;
                      BCC +                                     ;;FBF6|FBDE+FBDE/FBDE\FBD2;
                      SBC.B #$14                                ;;FBF8|FBE0+FBE0/FBE0\FBD4;
                    + TAX                                       ;;FBFA|FBE2+FBE2/FBE2\FBD6;
                      LDA.W !ClusterSpriteMisc0F86,X            ;;FBFB|FBE3+FBE3/FBE3\FBD7;
                      BNE CODE_02FC3E                           ;;FBFE|FBE6+FBE6/FBE6\FBDA;
                      INC.W !ClusterSpriteMisc0F86,X            ;;FC00|FBE8+FBE8/FBE8\FBDC;
                      LDA.B #$20                                ;;FC03|FBEB+FBEB/FBEB\FBDF;
                      STA.W !ClusterSpriteMisc0F9A,X            ;;FC05|FBED+FBED/FBED\FBE1;
                      STZ.B !_0                                 ;;FC08|FBF0+FBF0/FBF0\FBE4;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FC0A|FBF2+FBF2/FBF2\FBE6;
                      SBC.B !Layer1XPos                         ;;FC0D|FBF5+FBF5/FBF5\FBE9;
                      ADC.B !Layer1XPos                         ;;FC0F|FBF7+FBF7/FBF7\FBEB;
                      PHP                                       ;;FC11|FBF9+FBF9/FBF9\FBED;
                      ADC.B !_0                                 ;;FC12|FBFA+FBFA/FBFA\FBEE;
                      STA.W !ClusterSpriteXPosLow,X             ;;FC14|FBFC+FBFC/FBFC\FBF0;
                      STA.B !SpriteXPosLow                      ;;FC17|FBFF+FBFF/FBFF\FBF3;
                      LDA.B !Layer1XPos+1                       ;;FC19|FC01+FC01/FC01\FBF5;
                      ADC.B #$00                                ;;FC1B|FC03+FC03/FC03\FBF7;
                      PLP                                       ;;FC1D|FC05+FC05/FC05\FBF9;
                      ADC.B #$00                                ;;FC1E|FC06+FC06/FC06\FBFA;
                      STA.W !ClusterSpriteXPosHigh,X            ;;FC20|FC08+FC08/FC08\FBFC;
                      STA.W !SpriteXPosHigh                     ;;FC23|FC0B+FC0B/FC0B\FBFF;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FC26|FC0E+FC0E/FC0E\FC02;
                      SBC.B !Layer1YPos                         ;;FC29|FC11+FC11/FC11\FC05;
                      ADC.B !Layer1YPos                         ;;FC2B|FC13+FC13/FC13\FC07;
                      STA.W !ClusterSpriteYPosLow,X             ;;FC2D|FC15+FC15/FC15\FC09;
                      STA.B !SpriteYPosLow                      ;;FC30|FC18+FC18/FC18\FC0C;
                      AND.B #$FC                                ;;FC32|FC1A+FC1A/FC1A\FC0E;
                      STA.W !ClusterSpriteMisc0F72,X            ;;FC34|FC1C+FC1C/FC1C\FC10;
                      LDA.B !Layer1YPos+1                       ;;FC37|FC1F+FC1F/FC1F\FC13;
                      ADC.B #$00                                ;;FC39|FC21+FC21/FC21\FC15;
                      STA.W !ClusterSpriteYPosHigh,X            ;;FC3B|FC23+FC23/FC23\FC17;
                      STA.W !SpriteYPosHigh                     ;;FC3E|FC26+FC26/FC26\FC1A;
                      PHX                                       ;;FC41|FC29+FC29/FC29\FC1D;
                      LDX.B #$00                                ;;FC42|FC2A+FC2A/FC2A\FC1E;
                      LDA.B #$10                                ;;FC44|FC2C+FC2C/FC2C\FC20;
                      JSR CODE_02D2FB                           ;;FC46|FC2E+FC2E/FC2E\FC22;
                      PLX                                       ;;FC49|FC31+FC31/FC31\FC25;
                      LDA.B !_0                                 ;;FC4A|FC32+FC32/FC32\FC26;
                      ADC.B #$09                                ;;FC4C|FC34+FC34/FC34\FC28;
                      STA.W !ClusterSpriteMisc1E52,X            ;;FC4E|FC36+FC36/FC36\FC2A;
                      LDA.B !_1                                 ;;FC51|FC39+FC39/FC39\FC2D;
                      STA.W !ClusterSpriteMisc1E66,X            ;;FC53|FC3B+FC3B/FC3B\FC2F;
CODE_02FC3E:          LDX.W !CurSpriteProcess                   ;;FC56|FC3E+FC3E/FC3E\FC32; X = Sprite index
CODE_02FC41:          LDA.B !SpriteLock                         ;;FC59|FC41+FC41/FC41\FC35;
                      BNE +                                     ;;FC5B|FC43+FC43/FC43\FC37;
                      LDA.W !ClusterSpriteMisc0F9A,X            ;;FC5D|FC45+FC45/FC45\FC39;
                      BEQ +                                     ;;FC60|FC48+FC48/FC48\FC3C;
                      DEC.W !ClusterSpriteMisc0F9A,X            ;;FC62|FC4A+FC4A/FC4A\FC3E;
                    + LDA.W !ClusterSpriteMisc0F86,X            ;;FC65|FC4D+FC4D/FC4D\FC41;
                      BNE +                                     ;;FC68|FC50+FC50/FC50\FC44;
                      JMP CODE_02FCE2                           ;;FC6A|FC52+FC52/FC52\FC46;
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;FC6D|FC55+FC55/FC55\FC49;
                      BNE CODE_02FC8D                           ;;FC6F|FC57+FC57/FC57\FC4B;
                      LDA.W !ClusterSpriteMisc0F9A,X            ;;FC71|FC59+FC59/FC59\FC4D;
                      BNE +                                     ;;FC74|FC5C+FC5C/FC5C\FC50;
                      JSR CODE_02FF98                           ;;FC76|FC5E+FC5E/FC5E\FC52;
                      JSR CODE_02FFA3                           ;;FC79|FC61+FC61/FC61\FC55;
                      TXA                                       ;;FC7C|FC64+FC64/FC64\FC58;
                      EOR.B !TrueFrame                          ;;FC7D|FC65+FC65/FC65\FC59;
                      AND.B #$03                                ;;FC7F|FC67+FC67/FC67\FC5B;
                      BNE +                                     ;;FC81|FC69+FC69/FC69\FC5D;
                      JSR CODE_02FE71                           ;;FC83|FC6B+FC6B/FC6B\FC5F;
                      LDA.W !ClusterSpriteMisc1E52,X            ;;FC86|FC6E+FC6E/FC6E\FC62;
                      CMP.B #$E1                                ;;FC89|FC71+FC71/FC71\FC65;
                      BMI +                                     ;;FC8B|FC73+FC73/FC73\FC67;
                      DEC.W !ClusterSpriteMisc1E52,X            ;;FC8D|FC75+FC75/FC75\FC69;
                    + LDA.W !ClusterSpriteYPosLow,X             ;;FC90|FC78+FC78/FC78\FC6C;
                      AND.B #$FC                                ;;FC93|FC7B+FC7B/FC7B\FC6F;
                      CMP.W !ClusterSpriteMisc0F72,X            ;;FC95|FC7D+FC7D/FC7D\FC71;
                      BNE CODE_02FC8D                           ;;FC98|FC80+FC80/FC80\FC74;
                      LDA.W !ClusterSpriteMisc1E52,X            ;;FC9A|FC82+FC82/FC82\FC76;
                      BPL CODE_02FC8D                           ;;FC9D|FC85+FC85/FC85\FC79;
                      STZ.W !ClusterSpriteMisc0F86,X            ;;FC9F|FC87+FC87/FC87\FC7B;
                      STZ.W !ClusterSpriteMisc1E66,X            ;;FCA2|FC8A+FC8A/FC8A\FC7E;
CODE_02FC8D:          LDA.W !ClusterSpriteXPosLow,X             ;;FCA5|FC8D+FC8D/FC8D\FC81;
                      STA.B !_0                                 ;;FCA8|FC90+FC90/FC90\FC84;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;FCAA|FC92+FC92/FC92\FC86;
                      STA.B !_1                                 ;;FCAD|FC95+FC95/FC95\FC89;
                      REP #$20                                  ;;FCAF|FC97+FC97/FC97\FC8B; Accum (16 bit)
                      LDA.B !_0                                 ;;FCB1|FC99+FC99/FC99\FC8D;
                      SEC                                       ;;FCB3|FC9B+FC9B/FC9B\FC8F;
                      SBC.B !Layer1XPos                         ;;FCB4|FC9C+FC9C/FC9C\FC90;
                      CLC                                       ;;FCB6|FC9E+FC9E/FC9E\FC92;
                      ADC.W #$0040                              ;;FCB7|FC9F+FC9F/FC9F\FC93;
                      CMP.W #$0180                              ;;FCBA|FCA2+FCA2/FCA2\FC96;
                      SEP #$20                                  ;;FCBD|FCA5+FCA5/FCA5\FC99; Accum (8 bit)
                      BCS Return02FCD8                          ;;FCBF|FCA7+FCA7/FCA7\FC9B;
                      LDA.B #$02                                ;;FCC1|FCA9+FCA9/FCA9\FC9D;
                      JSR CODE_02FD48                           ;;FCC3|FCAB+FCAB/FCAB\FC9F;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FCC6|FCAE+FCAE/FCAE\FCA2;
                      CLC                                       ;;FCC9|FCB1+FCB1/FCB1\FCA5;
                      ADC.B #$10                                ;;FCCA|FCB2+FCB2/FCB2\FCA6;
                      PHP                                       ;;FCCC|FCB4+FCB4/FCB4\FCA8;
                      CMP.B !Layer1YPos                         ;;FCCD|FCB5+FCB5/FCB5\FCA9;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;FCCF|FCB7+FCB7/FCB7\FCAB;
                      SBC.B !Layer1YPos+1                       ;;FCD2|FCBA+FCBA/FCBA\FCAE;
                      PLP                                       ;;FCD4|FCBC+FCBC/FCBC\FCB0;
                      ADC.B #$00                                ;;FCD5|FCBD+FCBD/FCBD\FCB1;
                      BNE CODE_02FCD9                           ;;FCD7|FCBF+FCBF/FCBF\FCB3;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FCD9|FCC1+FCC1/FCC1\FCB5;
                      CMP.B !Layer1XPos                         ;;FCDC|FCC4+FCC4/FCC4\FCB8;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;FCDE|FCC6+FCC6/FCC6\FCBA;
                      SBC.B !Layer1XPos+1                       ;;FCE1|FCC9+FCC9/FCC9\FCBD;
                      BEQ Return02FCD8                          ;;FCE3|FCCB+FCCB/FCCB\FCBF;
                      LDA.W DATA_02FF50,X                       ;;FCE5|FCCD+FCCD/FCCD\FCC1;
                      LSR A                                     ;;FCE8|FCD0+FCD0/FCD0\FCC4;
                      LSR A                                     ;;FCE9|FCD1+FCD1/FCD1\FCC5;
                      TAY                                       ;;FCEA|FCD2+FCD2/FCD2\FCC6;
                      LDA.B #$03                                ;;FCEB|FCD3+FCD3/FCD3\FCC7;
                      STA.W !OAMTileSize+$40,Y                  ;;FCED|FCD5+FCD5/FCD5\FCC9;
Return02FCD8:         RTS                                       ;;FCF0|FCD8+FCD8/FCD8\FCCC; Return
                                                                ;;                        ;
CODE_02FCD9:          LDY.W DATA_02FF50,X                       ;;FCF1|FCD9+FCD9/FCD9\FCCD;
                      LDA.B #$F0                                ;;FCF4|FCDC+FCDC/FCDC\FCD0;
                      STA.W !OAMTileYPos+$100,Y                 ;;FCF6|FCDE+FCDE/FCDE\FCD2;
                      RTS                                       ;;FCF9|FCE1+FCE1/FCE1\FCD5; Return
                                                                ;;                        ;
CODE_02FCE2:          LDA.B !SpriteLock                         ;;FCFA|FCE2+FCE2/FCE2\FCD6;
                      BNE CODE_02FD46                           ;;FCFC|FCE4+FCE4/FCE4\FCD8;
                      LDA.W !ClusterSpriteNumber,X              ;;FCFE|FCE6+FCE6/FCE6\FCDA;
                      CMP.B #$08                                ;;FD01|FCE9+FCE9/FCE9\FCDD;
                      BEQ CODE_02FD46                           ;;FD03|FCEB+FCEB/FCEB\FCDF;
                      LDA.W !ClusterSpriteMisc0F9A,X            ;;FD05|FCED+FCED/FCED\FCE1;
                      BNE +                                     ;;FD08|FCF0+FCF0/FCF0\FCE4;
                      LDA.B !TrueFrame                          ;;FD0A|FCF2+FCF2/FCF2\FCE6;
                      AND.B #$01                                ;;FD0C|FCF4+FCF4/FCF4\FCE8;
                      BNE +                                     ;;FD0E|FCF6+FCF6/FCF6\FCEA;
                      LDA.W !ClusterSpriteMisc0F4A,X            ;;FD10|FCF8+FCF8/FCF8\FCEC;
                      AND.B #$01                                ;;FD13|FCFB+FCFB/FCFB\FCEF;
                      TAY                                       ;;FD15|FCFD+FCFD/FCFD\FCF1;
                      LDA.W !ClusterSpriteMisc1E66,X            ;;FD16|FCFE+FCFE/FCFE\FCF2;
                      CLC                                       ;;FD19|FD01+FD01/FD01\FCF5;
                      ADC.W DATA_02FBBB,Y                       ;;FD1A|FD02+FD02/FD02\FCF6;
                      STA.W !ClusterSpriteMisc1E66,X            ;;FD1D|FD05+FD05/FD05\FCF9;
                      CMP.W DATA_02FBBD,Y                       ;;FD20|FD08+FD08/FD08\FCFC;
                      BNE +                                     ;;FD23|FD0B+FD0B/FD0B\FCFF;
                      INC.W !ClusterSpriteMisc0F4A,X            ;;FD25|FD0D+FD0D/FD0D\FD01;
                      LDA.W !RandomNumber                       ;;FD28|FD10+FD10/FD10\FD04;
                      AND.B #$FF                                ;;FD2B|FD13+FD13/FD13\FD07;
                      ORA.B #$3F                                ;;FD2D|FD15+FD15/FD15\FD09;
                      STA.W !ClusterSpriteMisc0F9A,X            ;;FD2F|FD17+FD17/FD17\FD0B;
                    + JSR CODE_02FF98                           ;;FD32|FD1A+FD1A/FD1A\FD0E;
                      TXA                                       ;;FD35|FD1D+FD1D/FD1D\FD11;
                      EOR.B !TrueFrame                          ;;FD36|FD1E+FD1E/FD1E\FD12;
                      AND.B #$03                                ;;FD38|FD20+FD20/FD20\FD14;
                      BNE CODE_02FD46                           ;;FD3A|FD22+FD22/FD22\FD16;
                      STZ.B !_0                                 ;;FD3C|FD24+FD24/FD24\FD18;
                      LDY.B #$01                                ;;FD3E|FD26+FD26/FD26\FD1A;
                      TXA                                       ;;FD40|FD28+FD28/FD28\FD1C;
                      ASL A                                     ;;FD41|FD29+FD29/FD29\FD1D;
                      ASL A                                     ;;FD42|FD2A+FD2A/FD2A\FD1E;
                      ASL A                                     ;;FD43|FD2B+FD2B/FD2B\FD1F;
                      ADC.B !TrueFrame                          ;;FD44|FD2C+FD2C/FD2C\FD20;
                      AND.B #$40                                ;;FD46|FD2E+FD2E/FD2E\FD22;
                      BEQ +                                     ;;FD48|FD30+FD30/FD30\FD24;
                      LDY.B #$FF                                ;;FD4A|FD32+FD32/FD32\FD26;
                      DEC.B !_0                                 ;;FD4C|FD34+FD34/FD34\FD28;
                    + TYA                                       ;;FD4E|FD36+FD36/FD36\FD2A;
                      CLC                                       ;;FD4F|FD37+FD37/FD37\FD2B;
                      ADC.W !ClusterSpriteYPosLow,X             ;;FD50|FD38+FD38/FD38\FD2C;
                      STA.W !ClusterSpriteYPosLow,X             ;;FD53|FD3B+FD3B/FD3B\FD2F;
                      LDA.B !_0                                 ;;FD56|FD3E+FD3E/FD3E\FD32;
                      ADC.W !ClusterSpriteYPosHigh,X            ;;FD58|FD40+FD40/FD40\FD34;
                      STA.W !ClusterSpriteYPosHigh,X            ;;FD5B|FD43+FD43/FD43\FD37;
CODE_02FD46:          LDA.B #$0E                                ;;FD5E|FD46+FD46/FD46\FD3A;
CODE_02FD48:          STA.B !_2                                 ;;FD60|FD48+FD48/FD48\FD3C;
                      LDY.W DATA_02FF50,X                       ;;FD62|FD4A+FD4A/FD4A\FD3E;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FD65|FD4D+FD4D/FD4D\FD41;
                      SEC                                       ;;FD68|FD50+FD50/FD50\FD44;
                      SBC.B !Layer1XPos                         ;;FD69|FD51+FD51/FD51\FD45;
                      STA.W !OAMTileXPos+$100,Y                 ;;FD6B|FD53+FD53/FD53\FD47;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FD6E|FD56+FD56/FD56\FD4A;
                      SEC                                       ;;FD71|FD59+FD59/FD59\FD4D;
                      SBC.B !Layer1YPos                         ;;FD72|FD5A+FD5A/FD5A\FD4E;
                      STA.W !OAMTileYPos+$100,Y                 ;;FD74|FD5C+FD5C/FD5C\FD50;
                      LDA.B !EffFrame                           ;;FD77|FD5F+FD5F/FD5F\FD53;
                      LSR A                                     ;;FD79|FD61+FD61/FD61\FD55;
                      LSR A                                     ;;FD7A|FD62+FD62/FD62\FD56;
                      LSR A                                     ;;FD7B|FD63+FD63/FD63\FD57;
                      AND.B #$01                                ;;FD7C|FD64+FD64/FD64\FD58;
                      STA.B !_0                                 ;;FD7E|FD66+FD66/FD66\FD5A;
                      TXA                                       ;;FD80|FD68+FD68/FD68\FD5C;
                      AND.B #$03                                ;;FD81|FD69+FD69/FD69\FD5D;
                      ASL A                                     ;;FD83|FD6B+FD6B/FD6B\FD5F;
                      ADC.B !_0                                 ;;FD84|FD6C+FD6C/FD6C\FD60;
                      PHX                                       ;;FD86|FD6E+FD6E/FD6E\FD62;
                      TAX                                       ;;FD87|FD6F+FD6F/FD6F\FD63;
                      %LorW_X(LDA,BooRingTiles)                 ;;FD88|FD70+FD70/FD70\FD64;
                      STA.W !OAMTileNo+$100,Y                   ;;FD8C|FD73+FD73/FD73\FD67;
                      PLX                                       ;;FD8F|FD76+FD76/FD76\FD6A;
                      LDA.W !ClusterSpriteMisc1E66,X            ;;FD90|FD77+FD77/FD77\FD6B;
                      ASL A                                     ;;FD93|FD7A+FD7A/FD7A\FD6E;
                      LDA.B #$00                                ;;FD94|FD7B+FD7B/FD7B\FD6F;
                      BCS +                                     ;;FD96|FD7D+FD7D/FD7D\FD71;
                      LDA.B #$40                                ;;FD98|FD7F+FD7F/FD7F\FD73;
                    + ORA.B #$31                                ;;FD9A|FD81+FD81/FD81\FD75;
                      ORA.B !_2                                 ;;FD9C|FD83+FD83/FD83\FD77;
                      STA.W !OAMTileAttr+$100,Y                 ;;FD9E|FD85+FD85/FD85\FD79;
                      TYA                                       ;;FDA1|FD88+FD88/FD88\FD7C;
                      LSR A                                     ;;FDA2|FD89+FD89/FD89\FD7D;
                      LSR A                                     ;;FDA3|FD8A+FD8A/FD8A\FD7E;
                      TAY                                       ;;FDA4|FD8B+FD8B/FD8B\FD7F;
                      LDA.B #$02                                ;;FDA5|FD8C+FD8C/FD8C\FD80;
                      STA.W !OAMTileSize+$40,Y                  ;;FDA7|FD8E+FD8E/FD8E\FD82;
                      LDA.W !ClusterSpriteNumber,X              ;;FDAA|FD91+FD91/FD91\FD85;
                      CMP.B #$08                                ;;FDAD|FD94+FD94/FD94\FD88;
                      BNE +                                     ;;FDAF|FD96+FD96/FD96\FD8A;
                      LDY.W DATA_02FF50,X                       ;;FDB1|FD98+FD98/FD98\FD8C;
                      LDA.B !EffFrame                           ;;FDB4|FD9B+FD9B/FD9B\FD8F;
                      LSR A                                     ;;FDB6|FD9D+FD9D/FD9D\FD91;
                      LSR A                                     ;;FDB7|FD9E+FD9E/FD9E\FD92;
                      AND.B #$01                                ;;FDB8|FD9F+FD9F/FD9F\FD93;
                      STA.B !_0                                 ;;FDBA|FDA1+FDA1/FDA1\FD95;
                      LDA.W !ClusterSpriteMisc0F86,X            ;;FDBC|FDA3+FDA3/FDA3\FD97;
                      ASL A                                     ;;FDBF|FDA6+FDA6/FDA6\FD9A;
                      ORA.B !_0                                 ;;FDC0|FDA7+FDA7/FDA7\FD9B;
                      PHX                                       ;;FDC2|FDA9+FDA9/FDA9\FD9D;
                      TAX                                       ;;FDC3|FDAA+FDAA/FDAA\FD9E;
                      LDA.W BatCeilingTiles,X                   ;;FDC4|FDAB+FDAB/FDAB\FD9F;
                      STA.W !OAMTileNo+$100,Y                   ;;FDC7|FDAE+FDAE/FDAE\FDA2;
                      LDA.B #$37                                ;;FDCA|FDB1+FDB1/FDB1\FDA5;
                      STA.W !OAMTileAttr+$100,Y                 ;;FDCC|FDB3+FDB3/FDB3\FDA7;
                      PLX                                       ;;FDCF|FDB6+FDB6/FDB6\FDAA;
                    + RTS                                       ;;FDD0|FDB7+FDB7/FDB7\FDAB; Return
                                                                ;;                        ;
                                                                ;;                        ;
BatCeilingTiles:      db $AE,$AE,$C0,$EB                        ;;FDD1|FDB8+FDB8/FDB8\FDAC;
                                                                ;;                        ;
Bonus1UpClusterSpr:   JSR CODE_02FFA3                           ;;FDD5|FDBC+FDBC/FDBC\FDB0;
                      LDA.W !ClusterSpriteMisc1E52,X            ;;FDD8|FDBF+FDBF/FDBF\FDB3;
                      CMP.B #$40                                ;;FDDB|FDC2+FDC2/FDC2\FDB6;
                      BPL +                                     ;;FDDD|FDC4+FDC4/FDC4\FDB8;
                      CLC                                       ;;FDDF|FDC6+FDC6/FDC6\FDBA;
                      ADC.B #$03                                ;;FDE0|FDC7+FDC7/FDC7\FDBB;
                      STA.W !ClusterSpriteMisc1E52,X            ;;FDE2|FDC9+FDC9/FDC9\FDBD;
                    + LDA.W !ClusterSpriteYPosHigh,X            ;;FDE5|FDCC+FDCC/FDCC\FDC0;
                      BEQ +                                     ;;FDE8|FDCF+FDCF/FDCF\FDC3;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FDEA|FDD1+FDD1/FDD1\FDC5;
                      CMP.B #$80                                ;;FDED|FDD4+FDD4/FDD4\FDC8;
                      BCC +                                     ;;FDEF|FDD6+FDD6/FDD6\FDCA;
                      AND.B #$F0                                ;;FDF1|FDD8+FDD8/FDD8\FDCC;
                      STA.W !ClusterSpriteYPosLow,X             ;;FDF3|FDDA+FDDA/FDDA\FDCE;
                      STZ.W !ClusterSpriteMisc1E52,X            ;;FDF6|FDDD+FDDD/FDDD\FDD1;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                    + TXA                                       ;;FDF9|FDE0+FDE0          ;
                      EOR.B !TrueFrame                          ;;FDFA|FDE1+FDE1          ;
                      LSR A                                     ;;FDFC|FDE3+FDE3          ;
                      BCC CODE_02FE48                           ;;FDFD|FDE4+FDE4          ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                    + LDA.W !ClusterSpriteMisc1E52,X            ;;FDFF|FDE6+FDE6/FDE0\FDD4;
                      BNE +                                     ;;FE02|FDE9+FDE9/FDE3\FDD7;
                      LDA.W !ClusterSpriteMisc1E66,X            ;;FE04|FDEB+FDEB/FDE5\FDD9;
                      CLC                                       ;;FE07|FDEE+FDEE/FDE8\FDDC;
                      ADC.W !ClusterSpriteXPosLow,X             ;;FE08|FDEF+FDEF/FDE9\FDDD;
                      STA.W !ClusterSpriteXPosLow,X             ;;FE0B|FDF2+FDF2/FDEC\FDE0;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FE0E|FDF5+FDF5/FDEF\FDE3;
                      EOR.W !ClusterSpriteMisc1E66,X            ;;FE11|FDF8+FDF8/FDF2\FDE6;
                      BPL +                                     ;;FE14|FDFB+FDFB/FDF5\FDE9;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FE16|FDFD+FDFD/FDF7\FDEB;
                      CLC                                       ;;FE19|FE00+FE00/FDFA\FDEE;
                      ADC.B #$20                                ;;FE1A|FE01+FE01/FDFB\FDEF;
                      CMP.B #$30                                ;;FE1C|FE03+FE03/FDFD\FDF1;
                      BCS +                                     ;;FE1E|FE05+FE05/FDFF\FDF3;
                      LDA.W !ClusterSpriteMisc1E66,X            ;;FE20|FE07+FE07/FE01\FDF5;
                      EOR.B #$FF                                ;;FE23|FE0A+FE0A/FE04\FDF8;
                      INC A                                     ;;FE25|FE0C+FE0C/FE06\FDFA;
                      STA.W !ClusterSpriteMisc1E66,X            ;;FE26|FE0D+FE0D/FE07\FDFB;
                    + LDA.B !PlayerXPosNext                     ;;FE29|FE10+FE10/FE0A\FDFE;
                      SEC                                       ;;FE2B|FE12+FE12/FE0C\FE00;
                      SBC.W !ClusterSpriteXPosLow,X             ;;FE2C|FE13+FE13/FE0D\FE01;
                      CLC                                       ;;FE2F|FE16+FE16/FE10\FE04;
                      ADC.B #$0C                                ;;FE30|FE17+FE17/FE11\FE05;
                      CMP.B #$1E                                ;;FE32|FE19+FE19/FE13\FE07;
                      BCS CODE_02FE48                           ;;FE34|FE1B+FE1B/FE15\FE09;
                      LDA.B #$20                                ;;FE36|FE1D+FE1D/FE17\FE0B;
                      LDY.B !PlayerIsDucking                    ;;FE38|FE1F+FE1F/FE19\FE0D;
                      BNE +                                     ;;FE3A|FE21+FE21/FE1B\FE0F;
                      LDY.B !Powerup                            ;;FE3C|FE23+FE23/FE1D\FE11;
                      BEQ +                                     ;;FE3E|FE25+FE25/FE1F\FE13;
                      LDA.B #$30                                ;;FE40|FE27+FE27/FE21\FE15;
                    + STA.B !_0                                 ;;FE42|FE29+FE29/FE23\FE17;
                      LDA.B !PlayerYPosNext                     ;;FE44|FE2B+FE2B/FE25\FE19;
                      SEC                                       ;;FE46|FE2D+FE2D/FE27\FE1B;
                      SBC.W !ClusterSpriteYPosLow,X             ;;FE47|FE2E+FE2E/FE28\FE1C;
                      CLC                                       ;;FE4A|FE31+FE31/FE2B\FE1F;
                      ADC.B #$20                                ;;FE4B|FE32+FE32/FE2C\FE20;
                      CMP.B !_0                                 ;;FE4D|FE34+FE34/FE2E\FE22;
                      BCS CODE_02FE48                           ;;FE4F|FE36+FE36/FE30\FE24;
                      STZ.W !ClusterSpriteNumber,X              ;;FE51|FE38+FE38/FE32\FE26;
                      JSR CODE_02FF6C                           ;;FE54|FE3B+FE3B/FE35\FE29;
                      DEC.W !BonusOneUpsRemain                  ;;FE57|FE3E+FE3E/FE38\FE2C;
                      BNE CODE_02FE48                           ;;FE5A|FE41+FE41/FE3B\FE2F;
                      LDA.B #$58                                ;;FE5C|FE43+FE43/FE3D\FE31;
                      STA.W !BonusFinishTimer                   ;;FE5E|FE45+FE45/FE3F\FE33;
CODE_02FE48:          LDY.W DATA_02FF64,X                       ;;FE61|FE48+FE48/FE42\FE36;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FE64|FE4B+FE4B/FE45\FE39;
                      SEC                                       ;;FE67|FE4E+FE4E/FE48\FE3C;
                      SBC.B !Layer1XPos                         ;;FE68|FE4F+FE4F/FE49\FE3D;
                      STA.W !OAMTileXPos,Y                      ;;FE6A|FE51+FE51/FE4B\FE3F;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FE6D|FE54+FE54/FE4E\FE42;
                      SEC                                       ;;FE70|FE57+FE57/FE51\FE45;
                      SBC.B !Layer1YPos                         ;;FE71|FE58+FE58/FE52\FE46;
                      STA.W !OAMTileYPos,Y                      ;;FE73|FE5A+FE5A/FE54\FE48;
                      LDA.B #$24                                ;;FE76|FE5D+FE5D/FE57\FE4B;
                      STA.W !OAMTileNo,Y                        ;;FE78|FE5F+FE5F/FE59\FE4D;
                      LDA.B #$3A                                ;;FE7B|FE62+FE62/FE5C\FE50;
                      STA.W !OAMTileAttr,Y                      ;;FE7D|FE64+FE64/FE5E\FE52;
                      TYA                                       ;;FE80|FE67+FE67/FE61\FE55;
                      LSR A                                     ;;FE81|FE68+FE68/FE62\FE56;
                      LSR A                                     ;;FE82|FE69+FE69/FE63\FE57;
                      TAY                                       ;;FE83|FE6A+FE6A/FE64\FE58;
                      LDA.B #$02                                ;;FE84|FE6B+FE6B/FE65\FE59;
                      STA.W !OAMTileSize,Y                      ;;FE86|FE6D+FE6D/FE67\FE5B;
                      RTS                                       ;;FE89|FE70+FE70/FE6A\FE5E; Return
                                                                ;;                        ;
CODE_02FE71:          LDA.B #$14                                ;;FE8A|FE71+FE71/FE6B\FE5F;
                      BRA +                                     ;;FE8C|FE73+FE73/FE6D\FE61;
                                                                ;;                        ;
                      LDA.B #$0C                                ;;FE8E|FE75+FE75/FE6F\FE63; Unreachable instruction
                    + STA.B !_2                                 ;;FE90|FE77+FE77/FE71\FE65;
                      STZ.B !_3                                 ;;FE92|FE79+FE79/FE73\FE67;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FE94|FE7B+FE7B/FE75\FE69;
                      STA.B !_0                                 ;;FE97|FE7E+FE7E/FE78\FE6C;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;FE99|FE80+FE80/FE7A\FE6E;
                      STA.B !_1                                 ;;FE9C|FE83+FE83/FE7D\FE71;
                      REP #$20                                  ;;FE9E|FE85+FE85/FE7F\FE73; Accum (16 bit)
                      LDA.B !PlayerXPosNext                     ;;FEA0|FE87+FE87/FE81\FE75;
                      SEC                                       ;;FEA2|FE89+FE89/FE83\FE77;
                      SBC.B !_0                                 ;;FEA3|FE8A+FE8A/FE84\FE78;
                      CLC                                       ;;FEA5|FE8C+FE8C/FE86\FE7A;
                      ADC.W #$000A                              ;;FEA6|FE8D+FE8D/FE87\FE7B;
                      CMP.B !_2                                 ;;FEA9|FE90+FE90/FE8A\FE7E;
                      SEP #$20                                  ;;FEAB|FE92+FE92/FE8C\FE80; Accum (8 bit)
                      BCS Return02FEC4                          ;;FEAD|FE94+FE94/FE8E\FE82;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FEAF|FE96+FE96/FE90\FE84;
                      ADC.B #$03                                ;;FEB2|FE99+FE99/FE93\FE87;
                      STA.B !_2                                 ;;FEB4|FE9B+FE9B/FE95\FE89;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;FEB6|FE9D+FE9D/FE97\FE8B;
                      ADC.B #$00                                ;;FEB9|FEA0+FEA0/FE9A\FE8E;
                      STA.B !_3                                 ;;FEBB|FEA2+FEA2/FE9C\FE90;
                      REP #$20                                  ;;FEBD|FEA4+FEA4/FE9E\FE92; Accum (16 bit)
                      LDA.W #$0014                              ;;FEBF|FEA6+FEA6/FEA0\FE94;
                      LDY.B !Powerup                            ;;FEC2|FEA9+FEA9/FEA3\FE97;
                      BEQ +                                     ;;FEC4|FEAB+FEAB/FEA5\FE99;
                      LDA.W #$0020                              ;;FEC6|FEAD+FEAD/FEA7\FE9B;
                    + STA.B !_4                                 ;;FEC9|FEB0+FEB0/FEAA\FE9E;
                      LDA.B !PlayerYPosNext                     ;;FECB|FEB2+FEB2/FEAC\FEA0;
                      SEC                                       ;;FECD|FEB4+FEB4/FEAE\FEA2;
                      SBC.B !_2                                 ;;FECE|FEB5+FEB5/FEAF\FEA3;
                      CLC                                       ;;FED0|FEB7+FEB7/FEB1\FEA5;
                      ADC.W #$001C                              ;;FED1|FEB8+FEB8/FEB2\FEA6;
                      CMP.B !_4                                 ;;FED4|FEBB+FEBB/FEB5\FEA9;
                      SEP #$20                                  ;;FED6|FEBD+FEBD/FEB7\FEAB; Accum (8 bit)
                      BCS Return02FEC4                          ;;FED8|FEBF+FEBF/FEB9\FEAD;
                      JSR CODE_02F9F5                           ;;FEDA|FEC1+FEC1/FEBB\FEAF;
Return02FEC4:         RTS                                       ;;FEDD|FEC4+FEC4/FEBE\FEB2; Return
                                                                ;;                        ;
                                                                ;;                        ;
DATA_02FEC5:          db $40,$B0                                ;;FEDE|FEC5+FEC5/FEBF\FEB3;
                                                                ;;                        ;
DATA_02FEC7:          db $01,$FF                                ;;FEE0|FEC7+FEC7/FEC1\FEB5;
                                                                ;;                        ;
DATA_02FEC9:          db $30,$C0                                ;;FEE2|FEC9+FEC9/FEC3\FEB7;
                                                                ;;                        ;
DATA_02FECB:          db $01,$FF                                ;;FEE4|FECB+FECB/FEC5\FEB9;
                                                                ;;                        ;
                      LDA.B !ScreenMode                         ;;FEE6|FECD+FECD/FEC7\FEBB; \ Unreachable
                      AND.B #$01                                ;;FEE8|FECF+FECF/FEC9\FEBD;
                      BNE ADDR_02FF1E                           ;;FEEA|FED1+FED1/FECB\FEBF;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FEEC|FED3+FED3/FECD\FEC1;
                      CLC                                       ;;FEEF|FED6+FED6/FED0\FEC4;
                      ADC.B #$50                                ;;FEF0|FED7+FED7/FED1\FEC5;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;FEF2|FED9+FED9/FED3\FEC7;
                      ADC.B #$00                                ;;FEF5|FEDC+FEDC/FED6\FECA;
                      CMP.B #$02                                ;;FEF7|FEDE+FEDE/FED8\FECC;
                      BPL ADDR_02FF0E                           ;;FEF9|FEE0+FEE0/FEDA\FECE;
                      LDA.B !TrueFrame                          ;;FEFB|FEE2+FEE2/FEDC\FED0;
                      AND.B #$01                                ;;FEFD|FEE4+FEE4/FEDE\FED2;
                      STA.B !_1                                 ;;FEFF|FEE6+FEE6/FEE0\FED4;
                      TAY                                       ;;FF01|FEE8+FEE8/FEE2\FED6;
                      LDA.B !Layer1XPos                         ;;FF02|FEE9+FEE9/FEE3\FED7;
                      CLC                                       ;;FF04|FEEB+FEEB/FEE5\FED9;
                      ADC.W DATA_02FEC9,Y                       ;;FF05|FEEC+FEEC/FEE6\FEDA;
                      ROL.B !_0                                 ;;FF08|FEEF+FEEF/FEE9\FEDD;
                      CMP.W !ClusterSpriteXPosLow,X             ;;FF0A|FEF1+FEF1/FEEB\FEDF;
                      PHP                                       ;;FF0D|FEF4+FEF4/FEEE\FEE2;
                      LDA.B !Layer1XPos+1                       ;;FF0E|FEF5+FEF5/FEEF\FEE3;
                      LSR.B !_0                                 ;;FF10|FEF7+FEF7/FEF1\FEE5;
                      ADC.W DATA_02FECB,Y                       ;;FF12|FEF9+FEF9/FEF3\FEE7;
                      PLP                                       ;;FF15|FEFC+FEFC/FEF6\FEEA;
                      SBC.W !ClusterSpriteXPosHigh,X            ;;FF16|FEFD+FEFD/FEF7\FEEB;
                      STA.B !_0                                 ;;FF19|FF00+FF00/FEFA\FEEE;
                      LSR.B !_1                                 ;;FF1B|FF02+FF02/FEFC\FEF0;
                      BCC +                                     ;;FF1D|FF04+FF04/FEFE\FEF2;
                      EOR.B #$80                                ;;FF1F|FF06+FF06/FF00\FEF4;
                      STA.B !_0                                 ;;FF21|FF08+FF08/FF02\FEF6;
                    + LDA.B !_0                                 ;;FF23|FF0A+FF0A/FF04\FEF8;
                      BPL Return02FF1D                          ;;FF25|FF0C+FF0C/FF06\FEFA;
ADDR_02FF0E:          LDY.W !ClusterSpriteMisc0F86,X            ;;FF27|FF0E+FF0E/FF08\FEFC;
                      CPY.B #$FF                                ;;FF2A|FF11+FF11/FF0B\FEFF;
                      BEQ +                                     ;;FF2C|FF13+FF13/FF0D\FF01;
                      LDA.B #$00                                ;;FF2E|FF15+FF15/FF0F\FF03; \ Allow sprite to be reloaded by level loading routine
                      STA.W !SpriteLoadStatus,Y                 ;;FF30|FF17+FF17/FF11\FF05; /
                    + STZ.W !ClusterSpriteNumber,X              ;;FF33|FF1A+FF1A/FF14\FF08;
Return02FF1D:         RTS                                       ;;FF36|FF1D+FF1D/FF17\FF0B; / Return
                                                                ;;                        ;
ADDR_02FF1E:          LDA.B !TrueFrame                          ;;FF37|FF1E+FF1E/FF18\FF0C; \ Unreachable, called from above routine
                      LSR A                                     ;;FF39|FF20+FF20/FF1A\FF0E;
                      BCS Return02FF1D                          ;;FF3A|FF21+FF21/FF1B\FF0F;
                      AND.B #$01                                ;;FF3C|FF23+FF23/FF1D\FF11;
                      STA.B !_1                                 ;;FF3E|FF25+FF25/FF1F\FF13;
                      TAY                                       ;;FF40|FF27+FF27/FF21\FF15;
                      LDA.B !Layer1XPos                         ;;FF41|FF28+FF28/FF22\FF16;
                      CLC                                       ;;FF43|FF2A+FF2A/FF24\FF18;
                      ADC.W DATA_02FEC5,Y                       ;;FF44|FF2B+FF2B/FF25\FF19;
                      ROL.B !_0                                 ;;FF47|FF2E+FF2E/FF28\FF1C;
                      CMP.W !ClusterSpriteYPosLow,X             ;;FF49|FF30+FF30/FF2A\FF1E;
                      PHP                                       ;;FF4C|FF33+FF33/FF2D\FF21;
                      LDA.W !Layer1YPos+1                       ;;FF4D|FF34+FF34/FF2E\FF22;
                      LSR.B !_0                                 ;;FF50|FF37+FF37/FF31\FF25;
                      ADC.W DATA_02FEC7,Y                       ;;FF52|FF39+FF39/FF33\FF27;
                      PLP                                       ;;FF55|FF3C+FF3C/FF36\FF2A;
                      SBC.W !ClusterSpriteYPosHigh,X            ;;FF56|FF3D+FF3D/FF37\FF2B;
                      STA.B !_0                                 ;;FF59|FF40+FF40/FF3A\FF2E;
                      LDY.B !_1                                 ;;FF5B|FF42+FF42/FF3C\FF30;
                      BEQ +                                     ;;FF5D|FF44+FF44/FF3E\FF32;
                      EOR.B #$80                                ;;FF5F|FF46+FF46/FF40\FF34;
                      STA.B !_0                                 ;;FF61|FF48+FF48/FF42\FF36;
                    + LDA.B !_0                                 ;;FF63|FF4A+FF4A/FF44\FF38;
                      BPL Return02FF1D                          ;;FF65|FF4C+FF4C/FF46\FF3A;
                      BMI ADDR_02FF0E                           ;;FF67|FF4E+FF4E/FF48\FF3C; /
                                                                ;;                        ;
DATA_02FF50:          db $E0,$E4,$E8,$EC,$F0,$F4,$F8,$FC        ;;FF69|FF50+FF50/FF4A\FF3E;
                      db $5C,$58,$54,$50,$4C,$48,$44,$40        ;;FF71|FF58+FF58/FF52\FF46;
                      db $3C,$38,$34,$30                        ;;FF79|FF60+FF60/FF5A\FF4E;
                                                                ;;                        ;
DATA_02FF64:          db $90,$94,$98,$9C,$A0,$A4,$A8,$AC        ;;FF7D|FF64+FF64/FF5E\FF52;
                                                                ;;                        ;
CODE_02FF6C:          JSL CODE_02AD34                           ;;FF85|FF6C+FF6C/FF66\FF5A;
                      LDA.B #$0D                                ;;FF89|FF70+FF70/FF6A\FF5E;
                      STA.W !ScoreSpriteNumber,Y                ;;FF8B|FF72+FF72/FF6C\FF60;
                      LDA.W !ClusterSpriteYPosLow,X             ;;FF8E|FF75+FF75/FF6F\FF63;
                      SEC                                       ;;FF91|FF78+FF78/FF72\FF66;
                      SBC.B #$08                                ;;FF92|FF79+FF79/FF73\FF67;
                      STA.W !ScoreSpriteYPosLow,Y               ;;FF94|FF7B+FF7B/FF75\FF69;
                      LDA.W !ClusterSpriteYPosHigh,X            ;;FF97|FF7E+FF7E/FF78\FF6C;
                      SBC.B #$00                                ;;FF9A|FF81+FF81/FF7B\FF6F;
                      STA.W !ScoreSpriteYPosHigh,Y              ;;FF9C|FF83+FF83/FF7D\FF71;
                      LDA.W !ClusterSpriteXPosLow,X             ;;FF9F|FF86+FF86/FF80\FF74;
                      STA.W !ScoreSpriteXPosLow,Y               ;;FFA2|FF89+FF89/FF83\FF77;
                      LDA.W !ClusterSpriteXPosHigh,X            ;;FFA5|FF8C+FF8C/FF86\FF7A;
                      STA.W !ScoreSpriteXPosHigh,Y              ;;FFA8|FF8F+FF8F/FF89\FF7D;
                      LDA.B #$30                                ;;FFAB|FF92+FF92/FF8C\FF80;
                      STA.W !ScoreSpriteTimer,Y                 ;;FFAD|FF94+FF94/FF8E\FF82;
                      RTS                                       ;;FFB0|FF97+FF97/FF91\FF85; Return
                                                                ;;                        ;
CODE_02FF98:          PHX                                       ;;FFB1|FF98+FF98/FF92\FF86;
                      TXA                                       ;;FFB2|FF99+FF99/FF93\FF87;
                      CLC                                       ;;FFB3|FF9A+FF9A/FF94\FF88;
                      ADC.B #$14                                ;;FFB4|FF9B+FF9B/FF95\FF89;
                      TAX                                       ;;FFB6|FF9D+FF9D/FF97\FF8B;
                      JSR CODE_02FFA3                           ;;FFB7|FF9E+FF9E/FF98\FF8C;
                      PLX                                       ;;FFBA|FFA1+FFA1/FF9B\FF8F;
                      RTS                                       ;;FFBB|FFA2+FFA2/FF9C\FF90; Return
                                                                ;;                        ;
CODE_02FFA3:          LDA.W !ClusterSpriteMisc1E52,X            ;;FFBC|FFA3+FFA3/FF9D\FF91;
                      ASL A                                     ;;FFBF|FFA6+FFA6/FFA0\FF94;
                      ASL A                                     ;;FFC0|FFA7+FFA7/FFA1\FF95;
                      ASL A                                     ;;FFC1|FFA8+FFA8/FFA2\FF96;
                      ASL A                                     ;;FFC2|FFA9+FFA9/FFA3\FF97;
                      CLC                                       ;;FFC3|FFAA+FFAA/FFA4\FF98;
                      ADC.W !ClusterSpriteMisc1E7A,X            ;;FFC4|FFAB+FFAB/FFA5\FF99;
                      STA.W !ClusterSpriteMisc1E7A,X            ;;FFC7|FFAE+FFAE/FFA8\FF9C;
                      PHP                                       ;;FFCA|FFB1+FFB1/FFAB\FF9F;
                      LDA.W !ClusterSpriteMisc1E52,X            ;;FFCB|FFB2+FFB2/FFAC\FFA0;
                      LSR A                                     ;;FFCE|FFB5+FFB5/FFAF\FFA3;
                      LSR A                                     ;;FFCF|FFB6+FFB6/FFB0\FFA4;
                      LSR A                                     ;;FFD0|FFB7+FFB7/FFB1\FFA5;
                      LSR A                                     ;;FFD1|FFB8+FFB8/FFB2\FFA6;
                      CMP.B #$08                                ;;FFD2|FFB9+FFB9/FFB3\FFA7;
                      LDY.B #$00                                ;;FFD4|FFBB+FFBB/FFB5\FFA9;
                      BCC +                                     ;;FFD6|FFBD+FFBD/FFB7\FFAB;
                      ORA.B #$F0                                ;;FFD8|FFBF+FFBF/FFB9\FFAD;
                      DEY                                       ;;FFDA|FFC1+FFC1/FFBB\FFAF;
                    + PLP                                       ;;FFDB|FFC2+FFC2/FFBC\FFB0;
                      ADC.W !ClusterSpriteYPosLow,X             ;;FFDC|FFC3+FFC3/FFBD\FFB1;
                      STA.W !ClusterSpriteYPosLow,X             ;;FFDF|FFC6+FFC6/FFC0\FFB4;
                      TYA                                       ;;FFE2|FFC9+FFC9/FFC3\FFB7;
                      ADC.W !ClusterSpriteYPosHigh,X            ;;FFE3|FFCA+FFCA/FFC4\FFB8;
                      STA.W !ClusterSpriteYPosHigh,X            ;;FFE6|FFCD+FFCD/FFC7\FFBB;
                      RTS                                       ;;FFE9|FFD0+FFD0/FFCA\FFBE; Return
                                                                ;;                        ;
CODE_02FFD1:          LDA.W !SpriteBlockedDirs,X                ;;FFEA|FFD1+FFD1/FFCB\FFBF;
                      BMI ADDR_02FFDD                           ;;FFED|FFD4+FFD4/FFCE\FFC2;
                      LDA.B #$00                                ;;FFEF|FFD6+FFD6/FFD0\FFC4;
                      LDY.W !SpriteSlope,X                      ;;FFF1|FFD8+FFD8/FFD2\FFC6;
                      BEQ +                                     ;;FFF4|FFDB+FFDB/FFD5\FFC9;
ADDR_02FFDD:          LDA.B #$18                                ;;FFF6|FFDD+FFDD/FFD7\FFCB;
                    + STA.B !SpriteYSpeed,X                     ;;FFF8|FFDF+FFDF/FFD9\FFCD;
                      RTS                                       ;;FFFA|FFE1+FFE1/FFDB\FFCF; Return
                                                                ;;                        ;
                      %insert_empty($05,$1E,$1E,$24,$30)        ;;FFFB|FFE2+FFE2/FFDC\FFD0;
